var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AcceptRejectButtonsProps.html",[0,0.374,1,4.293]],["body/interfaces/AcceptRejectButtonsProps.html",[0,0.607,1,6.166,2,0.1,3,0.041,4,0.041,5,0.034,6,5.149,7,0.323,8,3.181,9,7.981,10,2.318,11,0.034,12,0.063,13,1.117,14,8.684,15,3.702,16,2.816,17,8.684,18,8.684,19,8.684,20,3.194,21,0.309,22,0.061,23,0.006,24,3.594,25,3.518,26,5.119,27,3.884,28,0.915,29,0.856,30,3.757,31,5.394,32,5.807,33,3.265,34,1.246,35,2.364,36,3.936,37,8.327,38,4.926,39,6.576,40,3.345,41,1.227,42,2.485,43,1.017,44,1.642,45,1.51,46,2.006,47,1.267,48,2.434,49,0.063,50,1.548,51,3.745,52,3.833,53,4.597,54,3.41,55,8.684,56,5.149,57,7.792,58,4.597,59,4.231,60,4.573,61,2.558,62,4.573,63,5.996,64,2.558,65,2.377,66,2.131,67,5.149,68,3.41,69,3.046,70,2.131,71,0.827,72,1.859,73,1.699,74,0.872,75,2.589,76,3.962,77,2.697,78,2.858,79,5.16,80,7.792,81,5.149,82,5.149,83,2.006,84,2.948,85,2.858,86,3.745,87,2.046,88,2.377,89,3.036,90,2.223,91,2.131,92,5.149,93,3.189,94,1.801,95,2.639,96,3.154,97,5.668,98,3.438,99,6.166,100,3.954,101,6.906,102,6.906,103,2.639,104,5.149,105,3.564,106,4.392,107,3.046,108,2.323,109,5.149,110,1.93,111,3.564,112,3.962,113,0.004,114,0.004]],["title/interfaces/AddMessageRequest.html",[0,0.374,115,2.669]],["body/interfaces/AddMessageRequest.html",[0,0.733,2,0.082,3,0.033,4,0.033,5,0.028,7,0.543,11,0.028,12,0.055,21,0.329,22,0.051,23,0.006,28,0.635,34,0.762,41,1.493,45,1.239,49,0.085,113,0.004,114,0.004,115,3.342,116,2.418,117,1.717,118,2.399,119,3.245,120,1.575,121,4.649,122,2.848,123,3.302,124,3.562,125,3.488,126,2.357,127,4.488,128,3.399,129,3.781,130,3.894,131,1.785,132,1.17,133,1.779,134,3.447,135,1.954,136,2.418,137,2.418,138,2.441,139,2.3,140,2.78,141,2.499,142,2.965,143,3.552,144,4.007,145,4.151,146,3.399,147,1.942,148,2.036,149,4.909,150,3.781,151,3.096,152,2.592,153,1.752,154,3.823,155,3.562,156,3.154,157,3.894,158,4.404,159,2.471,160,3.305,161,2.487,162,1.349,163,3.562,164,1.943,165,3.562,166,2.536,167,4.525,168,3.781,169,2.153,170,2.499,171,2.344,172,3.781,173,2.657,174,3.562,175,1.47,176,1.95,177,1.281,178,2.344,179,2.418,180,2.344,181,3.375,182,2.616,183,2.004,184,0.864,185,2.174,186,3.375,187,3.096,188,2.277,189,1.347,190,1.072,191,1.906,192,2.344,193,2.344,194,0.961,195,1.997,196,1.712,197,2.344,198,3.165,199,2.499,200,2.499,201,2.499,202,1.47,203,1.95,204,2.212,205,2.499,206,2.418,207,0.798,208,2.344,209,2.499,210,2.418,211,2.344,212,2.499,213,1.614,214,1.823,215,2.499,216,2.418,217,2.491,218,2.418,219,1.863,220,2.491,221,2.657,222,1.906,223,2.212,224,0.5,225,2.046,226,2.499,227,1.444]],["title/interfaces/ApiConfig.html",[0,0.374,228,4.293]],["body/interfaces/ApiConfig.html",[0,0.53,2,0.098,3,0.04,4,0.04,5,0.034,11,0.034,12,0.062,21,0.224,22,0.059,23,0.006,29,0.915,35,2.189,41,0.896,49,0.088,59,3.089,71,1.151,73,2.031,74,1.306,113,0.004,114,0.004,122,1.555,132,1.377,138,2.044,152,2.546,184,0.924,207,0.953,217,2.087,227,1.724,228,7.371,229,4.502,230,9.083,231,9.083,232,6.015,233,6.288,234,5.564,235,7.107,236,5.776,237,6.883,238,5.776,239,5.106,240,8.256,241,8.256,242,8.256,243,8.256,244,1.788,245,3.208,246,8.256,247,5.042,248,3.567,249,2.329,250,5.042,251,5.106,252,3.144,253,5.042,254,3.144,255,5.042,256,7.371,257,4.646,258,4.953,259,5.042,260,7.71,261,7.71,262,7.371,263,2.365,264,3.931,265,2.706,266,6.079,267,4.502,268,6.883,269,4.502,270,2.887,271,3.667,272,6.809,273,2.087,274,4.502,275,4.502,276,2.949,277,3.207,278,4.502,279,4.502,280,6.809,281,6.809,282,4.884,283,5.042,284,2.983,285,3.089,286,3.089,287,2.717,288,5.042,289,5.042,290,5.042,291,4.903,292,5.042,293,6.809,294,5.042,295,1.694,296,5.042,297,5.042,298,5.042,299,5.042,300,3.491,301,4.509,302,5.042,303,5.042,304,4.146,305,5.042,306,5.042]],["title/interfaces/ApiError.html",[0,0.374,307,3.329]],["body/interfaces/ApiError.html",[0,0.605,2,0.074,3,0.03,4,0.03,5,0.059,11,0.025,12,0.051,13,0.657,21,0.315,22,0.057,23,0.006,26,2.054,28,0.402,29,0.803,43,0.497,48,1.802,49,0.087,71,1.169,73,1.629,74,1.633,94,0.881,98,3.426,113,0.003,114,0.003,117,1.658,120,1.441,123,1.645,126,1.281,132,1.295,133,1.562,138,1.545,164,1.53,177,2.608,183,0.999,184,0.933,187,1.682,188,1.814,189,1.216,190,0.968,191,1.72,194,1.66,196,2.266,198,1.577,207,0.721,224,0.806,227,2.655,232,2.524,233,2.639,234,2.335,239,2.524,244,1.351,245,1.376,249,1.303,251,3.702,257,2.054,263,1.488,265,2.221,276,2.775,286,2.335,295,2.45,307,5.048,308,2.639,309,2.941,310,2.639,311,1.814,312,2.424,313,0.646,314,1.253,315,3.013,316,2.524,317,2.772,318,2.255,319,2.255,320,2.255,321,2.182,322,2.524,323,2.255,324,2.639,325,2.772,326,2.524,327,1.802,328,3.87,329,2.639,330,1.997,331,2.054,332,2.639,333,2.858,334,4.175,335,2.639,336,2.639,337,2.772,338,2.777,339,2.772,340,4.066,341,2.772,342,2.772,343,2.772,344,2.772,345,2.772,346,1.802,347,2.772,348,2.772,349,2.335,350,2.856,351,1.456,352,2.772,353,1.577,354,2.772,355,2.772,356,2.639,357,2.772,358,2.772,359,2.524,360,2.639,361,2.264,362,4.066,363,3.425,364,4.066,365,2.335,366,2.772,367,2.524,368,2.772,369,2.772,370,2.772,371,2.772,372,2.639,373,1.514,374,1.997,375,2.255,376,2.772,377,3.79,378,2.772,379,3.702,380,2.772,381,2.772,382,2.772,383,2.524,384,2.772,385,1.682,386,5.304,387,2.255,388,2.255,389,2.772,390,2.772,391,2.772,392,2.772,393,1.72,394,2.772,395,2.639,396,1.802,397,2.639,398,2.639,399,2.424,400,2.182,401,2.639,402,2.772,403,2.772,404,2.639,405,2.772,406,2.772,407,2.772,408,2.772,409,2.772,410,1.893,411,2.255,412,2.116,413,4.066,414,4.066,415,2.639,416,3.013,417,4.815,418,2.772,419,2.772,420,4.467,421,2.772,422,2.772,423,2.335,424,1.802,425,1.802,426,2.772,427,2.772,428,2.772,429,1.943,430,1.514,431,1.611,432,2.633,433,2.424,434,2.772,435,4.175,436,2.772,437,3.79,438,2.772,439,2.639,440,2.335,441,2.772,442,2.772,443,2.772,444,2.772,445,2.772,446,2.772,447,2.772,448,1.802,449,1.682,450,2.772,451,0.666,452,2.178,453,4.815,454,4.066,455,4.066,456,4.068,457,1.802,458,2.116,459,2.639,460,2.639,461,2.639,462,2.524,463,2.772,464,2.524,465,1.943,466,2.116,467,2.182,468,2.772,469,2.772,470,2.424,471,3.103,472,5.304,473,2.116,474,2.772,475,2.772,476,2.772,477,2.772,478,2.639,479,2.772,480,2.772,481,2.772,482,2.772,483,2.772]],["title/interfaces/ApiErrorResponse.html",[0,0.374,484,2.753]],["body/interfaces/ApiErrorResponse.html",[0,0.739,2,0.117,3,0.048,4,0.048,5,0.04,7,0.381,11,0.04,12,0.07,21,0.323,22,0.059,23,0.006,29,0.737,41,1.078,49,0.089,71,0.92,73,1.494,113,0.005,114,0.005,117,1.571,120,1.262,125,3.224,132,1.282,133,1.784,135,1.97,162,1.988,175,2.114,184,0.894,224,0.776,265,3.353,309,2.076,313,1.503,361,2.076,393,3.469,396,2.87,416,3.272,430,3.353,451,1.062,484,4.402,485,3.861,486,4.028,487,3.096,488,4.89,489,4.89,490,4.89,491,4.89,492,4.711,493,2.276,494,2.602,495,1.936,496,4.268,497,4.194,498,3.861,499,3.861,500,4.021,501,5.092,502,3.861,503,3.861,504,3.861,505,3.476,506,1.97,507,3.181,508,3.861,509,4.021,510,4.021,511,4.021,512,3.181,513,4.021,514,4.021,515,3.808,516,4.021,517,4.711,518,4.648,519,4.711,520,4.021,521,4.021]],["title/interfaces/ApiErrorResponse-1.html",[0,0.312,94,0.925,484,2.291]],["body/interfaces/ApiErrorResponse-1.html",[0,0.67,2,0.123,3,0.05,4,0.05,5,0.042,7,0.398,11,0.042,12,0.072,13,0.929,21,0.318,22,0.057,23,0.006,49,0.085,71,0.945,73,1.943,74,1.458,98,2.796,113,0.005,114,0.005,120,1.297,132,1.317,133,1.589,153,1.564,154,2.996,177,2.811,184,0.772,224,0.841,227,2.167,271,4.609,313,1.527,377,5.158,385,2.796,484,4.522,493,3.377,522,5.658,523,5.658,524,6.494,525,5.231,526,4.839,527,3.077,528,3.148,529,4.384,530,5.658,531,4.609,532,6.494,533,5.658,534,5.21,535,5.022,536,7.052,537,5.21,538,5.658,539,5.658]],["title/interfaces/ApiResponse.html",[0,0.374,312,3.058]],["body/interfaces/ApiResponse.html",[0,0.601,2,0.073,3,0.03,4,0.03,5,0.059,7,0.236,11,0.025,12,0.051,13,0.65,21,0.315,22,0.058,23,0.006,26,2.024,28,0.396,29,0.838,43,0.49,48,1.775,49,0.087,71,1.168,73,1.615,74,1.63,94,0.868,98,3.405,113,0.003,114,0.003,117,1.649,120,1.435,123,1.621,126,1.262,132,1.346,133,1.624,138,1.522,164,1.929,177,2.34,183,0.984,184,0.921,187,1.657,188,1.794,189,1.198,190,0.953,191,1.694,194,1.648,196,2.242,198,1.554,207,0.71,224,0.812,227,2.639,232,2.487,233,2.6,234,2.301,239,2.487,244,1.331,245,1.356,249,1.284,251,3.662,257,2.024,263,1.472,265,2.197,276,2.761,286,2.301,295,2.433,307,5.343,308,2.6,309,2.639,310,2.6,311,2.13,312,3.517,313,1.227,314,1.73,315,3.902,316,2.487,317,2.731,318,2.222,319,2.222,320,2.222,321,2.15,322,2.487,323,2.222,324,2.6,325,2.731,326,2.487,327,1.775,328,3.828,329,2.6,330,1.967,331,2.024,332,2.6,333,2.833,334,4.145,335,2.6,336,2.6,337,2.731,338,2.747,339,2.731,340,4.022,341,2.731,342,2.731,343,2.731,344,2.731,345,2.731,346,1.775,347,2.731,348,2.731,349,2.301,350,2.839,351,1.435,352,2.731,353,1.554,354,2.731,355,2.731,356,2.6,357,2.731,358,2.731,359,2.487,360,2.6,361,2.245,362,4.022,363,3.388,364,4.022,365,2.301,366,2.731,367,2.487,368,2.731,369,2.731,370,2.731,371,2.731,372,2.6,373,1.492,374,1.967,375,2.222,376,2.731,377,3.758,378,2.731,379,3.662,380,2.731,381,2.731,382,2.731,383,2.487,384,2.731,385,1.657,386,5.266,387,2.222,388,2.222,389,2.731,390,2.731,391,2.731,392,2.731,393,1.694,394,2.731,395,2.6,396,1.775,397,2.6,398,2.6,399,2.388,400,2.15,401,2.6,402,2.731,403,2.731,404,2.6,405,2.731,406,2.731,407,2.731,408,2.731,409,2.731,410,1.866,411,2.222,412,2.084,413,4.022,414,4.022,415,2.6,416,2.98,417,4.774,418,2.731,419,2.731,420,4.436,421,2.731,422,2.731,423,2.301,424,1.775,425,1.775,426,2.731,427,2.731,428,2.731,429,1.915,430,1.492,431,1.587,432,2.614,433,2.388,434,2.731,435,4.145,436,2.731,437,3.758,438,2.731,439,2.6,440,2.301,441,2.731,442,2.731,443,2.731,444,2.731,445,2.731,446,2.731,447,2.731,448,1.775,449,1.657,450,2.731,451,0.657,452,2.154,453,4.774,454,4.022,455,4.022,456,4.043,457,1.775,458,2.084,459,2.6,460,2.6,461,2.6,462,2.487,463,2.731,464,2.487,465,1.915,466,2.084,467,2.15,468,2.731,469,2.731,470,2.388,471,3.069,472,5.266,473,2.084,474,2.731,475,2.731,476,2.731,477,2.731,478,2.6,479,2.731,480,2.731,481,2.731,482,2.731,483,2.731]],["title/interfaces/AuthAttemptState.html",[0,0.374,508,3.058]],["body/interfaces/AuthAttemptState.html",[0,0.738,2,0.116,3,0.047,4,0.047,5,0.04,7,0.377,11,0.04,12,0.07,13,0.898,21,0.322,22,0.059,23,0.006,29,0.846,41,1.066,49,0.088,71,0.914,73,1.477,113,0.005,114,0.005,117,1.559,120,1.253,125,2.917,132,1.001,133,1.688,135,1.948,162,1.98,175,2.09,184,0.946,224,0.634,265,3.336,309,2.053,313,1.017,361,2.053,393,3.445,396,2.838,416,4.114,430,3.336,451,1.05,484,3.437,485,3.818,487,3.061,488,4.855,489,4.855,490,4.855,491,4.855,492,4.677,493,2.25,494,2.588,495,1.915,496,4.237,497,4.177,498,3.818,499,3.818,500,3.975,501,5.056,502,3.818,503,3.818,504,3.818,505,3.437,506,2.477,507,4,508,4.855,509,5.851,510,5.851,511,5.851,512,3.145,513,3.975,514,3.975,515,3.788,516,3.975,517,4.677,518,4.628,519,4.677,520,3.975,521,3.975]],["title/interfaces/AuthResponse.html",[0,0.374,504,3.058]],["body/interfaces/AuthResponse.html",[0,0.736,2,0.115,3,0.047,4,0.047,5,0.04,7,0.374,11,0.04,12,0.069,13,0.894,21,0.328,22,0.061,23,0.006,29,0.728,41,1.059,49,0.088,71,0.91,73,1.467,113,0.005,114,0.005,117,1.553,120,1.248,125,2.904,132,0.995,133,1.772,135,1.935,162,2.167,175,2.076,184,0.924,224,0.631,265,3.325,309,2.039,313,1.01,361,3.014,393,3.43,396,3.594,416,3.213,430,3.325,451,1.043,484,3.414,485,3.792,487,3.04,488,4.835,489,4.835,490,4.835,491,4.835,492,4.657,493,2.235,494,2.58,495,1.902,496,4.219,497,4.166,498,3.792,499,3.792,500,3.949,501,6.028,502,3.792,503,3.792,504,4.835,505,5.046,506,1.935,507,3.124,508,3.792,509,3.949,510,3.949,511,3.949,512,3.124,513,3.949,514,3.949,515,3.776,516,3.949,517,4.657,518,4.617,519,4.657,520,3.949,521,3.949]],["title/interfaces/AuthState.html",[0,0.374,540,3.954]],["body/interfaces/AuthState.html",[0,0.328,2,0.037,3,0.015,4,0.015,5,0.013,7,0.12,11,0.013,12,0.03,13,0.877,16,1,21,0.301,22,0.054,23,0.006,26,1.034,28,0.202,29,0.671,31,2.246,34,1.758,39,1.329,41,0.576,43,0.723,49,0.078,70,3.681,71,1.082,73,2.201,74,1.507,94,0.444,113,0.002,114,0.002,118,2.301,120,0.692,132,1.275,133,0.653,139,1.24,151,0.847,159,0.536,162,2.005,175,0.668,177,0.984,184,0.412,185,1.172,189,1.035,207,1.137,213,2.117,214,1.401,217,0.794,222,1.464,224,0.805,248,2.596,249,2.19,254,0.886,257,1.749,263,2.116,264,0.979,265,0.763,270,4.468,273,1.343,276,1.441,284,2.494,285,1.176,300,2.918,313,1.085,349,3.036,351,3.658,361,3.241,385,2.187,396,1.993,448,0.907,451,0.737,494,2.235,495,1.035,496,2.751,497,3.82,505,4.013,506,2.985,527,1.642,529,1.065,540,6.283,541,1.714,542,2.619,543,5.29,544,4.263,545,4.263,546,1.988,547,5.763,548,3.394,549,1.065,550,1.477,551,1.714,552,4.895,553,1.578,554,1.477,555,3.813,556,2.497,557,1.477,558,1.714,559,1.714,560,1.714,561,0.748,562,1.221,563,1.988,564,3.526,565,1.714,566,3.763,567,1.714,568,1.714,569,6.008,570,2.978,571,3.465,572,3.427,573,2.803,574,2.791,575,3.066,576,2.897,577,1.714,578,3.763,579,1.221,580,1.714,581,1.714,582,1.714,583,3.148,584,7.097,585,4.424,586,2.925,587,4.409,588,0.979,589,5.636,590,4.673,591,1.714,592,1.714,593,3.914,594,1.477,595,1.578,596,1.714,597,2.497,598,1.714,599,0.954,600,1.578,601,2.913,602,2.271,603,1.714,604,1.714,605,1.714,606,1.744,607,1.714,608,7.319,609,5.503,610,3.763,611,6.968,612,4.162,613,4.242,614,4.95,615,3.313,616,1.477,617,4.424,618,2.527,619,1.498,620,4.946,621,2.897,622,4.626,623,2.897,624,3.763,625,4.029,626,1.86,627,3.683,628,2.246,629,2.897,630,1.498,631,1.477,632,1.329,633,4.424,634,2.668,635,3.243,636,3.243,637,3.431,638,1.176,639,1.714,640,3.066,641,1.006,642,2.897,643,2.43,644,1.714,645,1.714,646,3.152,647,2.668,648,1.714,649,1.714,650,2.897,651,1.714,652,1.714,653,1.714,654,1.714,655,1.578,656,2.208,657,2.149,658,1.578,659,1.714,660,1.714,661,1.329,662,1.13,663,1.714,664,1.578,665,1.714,666,1.714,667,3.066,668,1.714,669,1.714,670,1.136,671,1.176,672,1.714,673,2.897,674,1.498,675,0.886,676,1.714,677,3.066,678,1.714,679,1.477,680,1.714,681,1.714,682,1.714,683,0.954,684,5.88,685,2.897,686,1.714,687,4.28,688,5.716,689,1.86,690,1.714,691,1.572,692,1.464,693,2.494,694,2.064,695,2.897,696,1.714,697,1.714,698,1.714,699,1.714,700,1.714,701,5.88,702,2.668,703,4.926,704,1.714,705,1.988,706,1.714,707,1.534,708,3.282,709,4.075,710,1.221,711,0.68,712,1.714,713,1.749,714,1.714,715,2.36,716,2.751,717,1.714,718,1.714,719,2.918,720,1.714,721,2.668,722,0.693,723,1.714,724,1.578,725,1.136,726,1.714,727,1.714,728,1.714,729,1.176,730,4.075,731,1.714,732,1.714,733,1.578,734,0.829,735,1.714,736,1.216,737,2.897,738,1.714,739,1.714,740,1.714,741,1.329,742,1.572,743,2.497,744,1.271,745,1.714,746,1.714,747,1.396,748,1.714,749,1.176,750,1.329,751,1.176,752,2.36,753,6.653,754,4.781,755,5.986,756,1.065,757,2.897,758,6.417,759,2.668,760,1.401,761,2.149,762,1.714,763,2.149,764,5.96,765,6.132,766,4.075,767,6.659,768,4.946,769,3.465,770,5.368,771,2.094,772,2.897,773,1.578,774,1.92,775,1.714,776,3.763,777,1.714,778,1.714,779,1.714,780,1.714,781,1.714,782,1.714,783,1.578,784,1.714,785,1.714,786,1.714,787,1.714,788,1.714,789,1.714,790,1.714,791,1.714,792,1.714,793,1.714,794,1.858,795,1.714,796,1.714,797,0.847,798,0.847,799,1.714,800,0.886,801,1.578,802,1.477,803,1.329,804,1.714,805,1.176,806,1.578,807,1.714,808,1.714,809,0.907,810,1.065,811,1.578,812,1.714,813,1.714,814,1.714,815,1.099,816,1.477,817,1.714,818,1.578,819,1.714,820,1.714,821,1.714,822,1.578,823,2.668,824,1.578,825,1.714,826,1.578,827,1.714,828,1.714]],["title/interfaces/AzureBlobUploadParams.html",[0,0.374,829,2.845]],["body/interfaces/AzureBlobUploadParams.html",[0,0.703,2,0.124,3,0.05,4,0.05,5,0.063,7,0.401,11,0.043,12,0.073,13,1.114,21,0.297,22,0.066,23,0.006,29,0.612,35,2.565,43,1.036,49,0.085,50,1.432,113,0.005,114,0.005,183,1.674,184,0.948,190,2.016,224,0.717,311,2.576,393,2.883,400,3.658,449,4.1,692,2.883,798,3.503,829,4.697,830,4.648,831,4.697,832,4.697,833,5.682,834,5.693,835,5.536,836,5.173,837,4.616,838,4.502,839,3.78,840,5.497,841,4.648,842,3.78,843,2.395,844,5.497,845,4.232,846,4.424,847,3.658,848,4.424,849,4.648,850,2.644,851,4.232,852,2.265,853,3.547,854,3.348]],["title/interfaces/BaseComponentProps.html",[0,0.374,855,2.845]],["body/interfaces/BaseComponentProps.html",[0,0.728,2,0.097,3,0.061,4,0.04,5,0.033,7,0.314,8,2.59,10,2.09,11,0.033,12,0.062,13,1.085,15,2.748,16,2.369,20,3.029,21,0.333,22,0.064,23,0.006,25,2.117,27,2.031,28,0.715,29,0.944,42,1.598,43,0.885,44,1.428,47,1.232,48,3.633,49,0.089,50,1.987,61,3.368,64,3.368,88,2.313,95,2.59,108,2.26,110,1.878,113,0.004,114,0.004,120,1.261,184,0.901,224,0.638,287,2.699,295,1.683,311,2.942,313,1.149,350,1.843,432,2.448,494,1.544,495,1.598,561,1.951,619,3.13,626,2.991,674,2.313,713,2.699,852,3.144,855,5.457,856,2.964,857,4.714,858,4.198,859,4.192,860,5.27,861,4.636,862,4.708,863,4.011,864,2.78,865,2.964,866,2.964,867,4.011,868,3.548,869,3.39,870,3.817,871,2.964,872,2.073,873,2.313,874,4.011,875,2.865,876,3.069,877,2.78,878,2.117,879,3.069,880,2.313,881,4.011,882,2.964,883,2.964,884,2.964,885,2.78,886,2.055,887,2.427,888,2.964,889,1.878,890,2.554,891,2.964,892,3.069,893,2.554,894,3.069,895,3.069,896,3.069,897,3.069,898,3.069,899,3.069,900,3.069,901,2.368,902,3.069,903,2.78,904,3.069,905,3.069,906,3.069,907,2.78,908,2.78,909,3.205,910,4.011,911,2.964,912,2.964,913,4.153,914,4.011,915,2.868,916,2.78,917,2.964,918,2.313,919,2.964,920,2.964,921,1.878,922,2.21,923,4.011,924,2.964,925,2.78,926,4.011,927,2.964,928,2.964,929,2.427,930,2.624,931,2.964,932,2.964]],["title/interfaces/ButtonProps.html",[0,0.374,871,2.845]],["body/interfaces/ButtonProps.html",[0,0.719,2,0.092,3,0.059,4,0.037,5,0.032,8,1.811,10,1.895,11,0.032,12,0.06,13,1.155,15,3.421,16,2.689,20,1.743,21,0.331,22,0.065,23,0.006,25,2.002,27,1.921,28,0.688,29,0.954,35,1.853,42,1.511,43,0.852,44,1.375,47,1.166,48,3.086,49,0.089,50,1.954,61,3.243,64,3.243,88,2.188,95,2.494,108,2.138,110,1.776,113,0.004,114,0.004,120,1.226,184,0.889,224,0.62,287,2.554,295,1.592,311,2.899,313,1.106,350,1.743,432,3.047,494,1.461,495,1.511,561,1.846,619,3.014,626,2.88,674,2.188,713,2.554,852,3.168,855,5.386,856,2.804,857,2.713,858,2.416,859,4.123,860,5.169,861,4.815,862,5.577,863,4.76,864,2.63,865,2.804,866,2.804,867,4.76,868,3.447,869,3.294,870,3.709,871,3.862,872,3.329,873,3.715,874,4.992,875,3.565,876,4.929,877,4.144,878,3.155,879,4.929,880,2.188,881,3.862,882,2.804,883,2.804,884,2.804,885,2.63,886,1.979,887,2.296,888,2.804,889,1.776,890,2.416,891,2.804,892,2.903,893,2.416,894,2.903,895,2.903,896,2.903,897,2.903,898,2.903,899,2.903,900,2.903,901,2.24,902,2.903,903,2.63,904,2.903,905,2.903,906,2.903,907,2.63,908,2.63,909,3.086,910,3.862,911,2.804,912,2.804,913,3.999,914,3.862,915,2.713,916,2.63,917,2.804,918,2.188,919,2.804,920,2.804,921,1.776,922,2.091,923,3.862,924,2.804,925,2.63,926,3.862,927,2.804,928,2.804,929,2.296,930,2.483,931,2.804,932,2.804]],["title/interfaces/CacheState.html",[0,0.374,933,4.293]],["body/interfaces/CacheState.html",[0,0.497,2,0.123,3,0.05,4,0.05,5,0.043,7,0.401,11,0.043,12,0.073,13,0.933,22,0.058,23,0.006,28,0.673,29,0.827,34,1.777,43,0.833,49,0.087,70,3.573,71,1.133,73,1.57,113,0.005,114,0.005,151,2.816,184,0.843,214,2.755,217,3.973,227,2.953,351,3.031,451,1.116,546,4.861,548,5.533,549,3.542,563,4.861,749,3.91,754,4.861,815,3.654,933,8.454,934,6.382,935,9.289,936,9.289,937,9.289,938,6.382,939,7.934,940,6.382,941,6.382,942,7.934,943,6.382,944,7.934,945,7.934,946,7.934,947,6.382,948,6.382,949,6.382,950,6.382,951,6.382,952,6.382,953,6.382,954,6.382,955,6.382]],["title/interfaces/CartBadgeProps.html",[0,0.374,956,4.293]],["body/interfaces/CartBadgeProps.html",[0,0.528,2,0.131,3,0.054,4,0.054,5,0.045,11,0.045,12,0.075,13,1.085,22,0.055,23,0.006,28,0.715,42,2.162,43,1.233,44,1.943,45,1.988,46,2.64,47,2.025,49,0.075,71,1.104,72,2.447,74,1.395,75,2.541,83,2.64,87,2.693,89,3.207,94,1.567,100,3.881,113,0.005,114,0.005,164,1.567,184,0.866,194,1.874,432,3.412,859,4.468,878,2.864,956,7.35,957,6.778,958,5.452,959,3.058,960,6.769,961,6.051,962,3.146,963,2.59,964,7.35,965,5.246,966,2.447,967,6.823,968,6.769,969,6.051,970,4.93,971,4.93,972,4.93,973,5.573,974,2.693,975,3.367,976,4.311,977,4.93]],["title/interfaces/CartItem.html",[0,0.374,978,3.058]],["body/interfaces/CartItem.html",[0,0.438,2,0.074,3,0.03,4,0.03,5,0.026,11,0.026,12,0.051,21,0.294,22,0.052,23,0.006,28,0.702,29,0.539,34,1.717,41,1.447,43,0.735,49,0.086,65,3.383,70,2.755,71,1.179,73,1.918,74,1.536,94,1.694,113,0.003,114,0.003,119,2.075,139,1.471,152,1.187,159,2.047,164,1.694,182,2.666,183,1.476,184,0.843,188,2.53,194,1.963,207,1.59,227,1.926,244,2.764,264,1.963,276,1.926,314,0.863,331,2.075,338,4.046,351,3.214,353,1.593,448,2.662,451,0.985,493,2.746,535,4.267,546,3.45,548,4.489,549,2.137,563,4.079,615,1.82,618,1.963,627,3.45,675,1.778,679,2.962,687,2.448,725,4.613,736,2.496,749,2.359,754,4.489,760,1.662,794,2.204,815,2.204,850,1.593,854,2.95,978,4.235,979,3.437,980,6.961,981,7.235,982,4.166,983,3.437,984,3.165,985,7.234,986,4.096,987,5.028,988,5.553,989,2.665,990,5.028,991,3.437,992,5.945,993,6.961,994,2.8,995,3.83,996,3.437,997,5.028,998,5.028,999,3.437,1000,2.962,1001,6.541,1002,2.798,1003,3.437,1004,5.3,1005,5.028,1006,5.028,1007,3.437,1008,5.945,1009,3.437,1010,5.028,1011,3.37,1012,2.962,1013,7.701,1014,3.437,1015,4.884,1016,3.437,1017,2.448,1018,3.437,1019,3.437,1020,3.437,1021,5.028,1022,2.278,1023,2.55,1024,3.437,1025,2.204,1026,3.165,1027,2.8,1028,4.333,1029,3.165,1030,3.437,1031,3.437,1032,3.165,1033,7.271,1034,5.028,1035,3.437,1036,5.945,1037,6.541,1038,3.437,1039,3.437,1040,5.028,1041,2.8,1042,3.437,1043,3.437,1044,3.437,1045,3.437,1046,4.333,1047,6.024,1048,5.028,1049,3.437,1050,2.55,1051,4.333,1052,4.63,1053,3.437,1054,5.028,1055,3.165,1056,3.437,1057,3.165,1058,3.437,1059,3.165,1060,3.437,1061,3.437,1062,2.962,1063,5.945,1064,3.437,1065,3.437,1066,2.962,1067,3.437,1068,3.437,1069,3.165,1070,3.437,1071,2.448,1072,3.165,1073,2.55,1074,3.437]],["title/interfaces/CartItemRowProps.html",[0,0.374,1075,4.293]],["body/interfaces/CartItemRowProps.html",[0,0.439,2,0.109,3,0.058,4,0.045,5,0.038,7,0.461,10,1.432,11,0.038,12,0.067,13,1.015,15,2.974,20,3.291,21,0.268,22,0.058,23,0.006,28,0.595,29,0.781,30,3.31,33,3.468,40,3.554,41,1.303,42,1.8,43,1.168,44,1.818,45,1.655,46,2.198,47,1.805,49,0.067,71,1.033,72,2.037,74,0.956,75,2.115,83,2.198,84,4.942,85,4.791,87,3.644,88,2.605,89,3.363,90,3.519,91,3.373,93,3.387,94,1.884,95,2.156,98,2.49,103,2.803,113,0.004,114,0.004,194,1.284,263,1.502,526,3.457,711,2.89,722,2.943,875,2.384,886,1.711,921,2.115,922,2.49,962,2.803,963,2.156,966,2.037,974,3.644,975,4.288,978,6.14,981,6.272,982,3.519,988,4.494,995,3.036,1015,4.072,1075,6.55,1076,5.643,1077,4.966,1078,3.31,1079,6.032,1080,5.336,1081,3.468,1082,2.546,1083,2.49,1084,2.546,1085,4.639,1086,7.278,1087,4.666,1088,5.038,1089,5.038,1090,5.038,1091,5.079,1092,4.34,1093,5.038,1094,3.906,1095,3.809,1096,2.803,1097,3.132,1098,3.132,1099,3.132,1100,2.803,1101,2.668,1102,3.132,1103,2.956,1104,3.132,1105,4.072,1106,4.34,1107,5.038,1108,4.639,1109,3.041,1110,4.34,1111,5.038,1112,5.643,1113,5.643,1114,5.643,1115,5.643,1116,2.49,1117,2.436,1118,2.436,1119,3.737,1120,5.038,1121,5.038,1122,3.231]],["title/interfaces/CheckoutFormData.html",[0,0.374,1123,4.293]],["body/interfaces/CheckoutFormData.html",[0,0.433,2,0.055,3,0.054,4,0.023,5,0.019,7,0.18,10,0.728,11,0.037,12,0.041,16,0.884,21,0.239,22,0.046,23,0.006,25,1.211,27,2.254,28,0.586,33,2.628,34,1.136,41,0.509,42,0.914,43,1.162,44,1.601,45,0.841,46,1.117,47,1.368,49,0.026,60,1.899,63,2.206,70,1.863,71,1.153,72,1.035,74,1.16,75,1.688,83,1.117,84,3.183,85,3.086,87,2.503,89,3.153,90,2.719,91,3.007,93,2.908,94,1.819,98,2.453,99,2.56,103,1.72,105,3.117,107,2.664,110,1.075,111,1.985,113,0.003,114,0.003,117,1.287,118,1.54,120,0.739,122,0.884,125,1.095,131,1.903,132,1.313,133,0.577,135,2.466,139,1.72,147,1.738,148,1.677,154,1.355,160,1.095,162,0.642,166,0.899,177,0.869,182,1.901,184,0.28,207,0.542,210,2.578,224,0.731,244,1.596,248,1.502,263,0.763,273,1.186,276,1.54,311,0.93,313,0.763,314,1.412,327,1.355,338,1.424,346,1.355,373,2.72,374,1.502,385,1.265,410,1.424,451,0.501,493,1.688,494,1.942,495,0.914,506,1.461,527,1.117,528,2.762,535,2.913,542,1.355,561,3.344,564,2.129,570,1.596,572,2.129,573,0.98,583,1.117,586,1.568,593,2.693,601,2.693,602,1.545,613,1.591,615,3.236,625,2.085,656,2.359,661,1.985,662,1.568,674,1.324,675,1.324,683,1.424,691,1.389,692,1.294,693,1.696,707,1.355,711,1.016,722,1.035,798,1.265,809,1.355,815,1.641,859,2.978,873,2.908,880,1.324,886,2.304,889,2.361,891,1.696,909,1.355,916,1.591,921,2.361,959,1.294,962,1.72,963,1.095,965,1.696,966,1.035,967,5.267,974,3.291,975,3.775,978,2.863,982,3.28,986,3.275,988,5.73,995,2.607,1011,1.186,1017,2.863,1025,1.641,1051,2.206,1059,2.357,1062,2.206,1066,2.206,1080,4.044,1082,1.294,1083,1.265,1084,1.294,1085,2.357,1086,2.56,1087,1.823,1091,3.849,1092,3.289,1094,3.117,1095,3.787,1109,2.426,1110,3.727,1117,3.757,1118,1.238,1122,3.183,1123,5.624,1124,2.56,1125,4.833,1126,4.964,1127,3.702,1128,4.964,1129,3.702,1130,1.985,1131,3.702,1132,2.357,1133,3.145,1134,2.426,1135,1.696,1136,3.275,1137,2.206,1138,5.974,1139,4.02,1140,2.206,1141,1.985,1142,2.206,1143,2.56,1144,2.867,1145,1.324,1146,3.275,1147,2.085,1148,3.117,1149,1.985,1150,3.275,1151,2.56,1152,2.357,1153,2.357,1154,2.982,1155,2.357,1156,2.56,1157,4.033,1158,4.502,1159,4.172,1160,1.238,1161,4.02,1162,6.299,1163,1.294,1164,4.502,1165,4.964,1166,2.56,1167,1.641,1168,4.02,1169,5.624,1170,4.571,1171,2.867,1172,2.56,1173,5.624,1174,2.56,1175,1.899,1176,2.206,1177,4.218,1178,2.867,1179,5.56,1180,4.278,1181,3.278,1182,2.982,1183,2.206,1184,2.867,1185,2.758,1186,4.964,1187,4.502,1188,4.02,1189,4.02,1190,4.02,1191,4.502,1192,3.117,1193,2.085,1194,4.502,1195,2.357,1196,1.502,1197,2.867,1198,2.867,1199,5.56,1200,2.085,1201,3.702,1202,2.357,1203,4.354,1204,3.464,1205,2.982,1206,2.867,1207,6.299,1208,2.867,1209,6.299,1210,2.867,1211,2.867,1212,2.867,1213,2.867,1214,1.211,1215,2.085,1216,3.859,1217,3.275,1218,4.502,1219,4.502,1220,1.899,1221,4.502,1222,2.867,1223,2.867,1224,4.02,1225,2.867,1226,2.867,1227,4.502,1228,2.867,1229,2.867,1230,1.591,1231,2.867,1232,2.867,1233,2.867,1234,2.867,1235,2.867,1236,2.867,1237,1.641,1238,4.02,1239,2.085,1240,4.502,1241,2.56,1242,2.56,1243,1.985,1244,2.867,1245,2.867,1246,4.502,1247,2.867,1248,4.502,1249,2.867,1250,6.112,1251,2.867,1252,2.867,1253,2.56,1254,2.56,1255,2.357,1256,3.8,1257,2.867,1258,4.502,1259,4.502,1260,4.02,1261,2.867,1262,2.867,1263,4.502,1264,2.867,1265,2.867,1266,4.502,1267,1.117,1268,2.56,1269,4.044,1270,2.426,1271,4.502,1272,4.502,1273,2.867,1274,2.499,1275,2.867,1276,2.867,1277,2.867,1278,2.867,1279,2.867,1280,2.867,1281,2.867,1282,2.867,1283,2.867,1284,2.357,1285,2.085,1286,2.867,1287,2.867,1288,2.56,1289,2.867,1290,2.867,1291,2.56,1292,2.867,1293,2.867,1294,1.985,1295,2.56,1296,2.56,1297,2.357,1298,2.867,1299,2.56,1300,2.206,1301,2.867,1302,1.985,1303,2.867,1304,2.867,1305,2.867,1306,2.867,1307,2.867,1308,2.867,1309,2.867,1310,2.867,1311,2.56,1312,2.867,1313,2.867,1314,2.867,1315,2.181,1316,2.867,1317,2.867,1318,2.56,1319,2.867,1320,2.867,1321,1.985,1322,1.985,1323,2.913,1324,2.357,1325,1.985,1326,1.641,1327,2.206,1328,2.56,1329,1.462,1330,2.867,1331,2.867,1332,2.867]],["title/interfaces/CheckoutState.html",[0,0.374,1333,3.954]],["body/interfaces/CheckoutState.html",[0,0.649,2,0.1,3,0.041,4,0.041,5,0.034,7,0.324,11,0.034,12,0.063,13,1.052,16,1.594,21,0.305,22,0.058,23,0.006,28,0.545,29,0.748,34,1.77,43,0.904,49,0.088,65,2.387,70,3.231,71,1.126,73,1.921,113,0.004,114,0.004,118,1.768,125,1.975,131,2.926,132,1.155,147,2.272,151,2.281,159,2.181,194,1.576,207,0.977,213,2.645,214,2.231,224,0.722,238,3.287,254,2.387,284,3.058,285,3.167,314,1.75,351,2.983,451,0.904,546,4.242,548,5.109,549,2.869,561,3.041,563,4.783,572,3.273,573,1.768,594,3.977,606,2.139,615,2.444,618,3.53,675,2.387,725,3.058,749,3.167,754,5.109,755,5.405,760,2.231,815,2.959,978,4.403,986,3.759,988,3.167,995,2.139,1000,3.977,1012,3.977,1050,3.423,1073,3.423,1080,6.914,1192,4.793,1203,3.287,1243,3.578,1333,7.637,1334,4.615,1335,5.321,1336,7.763,1337,7.445,1338,6.857,1339,6.182,1340,4.615,1341,4.615,1342,4.615,1343,4.615,1344,4.615,1345,4.615,1346,3.977,1347,4.615,1348,6.182,1349,6.182,1350,6.182,1351,4.615,1352,6.182,1353,4.25,1354,4.615,1355,4.615,1356,4.615,1357,4.615,1358,4.615,1359,4.615,1360,4.615,1361,6.182,1362,4.615,1363,4.25,1364,4.25,1365,6.182,1366,4.615,1367,4.25,1368,4.615,1369,4.615,1370,6.182,1371,6.97,1372,6.182,1373,6.182,1374,6.182,1375,4.615,1376,4.615,1377,6.182,1378,4.615,1379,4.615,1380,4.615,1381,4.615,1382,4.615,1383,4.615,1384,4.615,1385,4.615]],["title/interfaces/ColorPalette.html",[0,0.374,1386,3.7]],["body/interfaces/ColorPalette.html",[0,0.559,2,0.085,3,0.067,4,0.035,5,0.029,7,0.276,11,0.029,12,0.057,15,2.513,21,0.336,22,0.066,23,0.006,28,0.653,49,0.082,60,5.439,61,4.44,64,4.44,71,0.983,77,3.76,78,5.044,87,2.463,89,3.035,94,1.017,96,3.797,103,1.681,106,2.798,110,2.323,112,6.736,113,0.004,114,0.004,122,1.357,147,1.117,153,1.421,184,0.938,194,2.068,224,0.682,249,1.505,313,1.392,486,4.464,626,3.624,711,2.544,722,2.965,868,2.862,869,3.759,870,3.079,886,2.583,887,3.003,909,4.028,929,4.33,930,4.081,965,2.603,966,2.238,974,2.463,976,3.942,1025,2.519,1096,3.87,1097,3.983,1098,3.983,1099,3.983,1100,3.565,1101,3.393,1102,3.983,1103,3.247,1104,3.983,1109,2.371,1116,2.735,1117,3.098,1163,3.515,1185,3.797,1302,3.046,1315,3.003,1326,3.549,1386,5.522,1387,3.618,1388,4.291,1389,3.618,1390,4.4,1391,2.696,1392,4.4,1393,4.127,1394,6.752,1395,6.752,1396,6.752,1397,6.752,1398,6.752,1399,5.973,1400,4.769,1401,6.405,1402,6.405,1403,6.405,1404,6.405,1405,6.752,1406,6.405,1407,4.773,1408,3.942,1409,4.769,1410,5.096,1411,5.096,1412,5.096,1413,2.798,1414,5.096,1415,4.508,1416,3.618,1417,3.618,1418,3.618,1419,5.994,1420,3.618,1421,3.618,1422,3.618,1423,2.305,1424,3.618,1425,3.2,1426,3.046,1427,3.386,1428,3.386,1429,3.618,1430,3.618,1431,3.386,1432,3.618,1433,3.046,1434,3.046,1435,5.9,1436,2.603,1437,3.386,1438,3.618,1439,3.618,1440,3.618,1441,2.442,1442,4.968,1443,3.618,1444,3.618,1445,3.618,1446,3.618,1447,3.2,1448,3.618,1449,3.386,1450,3.618,1451,3.618,1452,3.046]],["title/interfaces/ComingSoonProps.html",[0,0.374,1453,4.293]],["body/interfaces/ComingSoonProps.html",[0,0.489,2,0.121,3,0.05,4,0.05,5,0.042,7,0.612,10,1.594,11,0.042,12,0.072,13,1.109,21,0.32,22,0.057,23,0.006,28,0.662,42,2.002,43,1.206,44,1.892,45,1.841,46,2.446,47,1.932,49,0.057,71,1.026,72,2.267,74,1.064,75,2.353,83,2.446,90,2.71,91,3.716,93,3.626,94,1.815,113,0.005,114,0.005,120,1.031,126,2.109,185,2.267,236,4.994,269,5.605,451,1.373,736,2.353,872,2.598,875,4.087,886,1.903,922,2.77,962,3,963,2.398,966,2.267,974,3.12,975,3.118,1078,4.052,1082,2.833,1083,2.77,1084,2.833,1095,3.465,1110,3.714,1116,2.77,1117,3.39,1118,2.71,1141,4.346,1145,2.898,1315,4.151,1326,3.594,1329,4.004,1453,7.011,1454,6.278,1455,9.567,1456,6.594,1457,8.569,1458,3.846,1459,5.605,1460,3.594,1461,5.436,1462,6.278,1463,5.605,1464,5.605,1465,4.566,1466,5.605,1467,4.566,1468,6.278]],["title/interfaces/ComponentColors.html",[0,0.374,928,2.845]],["body/interfaces/ComponentColors.html",[0,0.723,2,0.094,3,0.069,4,0.038,5,0.032,7,0.305,8,1.855,10,1.92,11,0.032,12,0.061,15,2.69,16,2.331,20,1.786,21,0.336,22,0.065,23,0.006,25,2.051,27,1.968,28,0.7,29,0.94,42,1.548,43,0.866,44,1.398,47,1.194,48,3.575,49,0.089,50,1.969,61,4.228,64,4.228,88,2.242,95,2.536,108,3.667,110,1.82,113,0.004,114,0.004,120,1.241,184,0.894,224,0.729,287,2.616,295,1.631,311,2.971,313,1.442,350,1.786,432,2.396,494,1.497,495,1.548,561,1.891,619,3.064,626,3.755,674,2.242,713,2.616,852,3.115,855,5.321,856,2.872,857,2.78,858,2.475,859,3.842,860,4.632,861,4.586,862,4.632,863,3.926,864,2.695,865,2.872,866,2.872,867,3.926,868,3.491,869,3.336,870,3.756,871,2.872,872,2.009,873,2.242,874,3.926,875,2.804,876,2.974,877,2.695,878,2.051,879,2.974,880,2.242,881,3.926,882,2.872,883,2.872,884,2.872,885,2.695,886,2.012,887,2.352,888,2.872,889,1.82,890,2.475,891,2.872,892,2.974,893,2.475,894,2.974,895,2.974,896,2.974,897,2.974,898,2.974,899,2.974,900,2.974,901,2.295,902,2.974,903,2.695,904,2.974,905,2.974,906,2.974,907,2.695,908,2.695,909,3.137,910,3.926,911,2.872,912,2.872,913,4.066,914,3.926,915,2.78,916,2.695,917,2.872,918,2.242,919,2.872,920,2.872,921,1.82,922,2.142,923,3.926,924,2.872,925,2.695,926,3.926,927,2.872,928,3.926,929,3.937,930,4.258,931,4.808,932,2.872]],["title/interfaces/ComponentSizes.html",[0,0.374,932,2.845]],["body/interfaces/ComponentSizes.html",[0,0.73,2,0.099,3,0.061,4,0.04,5,0.034,8,1.949,10,1.969,11,0.034,12,0.063,15,2.782,16,2.391,20,1.876,21,0.331,22,0.063,23,0.006,25,2.155,27,2.068,28,0.723,29,0.946,42,1.627,43,0.896,44,1.446,47,1.255,48,3.244,49,0.09,50,1.998,61,3.409,64,3.409,88,2.355,95,2.622,108,2.301,110,1.912,113,0.004,114,0.004,120,1.273,184,0.952,224,0.644,287,2.748,295,1.713,311,2.956,313,1.163,350,1.876,432,2.478,494,1.572,495,1.627,561,1.987,619,3.168,626,3.028,674,2.355,713,2.748,852,3.16,855,5.389,856,3.017,857,2.92,858,2.6,859,3.666,860,4.751,861,4.664,862,4.751,863,4.06,864,2.831,865,3.017,866,3.017,867,4.06,868,4.116,869,3.933,870,4.429,871,3.017,872,2.11,873,2.355,874,4.06,875,2.899,876,3.124,877,2.831,878,2.155,879,3.124,880,2.355,881,4.06,882,3.017,883,3.017,884,3.017,885,2.831,886,2.081,887,2.471,888,3.017,889,1.912,890,2.6,891,3.017,892,3.124,893,2.6,894,3.124,895,3.124,896,3.124,897,3.124,898,3.124,899,3.124,900,3.124,901,2.411,902,3.124,903,2.831,904,3.124,905,3.124,906,3.124,907,2.831,908,2.831,909,3.244,910,4.06,911,3.017,912,3.017,913,4.204,914,4.06,915,2.92,916,2.831,917,3.017,918,2.355,919,3.017,920,3.017,921,1.912,922,2.25,923,4.06,924,3.017,925,2.831,926,4.06,927,3.017,928,3.017,929,2.471,930,2.672,931,3.017,932,4.06]],["title/classes/CompressionError.html",[1469,1.911,1470,4.293]],["body/classes/CompressionError.html",[3,0.052,4,0.052,5,0.044,7,0.414,11,0.044,12,0.074,13,1.103,21,0.321,22,0.061,23,0.006,24,2.847,49,0.06,52,3.66,113,0.005,114,0.005,120,1.329,184,0.967,185,2.381,190,1.674,224,0.778,309,3.306,451,1.153,694,4.194,852,2.87,1077,5.461,1469,2.62,1470,8.157,1471,3.554,1472,6.594,1473,4.96,1474,3.045,1475,4.565,1476,6.257,1477,9.669,1478,7.439,1479,5.605,1480,5.074,1481,5.071,1482,8.096,1483,6.229,1484,6.594,1485,6.594,1486,6.594,1487,5.074,1488,4.194,1489,5.074,1490,6.594,1491,6.594,1492,4.565,1493,5.074,1494,5.074,1495,5.074,1496,5.074,1497,5.074]],["title/interfaces/CompressionOptions.html",[0,0.374,1498,3.7]],["body/interfaces/CompressionOptions.html",[0,0.695,2,0.133,3,0.054,4,0.054,5,0.046,7,0.431,11,0.046,12,0.076,13,1.171,21,0.293,22,0.064,23,0.006,29,0.855,49,0.082,113,0.005,114,0.005,184,0.989,432,2.482,451,1.202,452,3.235,662,2.393,838,4.022,852,2.437,1473,5.466,1474,3.834,1478,5.289,1498,6.389,1499,5.651,1500,7.619,1501,7.619,1502,7.619,1503,7.619,1504,6.74,1505,4.999,1506,4.552,1507,4.371,1508,5.651]],["title/interfaces/CompressionResult.html",[0,0.374,1507,3.058]],["body/interfaces/CompressionResult.html",[0,0.706,2,0.138,3,0.056,4,0.056,5,0.048,7,0.448,11,0.048,12,0.078,21,0.298,22,0.06,23,0.006,29,0.684,49,0.083,113,0.005,114,0.005,184,0.982,432,2.578,451,1.248,452,2.781,662,2.957,838,4.393,852,3.011,1473,5.555,1474,3.296,1478,7.221,1498,5.493,1499,5.87,1500,5.87,1501,5.87,1502,5.87,1503,5.87,1504,5.193,1505,5.193,1506,5.625,1507,5.402,1508,7.716]],["title/interfaces/ConfirmDialogOptions.html",[0,0.374,1509,4.293]],["body/interfaces/ConfirmDialogOptions.html",[0,0.444,2,0.11,3,0.045,4,0.045,5,0.038,7,0.358,11,0.038,12,0.068,13,1.082,21,0.322,22,0.06,23,0.006,26,4.418,27,3.73,28,0.97,29,0.785,30,3.335,43,0.745,44,1.203,47,1.404,49,0.075,62,4.895,65,2.636,66,2.362,70,3.059,71,0.981,73,1.819,74,1.253,113,0.004,114,0.004,120,1.537,128,2.765,162,1.279,207,1.079,245,2.061,263,1.968,452,3.584,573,1.952,574,3.781,843,3.073,847,3.268,859,3.495,872,3.969,873,3.413,886,2.79,914,3.377,1022,3.377,1023,3.781,1136,4.152,1180,4.393,1201,6.74,1204,4.393,1205,3.781,1216,5.737,1255,7.886,1267,2.88,1509,7.319,1510,5.709,1511,8.473,1512,8.36,1513,8.36,1514,8.981,1515,6.6,1516,7.392,1517,4.694,1518,7.741,1519,7.319,1520,7.392,1521,5.709,1522,5.709]],["title/interfaces/CountdownTimerState.html",[0,0.374,1523,3.954]],["body/interfaces/CountdownTimerState.html",[0,0.616,2,0.123,3,0.05,4,0.05,5,0.042,7,0.399,11,0.042,12,0.072,22,0.065,23,0.006,24,2.745,29,0.864,34,1.147,35,2.753,49,0.085,50,2.12,71,0.948,94,1.47,113,0.005,114,0.005,153,1.259,184,0.924,245,2.296,265,2.527,273,2.632,311,2.064,374,3.332,425,3.007,430,3.146,452,2.477,512,3.332,517,3.896,518,4.147,519,3.896,635,6.941,689,2.806,1523,6.509,1524,5.229,1525,5.229,1526,5.878,1527,6.941,1528,8.054,1529,6.245,1530,8.285,1531,6.245,1532,5.678,1533,5.229,1534,5.678,1535,5.678,1536,4.402,1537,5.678,1538,5.678,1539,5.678,1540,6.509,1541,5.678,1542,7.068,1543,6.509,1544,5.678,1545,4.212,1546,4.625,1547,5.229,1548,5.229,1549,4.893,1550,3.159,1551,5.229]],["title/interfaces/CreateLeadRequest.html",[0,0.374,1154,3.185]],["body/interfaces/CreateLeadRequest.html",[0,0.717,2,0.12,3,0.061,4,0.061,5,0.041,7,0.489,11,0.041,12,0.071,21,0.336,22,0.061,23,0.006,34,1.117,41,1.383,49,0.084,113,0.005,114,0.005,117,1.59,118,2.662,132,1.032,133,1.245,135,2.763,146,2.999,147,2.449,153,1.226,161,2.195,202,2.155,207,1.17,249,2.117,263,1.648,313,1.049,314,1.387,451,1.082,494,2.839,495,1.974,561,3.586,562,3.937,729,3.792,797,2.731,869,2.731,982,2.672,1154,5.155,1181,4.154,1214,3.289,1217,6.498,1270,4.195,1413,3.937,1461,4.285,1552,4.502,1553,5.389,1554,4.285,1555,4.502,1556,4.502,1557,4.502,1558,3.156,1559,4.285,1560,4.502,1561,4.285,1562,4.285,1563,4.502,1564,5.662,1565,3.436,1566,4.1,1567,4.502,1568,4.502,1569,4.285,1570,4.502,1571,4.763,1572,4.763,1573,4.285,1574,4.763,1575,2.51,1576,2.616,1577,5.989,1578,5.662,1579,3.075,1580,4.285]],["title/interfaces/CreateTicketModalProps.html",[0,0.374,1581,4.293]],["body/interfaces/CreateTicketModalProps.html",[0,0.285,2,0.071,3,0.029,4,0.029,5,0.024,7,0.563,8,2.074,10,0.93,11,0.024,12,0.05,13,0.941,20,2.81,21,0.29,22,0.053,23,0.006,25,1.548,27,2.201,28,0.386,29,0.685,34,0.661,35,2.031,36,1.732,41,0.964,43,1.134,44,1.609,45,1.074,46,1.427,47,1.591,48,2.567,49,0.05,50,1.217,71,1.153,72,1.323,74,1.212,75,1.373,83,1.427,87,1.455,89,2.52,91,2.677,95,1.399,100,2.097,103,1.399,108,1.653,113,0.003,114,0.003,120,0.601,121,4.306,132,0.611,144,1.919,146,3.7,147,1.939,148,2.033,149,4.976,153,1.075,160,2.074,172,1.974,188,1.189,194,1.236,198,1.516,206,3.703,207,0.692,224,0.634,267,4.847,313,0.621,314,0.821,350,1.347,351,2.471,373,2.842,448,3.382,452,1.427,467,3.108,527,2.115,528,2.697,535,1.919,542,2.567,570,2.293,572,1.732,573,1.253,583,1.427,586,1.89,601,3.465,602,2.926,615,1.732,619,3.823,656,1.919,662,1.89,664,3.012,670,2.167,675,1.691,710,2.329,716,2.033,722,2.336,760,1.581,800,1.691,805,3.326,858,1.868,872,1.516,878,1.548,880,2.507,886,1.961,888,2.167,889,2.863,901,3.382,922,1.616,959,1.653,962,2.074,963,1.399,965,2.167,966,1.323,975,1.82,976,2.329,1011,1.516,1082,1.653,1083,1.616,1084,1.653,1095,3.752,1096,1.82,1106,2.167,1116,1.616,1117,3.75,1118,1.581,1122,3.108,1125,4.858,1133,3.311,1134,4.116,1137,2.818,1140,2.818,1157,2.033,1192,2.536,1193,2.664,1214,3.734,1216,2.244,1274,3.013,1315,1.774,1318,3.27,1323,1.919,1329,3.647,1581,4.847,1582,3.663,1583,5.484,1584,7.393,1585,8.28,1586,8.965,1587,3.326,1588,2.844,1589,3.27,1590,3.758,1591,4.177,1592,4.847,1593,4.847,1594,3.27,1595,4.464,1596,4.177,1597,3.663,1598,3.663,1599,4.847,1600,7.153,1601,5.429,1602,5.429,1603,5.429,1604,2.426,1605,2.818,1606,1.616,1607,4.847,1608,5.429,1609,2.244,1610,5.429,1611,5.429,1612,6.468,1613,2.074,1614,5.775,1615,6.468,1616,3.27,1617,5.318,1618,3.663,1619,3.012,1620,4.24,1621,3.663,1622,3.27,1623,3.663,1624,3.663,1625,3.663,1626,4.464,1627,3.012,1628,3.663,1629,3.663,1630,2.768,1631,6.468,1632,3.663,1633,3.663,1634,2.664,1635,6.468,1636,5.429,1637,3.663,1638,3.949,1639,5.429,1640,5.429,1641,3.663,1642,3.663,1643,3.012,1644,1.974,1645,6.468,1646,5.429,1647,3.663,1648,3.663,1649,3.663,1650,3.663,1651,3.27,1652,5.429,1653,3.663,1654,3.663,1655,3.663,1656,3.663,1657,3.663,1658,3.663,1659,4.177,1660,3.663,1661,3.663,1662,5.429,1663,6.468,1664,6.468,1665,3.663,1666,3.663,1667,7.153,1668,3.663,1669,3.663,1670,7.153,1671,3.326,1672,3.663,1673,2.664,1674,2.536,1675,3.663,1676,3.663,1677,3.663,1678,2.818,1679,3.012,1680,3.663,1681,2.664,1682,2.818,1683,3.663,1684,3.27,1685,3.012,1686,3.012,1687,2.536,1688,3.27,1689,3.663,1690,3.663,1691,3.012,1692,2.536,1693,3.27,1694,2.329,1695,2.426,1696,2.329]],["title/interfaces/CreateTicketRequest.html",[0,0.374,208,2.669]],["body/interfaces/CreateTicketRequest.html",[0,0.731,2,0.08,3,0.033,4,0.033,5,0.028,7,0.578,11,0.028,12,0.054,21,0.33,22,0.056,23,0.006,28,0.628,34,0.75,41,1.53,45,1.22,49,0.085,113,0.004,114,0.004,115,2.308,116,2.38,117,1.708,118,2.379,119,2.24,120,1.512,121,4.654,122,2.839,123,3.278,124,2.46,125,3.476,126,2,127,4.461,128,3.369,129,3.748,130,3.861,131,1.757,132,1.16,133,1.771,134,3.409,135,1.932,136,2.38,137,2.38,138,2.414,139,2.275,140,2.749,141,2.46,142,2.939,143,3.534,144,3.979,145,4.115,146,3.369,147,2.04,148,2.292,149,5.164,150,3.748,151,3.351,152,2.578,153,1.744,154,3.8,155,3.522,156,3.119,157,3.861,158,4.381,159,2.46,160,3.29,161,2.466,162,1.334,163,3.522,164,1.933,165,3.522,166,2.52,167,4.755,168,3.748,169,2.12,170,2.46,171,2.308,172,3.748,173,2.627,174,3.522,175,1.447,176,1.92,177,1.261,178,2.308,179,2.38,180,2.308,181,3.351,182,2.597,183,1.99,184,0.86,185,2.15,186,3.351,187,3.069,188,2.257,189,1.326,190,1.055,191,1.876,192,2.308,193,2.308,194,0.946,195,1.966,196,1.686,197,2.308,198,3.143,199,2.46,200,2.46,201,2.46,202,1.447,203,1.92,204,2.178,205,2.46,206,3.409,207,1.126,208,3.305,209,3.522,210,2.38,211,2.308,212,2.46,213,1.589,214,1.795,215,2.46,216,2.38,217,2.464,218,2.38,219,1.834,220,2.464,221,2.627,222,1.876,223,2.178,224,0.494,225,2.014,226,2.46,227,1.422]],["title/interfaces/CreateTicketResponse.html",[0,0.374,211,2.669]],["body/interfaces/CreateTicketResponse.html",[0,0.733,2,0.082,3,0.033,4,0.033,5,0.028,7,0.543,11,0.028,12,0.055,21,0.329,22,0.051,23,0.006,28,0.635,34,0.762,41,1.537,45,1.239,49,0.085,113,0.004,114,0.004,115,2.344,116,2.418,117,1.562,118,2.059,119,2.276,120,1.517,121,4.654,122,2.848,123,3.302,124,2.499,125,3.488,126,2.023,127,4.488,128,3.399,129,3.781,130,3.894,131,1.785,132,1.17,133,1.836,134,3.447,135,1.954,136,2.418,137,2.418,138,2.441,139,2.3,140,2.78,141,2.499,142,2.965,143,3.552,144,4.532,145,4.151,146,3.399,147,1.942,148,2.036,149,4.909,150,3.781,151,3.096,152,2.592,153,1.752,154,3.823,155,3.562,156,3.154,157,3.894,158,4.404,159,2.471,160,3.379,161,2.487,162,1.349,163,3.562,164,1.943,165,3.562,166,2.536,167,4.784,168,3.781,169,2.153,170,2.499,171,2.344,172,3.781,173,2.657,174,3.562,175,1.47,176,1.95,177,1.281,178,2.344,179,2.418,180,2.344,181,3.375,182,2.616,183,2.004,184,0.864,185,2.174,186,3.375,187,3.096,188,2.277,189,1.347,190,1.072,191,1.906,192,2.344,193,2.344,194,0.961,195,1.997,196,1.712,197,2.344,198,3.165,199,2.499,200,2.499,201,2.499,202,1.47,203,1.95,204,2.212,205,2.499,206,2.418,207,0.798,208,2.344,209,2.499,210,3.447,211,3.342,212,3.562,213,1.614,214,1.823,215,2.499,216,2.418,217,2.491,218,2.418,219,1.863,220,2.491,221,2.657,222,1.906,223,2.212,224,0.5,225,2.046,226,2.499,227,1.444]],["title/interfaces/DocsTabProps.html",[0,0.374,1697,4.293]],["body/interfaces/DocsTabProps.html",[0,0.247,2,0.061,3,0.025,4,0.025,5,0.054,10,1.687,11,0.044,12,0.044,16,1.5,21,0.218,22,0.048,23,0.006,27,2.401,28,0.334,31,2.192,33,1.497,34,1.068,41,0.864,42,1.01,43,1.204,44,1.594,45,0.929,46,1.895,47,1.635,49,0.044,50,1.09,53,2.827,70,1.31,71,1.156,72,2.138,74,1.335,75,1.823,77,1.659,83,1.234,84,2.785,85,2.7,87,2.353,88,1.462,89,1.895,90,3.267,91,3.638,93,3.756,94,1.75,95,2.539,96,1.94,98,2.146,103,2.263,106,2.014,110,1.187,113,0.003,114,0.003,120,0.52,126,1.634,147,2.001,148,2.395,153,1.42,164,0.732,166,1.525,185,1.143,186,1.397,194,0.721,202,1.694,203,1.462,207,0.599,221,2.613,222,2.195,224,0.766,225,1.534,245,1.143,270,1.813,311,1.028,313,1.003,314,1.327,353,1.31,373,3.132,433,2.014,449,4.099,471,1.758,542,2.3,570,1.123,573,1.083,583,1.234,586,1.103,593,2.356,628,2.192,630,1.462,643,2.589,674,2.246,710,2.014,711,2.1,719,2.192,722,1.143,751,1.94,797,1.397,798,2.932,838,2.356,850,2.451,875,2.055,878,1.338,886,0.96,921,1.823,922,2.932,958,3.922,959,1.429,962,2.539,963,1.21,965,1.874,966,2.138,974,3.384,975,3.76,995,2.967,1011,2.013,1071,2.014,1082,1.429,1083,1.397,1084,1.429,1087,2.014,1095,2.932,1096,1.573,1097,1.758,1098,1.758,1099,1.758,1100,2.416,1101,2.8,1102,1.758,1104,1.758,1105,1.758,1106,2.878,1109,2.621,1110,3.931,1116,1.397,1117,3.267,1118,2.869,1119,2.097,1133,3.132,1134,1.707,1135,2.878,1141,2.192,1145,1.462,1148,3.367,1149,2.192,1160,2.1,1167,1.813,1177,1.758,1181,1.429,1216,2.98,1256,1.758,1269,2.303,1294,2.192,1321,3.367,1322,3.367,1323,4.261,1325,2.192,1326,3.391,1327,2.437,1329,3.859,1423,3.481,1425,2.303,1433,2.192,1436,1.874,1458,1.94,1465,2.303,1579,4.144,1583,2.097,1588,3.103,1590,2.192,1604,2.097,1613,1.21,1644,1.707,1659,2.437,1678,2.437,1692,2.192,1694,2.014,1695,2.097,1697,4.343,1698,3.167,1699,2.097,1700,3.367,1701,2.827,1702,3.743,1703,2.303,1704,2.604,1705,3.167,1706,2.437,1707,4.343,1708,4.308,1709,4.869,1710,2.827,1711,2.98,1712,2.437,1713,3.167,1714,2.437,1715,2.097,1716,2.014,1717,2.7,1718,2.416,1719,1.94,1720,2.437,1721,2.98,1722,2.827,1723,3.504,1724,4.833,1725,1.338,1726,2.827,1727,3.167,1728,3.842,1729,3.167,1730,1.573,1731,3.167,1732,1.813,1733,3.221,1734,4.864,1735,3.167,1736,1.813,1737,3.167,1738,1.813,1739,1.813,1740,1.813,1741,3.167,1742,1.813,1743,3.167,1744,4.864,1745,4.864,1746,3.167,1747,3.167,1748,5.288,1749,5.288,1750,2.827,1751,2.827,1752,3.999,1753,5.824,1754,2.437,1755,3.167,1756,4.864,1757,3.167,1758,4.557,1759,2.827,1760,4.864,1761,2.827,1762,7.603,1763,3.221,1764,2.827,1765,1.874,1766,2.192,1767,2.827,1768,2.303,1769,2.827,1770,5.933,1771,3.167,1772,2.827,1773,3.167,1774,3.167,1775,5.933,1776,2.097,1777,4.343,1778,2.827,1779,2.827,1780,3.538,1781,2.827,1782,4.343,1783,2.437,1784,2.827,1785,2.827,1786,2.827,1787,4.864,1788,2.827,1789,2.827,1790,2.827,1791,3.167,1792,2.793,1793,2.604,1794,1.659,1795,7.17,1796,2.437,1797,3.538,1798,5.505,1799,3.167,1800,3.922,1801,2.097,1802,2.303,1803,2.303,1804,4.864,1805,3.221,1806,1.94,1807,4.864,1808,4.864,1809,1.758,1810,4.864,1811,3.167,1812,3.167,1813,3.167,1814,2.437,1815,2.604,1816,3.167,1817,3.167,1818,1.94,1819,2.604,1820,2.604,1821,3.167,1822,2.437,1823,2.604,1824,3.167,1825,3.167,1826,3.999,1827,2.827,1828,3.167,1829,3.167,1830,3.221,1831,2.437,1832,2.437,1833,3.167,1834,4.401,1835,2.827,1836,2.827,1837,3.167,1838,2.246,1839,5.24,1840,3.167,1841,2.827,1842,2.827,1843,2.827,1844,2.827,1845,2.827,1846,2.437,1847,2.827,1848,2.827,1849,2.827,1850,2.437,1851,2.827,1852,2.827,1853,2.827,1854,2.827,1855,3.167,1856,3.167,1857,3.167,1858,2.303,1859,2.604,1860,2.303,1861,2.192,1862,3.167]],["title/interfaces/DocumentPickerModalProps.html",[0,0.374,1863,4.293]],["body/interfaces/DocumentPickerModalProps.html",[0,0.25,2,0.062,3,0.025,4,0.025,5,0.064,7,0.201,8,1.877,10,0.815,11,0.021,12,0.045,13,0.578,20,2.653,21,0.237,22,0.059,23,0.006,27,2.713,28,0.338,29,0.641,35,1.899,43,1.134,44,1.668,45,0.941,46,1.25,47,1.774,48,1.517,49,0.045,50,1.101,71,1.15,72,1.159,73,1.774,74,1.494,75,1.203,83,1.25,86,2.334,87,1.952,88,1.481,89,2.81,91,2.985,94,1.136,98,1.416,103,1.877,107,1.898,113,0.004,114,0.003,117,1.004,120,1.098,133,1.53,194,1.359,207,0.929,224,0.777,244,2.117,249,1.097,263,0.854,276,1.097,300,2.221,309,1.68,311,1.041,367,2.125,373,2.372,375,1.898,385,1.416,432,2.949,435,1.837,437,2.813,448,3.163,451,1.17,452,2.607,457,1.517,458,3.314,459,4.133,460,2.221,461,4.133,462,2.125,464,2.125,466,3.314,467,1.837,470,2.041,471,1.781,473,1.781,493,1.203,525,4.776,570,3.081,573,2.042,583,2.81,586,1.117,595,2.638,599,2.441,601,3.836,602,4.1,613,1.781,615,2.323,619,3.656,656,1.681,662,2.329,667,3.574,691,2.38,694,2.041,707,2.323,710,3.125,716,1.781,724,2.638,733,2.638,734,1.385,747,3.574,760,1.385,800,1.481,802,2.469,809,1.517,838,3.836,843,1.842,847,3.419,872,2.033,886,0.973,889,1.842,959,1.448,962,1.877,963,1.226,965,1.898,966,1.159,974,1.275,975,2.441,976,2.041,1011,1.328,1082,1.448,1083,1.416,1084,1.448,1095,2.952,1096,1.594,1116,1.416,1117,2.888,1118,2.121,1133,2.769,1134,1.729,1136,2.334,1167,1.837,1183,2.469,1216,3.01,1274,1.781,1315,1.554,1329,3.044,1474,3.656,1504,3.574,1505,5.246,1579,1.594,1583,5.038,1584,7.07,1589,2.865,1590,3.401,1591,3.781,1604,2.125,1605,2.469,1606,2.168,1616,2.865,1617,5.93,1634,5.534,1644,2.648,1659,5.148,1682,4.594,1684,2.865,1685,2.638,1688,2.865,1692,2.221,1693,2.865,1696,2.041,1704,6.255,1716,2.041,1725,1.356,1728,3.686,1758,5.55,1792,1.25,1863,4.387,1864,3.209,1865,7.608,1866,5.971,1867,2.865,1868,3.209,1869,5.971,1870,3.209,1871,3.209,1872,7.213,1873,4.913,1874,4.913,1875,2.865,1876,3.209,1877,2.334,1878,4.387,1879,3.209,1880,3.254,1881,4.913,1882,1.781,1883,5.331,1884,8.817,1885,9.182,1886,7.213,1887,3.209,1888,3.209,1889,2.865,1890,5.971,1891,4.913,1892,3.209,1893,3.209,1894,3.209,1895,2.865,1896,3.209,1897,3.209,1898,2.638,1899,6.691,1900,3.209,1901,3.209,1902,9.107,1903,3.209,1904,3.209,1905,7.918,1906,7.918,1907,1.898,1908,3.209,1909,3.209,1910,7.918,1911,4.913,1912,5.331,1913,3.209,1914,4.913,1915,6.691,1916,8.546,1917,4.913,1918,6.691,1919,4.913,1920,3.209,1921,4.913,1922,4.913,1923,5.971,1924,6.691,1925,3.209,1926,6.716,1927,4.387,1928,3.209,1929,6.691,1930,4.913,1931,3.209,1932,4.913,1933,2.334,1934,3.209,1935,1.966,1936,2.041,1937,5.331,1938,4.913,1939,3.209,1940,3.209,1941,3.209,1942,3.209,1943,3.209,1944,3.209,1945,3.209,1946,3.209,1947,3.209,1948,1.837,1949,3.209,1950,5.971,1951,4.913,1952,3.209,1953,3.209,1954,2.865,1955,4.913,1956,2.334,1957,3.209,1958,3.209,1959,3.209,1960,3.209,1961,3.209,1962,3.209,1963,3.209,1964,4.387,1965,4.387,1966,3.209,1967,3.209,1968,3.209,1969,2.865,1970,3.209,1971,5.971,1972,3.209,1973,3.209,1974,3.209,1975,3.209,1976,3.209,1977,2.865,1978,3.209,1979,3.209,1980,3.209,1981,3.209,1982,3.209,1983,3.209,1984,3.209]],["title/interfaces/DocumentRowProps.html",[0,0.374,1985,4.293]],["body/interfaces/DocumentRowProps.html",[0,0.309,2,0.077,3,0.045,4,0.031,5,0.057,7,0.249,8,2.198,10,1.006,11,0.026,12,0.053,13,0.968,20,2.902,21,0.222,22,0.057,23,0.006,27,3.012,28,0.783,35,2.109,42,1.264,43,1.19,44,1.662,45,1.163,46,1.544,47,1.666,49,0.053,50,1.289,60,2.625,63,3.05,70,1.64,71,1.131,72,1.431,74,1.577,75,1.486,77,2.077,78,2.2,83,1.544,84,3.293,85,4.567,87,1.575,89,1.544,90,2.923,91,2.38,93,3.126,94,1.565,95,1.514,98,3.278,103,2.587,105,2.744,107,2.345,110,2.538,113,0.003,114,0.003,120,0.651,122,1.222,153,1.871,164,0.916,185,1.431,203,1.83,207,0.749,222,1.789,224,0.722,225,1.92,276,1.356,313,0.975,373,2.952,449,4.168,471,2.2,586,1.38,628,2.744,630,1.83,667,2.883,687,2.521,708,6.105,711,1.405,722,1.431,797,2.988,798,3.278,838,2.787,869,1.749,875,1.675,878,1.675,886,2.392,921,1.486,922,1.749,929,1.92,930,2.077,931,2.345,958,3.81,959,1.789,962,2.198,963,1.514,966,1.431,974,2.286,975,3.69,1082,1.789,1083,1.749,1084,1.789,1095,3.278,1100,1.969,1101,1.874,1105,2.2,1109,2.136,1118,2.483,1119,2.625,1122,2.269,1133,2.802,1134,2.136,1160,1.711,1167,2.269,1216,4.148,1269,4.184,1321,2.744,1322,2.744,1323,2.077,1329,2.021,1393,1.92,1423,2.077,1579,1.969,1583,2.625,1613,1.514,1659,3.05,1682,3.05,1692,2.744,1694,3.658,1695,3.81,1702,4.426,1703,2.883,1704,3.259,1707,3.539,1708,5.403,1709,4.73,1710,3.539,1715,2.625,1716,2.521,1717,4.123,1719,2.428,1721,5.041,1723,4.667,1725,2.861,1728,4.289,1748,7.346,1749,7.579,1750,3.539,1751,3.539,1752,4.73,1753,6.331,1758,5.716,1759,3.539,1761,3.539,1762,7.763,1767,3.539,1768,2.883,1769,3.539,1770,6.632,1772,3.539,1775,6.632,1776,2.625,1777,5.136,1778,6.045,1779,3.539,1780,2.883,1781,3.539,1782,6.045,1783,3.05,1784,3.539,1785,3.539,1786,3.539,1788,3.539,1789,3.539,1790,3.539,1792,1.544,1796,3.05,1830,2.625,1834,4.92,1839,5.143,1841,3.539,1842,3.539,1843,3.539,1845,3.539,1847,3.539,1848,3.539,1849,3.539,1850,3.05,1851,3.539,1852,3.539,1853,3.539,1854,3.539,1889,5.136,1985,5.136,1986,3.964,1987,3.964,1988,3.964,1989,4.925,1990,3.964,1991,4.426,1992,5.136,1993,2.744,1994,3.964,1995,2.521,1996,3.539,1997,3.964,1998,3.964,1999,2.744,2000,3.964,2001,3.964,2002,2.883,2003,3.964,2004,3.964,2005,3.539,2006,6.771,2007,5.752,2008,3.964,2009,3.964,2010,5.752,2011,3.964,2012,5.752,2013,3.964,2014,3.964,2015,3.964,2016,3.964,2017,3.964,2018,3.539,2019,5.567,2020,3.964,2021,3.964,2022,3.964,2023,2.744,2024,3.964,2025,3.964]],["title/interfaces/DraftLead.html",[0,0.374,1338,3.954]],["body/interfaces/DraftLead.html",[0,0.611,2,0.101,3,0.041,4,0.041,5,0.035,7,0.328,11,0.035,12,0.064,13,0.819,16,1.609,21,0.306,22,0.056,23,0.006,28,0.55,29,0.5,34,1.764,43,0.91,49,0.088,65,2.41,70,3.247,71,1.128,73,1.93,113,0.004,114,0.004,118,2.383,125,2.663,131,2.945,132,1.162,147,2.326,151,2.303,159,2.192,194,1.586,207,0.987,213,2.663,214,2.253,224,0.579,238,3.319,254,2.41,284,3.088,285,3.197,314,1.758,351,2.998,451,0.913,546,4.269,548,5.129,549,2.897,561,3.496,563,4.806,572,3.295,573,1.785,594,4.016,606,2.16,615,2.467,618,3.553,675,2.41,725,3.088,749,3.197,754,5.129,755,5.431,760,2.253,815,2.988,978,5.324,986,3.796,988,3.197,995,2.16,1000,4.016,1012,4.016,1050,3.456,1073,3.456,1080,6.856,1192,4.824,1203,3.319,1243,3.613,1333,7.534,1334,4.66,1335,5.232,1336,6.222,1337,4.66,1338,6.45,1339,7.788,1340,7.475,1341,4.66,1342,4.66,1343,4.66,1344,4.66,1345,4.66,1346,4.016,1347,4.66,1348,6.222,1349,6.222,1350,6.222,1351,4.66,1352,6.222,1353,4.291,1354,4.66,1355,4.66,1356,4.66,1357,4.66,1358,4.66,1359,4.66,1360,4.66,1361,6.222,1362,4.66,1363,4.291,1364,4.291,1365,6.222,1366,4.66,1367,4.291,1368,4.66,1369,4.66,1370,6.222,1371,7.004,1372,6.222,1373,6.222,1374,6.222,1375,4.66,1376,4.66,1377,6.222,1378,4.66,1379,4.66,1380,4.66,1381,4.66,1382,4.66,1383,4.66,1384,4.66,1385,4.66]],["title/interfaces/DropdownOption.html",[0,0.374,1596,3.7]],["body/interfaces/DropdownOption.html",[0,0.546,2,0.102,3,0.042,4,0.042,5,0.035,10,1.339,11,0.035,12,0.064,13,0.825,15,3.549,16,2.833,20,2.901,21,0.324,22,0.053,23,0.006,25,3.804,28,0.556,29,0.672,42,1.683,43,1.143,44,1.844,45,1.548,46,2.055,47,1.941,49,0.072,50,1.182,71,1.142,72,1.905,73,1.727,74,0.894,75,1.978,83,2.055,87,2.096,89,2.734,90,3.03,91,3.264,95,2.682,100,3.021,103,2.016,108,2.381,113,0.004,114,0.004,128,2.556,185,1.905,194,1.201,224,0.698,350,3.433,452,3.276,619,2.436,722,1.905,859,2.494,878,2.229,880,3.241,886,1.6,887,3.4,921,2.957,959,2.381,962,2.682,963,2.016,966,2.534,995,2.905,1082,2.381,1083,2.328,1084,2.381,1095,2.328,1096,2.621,1117,3.63,1118,2.277,1122,3.021,1133,3.623,1134,2.843,1135,3.121,1167,3.021,1323,2.764,1325,3.652,1441,2.928,1591,4.059,1595,7.198,1596,6.736,1627,6.913,1634,3.837,1638,3.837,1686,5.771,1814,4.059,1815,4.338,1858,3.837,2019,4.338,2026,4.71,2027,5.771,2028,4.71,2029,4.338,2030,7.042,2031,6.267,2032,4.71,2033,4.71,2034,4.71,2035,4.71,2036,4.71,2037,4.71,2038,7.042,2039,4.71,2040,6.267,2041,4.71,2042,4.71,2043,4.71,2044,4.71,2045,4.71,2046,6.267,2047,4.71,2048,6.267,2049,4.71,2050,4.71,2051,4.71,2052,4.71,2053,6.267,2054,4.71,2055,4.71,2056,4.71,2057,4.71,2058,4.71,2059,4.059,2060,4.71,2061,4.71,2062,4.71,2063,4.71,2064,4.71,2065,4.71,2066,4.71,2067,4.71,2068,4.059]],["title/interfaces/DropdownProps.html",[0,0.374,2029,3.954]],["body/interfaces/DropdownProps.html",[0,0.528,2,0.097,3,0.04,4,0.04,5,0.033,10,1.274,11,0.033,12,0.062,13,1.13,15,3.741,16,2.915,20,3.264,21,0.327,22,0.062,23,0.006,25,3.749,28,0.529,29,0.85,35,1.927,42,1.601,43,1.123,44,1.813,45,1.472,46,1.955,47,1.892,49,0.07,50,1.125,71,1.132,72,1.812,73,1.67,74,0.85,75,1.881,83,1.955,87,1.994,89,2.644,90,2.93,91,3.183,95,2.593,100,2.873,103,1.917,108,2.265,113,0.004,114,0.004,128,2.431,185,1.812,194,1.142,224,0.753,350,3.394,452,3.534,619,2.317,722,1.812,859,2.373,878,2.121,880,3.134,886,1.522,887,4.17,921,2.883,959,2.265,962,2.593,963,1.917,966,2.451,995,2.809,1082,2.265,1083,2.214,1084,2.265,1095,2.214,1096,2.493,1117,3.557,1118,2.166,1122,2.873,1133,3.562,1134,2.704,1135,2.969,1167,2.873,1323,2.629,1325,3.474,1441,2.786,1591,3.862,1595,7.078,1596,6.827,1627,4.126,1634,3.65,1638,3.65,1686,5.581,1814,3.862,1815,4.126,1858,3.65,2019,4.126,2026,4.481,2027,5.581,2028,4.481,2029,5.581,2030,7.922,2031,6.06,2032,4.481,2033,4.481,2034,4.481,2035,4.481,2036,4.481,2037,4.481,2038,6.867,2039,4.481,2040,6.06,2041,4.481,2042,4.481,2043,4.481,2044,4.481,2045,4.481,2046,6.06,2047,4.481,2048,6.06,2049,4.481,2050,4.481,2051,4.481,2052,4.481,2053,6.06,2054,4.481,2055,4.481,2056,4.481,2057,4.481,2058,4.481,2059,3.862,2060,4.481,2061,4.481,2062,4.481,2063,4.481,2064,4.481,2065,4.481,2066,4.481,2067,4.481,2068,3.862]],["title/classes/ErrorBoundary.html",[1469,1.911,2069,3.7]],["body/classes/ErrorBoundary.html",[0,0.434,3,0.052,4,0.03,5,0.025,7,0.35,8,2.129,10,1.968,11,0.025,12,0.051,13,0.911,22,0.044,23,0.006,24,2.406,28,0.767,29,0.364,32,2.414,34,1.55,36,1.794,42,1.211,43,0.862,44,1.391,45,1.113,46,1.479,47,0.934,49,0.035,50,1.48,66,3.011,70,1.571,71,0.871,73,1.371,74,1.233,75,1.423,77,1.988,78,2.107,83,1.479,86,2.76,87,2.624,88,2.573,90,3.346,91,3.688,93,1.752,94,1.288,95,3.2,103,3.096,105,2.627,107,2.245,108,1.712,110,3.286,113,0.003,114,0.003,120,0.623,126,1.275,177,1.151,190,1.677,194,1.268,224,0.832,236,2.414,238,2.414,248,1.988,249,2.938,257,2.045,263,1.01,270,3.781,273,2.733,284,2.245,285,2.325,286,2.325,327,2.635,333,3.498,350,2.05,351,2.129,385,1.675,387,2.245,451,1.155,496,2.107,531,2.76,570,1.345,572,1.794,601,1.839,602,2.045,675,3.867,692,2.515,711,2.748,722,2.799,736,2.475,742,2.7,852,1.976,861,3.559,872,1.571,875,2.355,886,1.151,889,1.423,890,4.132,918,3.049,921,2.905,922,2.914,974,3.541,982,1.638,1022,2.245,1041,2.76,1050,3.691,1094,2.627,1095,3.79,1096,2.768,1097,3.093,1098,3.093,1099,3.093,1100,4.025,1101,2.635,1102,3.093,1103,2.92,1104,3.093,1116,1.675,1118,1.638,1205,2.513,1215,2.76,1230,4.498,1256,4.039,1329,3.711,1391,3.414,1407,2.325,1408,5.575,1423,1.988,1434,2.627,1441,2.107,1452,2.627,1467,2.76,1469,1.508,1471,2.045,1479,2.627,1481,4.648,1613,2.78,1671,3.414,1696,2.414,1715,2.513,1765,3.297,1830,5.546,1832,5.599,1834,5.133,1839,2.627,1861,2.627,1882,3.093,1935,2.325,1991,5.081,1993,3.858,1995,3.544,1999,4.572,2023,2.627,2069,5.081,2070,3.12,2071,6.662,2072,4.582,2073,2.635,2074,5.43,2075,5.43,2076,5.573,2077,5.638,2078,5.573,2079,5.983,2080,4.582,2081,5.599,2082,3.795,2083,3.795,2084,5.081,2085,4.582,2086,3.795,2087,4.582,2088,4.572,2089,4.582,2090,7.809,2091,3.795,2092,3.858,2093,3.414,2094,5.983,2095,4.582,2096,3.795,2097,5.081,2098,3.795,2099,3.795,2100,2.245,2101,2.627,2102,3.12,2103,4.582,2104,3.12,2105,5.43,2106,4.582,2107,3.12,2108,4.582,2109,2.627,2110,2.635,2111,3.12,2112,3.12,2113,3.12,2114,3.12,2115,3.12,2116,4.582,2117,2.76,2118,3.12,2119,4.582,2120,3.12,2121,3.12,2122,3.12,2123,2.92,2124,3.12,2125,3.12,2126,2.245,2127,3.12,2128,2.513,2129,3.12,2130,3.12,2131,3.12,2132,3.12,2133,3.12,2134,3.12,2135,3.12,2136,3.12,2137,3.12,2138,3.12,2139,3.12,2140,3.12,2141,3.12,2142,2.76,2143,5.43,2144,3.12,2145,2.76,2146,4.053,2147,2.76,2148,4.803,2149,5.293,2150,4.053,2151,2.76,2152,3.12,2153,3.12,2154,3.12,2155,4.803,2156,4.053,2157,4.803,2158,3.12,2159,3.12,2160,3.12,2161,3.12,2162,3.12,2163,4.053,2164,3.12,2165,3.12,2166,2.76,2167,3.12,2168,3.12,2169,2.76,2170,2.76,2171,3.12,2172,3.12]],["title/interfaces/ErrorBoundaryProps.html",[0,0.374,2081,3.7]],["body/interfaces/ErrorBoundaryProps.html",[0,0.455,2,0.078,3,0.054,4,0.032,5,0.027,7,0.367,8,2.233,10,1.74,11,0.027,12,0.053,13,1.029,22,0.05,23,0.006,24,2.523,28,0.616,29,0.388,32,2.576,34,1.496,35,2.13,36,1.915,42,1.292,43,0.895,44,1.444,45,1.188,46,1.578,47,0.997,49,0.037,50,1.31,70,1.676,71,0.898,73,1.438,74,1.271,75,1.518,77,2.122,78,2.248,83,1.578,86,2.946,87,2.724,88,2.698,90,3.435,91,3.744,93,1.87,94,1.351,95,3.265,103,3.167,105,2.804,107,2.397,108,1.828,110,3.34,113,0.003,114,0.003,120,0.665,126,1.361,177,1.228,194,1.33,224,0.824,236,2.576,238,2.576,248,2.122,249,2.835,257,2.183,263,1.078,270,3.346,273,2.837,284,2.397,285,2.482,286,2.482,333,2.959,351,2.233,385,1.787,387,2.397,496,2.248,531,2.946,570,1.436,572,1.915,601,1.962,602,2.183,675,3.465,692,2.637,711,2.821,722,2.873,736,2.19,742,1.962,852,1.436,861,4.605,872,1.676,875,2.469,886,1.228,889,1.518,890,4.227,918,3.827,921,2.982,922,3.024,974,3.595,982,1.749,1022,2.397,1041,2.946,1050,2.683,1094,2.804,1095,3.859,1096,2.903,1097,3.243,1098,3.243,1099,3.243,1100,4.118,1101,2.763,1102,3.243,1103,3.061,1104,3.243,1116,1.787,1118,1.749,1205,2.683,1215,2.946,1230,4.855,1256,2.248,1329,3.826,1391,2.482,1407,2.482,1408,5.667,1423,2.122,1434,2.804,1441,2.248,1452,2.804,1467,2.946,1469,1.61,1613,2.867,1671,3.58,1696,2.576,1715,2.683,1765,2.397,1830,5.659,1832,5.774,1834,5.269,1839,2.804,1861,2.804,1882,2.248,1935,2.482,1991,5.274,1993,4.045,1995,2.576,1999,4.745,2023,2.804,2069,4.496,2070,3.33,2071,6.541,2072,3.33,2073,1.915,2074,3.33,2075,3.33,2077,4.25,2079,3.33,2080,3.33,2081,5.274,2084,4.496,2085,3.33,2087,3.33,2088,4.045,2089,3.33,2090,7.681,2092,2.804,2093,2.482,2094,4.804,2095,3.33,2097,4.496,2100,2.397,2101,5.195,2102,6.17,2103,4.804,2104,3.33,2105,5.636,2106,4.804,2107,3.33,2108,4.804,2109,2.804,2110,2.763,2111,3.33,2112,3.33,2113,3.33,2114,3.33,2115,3.33,2116,4.804,2117,2.946,2118,3.33,2119,4.804,2120,3.33,2121,3.33,2122,3.33,2123,3.117,2124,3.33,2125,3.33,2126,2.397,2127,3.33,2128,2.683,2129,3.33,2130,3.33,2131,3.33,2132,3.33,2133,3.33,2134,3.33,2135,3.33,2136,3.33,2137,3.33,2138,3.33,2139,3.33,2140,3.33,2141,3.33,2142,2.946,2143,5.636,2144,3.33,2145,2.946,2146,4.25,2147,2.946,2148,4.986,2149,5.458,2150,4.25,2151,2.946,2152,3.33,2153,3.33,2154,3.33,2155,4.986,2156,4.25,2157,4.986,2158,3.33,2159,3.33,2160,3.33,2161,3.33,2162,3.33,2163,4.25,2164,3.33,2165,3.33,2166,2.946,2167,3.33,2168,3.33,2169,2.946,2170,2.946,2171,3.33,2172,3.33]],["title/interfaces/ErrorBoundaryState.html",[0,0.374,2097,3.7]],["body/interfaces/ErrorBoundaryState.html",[0,0.457,2,0.079,3,0.054,4,0.032,5,0.027,7,0.369,8,1.558,10,1.747,11,0.027,12,0.054,13,0.977,22,0.046,23,0.006,24,2.535,28,0.619,29,0.659,32,2.594,34,1.545,36,1.928,42,1.301,43,0.898,44,1.45,45,1.196,46,1.589,47,1.003,49,0.037,50,1.316,70,1.688,71,0.901,73,1.445,74,1.276,75,1.529,77,2.137,78,2.264,83,1.589,86,2.966,87,2.734,88,2.711,90,3.444,91,3.749,93,1.883,94,1.357,95,3.271,103,3.174,105,2.823,107,2.413,108,1.84,110,3.346,113,0.004,114,0.004,120,0.67,126,1.37,177,1.237,194,1.337,224,0.831,236,2.594,238,2.594,248,2.137,249,2.841,257,2.198,263,1.086,270,3.362,273,2.847,284,2.413,285,2.499,286,2.499,333,2.97,351,2.244,385,1.8,387,2.413,496,2.264,531,2.966,570,1.446,572,1.928,601,1.976,602,2.198,675,3.476,692,2.65,711,2.828,722,2.88,736,2.201,742,1.976,852,1.446,861,3.708,872,1.688,875,2.481,886,1.237,889,1.529,890,4.551,918,3.177,921,2.99,922,3.036,974,3.6,982,1.761,1022,2.413,1041,2.966,1050,2.701,1094,2.823,1095,3.866,1096,2.917,1097,3.259,1098,3.259,1099,3.259,1100,4.127,1101,2.776,1102,3.259,1103,3.076,1104,3.259,1116,1.8,1118,1.761,1205,2.701,1215,2.966,1230,4.428,1256,2.264,1329,3.838,1391,2.499,1407,2.499,1408,5.676,1423,2.137,1434,2.823,1441,2.264,1452,2.823,1467,2.966,1469,1.621,1613,2.876,1671,3.598,1696,2.594,1715,2.701,1765,2.413,1830,5.67,1832,5.792,1834,5.283,1839,2.823,1861,2.823,1882,2.264,1935,2.499,1991,5.295,1993,4.065,1995,2.594,1999,4.764,2023,2.823,2069,4.518,2070,3.353,2071,6.559,2072,3.353,2073,1.928,2074,3.353,2075,3.353,2077,4.271,2079,3.353,2080,3.353,2081,4.518,2084,4.518,2085,3.353,2087,3.353,2088,4.065,2089,3.353,2090,7.927,2092,2.823,2093,2.499,2094,4.828,2095,3.353,2097,5.295,2100,2.413,2101,2.823,2102,3.353,2103,4.828,2104,3.353,2105,5.658,2106,4.828,2107,3.353,2108,4.828,2109,2.823,2110,2.776,2111,3.353,2112,3.353,2113,3.353,2114,3.353,2115,3.353,2116,4.828,2117,2.966,2118,3.353,2119,4.828,2120,3.353,2121,3.353,2122,3.353,2123,3.138,2124,3.353,2125,3.353,2126,2.413,2127,3.353,2128,2.701,2129,3.353,2130,3.353,2131,3.353,2132,3.353,2133,3.353,2134,3.353,2135,3.353,2136,3.353,2137,3.353,2138,3.353,2139,3.353,2140,3.353,2141,3.353,2142,2.966,2143,5.658,2144,3.353,2145,2.966,2146,4.271,2147,2.966,2148,5.005,2149,5.475,2150,4.271,2151,2.966,2152,3.353,2153,3.353,2154,3.353,2155,5.005,2156,4.271,2157,5.005,2158,3.353,2159,3.353,2160,3.353,2161,3.353,2162,3.353,2163,4.271,2164,3.353,2165,3.353,2166,2.966,2167,3.353,2168,3.353,2169,2.966,2170,2.966,2171,3.353,2172,3.353]],["title/interfaces/ErrorMessageProps.html",[0,0.374,924,2.845]],["body/interfaces/ErrorMessageProps.html",[0,0.726,2,0.096,3,0.06,4,0.039,5,0.033,8,1.889,10,1.938,11,0.033,12,0.061,13,1.109,15,2.724,16,2.353,20,1.819,21,0.332,22,0.065,23,0.006,25,2.089,27,2.005,28,0.708,29,0.958,35,1.908,42,1.577,43,0.877,44,1.416,47,1.216,48,3.177,49,0.089,50,1.98,61,3.338,64,3.338,88,2.283,95,2.567,108,2.231,110,1.853,113,0.004,114,0.004,120,1.45,184,0.898,224,0.634,287,2.665,295,1.661,311,2.932,313,1.139,350,1.819,432,2.426,494,1.525,495,1.577,561,1.926,619,3.954,626,2.965,674,2.283,713,2.665,852,3.204,855,5.44,856,2.925,857,2.831,858,2.521,859,3.609,860,4.676,861,4.615,862,4.676,863,3.976,864,2.744,865,2.925,866,2.925,867,3.976,868,3.524,869,3.368,870,3.792,871,2.925,872,2.046,873,2.283,874,3.976,875,3.619,876,3.029,877,2.744,878,2.089,879,3.029,880,2.283,881,3.976,882,2.925,883,2.925,884,2.925,885,2.744,886,2.037,887,2.395,888,2.925,889,1.853,890,2.521,891,2.925,892,3.029,893,2.521,894,3.029,895,3.029,896,3.029,897,3.029,898,3.029,899,3.029,900,3.029,901,2.338,902,3.029,903,2.744,904,3.029,905,3.029,906,3.029,907,2.744,908,2.744,909,3.177,910,3.976,911,2.925,912,2.925,913,5.247,914,5.067,915,2.831,916,2.744,917,2.925,918,2.283,919,2.925,920,2.925,921,1.853,922,2.182,923,4.845,924,3.976,925,2.744,926,3.976,927,2.925,928,2.925,929,2.395,930,2.59,931,2.925,932,2.925]],["title/interfaces/ExtendedRenderOptions.html",[0,0.374,2173,3.954]],["body/interfaces/ExtendedRenderOptions.html",[0,0.419,2,0.07,3,0.029,4,0.043,5,0.024,7,0.404,10,1.368,11,0.024,12,0.049,13,0.997,16,1.982,20,1.334,21,0.211,22,0.051,23,0.006,24,1.565,27,2.607,29,0.83,34,1.438,35,1.029,40,4.595,41,1.264,43,1.205,44,1.499,47,1.582,49,0.088,54,4.258,68,2.401,71,1.175,72,1.309,73,1.871,74,1.351,94,1.842,113,0.003,114,0.003,120,1.055,126,2.16,132,0.899,135,1.176,147,1.632,153,0.718,161,1.91,162,1.85,164,1.486,194,0.825,202,1.262,207,1.019,213,2.457,217,1.5,224,0.662,244,1.285,245,1.945,249,1.24,263,2.025,309,1.24,313,1.351,314,1.441,315,1.954,346,2.547,351,1.385,353,1.5,361,2.199,451,1.245,493,2.02,494,1.982,495,1.156,497,1.714,505,2.076,506,1.748,526,2.221,542,3.04,543,2.51,544,2.79,545,2.79,549,2.012,550,2.79,561,1.412,562,2.306,564,3.768,573,2.601,574,2.401,575,2.637,587,1.849,593,1.756,597,2.79,606,3.747,614,2.076,616,5.477,641,1.899,643,1.309,675,1.674,711,1.285,742,2.61,744,2.401,771,1.801,843,2.02,852,1.91,869,1.6,889,1.359,918,3.811,963,1.385,982,3.073,1002,1.801,1017,3.427,1025,2.076,1027,3.919,1073,2.401,1081,3.768,1119,3.568,1125,2.306,1130,2.51,1145,1.674,1159,2.401,1181,1.636,1203,2.306,1214,3.368,1239,2.637,1256,3.569,1270,1.954,1324,2.981,1456,4.146,1460,2.076,1474,1.674,1527,2.79,1565,2.012,1566,2.401,1575,2.184,1714,2.79,1818,2.221,1838,2.488,1948,2.076,2173,5.286,2174,3.237,2175,4.146,2176,7.368,2177,7.57,2178,7.734,2179,5.852,2180,3.237,2181,4.81,2182,5.74,2183,5.74,2184,5.74,2185,2.79,2186,3.237,2187,3.237,2188,3.237,2189,3.237,2190,2.79,2191,2.637,2192,2.221,2193,4.81,2194,3.237,2195,4.81,2196,3.237,2197,4.81,2198,2.79,2199,3.237,2200,3.237,2201,3.237,2202,3.237,2203,3.237,2204,3.237,2205,3.237,2206,3.237,2207,4.81,2208,3.237,2209,3.237,2210,3.237,2211,3.237,2212,3.237,2213,5.852,2214,2.981,2215,3.73,2216,3.237,2217,4.43,2218,3.237,2219,3.237,2220,3.237,2221,4.81,2222,3.237,2223,3.237,2224,6.665,2225,4.81,2226,4.81,2227,3.237,2228,3.237,2229,7.116,2230,5.177,2231,3.237,2232,3.237,2233,6.355,2234,6.355,2235,6.355,2236,3.237,2237,2.51,2238,3.237,2239,2.51,2240,3.237,2241,3.237,2242,2.51,2243,3.237,2244,3.237,2245,2.637,2246,3.237,2247,2.61,2248,5.74,2249,3.237,2250,7.734,2251,3.237,2252,3.237,2253,3.237,2254,2.637,2255,3.237,2256,4.43,2257,3.237,2258,3.237,2259,5.286,2260,3.237,2261,6.355,2262,3.237,2263,4.43,2264,3.237,2265,4.43,2266,3.237,2267,3.237,2268,3.237,2269,4.81,2270,3.237,2271,3.237,2272,3.237,2273,3.237,2274,3.237,2275,3.237,2276,3.237,2277,3.237,2278,3.237,2279,2.981,2280,3.237,2281,3.237,2282,3.237,2283,3.237,2284,3.237,2285,3.237,2286,3.237,2287,4.81,2288,3.237,2289,3.237,2290,3.237,2291,2.981,2292,3.237,2293,2.981,2294,2.221,2295,2.981,2296,2.145]],["title/interfaces/ExtendedTheme.html",[0,0.374,2297,3.954]],["body/interfaces/ExtendedTheme.html",[0,0.528,2,0.097,3,0.04,4,0.04,5,0.033,8,1.916,10,1.273,11,0.033,12,0.075,22,0.033,23,0.006,24,3.556,28,0.529,43,1.075,44,1.813,47,1.891,49,0.07,61,2.491,64,2.491,71,1.062,72,1.81,74,1.149,77,4.752,78,3.765,97,4.934,103,3.465,113,0.004,114,0.004,122,1.546,140,2.315,171,2.783,207,0.948,224,0.416,244,1.777,249,1.715,264,2.557,282,2.966,535,4.315,599,2.491,852,2.405,864,2.783,918,3.55,959,3.717,962,1.916,966,3.444,974,3.883,1116,4.312,1145,3.132,1160,2.164,1388,3.471,1391,4.156,1393,2.429,1399,3.647,1407,5.556,1408,6.215,1423,4.028,1447,6.597,1766,4.696,1936,3.189,1993,3.471,1999,4.696,2023,3.471,2101,3.471,2142,3.647,2146,3.647,2147,4.934,2148,5.592,2149,6.452,2150,5.592,2151,5.592,2155,6.452,2156,6.452,2157,6.8,2163,3.647,2166,3.647,2185,5.219,2198,5.915,2215,3.471,2297,6.772,2298,4.476,2299,7.354,2300,4.476,2301,4.476,2302,6.056,2303,4.476,2304,6.056,2305,4.476,2306,3.858,2307,6.056,2308,6.056,2309,4.476,2310,6.056,2311,4.476,2312,7.354,2313,4.476,2314,7.92,2315,8.439,2316,4.476,2317,4.476,2318,4.476,2319,4.476,2320,4.476,2321,4.476,2322,4.476,2323,4.476,2324,4.476,2325,4.476,2326,4.476,2327,4.476,2328,4.476,2329,4.476,2330,4.476,2331,4.476,2332,4.476,2333,4.476,2334,4.476,2335,4.476,2336,4.476,2337,4.476,2338,4.476,2339,4.476,2340,4.476,2341,4.476,2342,4.476,2343,4.476,2344,4.476,2345,4.476,2346,4.122,2347,4.476]],["title/interfaces/FormProviderWrapperProps.html",[0,0.374,2348,4.293]],["body/interfaces/FormProviderWrapperProps.html",[0,0.422,2,0.105,3,0.043,4,0.043,5,0.036,10,1.813,11,0.036,12,0.065,13,0.999,20,3.248,21,0.262,22,0.062,23,0.006,28,0.896,35,2.412,36,3.376,40,3.459,41,1.268,43,0.932,44,1.86,49,0.073,51,5.194,71,1.017,74,0.917,113,0.004,114,0.004,224,0.753,245,2.578,284,3.203,287,2.918,314,1.791,315,4.578,327,4.016,424,2.56,448,2.56,452,3.113,456,3.741,527,2.109,535,2.837,570,1.919,583,2.109,599,2.69,719,3.748,800,2.5,801,4.452,805,3.317,861,4.758,918,4.333,1081,3.376,1125,6.184,1133,2.955,1142,6.148,1145,3.689,1160,3.449,1175,5.291,1176,7.306,1193,5.194,1196,2.837,1203,5.403,1243,4.943,1288,4.834,1606,2.389,1630,3.641,1766,5.531,1794,2.837,1882,3.005,1936,5.081,1995,3.443,2073,2.56,2088,3.748,2093,4.375,2109,5.531,2175,6.148,2294,4.375,2348,7.133,2349,5.414,2350,9.068,2351,7.716,2352,6.569,2353,5.871,2354,8.495,2355,8.83,2356,5.871,2357,5.414,2358,5.414,2359,7.141,2360,7.99,2361,5.414,2362,4.166,2363,5.414,2364,4.452,2365,5.414,2366,4.834,2367,4.729,2368,5.414,2369,5.414,2370,4.452,2371,5.414,2372,5.414,2373,4.834,2374,5.871,2375,5.414,2376,5.414,2377,4.834,2378,5.414,2379,5.414,2380,5.414,2381,5.414,2382,5.414]],["title/interfaces/GetDocumentSasRequest.html",[0,0.374,2383,3.058]],["body/interfaces/GetDocumentSasRequest.html",[0,0.748,2,0.124,3,0.051,4,0.051,5,0.043,7,0.402,11,0.043,12,0.073,21,0.328,22,0.058,23,0.006,49,0.089,113,0.005,114,0.005,117,1.847,118,2.19,133,1.739,148,2.117,153,1.575,166,2.493,177,1.942,190,1.626,202,3.011,361,2.719,797,2.826,837,3.95,1579,4.296,1717,4.414,1718,4.296,1723,3.789,1725,2.707,1728,4.196,1730,3.95,1732,3.667,1736,3.667,1738,3.667,1739,3.667,1740,3.667,1742,3.667,1792,3.523,2383,5.057,2384,4.073,2385,5.298,2386,5.011,2387,6.158,2388,3.555,2389,4.073,2390,4.704,2391,3.924,2392,4.242,2393,4.073,2394,4.073,2395,4.073]],["title/interfaces/GetDocumentSasResponse.html",[0,0.374,2395,3.058]],["body/interfaces/GetDocumentSasResponse.html",[0,0.748,2,0.124,3,0.051,4,0.051,5,0.043,7,0.402,11,0.043,12,0.073,21,0.328,22,0.058,23,0.006,49,0.089,113,0.005,114,0.005,117,1.766,118,2.19,133,1.819,148,2.117,153,1.575,166,2.493,177,1.942,190,1.626,202,3.011,361,2.719,797,2.826,837,4.619,1579,4.296,1717,4.414,1718,4.296,1723,3.789,1725,2.707,1728,4.196,1730,3.95,1732,3.667,1736,3.667,1738,3.667,1739,3.667,1740,3.667,1742,3.667,1792,3.523,2383,4.073,2384,4.073,2385,5.298,2386,5.011,2387,5.266,2388,3.555,2389,4.073,2390,4.704,2391,3.924,2392,4.242,2393,4.073,2394,4.073,2395,5.057]],["title/interfaces/GetLeadsRequest.html",[0,0.374,2396,4.293]],["body/interfaces/GetLeadsRequest.html",[0,0.499,2,0.07,3,0.028,4,0.06,5,0.024,7,0.227,11,0.024,12,0.049,13,1.064,21,0.284,22,0.061,23,0.006,24,1.558,28,0.38,41,1.537,43,1.075,49,0.075,66,2.222,71,1.113,74,1.492,94,1.482,98,1.592,113,0.003,114,0.003,117,1.31,118,2.895,120,0.592,123,1.558,125,2.45,131,1.525,132,1.412,133,1.771,135,2.463,139,1.379,147,2.268,148,1.89,152,1.113,153,1.503,154,1.706,166,1.684,173,2.829,182,1.836,183,1.407,186,1.592,187,1.592,188,2.807,189,2.628,190,0.916,192,3.559,194,0.821,196,2.599,202,2.643,207,1.601,224,0.703,248,1.89,249,2.193,263,0.961,270,2.066,276,2.193,295,2.154,311,2.463,313,0.91,314,1.701,316,4.246,318,2.135,319,2.135,321,2.066,322,4.703,323,2.135,324,2.498,333,1.558,346,3.896,373,2.548,377,3.074,385,1.592,424,1.706,431,2.269,432,2.564,437,2.066,439,2.498,448,1.706,451,0.631,492,2.211,493,1.353,494,1.113,525,4.246,526,3.289,527,2.766,528,1.793,529,2.003,534,2.967,537,2.967,564,1.706,570,1.279,573,1.234,583,1.406,586,1.869,599,3.185,600,2.967,661,2.498,662,2.472,670,3.176,722,1.939,729,4.875,734,1.558,761,2.39,774,2.135,852,1.903,868,1.666,869,2.829,870,3.185,995,1.493,1011,1.493,1127,4.414,1139,3.222,1146,5.787,1154,3.556,1155,2.967,1161,3.222,1214,1.525,1230,3.559,1553,5.255,1566,4.703,1567,4.663,1568,4.663,1569,4.439,1570,4.663,1575,1.463,1580,3.717,1592,3.222,1606,2.829,1607,4.793,1609,2.211,1613,2.9,1620,5.075,1622,4.793,1626,2.967,1638,2.625,1721,2.211,2073,1.706,2190,5.464,2245,2.625,2247,1.748,2294,2.211,2396,5.724,2397,3.609,2398,7.101,2399,7.101,2400,3.556,2401,2.39,2402,3.609,2403,5.369,2404,3.609,2405,3.609,2406,4.078,2407,6.341,2408,2.967,2409,3.222,2410,4.793,2411,7.591,2412,3.609,2413,3.609,2414,3.609,2415,3.609,2416,2.625,2417,3.609,2418,3.609,2419,6.241,2420,3.609,2421,3.609,2422,3.609,2423,3.609,2424,3.609,2425,3.222,2426,4.793,2427,3.222,2428,3.222,2429,3.609,2430,3.609,2431,3.222,2432,3.609,2433,2.777,2434,2.39,2435,2.39,2436,6.241,2437,2.39,2438,3.609,2439,5.272,2440,3.222,2441,5.369,2442,5.724,2443,7.559,2444,4.131,2445,3.609,2446,2.498,2447,3.609,2448,7.101,2449,3.609,2450,3.609,2451,3.609,2452,6.241,2453,5.272,2454,5.369,2455,3.609,2456,2.498,2457,3.609,2458,3.609,2459,3.609,2460,3.609,2461,5.369,2462,3.609,2463,3.609,2464,3.609,2465,3.609,2466,3.609,2467,2.211,2468,5.369,2469,4.793,2470,5.369,2471,3.222,2472,3.609,2473,3.222,2474,3.609,2475,3.222,2476,3.609,2477,3.609,2478,3.609,2479,3.222,2480,2.39,2481,2.39,2482,2.498,2483,2.39,2484,3.609,2485,5.369,2486,3.609,2487,5.369,2488,3.609,2489,3.609,2490,3.609,2491,5.369,2492,3.609,2493,3.609,2494,3.609,2495,3.609,2496,3.609,2497,3.609,2498,3.609,2499,3.609,2500,3.609,2501,3.609,2502,3.222,2503,2.625]],["title/interfaces/GetProfileResponse.html",[0,0.374,2504,3.185]],["body/interfaces/GetProfileResponse.html",[0,0.718,2,0.111,3,0.045,4,0.045,5,0.038,7,0.361,11,0.038,12,0.068,13,0.676,21,0.33,22,0.049,23,0.006,29,0.833,49,0.084,113,0.004,114,0.004,117,1.174,118,1.965,120,0.943,132,1.45,133,1.748,142,2.428,143,2.428,153,1.782,159,2.073,162,1.663,164,1.328,175,2.584,176,3.427,184,0.803,220,3.403,224,0.616,295,1.93,309,1.965,313,1.61,314,2.065,330,3.01,431,3.137,451,1.64,456,3.01,457,2.716,494,2.775,495,2.991,561,2.892,587,2.93,734,2.48,736,2.154,756,5.33,810,3.189,853,3.189,893,2.93,901,2.716,1002,2.854,1474,2.653,1575,2.329,1606,2.535,1613,2.836,1630,2.93,1733,3.805,2504,4.916,2505,3.977,2506,5.692,2507,4.431,2508,5.325,2509,3.977,2510,6.579,2511,3.977,2512,3.977,2513,5.139,2514,3.977,2515,5.139,2516,5.139,2517,3.977,2518,3.977,2519,3.52,2520,3.52,2521,3.805,2522,3.977,2523,3.805,2524,3.654,2525,3.977,2526,3.805]],["title/interfaces/GetQuotationsRequest.html",[0,0.374,2527,2.946]],["body/interfaces/GetQuotationsRequest.html",[0,0.737,2,0.115,3,0.047,4,0.047,5,0.04,7,0.375,10,1.515,11,0.04,12,0.07,13,1.146,21,0.332,22,0.062,23,0.006,41,1.06,49,0.088,113,0.005,114,0.005,117,1.554,133,1.53,148,2.478,153,1.844,160,2.281,161,2.697,166,2.385,177,1.81,182,2.041,183,1.993,184,0.983,186,4.018,188,2.955,190,1.931,451,1.044,465,3.044,691,2.892,995,2.47,1015,3.313,1092,4.501,1145,2.756,1267,3.547,1335,3.313,1558,3.044,1575,2.42,1576,3.538,1725,2.522,2527,4.66,2528,3.797,2529,5.839,2530,5.508,2531,3.418,2532,3.953,2533,4.501,2534,3.685,2535,5.038,2536,3.953,2537,5.325,2538,3.953,2539,4.838,2540,3.953,2541,3.953,2542,3.953,2543,3.953,2544,3.953,2545,3.657,2546,3.953,2547,3.953,2548,3.953,2549,3.953,2550,3.953,2551,3.953,2552,3.657,2553,3.657,2554,3.953]],["title/interfaces/GetServicesRequest.html",[0,0.374,2555,3.498]],["body/interfaces/GetServicesRequest.html",[0,0.715,2,0.129,3,0.053,4,0.053,5,0.045,7,0.42,11,0.045,12,0.075,13,1.151,21,0.334,22,0.066,23,0.006,29,0.918,49,0.084,113,0.005,114,0.005,161,2.373,182,2.289,183,1.754,184,0.947,188,2.172,196,2.714,224,0.678,313,1.384,314,1.831,451,1.17,486,4.28,982,3.807,1002,4.059,1004,3.832,1460,3.832,1550,4.678,1575,2.714,2237,6.519,2239,5.656,2242,4.634,2555,5.942,2556,5.15,2557,7.246,2558,5.15,2559,4.868,2560,4.868]],["title/interfaces/GetTicketByIdResponse.html",[0,0.374,178,2.669]],["body/interfaces/GetTicketByIdResponse.html",[0,0.725,2,0.077,3,0.031,4,0.031,5,0.026,7,0.573,11,0.026,12,0.053,21,0.331,22,0.061,23,0.006,28,0.607,34,0.717,41,1.463,45,1.165,49,0.084,113,0.003,114,0.003,115,2.205,116,2.274,117,1.519,118,1.97,119,2.141,120,1.514,121,4.658,122,2.813,123,2.927,124,2.35,125,3.441,126,1.936,127,4.715,128,3.602,129,4.007,130,3.763,131,1.679,132,1.131,133,1.784,134,3.299,135,1.87,136,2.274,137,2.274,138,2.336,139,2.59,140,2.66,141,2.35,142,3.142,143,3.677,144,4.45,145,4.4,146,3.602,147,2.004,148,2.261,149,5.119,150,4.007,151,3.281,152,2.619,153,1.827,154,4.193,155,4.011,156,3.552,157,4.382,158,4.558,159,2.516,160,3.324,161,2.919,162,1.291,163,3.409,164,2.05,165,4.671,166,2.476,167,4.4,168,3.653,169,2.026,170,2.35,171,2.205,172,4.007,173,2.542,174,4.011,175,1.383,176,2.66,177,1.747,178,3.198,179,2.274,180,2.205,181,3.281,182,2.543,183,1.948,184,0.85,185,2.08,186,3.281,187,2.991,188,2.2,189,1.267,190,1.009,191,1.793,192,2.205,193,2.205,194,0.904,195,1.878,196,1.611,197,2.205,198,3.077,199,2.35,200,2.35,201,2.35,202,1.383,203,1.834,204,2.081,205,2.35,206,2.274,207,0.751,208,2.205,209,2.35,210,2.274,211,2.205,212,2.35,213,1.518,214,1.715,215,2.35,216,2.274,217,2.384,218,2.274,219,1.753,220,2.384,221,2.542,222,1.793,223,2.081,224,0.478,225,1.924,226,2.35,227,1.359]],["title/interfaces/GetTicketsResponse.html",[0,0.374,180,2.669]],["body/interfaces/GetTicketsResponse.html",[0,0.73,2,0.08,3,0.033,4,0.033,5,0.028,7,0.539,11,0.028,12,0.054,21,0.327,22,0.057,23,0.006,28,0.625,34,0.745,41,1.482,45,1.211,49,0.085,113,0.004,114,0.004,115,2.292,116,2.364,117,1.546,118,2.026,119,2.225,120,1.51,121,4.642,122,2.835,123,2.991,124,2.443,125,3.471,126,1.99,127,4.449,128,3.356,129,3.734,130,3.846,131,1.745,132,1.156,133,1.827,134,3.392,135,1.922,136,2.364,137,2.364,138,2.402,139,2.264,140,2.735,141,2.443,142,2.928,143,3.525,144,3.966,145,4.099,146,3.356,147,1.922,148,2.015,149,4.88,150,3.734,151,3.057,152,2.711,153,1.741,154,3.79,155,3.505,156,3.104,157,3.846,158,4.371,159,2.456,160,3.283,161,2.456,162,1.328,163,3.505,164,1.929,165,3.505,166,2.616,167,4.742,168,4.32,169,2.105,170,2.443,171,2.292,172,3.734,173,3.057,174,3.505,175,1.437,176,1.906,177,1.252,178,2.292,179,3.392,180,3.288,181,3.681,182,2.939,183,2.304,184,0.929,185,2.502,186,3.879,187,3.537,188,2.788,189,1.317,190,1.048,191,1.863,192,2.292,193,2.292,194,0.94,195,1.952,196,1.674,197,2.292,198,3.133,199,2.443,200,2.443,201,2.443,202,1.437,203,1.906,204,2.163,205,2.443,206,2.364,207,0.781,208,2.292,209,2.443,210,2.364,211,2.292,212,2.443,213,1.578,214,1.782,215,2.443,216,2.364,217,2.452,218,2.364,219,1.822,220,2.452,221,2.614,222,1.863,223,2.163,224,0.492,225,2,226,2.443,227,1.412]],["title/interfaces/InfoTabProps.html",[0,0.374,2561,4.293]],["body/interfaces/InfoTabProps.html",[0,0.403,2,0.1,3,0.055,4,0.041,5,0.035,10,2.119,11,0.052,12,0.063,16,2.41,21,0.274,22,0.035,23,0.006,25,3.302,28,0.546,34,1.251,41,1.231,43,1.241,44,1.758,45,1.519,47,1.706,49,0.047,51,5.042,71,1.148,72,3.013,74,1.55,75,1.941,85,3.848,113,0.004,114,0.004,117,1.058,133,1.042,147,2.435,148,2.435,166,2.174,177,2.102,207,0.979,221,3.448,224,0.693,225,2.509,270,2.965,273,2.143,313,0.877,314,1.95,333,2.236,350,3.2,373,2.058,431,2.188,451,1.212,535,2.713,542,3.946,570,2.458,573,1.771,583,2.017,586,1.803,601,2.509,602,2.791,643,3.142,662,2.414,692,2.337,751,3.173,875,2.929,886,1.57,962,3.189,963,1.979,966,2.822,982,3.756,1004,3.969,1078,3.128,1082,2.337,1083,2.285,1084,2.337,1108,4.258,1137,3.985,1140,3.985,1141,3.585,1145,2.391,1157,2.874,1181,2.337,1224,4.624,1269,3.767,1294,3.585,1458,3.173,1673,3.767,1699,3.43,1700,3.585,1711,4.247,1712,3.985,1802,5.042,1803,3.767,1805,3.43,2005,4.624,2446,3.585,2502,4.624,2561,6.19,2562,5.179,2563,5.179,2564,4.624,2565,4.624,2566,3.767,2567,5.179,2568,5.179,2569,5.179,2570,5.179,2571,5.179,2572,5.179,2573,4.258,2574,5.179,2575,5.179,2576,7.815,2577,3.848,2578,5.179,2579,7.815,2580,5.179,2581,3.43,2582,5.179,2583,4.258,2584,5.334,2585,4.258,2586,5.179,2587,4.258,2588,5.179,2589,5.179,2590,4.258,2591,4.258,2592,2.641,2593,4.591,2594,3.43,2595,5.179,2596,5.179,2597,5.179,2598,5.179,2599,4.258,2600,5.179,2601,5.179,2602,5.179]],["title/interfaces/KycDocUploadParams.html",[0,0.374,2603,3.498]],["body/interfaces/KycDocUploadParams.html",[0,0.331,2,0.052,3,0.021,4,0.021,5,0.055,7,0.167,11,0.018,12,0.039,13,0.973,21,0.294,22,0.06,23,0.006,29,0.407,34,0.767,35,2.461,36,2.01,41,1.47,42,0.851,43,1.058,49,0.064,50,0.953,65,1.231,66,1.104,68,1.766,69,1.578,71,1.123,74,1.469,94,1.399,113,0.003,114,0.003,117,0.545,122,2.172,132,0.445,135,1.963,138,1.724,139,2.026,147,1.079,148,2.335,152,1.311,159,0.745,162,1.578,166,0.836,183,0.699,184,0.518,189,0.851,190,1.536,194,0.968,202,3.018,204,1.397,207,1.675,217,3.355,219,1.177,224,0.801,252,2.793,254,1.231,264,3.085,273,1.104,276,2.069,291,2.704,295,2.781,333,1.151,338,1.325,346,2.507,353,1.76,361,2.999,410,1.325,424,1.261,425,1.261,429,1.36,430,2.107,431,1.127,432,0.963,435,1.527,437,3.464,440,1.634,448,2.01,449,4.122,451,1.156,457,1.261,458,1.48,466,2.943,467,1.527,473,2.36,486,2.228,506,1.38,507,1.397,515,2.393,518,1.397,564,2.86,570,2.874,572,1.261,573,2.527,579,1.696,583,3.081,586,2.822,588,2.704,593,1.292,599,4.027,606,3.587,627,3.249,630,1.963,638,2.605,643,2.185,646,2.704,656,1.397,662,2.753,683,1.325,689,2.34,692,2.73,693,1.578,705,3.249,707,3.493,711,2.497,722,1.915,734,1.151,736,1,761,1.766,771,1.325,794,1.527,797,1.177,798,2.669,809,1.261,829,1.578,831,3.91,832,4.897,833,4.796,834,1.634,835,2.605,836,5.021,837,1.325,838,3.58,839,4.372,842,1.578,843,2.964,852,0.945,1011,1.76,1077,2.943,1103,2.228,1105,2.943,1163,1.203,1177,1.48,1196,1.397,1214,1.127,1220,1.766,1230,2.36,1237,1.527,1270,2.291,1274,2.36,1285,1.94,1436,3.137,1469,1.69,1473,4.967,1474,1.231,1476,2.704,1488,1.696,1507,2.704,1606,2.669,1613,1.019,1687,2.944,1716,1.696,1718,3.006,1719,1.634,1721,1.634,1728,3.462,1730,4.027,1763,1.766,1792,2.357,1794,1.397,1805,1.766,1809,1.48,1838,1.231,1877,1.94,1907,1.578,1933,1.94,1935,3.707,1956,1.94,2110,1.261,2192,3.249,2247,1.292,2386,4.858,2388,2.943,2416,1.94,2446,4.188,2456,1.846,2467,2.605,2503,1.94,2507,1.437,2581,1.766,2603,3.857,2604,1.94,2605,5.419,2606,1.94,2607,1.766,2608,2.052,2609,2.052,2610,1.94,2611,1.766,2612,1.94,2613,3.093,2614,2.052,2615,2.052,2616,2.052,2617,2.052,2618,2.052,2619,2.052,2620,2.052,2621,3.093,2622,2.944,2623,2.944,2624,3.857,2625,6.557,2626,2.944,2627,2.052,2628,2.052,2629,2.052,2630,2.052,2631,1.846,2632,3.093,2633,1.846,2634,3.857,2635,1.766,2636,1.94,2637,1.94,2638,3.464,2639,1.766,2640,1.94,2641,1.94,2642,1.94,2643,1.94,2644,1.94,2645,1.696,2646,2.052,2647,2.052,2648,3.272,2649,2.052,2650,2.052,2651,2.052,2652,2.052,2653,3.512,2654,1.94,2655,2.052,2656,6.238,2657,2.052,2658,2.052,2659,2.052,2660,2.052,2661,2.052,2662,2.052,2663,2.052,2664,1.94,2665,2.052,2666,2.052,2667,2.944,2668,1.94,2669,4.08,2670,4.08,2671,2.052,2672,3.272,2673,2.052,2674,3.272,2675,2.052,2676,3.272,2677,3.272,2678,1.94,2679,2.052,2680,2.052,2681,3.272,2682,1.94,2683,3.093,2684,2.944,2685,4.08,2686,3.857,2687,1.94,2688,1.846,2689,3.272,2690,4.655,2691,6.582,2692,3.272,2693,2.052,2694,5.686,2695,2.052,2696,2.052,2697,1.846,2698,2.052,2699,2.052,2700,4.655,2701,3.272,2702,4.655,2703,2.052,2704,2.052,2705,2.052,2706,2.052,2707,2.052,2708,3.272,2709,1.846,2710,1.94,2711,2.052,2712,2.052,2713,5.419,2714,1.94,2715,4.08,2716,4.08,2717,4.08,2718,3.272,2719,2.052,2720,1.696,2721,1.846,2722,2.052,2723,2.816,2724,2.052,2725,3.857,2726,1.846,2727,2.052,2728,2.052,2729,1.94,2730,2.052,2731,2.052,2732,3.272,2733,2.052,2734,1.94,2735,2.052,2736,2.052,2737,1.94,2738,2.052,2739,2.052,2740,2.052,2741,2.052,2742,2.052,2743,5.029,2744,2.052,2745,1.94,2746,3.857,2747,2.052,2748,2.052,2749,2.052,2750,2.052,2751,2.052,2752,1.94,2753,2.052,2754,2.052,2755,2.052,2756,2.052,2757,3.272,2758,1.94,2759,2.052,2760,5.419,2761,1.94,2762,2.052,2763,1.94,2764,2.052]],["title/interfaces/KycDocView.html",[0,0.374,1708,3.498]],["body/interfaces/KycDocView.html",[0,0.484,2,0.085,3,0.035,4,0.035,5,0.029,7,0.277,11,0.029,12,0.071,13,0.918,16,1.362,21,0.28,22,0.061,23,0.006,24,1.907,29,0.817,34,1.298,35,2.216,41,1.386,43,1.019,44,0.931,45,1.823,49,0.08,50,0.99,65,2.87,66,1.828,69,2.614,71,1.161,74,1.579,113,0.004,114,0.004,132,1.2,133,1.25,135,2.334,147,1.578,148,2.421,153,1.863,162,0.99,173,1.949,185,2.245,189,1.983,194,1.415,198,1.828,202,2.717,207,1.175,227,1.511,263,1.655,273,1.828,276,2.126,291,3.954,311,2.017,312,2.81,314,1.393,351,2.748,365,2.707,432,1.595,449,1.949,451,1.087,493,1.656,506,2.017,512,2.315,542,3.69,572,2.089,643,1.595,742,2.14,747,4.521,847,2.53,850,1.828,929,2.14,1077,2.452,1078,2.805,1133,2.572,1150,5.231,1160,2.684,1214,1.867,1579,4.086,1587,3.808,1590,4.304,1706,3.4,1708,5.677,1717,4.865,1718,4.354,1719,2.707,1721,5.647,1725,2.627,1728,4.104,1730,4.519,1732,3.559,1736,3.559,1738,3.559,1739,4.118,1740,4.118,1742,3.559,1780,3.214,1792,3.414,1797,5.677,1798,6.205,1822,3.4,2110,2.939,2367,2.926,2390,5.185,2391,2.707,2573,3.633,2607,2.926,2709,4.304,2723,2.926,2765,3.945,2766,5.55,2767,7.343,2768,6.763,2769,7.617,2770,5.55,2771,3.945,2772,3.945,2773,5.111,2774,5.677,2775,6.968,2776,5.55,2777,5.55,2778,3.945,2779,3.945,2780,3.945,2781,6.005,2782,3.945,2783,3.945,2784,3.945,2785,3.4,2786,3.945,2787,3.945,2788,3.945,2789,3.945,2790,3.945,2791,3.945,2792,3.945,2793,3.945,2794,2.926,2795,3.945,2796,3.945,2797,3.945,2798,3.945,2799,3.945,2800,3.945,2801,3.945,2802,3.945,2803,3.945,2804,3.945,2805,5.55,2806,5.55,2807,2.707,2808,3.945,2809,3.945,2810,7.617,2811,3.633,2812,6.421,2813,3.214,2814,3.945,2815,3.945,2816,3.945,2817,3.945,2818,3.945,2819,3.945]],["title/interfaces/KycDocument.html",[0,0.374,2390,2.845]],["body/interfaces/KycDocument.html",[0,0.742,2,0.119,3,0.049,4,0.049,5,0.041,7,0.386,11,0.041,12,0.071,21,0.332,22,0.064,23,0.006,49,0.089,113,0.005,114,0.005,117,1.735,118,2.105,133,1.708,148,2.065,153,1.82,166,2.432,177,2.352,190,1.563,202,3.267,361,2.652,797,2.716,837,3.853,1579,4.219,1717,4.948,1718,4.566,1723,3.641,1725,2.601,1728,4.147,1730,4.566,1732,3.524,1736,3.524,1738,3.524,1739,3.524,1740,3.524,1742,3.524,1792,3.58,2383,3.914,2384,3.914,2385,4.752,2386,4.804,2387,6.086,2388,3.416,2389,3.914,2390,5.024,2391,5.462,2392,5.904,2393,3.914,2394,3.914,2395,3.914]],["title/classes/KycUploadError.html",[1469,1.911,2626,3.329]],["body/classes/KycUploadError.html",[0,0.335,3,0.021,4,0.021,5,0.051,7,0.17,11,0.018,12,0.039,13,0.506,21,0.292,22,0.054,23,0.006,29,0.412,34,0.776,35,2.312,36,2.034,41,1.476,42,0.863,43,1.063,49,0.065,50,0.964,65,1.249,66,1.12,68,1.792,69,1.601,71,1.125,74,1.474,94,1.41,113,0.003,114,0.003,117,0.553,122,2.185,132,0.451,135,1.979,138,1.744,139,2.046,147,1.092,148,2.252,152,1.326,159,0.756,162,1.588,166,0.849,183,0.709,184,0.523,189,0.863,190,1.549,194,0.979,202,2.894,204,1.418,207,1.68,217,3.37,219,1.194,224,0.811,252,2.817,254,1.249,264,3.11,273,1.12,276,2.086,291,2.736,295,2.793,333,1.168,338,1.344,346,2.531,353,1.78,361,3.009,410,1.344,424,1.279,425,1.279,429,1.38,430,2.127,431,1.143,432,0.977,435,1.549,437,3.493,440,1.658,448,2.034,449,4.112,451,1.239,457,1.279,458,1.502,466,2.972,467,1.549,473,2.388,506,1.396,507,1.418,515,2.416,518,1.418,564,2.884,570,2.887,572,1.279,573,2.542,579,1.721,583,3.095,586,2.835,588,2.73,593,1.311,599,4.045,606,3.439,627,3.28,630,1.986,638,2.635,643,2.203,646,2.736,656,1.418,662,2.766,683,1.344,689,2.362,692,3.004,693,1.601,705,4.553,707,3.513,711,2.513,722,1.933,734,1.168,736,1.014,761,1.792,771,1.344,794,1.549,797,1.194,798,2.692,809,1.279,829,1.601,831,3.938,832,4.917,833,3.938,834,1.658,835,2.635,836,4.842,837,1.344,838,3.225,839,4.397,842,1.601,843,2.978,852,1.525,1011,1.78,1077,4.125,1103,2.254,1105,2.972,1163,1.221,1177,1.502,1196,1.418,1214,1.143,1220,1.792,1230,2.388,1237,1.549,1270,2.318,1274,2.388,1285,1.968,1436,3.168,1469,1.709,1471,1.458,1473,4.989,1474,1.249,1476,4.508,1479,1.873,1481,2.972,1488,1.721,1507,2.736,1606,2.692,1613,1.034,1687,2.978,1716,1.721,1718,2.137,1719,1.658,1721,1.658,1728,3.353,1730,3.692,1763,1.792,1792,2.086,1794,1.418,1805,1.792,1809,1.502,1838,1.249,1877,1.968,1907,1.601,1933,1.968,1935,3.737,1956,1.968,2110,1.279,2192,3.28,2247,1.311,2386,4.871,2388,2.972,2416,1.968,2446,4.223,2456,1.873,2467,2.635,2503,1.968,2507,1.458,2581,1.792,2603,3.129,2604,1.968,2605,4.12,2606,1.968,2607,1.792,2608,2.082,2609,2.082,2610,1.968,2611,1.792,2612,1.968,2613,3.129,2614,2.082,2615,2.082,2616,2.082,2617,2.082,2618,2.082,2619,2.082,2620,2.082,2621,3.129,2622,2.978,2623,2.978,2624,3.894,2625,6.744,2626,3.706,2627,3.31,2628,2.082,2629,2.082,2630,2.082,2631,1.873,2632,3.129,2633,1.873,2634,3.894,2635,1.792,2636,1.968,2637,1.968,2638,3.493,2639,1.792,2640,1.968,2641,1.968,2642,1.968,2643,1.968,2644,1.968,2645,1.721,2646,2.082,2647,2.082,2648,3.31,2649,2.082,2650,2.082,2651,2.082,2652,2.082,2653,3.546,2654,1.968,2655,2.082,2656,6.265,2657,2.082,2658,2.082,2659,2.082,2660,2.082,2661,2.082,2662,2.082,2663,2.082,2664,1.968,2665,2.082,2666,2.082,2667,2.978,2668,1.968,2669,4.12,2670,4.12,2671,2.082,2672,3.31,2673,2.082,2674,3.31,2675,2.082,2676,3.31,2677,3.31,2678,1.968,2679,2.082,2680,2.082,2681,3.31,2682,1.968,2683,3.129,2684,2.978,2685,4.12,2686,3.894,2687,1.968,2688,1.873,2689,3.31,2690,4.694,2691,6.606,2692,3.31,2693,2.082,2694,5.718,2695,2.082,2696,2.082,2697,1.873,2698,2.082,2699,2.082,2700,4.694,2701,3.31,2702,4.694,2703,2.082,2704,2.082,2705,2.082,2706,2.082,2707,2.082,2708,3.31,2709,1.873,2710,1.968,2711,2.082,2712,2.082,2713,5.454,2714,1.968,2715,4.12,2716,4.12,2717,4.12,2718,3.31,2719,2.082,2720,1.721,2721,1.873,2722,2.082,2723,2.849,2724,2.082,2725,3.894,2726,1.873,2727,2.082,2728,2.082,2729,1.968,2730,2.082,2731,2.082,2732,3.31,2733,2.082,2734,1.968,2735,2.082,2736,2.082,2737,1.968,2738,2.082,2739,2.082,2740,2.082,2741,2.082,2742,2.082,2743,5.053,2744,2.082,2745,1.968,2746,3.894,2747,2.082,2748,2.082,2749,2.082,2750,2.082,2751,2.082,2752,1.968,2753,2.082,2754,2.082,2755,2.082,2756,2.082,2757,3.31,2758,1.968,2759,2.082,2760,5.454,2761,1.968,2762,2.082,2763,1.968,2764,2.082,2820,4.302,2821,2.706]],["title/interfaces/Lead.html",[0,0.374,147,1.221]],["body/interfaces/Lead.html",[0,0.704,2,0.104,3,0.056,4,0.07,5,0.036,7,0.553,11,0.036,12,0.065,13,1.154,21,0.337,22,0.067,23,0.006,34,1.527,41,1.564,49,0.08,113,0.004,114,0.004,117,1.096,118,1.835,132,0.895,133,1.079,135,2.935,146,2.599,147,2.406,153,1.676,161,3.001,202,2.947,207,1.014,249,2.72,263,1.428,313,0.909,314,1.202,451,0.938,494,2.189,495,1.711,561,3.43,562,5.383,729,4.873,797,2.367,869,3.51,982,2.316,1154,3.553,1181,3.972,1214,2.267,1217,3.903,1270,3.825,1413,3.412,1461,3.714,1552,3.903,1553,5.86,1554,3.714,1555,3.903,1556,3.903,1557,3.903,1558,2.736,1559,3.714,1560,3.903,1561,3.714,1562,3.714,1563,3.903,1564,6.157,1565,2.978,1566,5.606,1567,5.785,1568,5.785,1569,5.506,1570,5.785,1571,6.513,1572,6.513,1573,5.86,1574,6.513,1575,3.432,1576,3.577,1577,5.462,1578,5.163,1579,4.205,1580,3.714]],["title/interfaces/LeadCustomer.html",[0,0.374,1564,3.498]],["body/interfaces/LeadCustomer.html",[0,0.716,2,0.12,3,0.067,4,0.061,5,0.041,7,0.488,11,0.041,12,0.071,13,0.915,21,0.336,22,0.061,23,0.006,34,1.116,41,1.635,49,0.084,113,0.005,114,0.005,117,1.263,118,2.115,132,1.031,133,1.244,135,2.898,146,2.995,147,2.448,153,1.225,161,2.192,202,2.153,207,1.169,249,2.115,263,1.646,313,1.048,314,1.386,451,1.562,494,2.838,495,2.848,561,3.03,562,3.932,729,3.788,797,2.728,869,2.728,982,2.669,1154,4.095,1181,3.51,1214,2.613,1217,4.497,1270,4.192,1413,3.932,1461,4.281,1552,4.497,1553,5.385,1554,4.281,1555,4.497,1556,4.497,1557,4.497,1558,3.153,1559,4.281,1560,4.497,1561,4.281,1562,4.281,1563,4.497,1564,6.19,1565,3.432,1566,4.095,1567,4.497,1568,4.497,1569,4.281,1570,4.497,1571,4.758,1572,4.758,1573,4.281,1574,4.758,1575,2.507,1576,2.613,1577,5.985,1578,5.658,1579,3.072,1580,4.281]],["title/interfaces/LeadListItemProps.html",[0,0.374,2822,4.293]],["body/interfaces/LeadListItemProps.html",[0,0.371,2,0.092,3,0.038,4,0.038,5,0.032,11,0.032,12,0.06,13,0.771,20,3.111,21,0.307,22,0.054,23,0.006,25,2.77,28,0.691,31,3.301,35,1.861,36,3.099,38,3.878,40,3.175,41,1.433,43,1.19,44,1.781,45,1.399,47,1.843,49,0.06,50,1.069,52,2.647,71,1.167,74,1.545,75,1.787,78,2.647,95,3.42,96,2.921,106,3.033,110,2.457,113,0.004,114,0.004,122,1.47,135,1.547,147,2.451,148,1.269,150,3.532,153,1.931,164,1.102,207,0.901,252,2.202,273,1.973,282,5.907,314,1.469,373,1.895,375,2.821,561,3.294,707,2.254,810,2.647,873,3.904,886,1.988,959,2.152,962,2.505,963,1.822,966,2.705,995,2.713,1078,3.38,1081,3.099,1082,2.152,1083,2.104,1084,2.152,1087,3.033,1091,3.301,1155,3.921,1388,3.301,1415,3.468,1423,4.578,1425,3.468,1426,3.301,1427,3.669,1428,3.669,1554,3.301,1559,3.301,1561,3.301,1562,3.301,1575,1.933,1626,6.159,1703,4.768,1720,3.669,1724,6.51,1754,3.669,1995,3.033,1996,4.257,2100,2.821,2473,5.852,2566,3.468,2654,3.468,2822,5.852,2823,4.768,2824,3.921,2825,4.768,2826,8.738,2827,4.768,2828,4.768,2829,5.39,2830,6.555,2831,4.768,2832,7.491,2833,4.768,2834,4.768,2835,4.768,2836,8.738,2837,4.768,2838,4.768,2839,4.257,2840,4.768,2841,4.768,2842,4.768,2843,4.768,2844,4.768,2845,4.768,2846,4.768,2847,4.768,2848,4.257,2849,6.555,2850,4.257,2851,4.768,2852,3.158,2853,4.768,2854,7.491,2855,4.768,2856,7.491,2857,6.555,2858,4.768,2859,8.456,2860,8.738,2861,4.768,2862,4.768,2863,4.768,2864,3.669,2865,4.768,2866,4.768,2867,6.159,2868,4.768,2869,6.555,2870,5.852,2871,4.768,2872,4.257,2873,6.555,2874,3.921,2875,4.768,2876,4.768,2877,3.669,2878,4.768]],["title/interfaces/LeadResponse.html",[0,0.374,1580,3.329]],["body/interfaces/LeadResponse.html",[0,0.721,2,0.122,3,0.062,4,0.062,5,0.042,7,0.495,11,0.042,12,0.072,21,0.334,22,0.053,23,0.006,34,1.142,41,1.402,49,0.085,113,0.005,114,0.005,117,1.293,118,2.165,132,1.316,133,1.587,135,2.791,146,3.066,147,2.497,153,1.253,161,2.244,202,2.204,207,1.197,249,2.165,263,1.685,313,1.526,314,2.018,451,1.107,494,2.434,495,2.019,561,3.075,562,4.025,729,3.878,797,2.793,869,2.793,982,2.732,1154,4.192,1181,3.562,1214,2.675,1217,4.604,1270,4.253,1413,4.025,1461,4.382,1552,4.604,1553,5.464,1554,4.382,1555,4.604,1556,4.604,1557,4.604,1558,3.227,1559,4.382,1560,4.604,1561,4.382,1562,4.382,1563,4.604,1564,5.741,1565,3.513,1566,4.192,1567,4.604,1568,4.604,1569,4.382,1570,4.604,1571,4.87,1572,4.87,1573,4.382,1574,4.87,1575,2.566,1576,2.675,1577,6.073,1578,5.741,1579,3.144,1580,5.464]],["title/interfaces/ListKycDocumentsRequest.html",[0,0.374,2393,3.058]],["body/interfaces/ListKycDocumentsRequest.html",[0,0.746,2,0.122,3,0.05,4,0.05,5,0.042,7,0.396,11,0.042,12,0.072,13,1.058,21,0.33,22,0.06,23,0.006,49,0.089,113,0.005,114,0.005,117,1.838,118,2.159,133,1.728,148,2.465,153,1.561,166,2.694,177,1.915,190,2.001,202,3.288,361,2.695,797,2.786,837,3.915,1579,4.47,1717,4.375,1718,4.268,1723,3.736,1725,2.668,1728,4.06,1730,3.915,1732,3.615,1736,3.615,1738,3.615,1739,3.615,1740,3.615,1742,3.615,1792,3.608,2383,4.016,2384,4.016,2385,4.828,2386,4.849,2387,5.219,2388,3.505,2389,4.016,2390,4.663,2391,3.868,2392,4.182,2393,5.012,2394,4.016,2395,4.016]],["title/interfaces/ListKycDocumentsResponse.html",[0,0.374,2394,3.058]],["body/interfaces/ListKycDocumentsResponse.html",[0,0.748,2,0.124,3,0.051,4,0.051,5,0.043,7,0.402,11,0.043,12,0.073,21,0.326,22,0.058,23,0.006,49,0.089,113,0.005,114,0.005,117,1.766,118,2.19,133,1.819,148,2.117,153,1.575,166,2.712,177,1.942,190,1.626,202,3.011,361,2.719,797,2.826,837,3.95,1579,4.774,1717,4.414,1718,4.296,1723,3.789,1725,2.707,1728,4.081,1730,3.95,1732,3.667,1736,3.667,1738,3.667,1739,3.667,1740,3.667,1742,3.667,1792,3.623,2383,4.073,2384,4.073,2385,4.871,2386,4.873,2387,5.266,2388,3.555,2389,4.073,2390,5.35,2391,3.924,2392,4.242,2393,4.073,2394,5.057,2395,4.073]],["title/interfaces/LoadingOverlayContainerProps.html",[0,0.374,912,2.845]],["body/interfaces/LoadingOverlayContainerProps.html",[0,0.725,2,0.095,3,0.06,4,0.039,5,0.033,8,1.874,10,1.93,11,0.033,12,0.061,13,1.126,15,2.709,16,2.343,20,1.804,21,0.333,22,0.065,23,0.006,25,2.072,27,1.988,28,0.704,29,0.953,35,1.897,42,1.564,43,0.872,44,1.408,47,1.206,48,3.159,49,0.089,50,1.975,61,3.319,64,3.319,88,2.264,95,3.263,108,2.213,110,1.838,113,0.004,114,0.004,120,1.447,184,0.897,224,0.631,287,4.398,295,1.648,311,2.926,313,1.132,350,1.804,432,2.413,494,1.512,495,1.564,561,1.91,619,3.943,626,2.948,674,2.264,713,2.643,852,3.197,855,5.43,856,2.901,857,2.808,858,2.5,859,3.593,860,4.656,861,4.602,862,4.656,863,3.953,864,2.722,865,2.901,866,2.901,867,3.953,868,3.509,869,3.354,870,3.776,871,2.901,872,2.029,873,2.264,874,3.953,875,2.823,876,3.004,877,2.722,878,2.072,879,3.004,880,2.264,881,3.953,882,2.901,883,2.901,884,2.901,885,2.722,886,2.026,887,2.376,888,2.901,889,1.838,890,2.5,891,2.901,892,3.004,893,2.5,894,3.004,895,3.004,896,3.004,897,3.004,898,3.004,899,3.004,900,3.004,901,2.318,902,3.004,903,2.722,904,3.004,905,3.004,906,3.004,907,2.722,908,2.722,909,3.159,910,4.829,911,2.901,912,3.953,913,5.232,914,5.052,915,4.673,916,2.722,917,2.901,918,2.264,919,2.901,920,2.901,921,1.838,922,2.164,923,3.953,924,2.901,925,2.722,926,3.953,927,2.901,928,2.901,929,2.376,930,2.569,931,2.901,932,2.901]],["title/interfaces/LoadingOverlayProps.html",[0,0.374,2879,3.954]],["body/interfaces/LoadingOverlayProps.html",[0,0.512,2,0.093,3,0.038,4,0.038,5,0.032,7,0.301,8,2.869,10,1.669,11,0.032,12,0.06,13,1.089,16,2.855,21,0.287,22,0.056,23,0.006,28,0.792,29,0.858,42,1.528,43,0.98,44,1.582,45,1.405,46,1.866,47,1.178,49,0.069,71,1.132,72,2.374,73,1.178,74,1.637,75,2.814,83,2.925,87,1.903,89,2.925,90,2.838,91,3.505,93,2.211,94,1.107,103,2.869,108,3.822,110,3.28,113,0.004,114,0.004,120,1.538,139,2.869,152,1.477,164,1.52,184,0.468,213,1.83,249,2.249,314,1.474,351,2.512,432,3.058,619,4.275,641,2.509,708,6.044,711,2.331,722,1.729,736,1.795,798,3.861,868,3.467,870,4.015,875,2.024,886,1.994,909,4.237,915,2.742,921,1.795,925,4.167,962,2.869,963,1.83,966,2.374,974,1.903,977,3.484,989,5.198,1095,2.901,1100,2.379,1101,3.109,1117,2.838,1118,2.068,1157,2.658,1315,2.32,1323,3.933,1326,2.742,1329,3.353,1458,2.934,1583,3.172,1613,2.512,1699,3.172,1702,3.685,1783,3.685,1826,3.938,1850,3.685,1989,4.782,2191,4.782,2726,3.316,2852,3.172,2879,5.406,2880,4.276,2881,3.938,2882,7.812,2883,7.215,2884,6.703,2885,6.703,2886,4.276,2887,4.276,2888,5.87,2889,4.276,2890,3.484,2891,5.87,2892,4.276,2893,4.276,2894,5.87,2895,5.87,2896,4.276,2897,4.276,2898,3.938,2899,3.938,2900,3.938,2901,5.87,2902,3.046]],["title/interfaces/LoadingSpinnerProps.html",[0,0.374,927,2.845]],["body/interfaces/LoadingSpinnerProps.html",[0,0.728,2,0.097,3,0.061,4,0.04,5,0.033,8,1.917,10,1.953,11,0.033,12,0.062,13,1.085,15,2.752,16,2.371,20,1.846,21,0.333,22,0.064,23,0.006,25,2.121,27,2.035,28,0.716,29,0.95,42,1.601,43,0.886,44,1.43,47,1.235,48,3.209,49,0.089,50,1.988,61,3.372,64,3.372,88,2.317,95,2.593,108,2.265,110,3.089,113,0.004,114,0.004,120,1.263,184,0.901,224,0.639,287,2.704,295,1.686,311,2.944,313,1.15,350,1.846,432,3.108,494,1.547,495,1.601,561,1.955,619,3.134,626,2.995,674,2.317,713,2.704,852,3.216,855,5.459,856,2.969,857,2.873,858,2.559,859,3.636,860,4.712,861,4.639,862,4.712,863,4.016,864,2.786,865,2.969,866,2.969,867,4.016,868,3.551,869,3.394,870,3.821,871,2.969,872,2.077,873,2.317,874,4.016,875,2.868,876,3.075,877,2.786,878,2.121,879,3.075,880,2.317,881,4.016,882,2.969,883,2.969,884,2.969,885,2.786,886,2.61,887,2.431,888,2.969,889,1.881,890,2.559,891,2.969,892,3.075,893,2.559,894,3.075,895,3.075,896,3.075,897,3.075,898,3.075,899,3.075,900,3.075,901,2.373,902,3.075,903,2.786,904,3.075,905,3.075,906,3.075,907,2.786,908,2.786,909,4.07,910,4.016,911,2.969,912,2.969,913,4.158,914,4.016,915,2.873,916,2.786,917,2.969,918,2.317,919,2.969,920,2.969,921,1.881,922,2.214,923,4.016,924,2.969,925,2.786,926,4.875,927,4.016,928,2.969,929,2.431,930,2.629,931,2.969,932,2.969]],["title/interfaces/LoginRequest.html",[0,0.374,763,3.185]],["body/interfaces/LoginRequest.html",[0,0.757,2,0.119,3,0.049,4,0.049,5,0.041,7,0.388,11,0.041,12,0.071,21,0.325,22,0.059,23,0.006,28,0.651,29,0.592,41,1.097,43,1.014,49,0.089,71,0.93,113,0.005,114,0.005,117,1.588,123,3.355,126,2.612,131,2.61,132,1.419,133,1.711,162,2.062,175,2.15,189,2.479,207,1.168,245,2.23,295,2.612,313,1.046,333,3.355,334,4.45,363,4.762,451,1.08,494,2.896,495,1.97,497,4.349,506,2.897,587,4.691,588,3.149,606,2.556,614,4.87,632,4.276,763,5.147,774,3.654,1609,3.784,2400,5.147,2401,4.09,2406,5.409,2434,4.09,2435,4.09,2437,5.147,2480,5.147,2481,5.147,2483,5.147,2903,4.752,2904,4.276,2905,4.752,2906,4.492,2907,6.869,2908,5.981,2909,4.752,2910,4.752,2911,4.752]],["title/interfaces/LoginResponse.html",[0,0.374,2904,3.329]],["body/interfaces/LoginResponse.html",[0,0.757,2,0.119,3,0.049,4,0.049,5,0.041,7,0.387,11,0.041,12,0.071,21,0.322,22,0.059,23,0.006,28,0.65,29,0.59,41,1.094,43,1.013,49,0.089,71,0.929,113,0.005,114,0.005,117,1.259,123,3.351,126,2.608,131,2.604,132,1.488,133,1.794,162,2.195,175,2.145,189,2.476,207,1.165,245,2.225,295,2.608,313,1.044,333,3.351,334,4.444,363,4.755,451,1.077,494,2.62,495,1.965,497,3.669,506,2.894,587,4.688,588,3.142,606,2.55,614,4.865,632,4.266,763,4.081,774,3.646,1609,3.775,2400,5.14,2401,4.081,2406,5.404,2434,4.081,2435,4.081,2437,5.14,2480,5.14,2481,5.14,2483,5.14,2903,4.741,2904,5.373,2905,6.863,2906,4.482,2907,6.863,2908,5.972,2909,4.741,2910,4.741,2911,4.741]],["title/classes/LogoutManager.html",[1469,1.911,2912,4.293]],["body/classes/LogoutManager.html",[0,0.32,3,0.033,4,0.033,5,0.027,7,0.258,11,0.027,12,0.054,13,0.484,16,1.269,21,0.274,22,0.062,23,0.006,28,0.729,29,0.663,34,1.444,41,1.589,43,1.088,48,1.946,49,0.078,66,2.862,71,1.137,73,2.05,74,1.6,113,0.004,114,0.004,117,0.841,132,1.154,133,1.61,138,2.804,139,1.573,153,1.171,164,1.851,166,2.511,184,0.577,189,2.206,190,1.045,194,1.345,207,1.576,217,2.862,221,1.816,224,0.789,232,3.915,234,2.522,239,2.726,244,1.459,263,1.574,264,2.099,265,1.636,270,2.357,310,2.849,313,0.697,314,1.325,315,3.727,327,2.795,334,3.96,335,4.092,336,2.849,338,2.045,350,2.781,351,2.259,360,2.849,361,2.021,372,2.849,373,1.636,374,2.156,375,2.435,385,1.816,387,2.435,395,2.849,397,2.849,400,2.357,401,2.849,411,2.435,412,3.839,415,2.849,416,3.727,431,2.498,451,0.72,478,2.849,493,1.543,506,2.244,535,2.156,564,3.574,570,1.459,573,1.408,574,2.726,583,1.604,586,1.433,588,2.099,593,3.351,599,2.045,606,1.703,613,2.285,614,5.262,618,2.099,625,2.994,628,4.092,631,3.167,638,2.522,646,3.759,662,2.408,675,2.729,693,2.435,729,2.522,743,3.167,752,2.994,798,1.816,809,1.946,811,3.384,843,2.834,868,1.9,1002,2.937,1023,2.726,1159,2.726,1163,1.857,1214,2.498,1284,3.384,1291,3.675,1363,3.384,1393,2.864,1460,2.357,1469,1.636,1471,2.218,1481,4.196,1565,3.281,1613,1.573,1714,3.167,1809,2.285,1907,2.435,2073,1.946,2192,3.621,2245,4.299,2247,1.994,2265,5.687,2353,3.384,2406,4.399,2407,3.167,2408,3.384,2409,3.675,2426,5.278,2442,3.675,2443,3.675,2444,4.548,2482,4.092,2507,3.185,2611,2.726,2633,4.788,2635,5.519,2645,2.618,2686,4.299,2743,3.759,2912,6.749,2913,4.116,2914,6.917,2915,4.092,2916,5.911,2917,5.911,2918,5.911,2919,5.911,2920,6.917,2921,6.917,2922,5.911,2923,7.56,2924,4.116,2925,4.116,2926,5.911,2927,6.917,2928,4.116,2929,4.116,2930,6.917,2931,4.116,2932,7.56,2933,5.911,2934,4.116,2935,4.116,2936,4.116,2937,3.167,2938,7.56,2939,7.56,2940,4.116,2941,7.56,2942,4.116,2943,4.399,2944,4.116,2945,3.675,2946,4.116,2947,3.384,2948,5.911,2949,4.116,2950,4.116,2951,4.116,2952,4.116,2953,4.116,2954,4.116,2955,4.116,2956,4.116,2957,2.726,2958,5.911,2959,4.116,2960,4.116,2961,8.006,2962,4.116,2963,7.56,2964,4.116,2965,5.278,2966,4.116,2967,5.278,2968,4.116,2969,4.116,2970,4.116,2971,4.116,2972,4.116,2973,4.116,2974,4.116,2975,5.911,2976,2.435,2977,3.675,2978,4.116,2979,4.116]],["title/interfaces/LogoutResponse.html",[0,0.374,2906,3.498]],["body/interfaces/LogoutResponse.html",[0,0.759,2,0.12,3,0.049,4,0.049,5,0.041,7,0.391,11,0.041,12,0.071,21,0.317,22,0.057,23,0.006,28,0.656,29,0.818,41,1.106,43,1.02,49,0.089,71,0.935,113,0.005,114,0.005,117,1.272,123,3.373,126,2.625,131,2.631,132,1.424,133,1.801,162,2.067,175,2.168,189,2.492,207,1.177,245,2.248,295,2.625,313,1.517,333,3.373,334,4.473,363,4.786,451,1.089,494,2.632,495,1.986,497,3.693,506,2.905,587,4.565,588,3.175,606,2.577,614,5.126,632,4.31,763,4.123,774,3.684,1609,3.814,2400,5.174,2401,4.123,2406,5.43,2434,4.123,2435,4.123,2437,5.174,2480,5.174,2481,5.174,2483,5.174,2903,4.791,2904,4.31,2905,4.791,2906,5.682,2907,6.889,2908,6.011,2909,4.791,2910,4.791,2911,4.791]],["title/interfaces/MessageBubbleProps.html",[0,0.374,2980,4.293]],["body/interfaces/MessageBubbleProps.html",[0,0.441,2,0.11,3,0.045,4,0.045,5,0.038,10,1.866,11,0.038,12,0.067,13,0.864,20,3.295,21,0.284,22,0.054,23,0.006,28,0.597,40,3.561,41,1.306,42,1.805,43,1.22,44,1.821,45,1.66,46,2.205,47,1.809,49,0.067,62,4.868,71,1.146,72,2.044,74,1.246,75,2.756,77,2.965,83,2.205,88,2.614,93,3.77,94,1.699,95,2.163,103,2.809,110,2.756,113,0.004,114,0.004,120,1.597,122,1.745,126,1.902,130,4.532,135,1.837,157,4.797,159,2.054,175,1.971,194,1.858,314,1.647,526,3.468,711,2.007,742,2.742,886,2.229,921,2.122,922,2.498,962,2.809,963,2.163,966,2.948,974,2.921,975,2.812,1011,2.342,1078,3.317,1081,3.475,1091,3.919,1095,2.498,1096,2.812,1097,3.142,1098,3.142,1099,3.142,1100,2.812,1101,2.676,1102,3.142,1103,2.965,1104,3.142,1106,3.349,1109,3.05,1116,2.498,1119,4.868,1122,3.241,1135,3.349,1437,4.355,1441,4.08,1465,5.347,1467,4.117,1715,3.749,1818,3.468,1830,4.868,1834,4.868,1838,2.614,1844,6.563,1846,4.355,2362,4.355,2367,3.749,2373,7.716,2566,4.117,2824,4.654,2852,3.749,2864,4.355,2867,6.044,2980,6.563,2981,5.66,2982,4.117,2983,5.66,2984,8.344,2985,5.66,2986,4.654,2987,6.563,2988,5.66,2989,5.054,2990,8.957,2991,5.66,2992,5.66,2993,5.66,2994,5.66,2995,5.66,2996,4.117,2997,5.66,2998,5.054,2999,5.66,3000,5.66]],["title/interfaces/MigrationManifest.html",[0,0.374,3001,4.293]],["body/interfaces/MigrationManifest.html",[0,0.439,2,0.109,3,0.045,4,0.045,5,0.038,7,0.354,21,0.241,22,0.049,23,0.006,29,0.541,34,1.765,43,0.736,49,0.079,71,1.118,73,2.124,74,1.604,94,2.159,113,0.004,114,0.004,125,3.115,151,2.49,152,1.74,162,1.827,184,0.551,194,1.855,213,2.156,224,0.677,244,2,263,1.502,264,2.877,276,1.93,331,3.041,353,3.036,365,5.721,448,3.468,493,3.056,494,2.262,506,2.38,528,2.803,535,3.843,570,2,583,2.198,647,6.032,675,2.605,687,3.589,711,3.06,744,3.737,823,4.639,1022,4.823,1270,3.041,1274,3.132,1364,4.639,1481,3.132,1578,4.104,1606,3.237,1776,4.858,1948,3.231,2291,4.639,2433,5.645,2440,5.038,2667,3.906,2710,4.104,2957,3.737,3001,7.278,3002,5.643,3003,7.483,3004,5.643,3005,9.468,3006,5.643,3007,5.643,3008,7.336,3009,7.336,3010,7.336,3011,7.336,3012,5.643,3013,7.336,3014,7.336,3015,5.643,3016,8.152,3017,5.643,3018,7.336,3019,5.643,3020,5.643,3021,5.038,3022,7.336,3023,5.643,3024,5.643,3025,5.643,3026,5.643,3027,5.643,3028,5.643,3029,5.643,3030,5.643,3031,4.342,3032,5.643]],["title/interfaces/MigrationResult.html",[0,0.374,3033,3.954]],["body/interfaces/MigrationResult.html",[0,0.657,2,0.137,3,0.071,4,0.056,5,0.047,7,0.443,11,0.047,12,0.077,13,1.1,21,0.322,22,0.06,23,0.006,29,0.677,49,0.082,113,0.005,114,0.005,120,1.535,153,1.852,224,0.586,313,1.197,314,1.583,315,3.807,487,3.602,586,2.939,590,3.602,662,3.143,691,4.089,2638,4.044,3003,6.494,3033,6.94,3034,5.808,3035,8.349,3036,7.689,3037,6.94,3038,6.94,3039,5.808]],["title/interfaces/NewAuthState.html",[0,0.374,3040,4.293]],["body/interfaces/NewAuthState.html",[0,0.335,2,0.083,3,0.048,4,0.034,5,0.029,7,0.27,11,0.029,12,0.056,21,0.292,22,0.054,23,0.006,28,0.453,29,0.81,34,1.78,41,0.764,43,0.925,44,0.906,47,1.058,49,0.087,70,3.191,71,1.151,73,2.224,74,1.506,113,0.004,114,0.004,118,1.471,151,1.898,162,2.131,164,2.268,175,1.497,207,0.813,214,1.857,224,0.777,263,2.251,276,1.471,313,1.201,349,3.737,351,1.643,361,3.228,396,2.884,451,1.067,494,1.326,495,1.372,506,2.3,535,2.253,542,3.849,543,6.021,546,3.737,547,6.341,548,4.725,549,2.387,554,3.31,555,5.453,556,4.693,557,3.31,563,3.737,564,3.351,570,2.513,573,2.637,583,2.761,586,2.685,587,3.932,589,3.737,590,3.614,593,3.736,599,2.137,609,2.978,612,2.978,614,4.058,615,3.849,631,3.31,636,3.31,637,2.978,640,3.128,677,4.437,684,3.31,687,2.735,730,3.536,736,1.612,749,2.635,752,4.437,753,6.838,754,3.737,755,5.637,758,5.827,760,1.857,764,5.827,765,5.827,766,3.536,769,3.536,773,3.536,774,3.609,783,3.536,815,2.463,816,3.31,822,3.536,824,3.536,826,3.536,1073,2.848,1604,4.039,2109,4.907,2610,3.128,2664,6.326,2904,4.223,3031,3.31,3040,8.07,3041,4.301,3042,4.301,3043,5.446,3044,3.84,3045,4.301,3046,4.301,3047,4.301,3048,4.301,3049,4.301,3050,4.301,3051,4.301,3052,4.301,3053,4.301,3054,4.301,3055,4.301,3056,4.301,3057,4.301,3058,4.301,3059,4.301,3060,4.301,3061,7.088,3062,4.301,3063,6.1,3064,4.301,3065,7.088,3066,4.301,3067,4.301,3068,4.301,3069,6.1,3070,4.301,3071,4.301,3072,6.1,3073,4.301,3074,4.301,3075,4.301,3076,4.301,3077,4.301,3078,4.301,3079,4.301,3080,4.301,3081,4.301,3082,4.301,3083,4.301,3084,4.301,3085,3.84,3086,4.301,3087,4.301,3088,4.301]],["title/interfaces/Notification.html",[0,0.374,3089,2.845]],["body/interfaces/Notification.html",[0,0.62,2,0.09,3,0.063,4,0.037,5,0.031,7,0.291,11,0.031,12,0.059,21,0.322,22,0.065,23,0.006,28,0.882,29,0.801,34,1.509,41,1.415,49,0.084,94,1.07,111,3.204,113,0.004,114,0.004,120,1.458,122,1.427,125,2.453,126,2.158,131,1.956,132,1.328,133,1.483,140,2.137,142,2.713,143,2.713,147,1.175,152,1.427,153,1.577,156,2.425,158,4.172,159,2.06,160,2.453,161,3.069,162,1.652,164,1.484,169,4.415,173,3.253,182,2.196,183,1.213,184,0.918,185,3.021,187,2.042,188,2.084,189,1.476,190,1.175,191,2.088,195,2.188,196,3.229,198,3.296,203,2.965,213,2.453,214,1.998,219,2.042,220,1.915,221,2.042,222,2.088,223,2.425,224,0.661,227,2.522,258,3.366,311,1.502,313,0.784,314,1.652,318,2.738,319,2.738,320,2.738,321,3.677,323,2.738,431,3.116,528,2.299,529,4.928,626,3.253,670,3.799,674,2.965,742,2.242,850,2.657,872,3.674,1011,1.915,1078,2.898,1163,3.327,1267,1.803,1506,5.733,1550,2.299,1565,2.569,1630,2.36,2126,3.799,2720,2.943,2794,5.274,2902,4.084,2976,2.738,3089,5.865,3090,3.366,3091,4.628,3092,5.674,3093,5.652,3094,6.297,3095,4.941,3096,4.671,3097,4.941,3098,5.674,3099,5.513,3100,4.671,3101,6.085,3102,4.941,3103,5.105,3104,4.452,3105,3.366,3106,4.671,3107,3.065,3108,5.363,3109,4.671,3110,4.253,3111,3.065,3112,3.204,3113,3.366,3114,4.671,3115,3.366,3116,3.366,3117,4.671,3118,3.366,3119,3.561,3120,3.561,3121,3.561,3122,3.561,3123,3.366,3124,3.561,3125,3.366,3126,3.561,3127,3.366,3128,3.561,3129,3.561,3130,3.934,3131,2.65,3132,2.943,3133,3.561]],["title/interfaces/NotificationBellIconProps.html",[0,0.374,3134,4.293]],["body/interfaces/NotificationBellIconProps.html",[0,0.46,2,0.114,3,0.047,4,0.047,5,0.039,11,0.039,12,0.069,13,1.092,22,0.059,23,0.006,28,0.623,35,2.146,42,1.885,43,1.232,44,1.912,45,2.217,46,2.302,47,2.05,49,0.069,50,1.325,71,1.13,72,2.134,74,1.281,75,2.215,83,2.302,87,2.348,89,3.422,90,2.551,91,3.128,94,1.366,100,3.384,113,0.005,114,0.005,184,0.907,189,1.885,194,1.72,207,1.117,213,2.258,214,2.551,219,2.608,314,1.694,657,3.914,662,2.632,859,4.292,873,4.192,878,2.497,921,2.215,958,5.006,959,2.667,962,2.888,963,2.258,966,2.134,968,6.215,970,5.498,971,4.299,972,4.299,973,4.859,974,2.348,975,2.936,976,3.759,977,4.299,1071,3.759,1082,2.667,1083,2.608,1084,2.667,1106,3.497,1117,3.598,1118,2.551,1147,4.299,1149,4.092,1315,2.863,1565,3.28,1587,4.631,2059,4.548,2100,3.497,2145,4.299,2587,4.859,2590,4.859,2877,4.548,3093,3.497,3104,4.255,3106,6.389,3110,5.006,3127,5.498,3134,6.749,3135,5.91,3136,9.078,3137,9.078,3138,5.91,3139,5.91,3140,6.749,3141,5.91,3142,5.91,3143,5.91,3144,5.91,3145,5.91,3146,5.91,3147,5.91,3148,5.91,3149,5.91]],["title/interfaces/NotificationListItemProps.html",[0,0.374,3150,4.293]],["body/interfaces/NotificationListItemProps.html",[0,0.421,2,0.105,3,0.056,4,0.043,5,0.036,11,0.036,12,0.065,13,0.839,20,3.247,21,0.298,22,0.06,23,0.006,28,0.842,29,0.518,35,2.026,42,1.725,43,1.206,44,1.86,45,1.587,46,2.107,47,1.965,49,0.065,50,1.212,71,1.136,72,1.953,74,1.637,75,2.027,83,2.107,84,3.097,85,3.002,87,2.835,89,3.532,90,3.08,91,3.305,93,3.295,94,1.25,103,2.726,110,2.675,113,0.004,114,0.004,120,0.888,122,2.2,126,2.398,147,1.373,159,1.511,203,2.497,224,0.449,263,1.44,451,0.946,626,2.387,708,6.287,711,1.918,722,2.883,872,2.238,873,4.076,875,3.015,877,3.002,878,2.286,886,1.64,921,2.027,959,2.441,962,2.726,963,2.067,965,3.2,966,2.883,974,3.173,1011,2.238,1082,2.441,1083,2.387,1084,2.441,1095,3.149,1100,2.687,1101,2.557,1106,4.222,1109,2.915,1116,3.524,1117,3.666,1118,2.335,1122,3.097,1163,2.441,1267,2.107,1323,2.834,1590,4.94,1692,3.744,1838,2.497,1989,5.19,2100,3.2,2145,3.934,2279,4.447,2377,4.829,2850,4.829,2852,3.582,2874,4.447,3089,5.715,3094,6.42,3099,4.94,3103,3.744,3104,2.62,3110,3.582,3111,4.726,3112,3.744,3150,6.371,3151,5.409,3152,5.409,3153,4.829,3154,5.409,3155,5.409,3156,5.409,3157,5.409,3158,5.409,3159,5.409,3160,5.409,3161,5.409,3162,5.409,3163,5.409,3164,7.136,3165,5.409,3166,7.136,3167,5.409,3168,5.409,3169,5.409,3170,5.409,3171,5.409,3172,5.409,3173,5.409,3174,5.409,3175,5.409,3176,5.409,3177,4.829,3178,5.409,3179,5.409,3180,5.409]],["title/interfaces/NotificationPollingConfig.html",[0,0.374,3181,3.954]],["body/interfaces/NotificationPollingConfig.html",[0,0.418,2,0.07,3,0.029,4,0.029,5,0.024,7,0.227,11,0.024,12,0.049,13,0.996,15,2.179,22,0.047,23,0.006,28,0.912,29,0.79,30,3.206,34,1.436,43,0.927,44,1.132,47,0.889,49,0.049,50,1.204,52,2.006,71,1.169,73,1.322,74,1.514,79,2.393,94,1.242,113,0.003,114,0.003,117,0.738,132,0.603,138,2.179,159,1.501,164,1.756,184,0.893,207,1.016,224,0.631,244,1.281,245,1.941,249,2.897,252,1.668,254,1.668,263,2.255,265,2.55,282,3.18,301,6.279,313,1.087,373,1.436,385,1.594,410,2.67,412,3.562,420,5.051,423,2.214,424,1.708,425,1.708,429,3.272,430,3.163,515,3.206,527,2.5,570,1.281,573,1.838,583,1.408,586,1.258,613,2.006,615,1.708,643,2.317,662,1.871,671,2.214,683,2.67,689,1.594,707,3.763,711,1.281,725,3.18,741,2.501,771,3.188,800,1.668,805,3.293,809,1.708,843,2.015,854,3.362,889,2.405,1133,3.294,1160,1.56,1163,1.63,1196,1.893,1200,2.628,1237,3.077,1393,3.108,1526,2.214,1529,2.501,1531,2.501,1545,2.393,1550,3.188,1588,3.362,1644,1.947,1681,2.628,1711,3.931,1765,2.138,1838,3.676,1880,3.559,2002,3.909,2128,2.393,2247,1.75,2577,2.006,2592,3.272,2807,2.214,2943,2.298,3089,3.18,3104,2.603,3130,5.968,3132,3.418,3181,5.276,3182,3.226,3183,6.343,3184,6.343,3185,5.996,3186,4.249,3187,2.298,3188,2.78,3189,4.135,3190,2.069,3191,2.628,3192,4.419,3193,4.135,3194,4.135,3195,4.937,3196,6.343,3197,6.343,3198,5.844,3199,2.78,3200,2.78,3201,2.78,3202,4.135,3203,5.844,3204,2.78,3205,2.78,3206,2.069,3207,2.78,3208,2.78,3209,2.78,3210,2.78,3211,2.78,3212,3.559,3213,2.78,3214,4.798,3215,4.081,3216,4.081,3217,2.78,3218,2.628,3219,2.501,3220,4.249,3221,2.78,3222,2.78,3223,2.78,3224,2.78,3225,2.78,3226,2.78,3227,5.468,3228,6.877,3229,4.937,3230,2.78,3231,4.135,3232,2.78,3233,2.78,3234,7.562,3235,2.78,3236,3.796,3237,2.78,3238,4.135,3239,4.937,3240,2.501,3241,2.78,3242,2.628,3243,3.226,3244,5.844,3245,6.517,3246,5.258,3247,3.721,3248,4.937,3249,4.937,3250,7.107,3251,2.78,3252,2.78,3253,2.78,3254,2.78,3255,2.78,3256,2.78,3257,2.78,3258,2.78,3259,2.78,3260,2.628,3261,2.628,3262,4.937,3263,6.125,3264,5.468,3265,4.937,3266,4.135,3267,2.78,3268,2.78,3269,2.78,3270,2.78,3271,2.78,3272,2.78,3273,2.78,3274,2.393,3275,2.78,3276,2.78,3277,2.78,3278,2.78,3279,3.418,3280,3.226,3281,2.78]],["title/interfaces/NotificationPollingState.html",[0,0.374,3192,3.954]],["body/interfaces/NotificationPollingState.html",[0,0.419,2,0.07,3,0.029,4,0.029,5,0.024,7,0.227,11,0.024,12,0.049,15,2.18,22,0.055,23,0.006,28,0.801,29,0.728,30,2.426,34,1.488,35,2.261,43,0.928,44,1.133,47,0.89,49,0.049,50,1.205,52,2.007,71,1.169,73,1.323,74,1.515,79,2.395,94,1.243,113,0.003,114,0.003,117,0.739,132,0.603,138,1.466,159,1.502,164,2.001,184,0.909,207,1.016,224,0.631,244,1.282,245,1.306,249,2.897,252,1.67,254,1.67,263,2.12,265,2.551,282,3.181,301,6.113,313,1.088,373,1.437,385,1.595,410,2.671,412,3.563,420,4.878,423,2.215,424,1.709,425,1.709,429,2.742,430,2.824,515,2.896,527,2.501,570,1.282,573,1.839,583,1.409,586,1.259,613,2.007,615,1.709,643,2.318,662,1.872,671,2.215,683,2.671,689,1.595,707,3.764,711,1.282,725,3.181,741,2.503,771,3.189,800,1.67,805,3.294,809,1.709,843,2.016,854,3.363,889,2.406,1133,3.295,1160,1.561,1163,1.632,1196,1.894,1200,2.63,1237,2.07,1393,3.11,1526,2.215,1529,2.503,1531,2.503,1545,2.395,1550,3.189,1588,3.363,1644,1.949,1681,2.63,1711,3.933,1765,2.139,1838,3.508,1880,2.395,2002,3.911,2128,2.395,2247,1.752,2577,2.007,2592,3.273,2807,2.215,2943,2.3,3089,3.181,3104,2.605,3130,5.912,3132,4.832,3181,4.421,3182,3.228,3183,5.469,3184,5.469,3185,5.17,3186,3.561,3187,2.3,3188,2.782,3189,4.137,3190,2.07,3191,2.63,3192,5.278,3193,5.846,3194,5.846,3195,6.127,3196,6.779,3197,6.779,3198,6.519,3199,2.782,3200,2.782,3201,2.782,3202,4.137,3203,5.846,3204,2.782,3205,2.782,3206,2.07,3207,2.782,3208,2.782,3209,2.782,3210,2.782,3211,2.782,3212,3.561,3213,2.782,3214,4.801,3215,4.082,3216,4.082,3217,2.782,3218,2.63,3219,2.503,3220,4.251,3221,2.782,3222,2.782,3223,2.782,3224,2.782,3225,2.782,3226,2.782,3227,5.469,3228,6.879,3229,4.939,3230,2.782,3231,4.137,3232,2.782,3233,2.782,3234,7.564,3235,2.782,3236,3.798,3237,2.782,3238,4.137,3239,4.939,3240,2.503,3241,2.782,3242,2.63,3243,3.228,3244,5.846,3245,6.519,3246,5.259,3247,3.722,3248,4.939,3249,4.939,3250,7.109,3251,2.782,3252,2.782,3253,2.782,3254,2.782,3255,2.782,3256,2.782,3257,2.782,3258,2.782,3259,2.782,3260,2.63,3261,2.63,3262,4.939,3263,6.127,3264,5.469,3265,4.939,3266,4.137,3267,2.782,3268,2.782,3269,2.782,3270,2.782,3271,2.782,3272,2.782,3273,2.782,3274,2.395,3275,2.782,3276,2.782,3277,2.782,3278,2.782,3279,3.42,3280,3.228,3281,2.782]],["title/interfaces/NotificationsApiResponse.html",[0,0.374,3105,3.498]],["body/interfaces/NotificationsApiResponse.html",[0,0.64,2,0.097,3,0.061,4,0.039,5,0.033,7,0.314,11,0.033,12,0.062,21,0.31,22,0.064,23,0.006,28,0.906,29,0.823,34,1.484,41,0.887,49,0.085,94,1.155,113,0.004,114,0.004,120,1.26,122,1.54,125,2.585,126,1.678,132,1.28,133,1.654,140,2.306,142,2.111,143,2.111,147,1.268,152,1.54,153,1.52,156,2.617,158,4.02,159,1.89,160,1.909,161,2.72,162,1.516,164,1.564,169,3.912,173,3.386,182,2.314,183,1.309,184,0.931,185,3.103,187,2.204,188,2.196,189,1.593,190,1.268,191,3.053,195,2.362,196,3.334,198,3.403,203,3.124,213,2.585,214,2.156,219,2.204,220,2.067,221,2.204,222,2.254,223,2.617,224,0.637,227,1.708,258,3.633,311,1.621,313,1.394,314,1.926,318,2.955,319,2.955,320,2.955,321,3.874,323,2.955,431,3.475,486,3.545,528,2.482,529,4.565,626,2.985,670,2.955,674,3.124,742,2.42,850,2.067,872,3.175,1011,2.067,1078,2.254,1163,3.053,1267,1.946,1506,4.481,1550,2.482,1565,2.773,1630,2.547,2126,2.955,2720,3.177,2794,5.446,2902,3.177,2976,2.955,3089,5.751,3090,3.633,3092,5.904,3093,5.453,3094,4.921,3095,3.844,3096,3.633,3097,3.844,3098,5.206,3099,4.684,3100,3.633,3101,5.581,3102,3.844,3103,4.684,3104,4.576,3105,4.921,3106,4.921,3107,3.308,3108,5.581,3109,4.921,3110,4.481,3111,3.308,3112,3.458,3113,3.633,3114,4.921,3115,3.633,3116,3.633,3117,4.921,3118,3.633,3119,3.844,3120,3.844,3121,3.844,3122,3.844,3123,3.633,3124,3.844,3125,3.633,3126,3.844,3127,3.633,3128,3.844,3129,3.844,3130,4.145,3131,2.86,3132,3.177,3133,3.844]],["title/interfaces/NotificationsQueryParams.html",[0,0.374,3118,3.498]],["body/interfaces/NotificationsQueryParams.html",[0,0.618,2,0.089,3,0.058,4,0.036,5,0.031,7,0.289,11,0.031,12,0.058,13,1.141,21,0.319,22,0.066,23,0.006,28,0.98,29,0.704,34,1.433,41,0.817,49,0.084,94,1.478,113,0.004,114,0.004,120,1.207,122,1.418,125,1.758,126,1.546,132,1.226,133,1.286,140,2.953,142,1.944,143,1.944,147,1.168,152,1.418,153,1.755,156,3.35,158,4.373,159,1.786,160,1.758,161,2.816,162,1.433,164,1.478,169,3.748,173,3.243,182,2.514,183,1.205,184,0.952,185,3.014,187,2.821,188,2.709,189,2.04,190,1.623,191,2.076,195,3.023,196,3.721,198,3.74,203,3.668,213,2.443,214,1.986,219,2.03,220,1.904,221,2.03,222,2.076,223,2.41,224,0.61,227,1.573,258,3.346,311,1.493,313,0.78,314,1.433,318,4.7,319,4.7,320,2.722,321,4.208,323,2.722,431,3.528,528,3.177,529,4.409,626,2.821,670,2.722,674,2.953,742,2.229,850,1.904,872,3.042,1011,2.646,1078,2.076,1163,2.885,1267,1.792,1506,4.235,1550,2.285,1565,2.553,1630,2.346,2126,2.722,2720,2.926,2794,5.723,2902,2.926,2976,2.722,3089,5.715,3090,3.346,3092,5.656,3093,5.431,3094,4.651,3095,3.54,3096,3.346,3097,3.54,3098,4.92,3099,4.427,3100,3.346,3101,6.072,3102,3.54,3103,4.427,3104,4.589,3105,3.346,3106,4.651,3107,3.047,3108,5.346,3109,5.778,3110,4.235,3111,3.047,3112,3.185,3113,3.346,3114,5.778,3115,3.346,3116,3.346,3117,5.778,3118,4.651,3119,6.112,3120,6.112,3121,3.54,3122,3.54,3123,3.346,3124,3.54,3125,3.346,3126,3.54,3127,3.346,3128,3.54,3129,3.54,3130,3.918,3131,2.634,3132,2.926,3133,3.54]],["title/interfaces/NotificationsState.html",[0,0.374,3123,3.498]],["body/interfaces/NotificationsState.html",[0,0.623,2,0.09,3,0.059,4,0.037,5,0.031,7,0.294,11,0.031,12,0.059,21,0.316,22,0.064,23,0.006,28,0.885,29,0.804,34,1.606,41,0.831,49,0.084,94,1.081,113,0.004,114,0.004,120,1.313,122,1.994,125,1.787,126,1.571,132,1.079,133,1.301,140,2.159,142,1.976,143,1.976,147,1.187,152,1.994,153,1.468,156,2.45,158,3.884,159,2.071,160,1.787,161,2.629,162,1.449,164,2.008,169,3.781,173,3.832,182,2.872,183,1.225,184,0.946,185,3.032,187,2.064,188,2.099,189,1.492,190,1.187,191,2.11,195,2.211,196,3.243,198,3.311,203,2.986,213,3.057,214,2.792,219,2.854,220,2.677,221,2.854,222,2.918,223,4.191,224,0.664,227,1.599,258,4.704,311,1.518,313,0.792,314,1.449,318,2.767,319,2.767,320,2.767,321,3.703,323,2.767,431,3.133,528,2.323,529,4.821,626,2.854,670,2.767,674,3.694,742,3.133,850,1.935,872,3.068,1011,1.935,1078,2.11,1163,2.918,1267,1.822,1506,4.283,1550,3.213,1565,3.59,1630,2.385,2126,2.767,2720,4.113,2794,5.298,2902,2.974,2976,3.827,3089,5.78,3090,3.402,3092,4.977,3093,5.573,3094,4.704,3095,3.599,3096,3.402,3097,3.599,3098,5.705,3099,4.478,3100,3.402,3101,5.393,3102,3.599,3103,4.478,3104,4.602,3105,3.402,3106,6.108,3107,3.097,3108,5.393,3109,4.704,3110,4.91,3111,3.097,3112,3.238,3113,3.402,3114,4.704,3115,3.402,3116,3.402,3117,4.704,3118,3.402,3119,3.599,3120,3.599,3121,4.977,3122,4.977,3123,4.704,3124,4.977,3125,4.704,3126,4.977,3127,5.819,3128,4.977,3129,4.977,3130,4.901,3131,3.703,3132,5.088,3133,6.156]],["title/interfaces/OTPInputFieldProps.html",[0,0.374,3282,3.7]],["body/interfaces/OTPInputFieldProps.html",[0,0.583,2,0.092,3,0.038,4,0.038,5,0.032,7,0.299,8,2.501,11,0.063,12,0.06,13,0.77,15,3.695,20,3.109,21,0.324,22,0.064,23,0.006,25,2.011,28,0.502,29,0.938,30,4.33,33,3.538,34,1.454,35,2.587,36,4.424,38,3.873,40,3.625,41,1.329,49,0.077,50,1.957,54,3.152,71,0.965,89,1.854,113,0.004,114,0.004,120,0.781,152,2.307,173,2.1,184,0.914,224,0.669,225,3.172,331,3.528,350,3.476,353,3.335,497,4.424,512,2.494,528,4.796,589,4.585,689,2.1,722,1.719,734,2.055,800,3.455,858,2.427,880,3.023,885,4.691,886,2.269,887,4.415,889,1.784,890,4.309,903,4.691,907,4.474,908,4.474,1017,5.796,1071,3.027,1078,2.148,1081,2.25,1105,3.634,1175,3.152,1177,2.642,1185,4.585,1536,3.295,2073,2.25,2254,6.147,2520,4.938,2807,2.916,3131,2.725,3279,3.027,3282,5.038,3283,3.914,3284,6.627,3285,6.627,3286,6.153,3287,4.762,3288,6.72,3289,5.383,3290,6.153,3291,5.383,3292,6.153,3293,3.663,3294,3.914,3295,3.914,3296,5.383,3297,3.914,3298,3.663,3299,3.914,3300,3.914,3301,3.914,3302,3.914,3303,3.914,3304,3.914,3305,3.914,3306,3.663,3307,3.914,3308,3.914,3309,5.383,3310,3.914,3311,3.914,3312,3.914,3313,3.914,3314,4.336,3315,5.383]],["title/interfaces/OTPInputProps.html",[0,0.374,3293,3.7]],["body/interfaces/OTPInputProps.html",[0,0.577,2,0.09,3,0.037,4,0.037,5,0.031,7,0.294,8,2.471,10,1.187,11,0.06,12,0.059,13,1.161,15,3.679,20,3.089,21,0.327,22,0.063,23,0.006,25,2.733,28,0.682,29,0.936,30,4.318,33,3.505,34,1.443,35,2.271,36,4.29,38,2.767,40,3.592,41,1.317,49,0.077,50,1.946,54,4.283,71,0.958,89,1.822,113,0.004,114,0.004,120,1.062,152,2.286,173,2.064,184,0.92,224,0.697,225,2.266,331,3.486,350,3.465,353,3.068,497,4.552,512,2.45,528,4.508,589,4.542,689,2.854,722,1.689,734,2.792,800,3.423,858,4.079,880,2.159,885,4.661,886,1.961,887,4.396,889,2.999,890,4.282,903,4.661,907,2.596,908,2.596,1017,5.991,1071,5.088,1078,2.918,1081,3.058,1105,4.115,1175,3.097,1177,3.59,1185,4.542,1536,5.538,2073,2.211,2254,4.704,2520,5.455,2807,3.963,3131,2.678,3279,4.113,3282,3.599,3283,3.845,3284,3.845,3285,3.845,3286,3.845,3287,3.402,3288,6.156,3289,3.845,3290,6.096,3291,3.845,3292,5.318,3293,4.977,3294,5.318,3295,6.578,3296,6.578,3297,5.318,3298,3.599,3299,3.845,3300,3.845,3301,3.845,3302,3.845,3303,3.845,3304,3.845,3305,3.845,3306,3.599,3307,3.845,3308,3.845,3309,5.318,3310,3.845,3311,3.845,3312,3.845,3313,3.845,3314,4.283,3315,5.318]],["title/interfaces/OTPInputState.html",[0,0.374,3298,3.7]],["body/interfaces/OTPInputState.html",[0,0.612,2,0.101,3,0.041,4,0.041,5,0.035,7,0.329,8,2,11,0.063,12,0.064,15,3.398,20,2.568,21,0.323,22,0.052,23,0.006,25,2.212,28,0.552,29,0.92,30,4.299,33,3.301,34,1.512,36,4.246,38,3.097,40,3.382,41,1.24,49,0.08,50,2.013,54,3.466,71,1.003,89,2.039,113,0.004,114,0.004,120,0.859,152,2.153,173,3.081,184,0.931,224,0.652,225,2.536,331,3.763,350,3.304,353,3.251,497,4.504,512,2.742,528,4.733,589,4.278,689,2.31,722,1.89,734,2.26,800,3.224,858,2.669,880,2.417,885,3.876,886,2.117,887,4.06,889,1.962,890,3.56,903,3.876,907,2.905,908,2.905,1017,5.924,1071,3.329,1078,2.362,1081,2.475,1105,3.876,1175,4.624,1177,2.905,1185,4.278,1536,3.624,2073,2.475,2254,6.351,2520,5.618,2807,3.207,3131,3.998,3279,3.329,3282,4.028,3283,4.304,3284,4.304,3285,4.304,3286,4.304,3287,3.807,3288,6.911,3289,4.304,3290,5.741,3291,4.304,3292,6.46,3293,4.028,3294,4.304,3295,4.304,3296,5.741,3297,4.304,3298,5.373,3299,6.891,3300,4.304,3301,4.304,3302,4.304,3303,4.304,3304,4.304,3305,4.304,3306,4.028,3307,4.304,3308,4.304,3309,5.741,3310,4.304,3311,4.304,3312,4.304,3313,4.304,3314,4.624,3315,5.741]],["title/interfaces/PaginatedRequest.html",[0,0.374,316,3.185]],["body/interfaces/PaginatedRequest.html",[0,0.599,2,0.072,3,0.029,4,0.029,5,0.059,7,0.234,11,0.025,12,0.05,13,1.044,21,0.317,22,0.059,23,0.006,26,2.008,28,0.393,29,0.798,43,0.486,48,1.762,49,0.087,71,1.167,73,1.608,74,1.629,94,0.861,98,3.394,113,0.003,114,0.003,117,1.701,120,1.322,123,1.609,126,1.252,132,1.343,133,1.547,138,1.511,164,1.51,177,2.333,183,0.976,184,0.939,187,1.644,188,2.496,189,1.189,190,0.946,191,1.682,194,1.642,196,3.119,198,1.542,207,0.704,224,0.804,227,2.631,232,2.468,233,2.58,234,2.283,239,2.468,244,1.321,245,1.346,249,1.274,251,3.641,257,2.008,263,1.464,265,2.185,276,2.753,286,2.283,295,2.424,307,4.523,308,2.58,309,2.631,310,2.58,311,2.12,312,2.37,313,0.631,314,1.232,315,2.963,316,3.641,317,5.247,318,4.268,319,4.268,320,3.866,321,3.741,322,2.468,323,2.205,324,2.58,325,2.71,326,2.468,327,1.762,328,3.806,329,2.58,330,1.952,331,2.008,332,2.58,333,2.821,334,4.13,335,2.58,336,2.58,337,2.71,338,2.732,339,2.71,340,3.999,341,2.71,342,2.71,343,2.71,344,2.71,345,2.71,346,1.762,347,2.71,348,2.71,349,2.283,350,2.83,351,1.424,352,2.71,353,1.542,354,2.71,355,2.71,356,2.58,357,2.71,358,2.71,359,2.468,360,2.58,361,2.235,362,3.999,363,3.369,364,3.999,365,2.283,366,2.71,367,2.468,368,2.71,369,2.71,370,2.71,371,2.71,372,2.58,373,1.481,374,1.952,375,2.205,376,2.71,377,3.741,378,2.71,379,3.641,380,2.71,381,2.71,382,2.71,383,2.468,384,2.71,385,1.644,386,5.247,387,2.205,388,2.205,389,2.71,390,2.71,391,2.71,392,2.71,393,1.682,394,2.71,395,2.58,396,1.762,397,2.58,398,2.58,399,2.37,400,2.134,401,2.58,402,2.71,403,2.71,404,2.58,405,2.71,406,2.71,407,2.71,408,2.71,409,2.71,410,1.851,411,2.205,412,2.068,413,3.999,414,3.999,415,2.58,416,2.963,417,4.752,418,2.71,419,2.71,420,4.419,421,2.71,422,2.71,423,2.283,424,1.762,425,1.762,426,2.71,427,2.71,428,2.71,429,1.9,430,1.481,431,1.575,432,2.605,433,2.37,434,2.71,435,4.13,436,2.71,437,3.741,438,2.71,439,2.58,440,2.283,441,2.71,442,2.71,443,2.71,444,2.71,445,2.71,446,2.71,447,2.71,448,1.762,449,1.644,450,2.71,451,0.652,452,2.142,453,4.752,454,3.999,455,3.999,456,4.03,457,1.762,458,2.068,459,2.58,460,2.58,461,2.58,462,2.468,463,2.71,464,2.468,465,1.9,466,2.068,467,2.134,468,2.71,469,2.71,470,2.37,471,3.052,472,5.247,473,2.068,474,2.71,475,2.71,476,2.71,477,2.71,478,2.58,479,2.71,480,2.71,481,2.71,482,2.71,483,2.71]],["title/interfaces/PaginatedResponse.html",[0,0.374,322,3.185]],["body/interfaces/PaginatedResponse.html",[0,0.605,2,0.074,3,0.03,4,0.03,5,0.059,11,0.025,12,0.051,21,0.312,22,0.059,23,0.006,26,2.061,28,0.403,29,0.804,43,0.499,48,1.808,49,0.087,71,1.17,73,1.632,74,1.634,94,0.884,98,3.431,113,0.003,114,0.003,117,1.66,120,1.334,123,1.651,126,1.285,132,1.297,133,1.564,138,1.551,164,1.533,177,2.358,183,1.002,184,0.924,187,3.223,188,1.819,189,1.22,190,0.971,191,1.726,194,1.662,196,2.272,198,1.583,207,0.723,224,0.806,227,2.659,232,2.533,233,2.648,234,2.343,239,2.533,244,1.356,245,1.381,249,1.308,251,3.712,257,2.061,263,1.492,265,2.227,276,2.779,286,2.343,295,2.454,307,4.593,308,2.648,309,2.659,310,2.648,311,1.819,312,2.433,313,0.648,314,1.743,315,3.936,316,2.533,317,2.782,318,2.263,319,2.263,320,2.263,321,2.19,322,3.712,323,2.263,324,2.648,325,2.782,326,2.533,327,1.808,328,3.88,329,2.648,330,2.004,331,2.061,332,2.648,333,2.864,334,4.182,335,2.648,336,2.648,337,2.782,338,2.784,339,2.782,340,4.077,341,2.782,342,2.782,343,2.782,344,2.782,345,2.782,346,1.808,347,2.782,348,2.782,349,2.343,350,2.86,351,1.461,352,2.782,353,1.583,354,2.782,355,2.782,356,2.648,357,2.782,358,2.782,359,2.533,360,2.648,361,2.269,362,4.077,363,3.434,364,4.077,365,2.343,366,2.782,367,2.533,368,2.782,369,2.782,370,2.782,371,2.782,372,2.648,373,1.52,374,2.004,375,2.263,376,2.782,377,3.798,378,2.782,379,3.712,380,2.782,381,2.782,382,2.782,383,2.533,384,2.782,385,1.688,386,5.313,387,2.263,388,2.263,389,2.782,390,2.782,391,2.782,392,2.782,393,1.726,394,2.782,395,2.648,396,1.808,397,2.648,398,2.648,399,2.433,400,2.19,401,2.648,402,2.782,403,2.782,404,2.648,405,2.782,406,2.782,407,2.782,408,2.782,409,2.782,410,1.9,411,2.263,412,2.123,413,4.077,414,4.077,415,2.648,416,3.02,417,4.825,418,2.782,419,2.782,420,4.475,421,2.782,422,2.782,423,2.343,424,1.808,425,1.808,426,2.782,427,2.782,428,2.782,429,1.95,430,1.52,431,1.616,432,2.637,433,2.433,434,2.782,435,4.182,436,2.782,437,3.798,438,2.782,439,2.648,440,2.343,441,2.782,442,2.782,443,2.782,444,2.782,445,2.782,446,2.782,447,2.782,448,1.808,449,1.688,450,2.782,451,0.669,452,2.184,453,4.825,454,4.077,455,4.077,456,4.074,457,1.808,458,2.123,459,2.648,460,2.648,461,2.648,462,2.533,463,2.782,464,2.533,465,1.95,466,2.123,467,2.19,468,2.782,469,2.782,470,2.433,471,3.111,472,5.313,473,2.123,474,2.782,475,2.782,476,2.782,477,2.782,478,2.648,479,2.782,480,2.782,481,2.782,482,2.782,483,2.782,486,2.936]],["title/interfaces/PersistenceLoadingProps.html",[0,0.374,2881,3.954]],["body/interfaces/PersistenceLoadingProps.html",[0,0.515,2,0.094,3,0.038,4,0.038,5,0.032,7,0.304,8,2.883,10,1.681,11,0.032,12,0.061,13,0.887,16,2.861,21,0.217,22,0.05,23,0.006,28,0.796,29,0.814,42,1.543,43,0.985,44,1.59,45,1.419,46,1.884,47,1.19,49,0.069,71,1.134,72,2.39,73,1.19,74,1.64,75,2.829,83,2.94,87,1.922,89,2.94,90,2.858,91,3.517,93,2.233,94,1.118,103,2.883,108,2.987,110,2.829,113,0.004,114,0.004,120,1.475,139,3.247,152,1.491,164,1.53,184,0.737,213,1.848,249,2.264,314,1.484,351,2.529,432,2.39,619,4.285,641,2.534,708,6.058,711,2.347,722,1.747,736,1.813,798,4.094,868,2.233,870,3.289,875,2.044,886,2.007,909,4.248,915,2.77,921,1.813,925,4.189,962,2.883,963,1.848,966,2.39,974,1.922,977,3.518,989,5.618,1095,2.921,1100,2.403,1101,3.13,1117,2.858,1118,2.088,1157,2.685,1315,2.343,1323,3.954,1326,2.77,1329,3.375,1458,2.964,1583,3.203,1613,2.529,1699,3.203,1702,3.722,1783,3.722,1826,3.977,1850,3.722,1989,4.815,2191,4.815,2726,3.349,2852,3.203,2879,3.977,2880,4.319,2881,5.443,2882,8.285,2883,7.835,2884,7.588,2885,7.588,2886,4.319,2887,4.319,2888,5.91,2889,4.319,2890,3.518,2891,5.91,2892,4.319,2893,4.319,2894,5.91,2895,5.91,2896,4.319,2897,4.319,2898,3.977,2899,3.977,2900,3.977,2901,5.91,2902,3.076]],["title/interfaces/PersistenceStatus.html",[0,0.374,3316,4.293]],["body/interfaces/PersistenceStatus.html",[0,0.458,2,0.114,3,0.046,4,0.046,5,0.039,11,0.039,12,0.069,22,0.055,23,0.006,28,0.62,29,0.797,30,3.401,34,1.5,35,2.574,43,0.984,44,1.24,49,0.069,71,1.154,74,1.277,113,0.005,114,0.005,151,2.596,164,1.922,194,1.339,207,1.112,224,0.827,276,2.578,570,2.086,573,2.012,583,2.292,586,2.049,606,2.435,613,3.266,683,2.923,689,2.596,750,6.276,798,3.669,800,3.48,843,2.825,989,6.677,1133,2.435,1134,3.171,1167,3.369,1588,3.949,1604,3.897,1605,4.528,1617,4.838,1644,3.171,1806,5.095,1907,3.481,1964,7.425,2217,6.197,2781,5.8,3131,4.316,3316,7.425,3317,5.884,3318,9.889,3319,9.645,3320,7.538,3321,5.884,3322,5.884,3323,8.317,3324,5.884,3325,5.884,3326,5.884,3327,5.884,3328,5.884,3329,5.884,3330,7.538,3331,5.884,3332,8.317,3333,5.884,3334,4.838,3335,5.884,3336,5.884,3337,5.884,3338,5.884,3339,7.538,3340,5.884]],["title/interfaces/ProfileApiError.html",[0,0.374,2526,3.185]],["body/interfaces/ProfileApiError.html",[0,0.716,2,0.11,3,0.045,4,0.045,5,0.038,7,0.357,11,0.038,12,0.067,13,0.669,21,0.333,22,0.058,23,0.006,29,0.707,49,0.084,113,0.004,114,0.004,117,1.162,118,1.946,120,1.422,132,1.444,133,1.742,142,2.405,143,2.405,153,1.715,159,2.061,162,1.653,164,1.315,175,2.568,176,3.406,184,0.876,220,3.387,224,0.763,295,1.912,309,2.961,313,1.467,314,1.653,330,2.981,431,3.117,451,1.636,456,2.981,457,2.69,494,2.766,495,2.985,561,2.874,587,2.902,734,2.457,736,2.133,756,5.264,810,3.158,853,4.806,893,2.902,901,2.69,1002,2.827,1474,2.627,1575,2.307,1606,2.511,1613,2.818,1630,2.902,1733,3.769,2504,3.769,2505,3.939,2506,5.107,2507,3.975,2508,4.519,2509,3.939,2510,6.566,2511,3.939,2512,3.939,2513,5.107,2514,3.939,2515,5.107,2516,5.107,2517,3.939,2518,3.939,2519,3.486,2520,3.486,2521,3.769,2522,3.939,2523,3.769,2524,3.619,2525,3.939,2526,4.885]],["title/interfaces/ProfileData.html",[0,0.374,2508,2.946]],["body/interfaces/ProfileData.html",[0,0.695,2,0.099,3,0.04,4,0.04,5,0.034,7,0.321,11,0.034,12,0.063,13,0.602,21,0.337,22,0.065,23,0.006,29,0.659,49,0.082,113,0.004,114,0.004,117,1.046,118,1.751,120,0.84,125,1.956,132,1.296,133,1.563,139,1.956,142,2.907,143,2.907,153,1.836,159,2.32,162,1.862,164,1.796,175,3.107,176,3.587,184,0.811,220,3.693,224,0.571,295,2.311,309,1.751,313,1.408,314,1.741,330,2.682,431,2.907,451,1.696,456,2.682,457,2.42,494,2.895,495,3.053,561,3.027,587,3.508,734,2.97,736,1.919,756,5.212,810,3.818,853,2.841,893,2.61,901,2.42,1002,2.543,1474,3.176,1575,3.368,1606,2.259,1613,2.628,1630,2.61,1733,4.556,2504,3.39,2505,3.544,2506,4.762,2507,3.707,2508,4.76,2509,5.751,2510,6.716,2511,5.751,2512,5.751,2513,6.178,2514,4.762,2515,6.178,2516,6.178,2517,4.762,2518,5.751,2519,3.136,2520,3.136,2521,3.39,2522,3.544,2523,3.39,2524,3.256,2525,3.544,2526,3.39,3341,5.119,3342,5.119]],["title/interfaces/ProfileFormData.html",[0,0.374,3343,3.954]],["body/interfaces/ProfileFormData.html",[0,0.521,2,0.062,3,0.025,4,0.025,5,0.021,7,0.202,8,1.227,10,1.517,11,0.021,12,0.045,13,0.378,16,0.99,20,1.809,21,0.293,22,0.045,23,0.006,27,3.212,28,0.63,29,0.308,32,2.043,34,1.078,35,0.912,36,1.519,38,1.901,40,1.556,41,0.571,42,1.025,43,1.093,44,1.604,45,0.942,46,1.251,47,1.47,49,0.045,50,1.102,59,1.968,70,1.329,71,1.127,72,1.776,73,0.79,74,1.29,75,1.843,83,1.251,84,3.833,85,3.716,87,3.148,89,3.086,90,2.579,91,2.473,93,3.658,94,1.936,95,1.227,98,1.417,100,1.839,103,1.879,107,1.901,108,1.45,111,3.405,113,0.003,114,0.003,120,0.981,132,0.536,151,2.954,152,0.99,164,0.743,184,0.584,185,1.776,194,1.119,224,0.496,244,1.139,248,1.683,252,1.483,263,1.782,276,1.682,314,2.001,327,1.519,333,1.387,373,2.867,451,1.495,456,3.13,494,2.583,495,2.727,527,2.965,528,3.781,542,3.599,572,1.519,573,1.099,601,2.382,612,4.136,618,1.638,630,1.483,662,1.118,675,3.773,677,2.337,692,2.219,722,2.417,734,1.387,736,2.705,756,4.956,800,4.014,857,2.816,858,1.638,878,1.357,880,2.271,886,2.402,889,2.705,901,1.519,921,1.843,959,1.45,962,2.283,963,1.227,966,2.157,974,3.247,975,2.443,1011,2.035,1078,2.696,1081,1.519,1082,1.45,1083,1.417,1084,1.45,1087,2.043,1095,3.696,1106,3.535,1109,2.65,1110,1.901,1116,1.417,1117,3.527,1118,1.387,1122,3.833,1125,6.184,1133,3.278,1142,3.784,1160,1.387,1175,5.246,1176,2.472,1182,2.127,1192,4.996,1193,2.337,1202,2.641,1203,3.8,1220,3.257,1243,4.136,1256,1.783,1302,2.224,1315,2.382,1321,2.224,1322,2.224,1323,2.576,1329,1.638,1441,1.783,1587,3.661,1588,3.13,1606,2.954,1630,3.881,1643,2.641,1644,1.731,1691,2.641,1694,2.043,1695,2.127,1696,2.043,1806,4.663,1860,2.337,2068,2.472,2093,3.013,2110,1.519,2117,2.337,2169,2.337,2170,2.337,2247,1.556,2351,5.933,2352,2.641,2356,2.641,2370,2.641,2374,4.913,2508,3.013,2519,3.013,2639,2.127,2774,2.337,2890,3.577,2937,2.472,3093,3.961,3334,4.913,3343,5.505,3344,2.868,3345,5.335,3346,2.868,3347,2.868,3348,4.391,3349,2.868,3350,2.641,3351,2.868,3352,7.479,3353,2.868,3354,5.335,3355,5.977,3356,4.391,3357,2.868,3358,7.762,3359,5.977,3360,2.868,3361,5.335,3362,2.868,3363,2.472,3364,2.868,3365,2.868,3366,2.868,3367,2.868,3368,2.868,3369,4.391,3370,4.391,3371,4.391,3372,4.391,3373,2.868,3374,4.391,3375,2.868,3376,8.132,3377,4.391,3378,4.391,3379,2.868,3380,2.868,3381,2.868,3382,2.868,3383,7.295,3384,2.868,3385,2.868,3386,5.977,3387,4.391,3388,2.868,3389,2.868,3390,2.868,3391,2.868,3392,2.868,3393,2.868,3394,2.868,3395,4.043,3396,2.868,3397,2.868,3398,2.641,3399,2.641,3400,4.391,3401,2.641,3402,2.868,3403,2.868,3404,2.868,3405,4.391,3406,2.868,3407,4.391,3408,2.868,3409,2.868,3410,4.391,3411,2.868,3412,2.868,3413,2.868,3414,2.868,3415,4.391,3416,2.868,3417,4.391,3418,2.868,3419,2.472,3420,2.868,3421,2.641,3422,2.868,3423,2.868,3424,2.868,3425,2.868,3426,2.868,3427,2.868,3428,2.868,3429,2.868,3430,2.868,3431,2.868,3432,2.868,3433,2.868,3434,2.868]],["title/interfaces/ProfileFormProps.html",[0,0.374,3350,3.954]],["body/interfaces/ProfileFormProps.html",[0,0.458,2,0.061,3,0.025,4,0.025,5,0.021,7,0.197,8,1.845,10,1.495,11,0.021,12,0.044,13,0.978,16,1.489,20,2.626,21,0.284,22,0.05,23,0.006,27,3.185,28,0.621,29,0.564,32,1.995,34,1.193,35,1.671,36,2.283,38,1.856,40,2.339,41,0.858,42,1.001,43,1.086,44,1.588,45,0.92,46,1.222,47,1.448,49,0.044,50,1.082,59,1.922,70,1.298,71,1.123,72,1.744,73,0.772,74,1.278,75,1.81,83,1.222,84,3.786,85,3.67,87,3.121,89,3.06,90,2.542,91,2.436,93,3.627,94,1.923,95,1.199,98,1.384,100,1.796,103,1.845,107,1.856,108,1.416,111,2.172,113,0.003,114,0.003,120,1.085,132,0.523,151,3.15,152,0.967,164,0.725,184,0.575,185,1.744,194,1.099,224,0.549,244,1.112,248,1.644,252,1.448,263,1.76,276,1.651,314,2.013,327,1.483,333,1.354,373,2.837,451,1.374,456,3.464,494,2.325,495,2.506,527,2.937,528,3.746,542,3.933,572,1.483,573,1.073,601,2.339,612,4.076,618,1.6,630,2.23,662,1.092,675,3.744,677,2.282,692,2.179,722,2.388,734,1.354,736,2.676,756,4.985,800,3.991,857,2.765,858,1.6,878,1.326,880,2.23,886,2.382,889,3.04,901,1.483,921,1.81,959,1.416,962,2.25,963,1.199,966,2.126,974,3.222,975,2.399,1011,1.998,1078,2.984,1081,2.283,1082,1.416,1083,1.384,1084,1.416,1087,1.995,1095,3.67,1106,3.483,1109,2.602,1110,1.856,1116,1.384,1117,3.501,1118,1.354,1122,3.786,1125,6.199,1133,3.251,1142,3.716,1160,1.354,1175,5.202,1176,2.414,1182,2.078,1192,5.22,1193,2.282,1202,2.579,1203,3.744,1220,3.198,1243,4.578,1256,1.741,1302,2.172,1315,2.339,1321,2.172,1322,2.172,1323,2.53,1329,1.6,1441,1.741,1587,3.607,1588,3.084,1606,2.918,1630,3.64,1643,2.579,1644,1.691,1691,2.579,1694,1.995,1695,2.078,1696,1.995,1806,4.619,1860,2.282,2068,2.414,2093,2.959,2110,1.483,2117,2.282,2169,2.282,2170,2.282,2247,1.52,2351,6.667,2352,2.579,2356,3.97,2370,2.579,2374,4.841,2508,4.051,2519,2.959,2639,2.078,2774,2.282,2890,3.512,2937,2.414,3093,3.912,3334,4.841,3343,4.841,3344,2.801,3345,5.257,3346,2.801,3347,2.801,3348,4.312,3349,2.801,3350,3.97,3351,4.312,3352,7.831,3353,2.801,3354,5.257,3355,5.903,3356,4.312,3357,2.801,3358,7.717,3359,5.903,3360,2.801,3361,5.257,3362,2.801,3363,2.414,3364,2.801,3365,2.801,3366,2.801,3367,2.801,3368,2.801,3369,4.312,3370,4.312,3371,4.312,3372,4.312,3373,2.801,3374,4.312,3375,2.801,3376,8.096,3377,4.312,3378,4.312,3379,2.801,3380,2.801,3381,2.801,3382,2.801,3383,7.24,3384,2.801,3385,2.801,3386,5.903,3387,4.312,3388,2.801,3389,2.801,3390,2.801,3391,2.801,3392,2.801,3393,2.801,3394,2.801,3395,3.97,3396,2.801,3397,2.801,3398,2.579,3399,2.579,3400,4.312,3401,2.579,3402,2.801,3403,2.801,3404,2.801,3405,4.312,3406,2.801,3407,4.312,3408,2.801,3409,2.801,3410,4.312,3411,2.801,3412,2.801,3413,2.801,3414,2.801,3415,4.312,3416,2.801,3417,4.312,3418,2.801,3419,2.414,3420,2.801,3421,2.579,3422,2.801,3423,2.801,3424,2.801,3425,2.801,3426,2.801,3427,2.801,3428,2.801,3429,2.801,3430,2.801,3431,2.801,3432,2.801,3433,2.801,3434,2.801]],["title/interfaces/ProfileIconProps.html",[0,0.374,3435,4.293]],["body/interfaces/ProfileIconProps.html",[0,0.497,2,0.123,3,0.05,4,0.05,5,0.043,10,1.62,11,0.043,12,0.073,13,1.141,20,3.417,21,0.311,22,0.06,23,0.006,28,0.673,35,2.564,38,4.694,40,3.843,41,1.409,42,2.036,43,1.179,44,1.903,46,2.486,47,1.952,49,0.073,50,1.43,71,1.081,72,2.304,74,1.081,75,2.392,83,2.486,89,2.486,90,2.755,91,3.283,103,2.438,110,3.637,113,0.005,114,0.005,184,0.843,359,5.254,432,3.467,756,5.013,873,4.289,875,4.1,921,2.392,962,3.031,963,2.438,966,3.117,1011,2.641,1081,3.751,1082,2.88,1083,2.816,1084,2.88,1118,2.755,1315,3.092,2093,4.861,2100,3.776,2986,5.247,3435,7.084,3436,6.382,3437,7.084,3438,6.382]],["title/interfaces/ProfileValidation.html",[0,0.374,2523,3.185]],["body/interfaces/ProfileValidation.html",[0,0.716,2,0.11,3,0.045,4,0.045,5,0.038,7,0.358,11,0.038,12,0.068,13,0.671,21,0.33,22,0.064,23,0.006,29,0.708,49,0.084,113,0.004,114,0.004,117,1.165,118,1.95,120,0.936,132,1.367,133,1.648,142,2.41,143,2.41,153,1.716,159,2.063,162,1.655,164,1.318,175,2.572,176,3.411,184,0.8,220,3.391,224,0.613,295,1.916,309,1.95,313,1.468,314,1.655,330,2.988,431,3.121,451,1.691,456,2.988,457,2.696,486,4.819,494,2.926,495,3.085,561,2.878,587,2.908,734,2.462,736,2.138,756,5.267,810,3.165,853,3.165,893,2.908,901,2.696,1002,2.833,1474,2.633,1575,2.312,1606,3.259,1613,2.822,1630,2.908,1733,3.777,2504,3.777,2505,3.948,2506,5.114,2507,3.981,2508,4.525,2509,3.948,2510,6.569,2511,3.948,2512,3.948,2513,5.114,2514,3.948,2515,5.114,2516,5.114,2517,3.948,2518,3.948,2519,3.494,2520,3.494,2521,3.777,2522,5.114,2523,4.892,2524,3.627,2525,3.948,2526,3.777]],["title/interfaces/QuotationActionResponse.html",[0,0.374,3439,4.293]],["body/interfaces/QuotationActionResponse.html",[0,0.33,2,0.082,3,0.033,4,0.033,5,0.028,7,0.266,11,0.028,12,0.055,13,0.71,21,0.231,22,0.065,23,0.006,26,3.789,28,0.447,29,0.674,39,4.868,41,1.705,43,0.918,49,0.074,65,2.788,66,2.499,71,1.06,74,1.426,113,0.004,114,0.004,117,1.233,120,1.154,122,1.307,132,0.707,133,1.629,135,1.376,142,2.551,143,2.551,147,2.391,148,2.04,153,1.604,154,2.004,166,2.716,186,2.664,188,2.282,189,2.685,191,2.724,192,3.903,194,0.965,197,2.353,224,0.775,244,1.503,295,2.828,309,1.45,313,1.298,314,1.941,330,4.014,333,3.035,346,3.622,377,4.026,399,2.696,465,2.162,527,1.652,638,3.699,643,2.18,661,4.18,662,2.93,670,3.572,710,2.696,736,1.589,760,2.606,774,2.508,809,2.004,843,2.263,850,1.755,1267,3.873,1284,3.486,1295,5.391,1515,3.785,1558,3.079,1573,4.18,1576,3.557,1609,2.598,1613,1.62,1725,1.792,1765,3.572,1926,3.486,1936,3.84,1995,2.696,2073,2.004,2400,3.998,2401,2.808,2406,4.472,2407,6.812,2408,3.486,2427,7.23,2428,3.785,2433,3.262,2434,2.808,2435,2.808,2436,5.781,2437,2.808,2439,5.781,2444,3.262,2452,6.921,2453,5.781,2480,4.657,2481,3.998,2482,4.18,2483,4.657,2527,2.598,2533,3.572,2534,4.595,2545,2.598,2552,2.598,2553,2.598,2687,4.391,2763,4.391,2957,3.998,2976,4.16,3206,3.457,3363,3.262,3439,5.391,3440,4.24,3441,4.964,3442,3.486,3443,8.661,3444,3.785,3445,3.785,3446,5.391,3447,3.785,3448,7.662,3449,8.098,3450,6.038,3451,4.24,3452,4.24,3453,5.391,3454,4.24,3455,4.24,3456,4.24,3457,4.24,3458,4.24,3459,4.24,3460,3.785,3461,4.24,3462,5.391,3463,4.646,3464,6.038,3465,6.038,3466,6.038,3467,6.038,3468,6.841,3469,6.038,3470,6.038,3471,6.278,3472,6.038,3473,3.785,3474,4.24,3475,5.391,3476,3.785,3477,4.24,3478,4.24,3479,4.24,3480,3.785,3481,4.24,3482,3.785,3483,3.785,3484,3.785]],["title/interfaces/QuotationComponent.html",[0,0.374,2537,3.058]],["body/interfaces/QuotationComponent.html",[0,0.741,2,0.119,3,0.048,4,0.048,5,0.041,7,0.385,10,1.965,11,0.041,12,0.071,21,0.333,22,0.059,23,0.006,41,1.582,49,0.088,113,0.005,114,0.005,117,1.253,133,1.557,148,2.257,153,1.679,160,2.344,161,2.744,166,2.427,177,2.347,182,2.098,183,2.028,184,0.981,186,3.415,188,2.511,190,1.557,451,1.557,465,3.128,691,2.971,995,2.538,1015,4.942,1092,4.579,1145,2.832,1267,3.652,1335,3.404,1558,3.128,1575,2.487,1576,3.27,1725,2.592,2527,3.758,2528,3.901,2529,4.062,2530,5.268,2531,3.512,2532,4.062,2533,4.579,2534,3.749,2535,5.125,2536,4.062,2537,5.663,2538,4.062,2539,4.922,2540,4.062,2541,4.062,2542,4.062,2543,4.062,2544,4.062,2545,3.758,2546,4.062,2547,4.062,2548,4.062,2549,4.062,2550,4.062,2551,4.062,2552,3.758,2553,3.758,2554,4.062]],["title/interfaces/QuotationDetail.html",[0,0.374,2545,2.946]],["body/interfaces/QuotationDetail.html",[0,0.728,2,0.11,3,0.045,4,0.045,5,0.038,7,0.356,10,1.44,11,0.038,12,0.067,13,1.08,21,0.335,22,0.066,23,0.006,41,1.008,49,0.087,113,0.004,114,0.004,117,1.159,133,1.481,148,2.445,153,1.819,160,2.167,161,3.177,166,2.308,177,1.72,182,1.94,183,1.929,184,0.972,186,3.248,188,2.389,190,1.44,451,0.992,465,2.892,486,3.857,691,3.566,995,2.347,1015,3.148,1092,5.303,1145,3.993,1267,3.578,1335,3.148,1558,2.892,1575,3.507,1576,3.111,1725,2.397,2527,3.475,2528,3.608,2529,3.757,2530,5.434,2531,3.248,2532,3.757,2533,4.355,2534,4.342,2535,5.936,2536,3.757,2537,5.198,2538,3.757,2539,5.501,2540,3.757,2541,3.757,2542,3.757,2543,3.757,2544,4.875,2545,4.51,2546,5.728,2547,3.757,2548,3.757,2549,5.728,2550,5.728,2551,5.728,2552,3.475,2553,3.475,2554,3.757]],["title/interfaces/QuotationListItem.html",[0,0.374,2533,2.845]],["body/interfaces/QuotationListItem.html",[0,0.737,2,0.116,3,0.047,4,0.047,5,0.04,7,0.376,10,1.519,11,0.04,12,0.07,21,0.333,22,0.063,23,0.006,41,1.063,49,0.088,113,0.005,114,0.005,117,1.222,133,1.532,148,2.48,153,1.845,160,2.286,161,3.23,166,2.628,177,1.814,182,2.046,183,1.996,184,0.983,186,3.361,188,2.472,190,1.519,451,1.046,465,3.051,691,2.898,995,3.152,1015,3.321,1092,4.507,1145,2.762,1267,3.629,1335,3.321,1558,3.051,1575,2.426,1576,3.219,1725,2.528,2527,3.665,2528,3.805,2529,3.962,2530,5.511,2531,3.425,2532,5.045,2533,4.959,2534,4.414,2535,6.035,2536,5.843,2537,5.33,2538,3.962,2539,4.845,2540,3.962,2541,3.962,2542,3.962,2543,3.962,2544,3.962,2545,3.665,2546,3.962,2547,3.962,2548,3.962,2549,3.962,2550,3.962,2551,3.962,2552,3.665,2553,3.665,2554,3.962]],["title/interfaces/QuotationPdfResponse.html",[0,0.374,2553,2.946]],["body/interfaces/QuotationPdfResponse.html",[0,0.744,2,0.121,3,0.049,4,0.049,5,0.042,7,0.391,10,1.583,11,0.042,12,0.071,21,0.332,22,0.052,23,0.006,41,1.107,49,0.088,113,0.005,114,0.005,117,1.273,133,1.718,148,2.274,153,1.692,160,2.382,161,2.772,166,2.452,177,1.89,182,2.132,183,2.049,184,0.976,186,3.45,188,2.537,190,1.583,451,1.09,465,3.986,691,3.02,995,2.58,1015,3.46,1092,4.625,1145,2.878,1267,3.667,1335,3.46,1558,3.178,1575,2.527,1576,3.304,1725,2.634,2527,3.819,2528,3.964,2529,4.128,2530,5.299,2531,3.569,2532,4.128,2533,4.625,2534,3.787,2535,5.178,2536,4.128,2537,5.433,2538,4.128,2539,4.972,2540,4.128,2541,4.128,2542,4.128,2543,4.128,2544,4.128,2545,3.819,2546,4.128,2547,4.128,2548,4.128,2549,4.128,2550,4.128,2551,4.128,2552,3.819,2553,4.79,2554,5.931]],["title/interfaces/QuotationPricing.html",[0,0.374,2539,3.058]],["body/interfaces/QuotationPricing.html",[0,0.738,2,0.117,3,0.048,4,0.048,5,0.04,7,0.379,10,1.533,11,0.04,12,0.07,21,0.329,22,0.062,23,0.006,41,1.072,49,0.088,113,0.005,114,0.005,117,1.233,133,1.541,148,2.241,153,1.667,160,2.307,161,2.716,166,2.402,177,1.83,182,2.064,183,2.394,184,0.994,186,3.38,188,2.486,190,1.533,451,1.056,465,3.078,691,2.924,995,2.498,1015,3.351,1092,4.98,1145,2.787,1267,3.637,1335,3.351,1558,3.078,1575,2.447,1576,3.237,1725,2.551,2527,3.698,2528,3.839,2529,3.998,2530,5.238,2531,3.456,2532,3.998,2533,4.533,2534,3.711,2535,5.074,2536,3.998,2537,5.353,2538,5.074,2539,5.353,2540,5.863,2541,5.863,2542,5.863,2543,5.863,2544,3.998,2545,3.698,2546,3.998,2547,3.998,2548,3.998,2549,3.998,2550,3.998,2551,3.998,2552,3.698,2553,3.698,2554,3.998]],["title/interfaces/QuotationsListResponse.html",[0,0.374,2552,2.946]],["body/interfaces/QuotationsListResponse.html",[0,0.74,2,0.118,3,0.048,4,0.048,5,0.041,7,0.382,10,1.545,11,0.041,12,0.07,21,0.329,22,0.061,23,0.006,41,1.081,49,0.088,113,0.005,114,0.005,117,1.243,133,1.699,148,2.249,153,1.673,160,2.325,161,2.73,166,2.649,177,1.845,182,3.036,183,2.4,184,0.988,186,4.041,188,2.972,190,1.545,451,1.064,465,3.103,691,2.948,995,2.518,1015,3.377,1092,4.556,1145,2.809,1267,3.568,1335,3.377,1558,3.103,1575,2.467,1576,3.57,1725,2.571,2527,3.728,2528,3.87,2529,4.03,2530,5.253,2531,3.484,2532,4.03,2533,5.253,2534,3.73,2535,5.099,2536,4.03,2537,5.373,2538,4.03,2539,4.897,2540,4.03,2541,4.03,2542,4.03,2543,4.03,2544,4.03,2545,3.728,2546,4.03,2547,4.03,2548,4.03,2549,4.03,2550,4.03,2551,4.03,2552,4.717,2553,3.728,2554,4.03]],["title/interfaces/QuotesTabProps.html",[0,0.374,3485,4.293]],["body/interfaces/QuotesTabProps.html",[0,0.177,2,0.044,3,0.018,4,0.018,5,0.015,9,2.035,10,1.21,11,0.015,12,0.034,15,0.924,16,1.701,21,0.215,22,0.025,23,0.006,26,4.345,27,1.518,28,0.395,32,3.509,33,3.097,34,1.1,35,1.86,38,1.348,39,5.005,40,1.814,41,0.665,42,0.727,43,1.129,44,1.284,45,1.618,47,1.172,49,0.021,50,0.839,52,2.078,59,2.294,62,1.509,66,2.283,70,3.19,71,1.151,72,1.72,74,1.516,76,1.753,84,1.305,85,1.265,87,2.192,88,1.052,89,1.458,90,0.984,91,0.943,94,1.6,95,2.762,96,1.396,100,1.305,103,1.43,106,1.449,110,0.854,113,0.002,114,0.002,120,0.615,122,1.701,126,1.601,128,1.814,132,1.155,135,1.79,139,2.108,147,2.218,148,1.744,150,1.228,153,1.483,160,0.871,162,1.236,164,0.527,169,1.162,175,2.281,177,1.445,182,0.779,185,1.352,194,1.084,198,0.943,203,2.2,207,1.152,217,2.283,221,2.102,222,1.028,224,0.78,245,0.823,248,1.194,249,0.779,252,1.052,263,0.607,264,1.162,270,2.144,273,0.943,276,1.63,284,1.348,295,1.854,311,0.739,313,0.807,314,1.895,338,1.132,373,2.873,374,1.194,377,3.751,385,1.652,388,1.348,398,1.578,399,1.449,410,1.132,412,1.265,429,1.162,465,4.252,471,2.078,515,1.028,524,3.078,527,0.888,529,2.078,542,2.881,564,1.077,570,2.8,572,2.253,573,2.758,574,1.509,575,1.657,583,2.697,586,2.281,588,1.162,593,2.673,599,3.028,601,3.627,602,3.284,614,3.751,619,1.729,622,1.753,641,1.961,643,3.052,655,3.078,656,3.193,657,1.509,661,1.578,662,1.659,670,2.215,701,2.881,703,2.881,707,2.253,710,2.381,711,1.327,722,0.823,734,1.616,742,1.104,751,2.919,760,2.057,794,1.305,800,1.052,805,1.396,809,1.77,810,2.078,843,1.786,850,1.972,859,1.077,868,1.052,872,1.972,873,2.2,875,1.582,877,1.265,878,2.331,886,2.489,889,2.889,909,1.077,921,1.786,922,1.005,958,1.509,959,1.028,962,2.108,963,0.871,966,1.72,970,2.723,971,1.657,994,1.657,995,2.522,1011,0.943,1082,1.028,1083,1.005,1084,1.028,1096,1.86,1097,2.078,1098,2.078,1099,2.078,1100,1.86,1101,2.253,1102,2.078,1103,1.194,1104,2.078,1105,1.265,1117,1.616,1133,1.972,1135,1.348,1136,1.657,1140,1.753,1141,1.578,1145,1.052,1148,2.592,1149,1.578,1150,2.723,1151,2.035,1160,0.984,1177,2.645,1180,5.327,1182,2.479,1183,6.205,1196,1.961,1201,4.536,1204,2.881,1205,2.479,1215,1.657,1216,2.294,1254,3.343,1255,3.078,1256,1.265,1267,3.693,1274,2.078,1294,1.578,1315,1.104,1335,1.265,1367,3.918,1423,3.193,1426,1.578,1433,1.578,1458,1.396,1463,3.343,1464,4.254,1465,1.657,1475,1.578,1511,4.926,1512,3.343,1513,3.343,1517,3.918,1518,4.926,1519,4.254,1546,2.723,1558,3.53,1573,3.299,1576,3.616,1613,1.43,1620,1.265,1644,2.973,1673,1.657,1674,3.819,1678,1.753,1692,1.578,1699,1.509,1700,3.299,1701,2.035,1703,1.657,1711,2.919,1712,1.753,1720,1.753,1722,2.035,1724,4.433,1725,2.575,1726,2.035,1754,1.753,1765,1.348,1793,1.874,1794,1.194,1802,2.723,1803,1.657,1805,4.036,1806,2.294,1818,1.396,1819,1.874,1820,1.874,1823,1.874,1831,1.753,1835,2.035,1836,2.035,1898,3.078,1926,3.918,1936,4.902,1965,3.343,2073,2.253,2088,1.578,2093,1.396,2100,1.348,2123,1.753,2190,1.753,2224,1.753,2247,2.673,2259,1.874,2385,4.429,2436,1.874,2482,2.592,2530,2.819,2531,3.489,2533,2.215,2534,2.952,2565,2.035,2566,1.657,2581,1.509,2583,1.874,2584,2.881,2585,1.874,2592,3.53,2599,1.874,2638,3.159,2723,1.509,2743,3.509,2752,1.657,2813,2.723,2839,3.343,2877,1.753,2947,1.874,2976,1.348,2977,2.035,2984,3.343,3031,1.753,3107,1.509,3240,2.592,3395,1.874,3441,4.536,3442,1.874,3444,2.035,3445,6.455,3446,5.441,3447,3.343,3453,2.035,3460,3.343,3462,2.035,3463,1.753,3473,3.343,3475,3.343,3476,3.343,3480,2.035,3482,3.343,3483,3.343,3484,3.343,3485,3.343,3486,2.279,3487,2.279,3488,2.279,3489,2.279,3490,3.078,3491,2.279,3492,2.279,3493,2.035,3494,2.279,3495,4.765,3496,2.279,3497,3.744,3498,2.279,3499,2.279,3500,2.279,3501,5.517,3502,3.744,3503,2.279,3504,3.744,3505,3.744,3506,1.874,3507,6.552,3508,5.011,3509,7.23,3510,4.788,3511,3.744,3512,3.744,3513,2.279,3514,2.279,3515,2.279,3516,2.279,3517,6.552,3518,2.279,3519,2.279,3520,2.279,3521,2.279,3522,6.095,3523,6.552,3524,4.765,3525,2.279,3526,2.279,3527,2.035,3528,7.708,3529,2.035,3530,6.552,3531,2.279,3532,3.918,3533,2.035,3534,1.874,3535,5.517,3536,2.279,3537,2.279,3538,2.279,3539,2.279,3540,2.279,3541,3.078,3542,2.881,3543,3.744,3544,2.279,3545,2.279,3546,3.744,3547,3.744,3548,3.744,3549,3.744,3550,2.479,3551,3.744,3552,3.744,3553,3.744,3554,3.744,3555,3.744,3556,3.343,3557,2.279,3558,2.279,3559,2.279,3560,2.279,3561,2.279,3562,2.279,3563,2.279,3564,2.279,3565,2.279,3566,2.279,3567,2.279,3568,2.279,3569,2.279,3570,2.279,3571,3.744,3572,2.279,3573,2.279,3574,3.918,3575,2.279,3576,2.279,3577,2.279,3578,2.035,3579,2.035,3580,2.279,3581,2.035,3582,2.279,3583,4.765,3584,2.279,3585,2.279,3586,2.279,3587,3.744,3588,1.509,3589,2.279,3590,3.744,3591,2.279,3592,3.744,3593,2.279,3594,3.744,3595,2.035,3596,2.279,3597,2.279,3598,2.279,3599,3.744,3600,2.279,3601,2.279,3602,2.279,3603,2.035,3604,2.279,3605,2.279,3606,2.279,3607,2.279,3608,2.279,3609,2.279,3610,2.035,3611,2.279,3612,2.279,3613,2.279,3614,2.279,3615,2.035,3616,2.035,3617,2.035,3618,2.279,3619,2.035]],["title/interfaces/RNFile.html",[0,0.374,838,2.33]],["body/interfaces/RNFile.html",[0,0.726,2,0.135,3,0.055,4,0.055,5,0.06,7,0.439,11,0.047,12,0.077,21,0.326,22,0.066,23,0.006,29,0.671,44,1.475,47,1.722,49,0.082,113,0.005,114,0.005,184,0.97,432,3.366,451,1.63,452,2.727,641,3.667,662,2.437,838,4.356,852,2.481,1473,5.143,1474,3.232,1478,5.386,1498,5.386,1499,5.755,1500,5.755,1501,5.755,1502,5.755,1503,5.755,1504,5.091,1505,6.781,1506,4.635,1507,4.451,1508,5.755]],["title/interfaces/RefreshError.html",[0,0.374,3620,3.058]],["body/interfaces/RefreshError.html",[0,0.707,2,0.105,3,0.043,4,0.043,5,0.036,11,0.036,12,0.065,13,0.841,16,1.674,21,0.324,22,0.053,23,0.006,28,0.844,29,0.942,30,3.611,33,2.568,34,0.98,49,0.085,50,1.217,73,1.336,113,0.004,114,0.004,132,1.419,147,1.379,148,1.446,152,1.674,159,1.517,162,1.217,164,1.966,181,3.531,183,1.423,184,0.831,224,0.706,244,1.925,263,1.905,277,3.454,309,2.909,313,0.92,314,1.217,452,2.787,487,2.769,506,2.322,527,2.116,630,2.508,643,3.071,716,3.014,760,2.344,843,3.561,850,3.932,1181,3.228,1267,2.116,1393,2.631,1576,3.381,1620,4.441,1792,3.117,1794,2.845,1800,3.597,1801,3.597,1948,3.109,2110,2.568,2296,3.213,2534,2.631,2577,3.971,2592,4.718,2593,3.597,2594,3.597,3104,3.876,3190,3.109,3215,3.454,3216,3.454,3236,3.213,3510,3.597,3588,3.597,3620,5.621,3621,3.597,3622,5.885,3623,3.597,3624,4.738,3625,4.953,3626,4.953,3627,5.853,3628,3.76,3629,5.299,3630,3.597,3631,3.76,3632,3.597,3633,5.632,3634,3.597,3635,3.76,3636,4.738,3637,4.738,3638,3.76,3639,3.76,3640,3.597,3641,3.597,3642,3.76,3643,3.597,3644,3.76,3645,3.76,3646,3.76,3647,3.76,3648,3.76,3649,3.327,3650,3.327]],["title/interfaces/RefreshHookReturn.html",[0,0.374,3640,3.185]],["body/interfaces/RefreshHookReturn.html",[0,0.677,2,0.091,3,0.037,4,0.037,5,0.031,11,0.031,12,0.059,16,1.45,21,0.318,22,0.066,23,0.006,28,0.784,29,0.94,30,3.355,33,2.223,34,0.848,35,2.878,49,0.081,50,1.054,73,1.157,113,0.004,114,0.004,132,0.784,147,1.194,148,1.252,152,1.45,159,1.313,162,1.054,164,2.1,181,3.281,183,1.232,184,0.85,224,0.39,244,1.667,263,1.728,277,2.99,309,1.608,313,0.797,314,1.054,452,2.529,487,2.397,506,2.106,527,1.832,630,2.171,643,2.895,716,4.45,760,2.03,843,3.457,850,3.817,1181,2.929,1267,1.832,1393,2.277,1576,3.142,1620,4.127,1792,2.897,1794,2.463,1800,5.31,1801,5.31,1948,2.692,2110,2.223,2296,2.782,2534,2.277,2577,3.603,2592,4.547,2593,5.31,2594,5.31,3104,3.602,3190,2.692,3215,5.099,3216,5.099,3236,2.782,3510,5.31,3588,5.31,3620,5.671,3621,3.113,3622,5.351,3623,3.113,3624,5.572,3625,5.825,3626,5.825,3627,6.182,3628,3.255,3629,4.924,3630,3.113,3631,3.255,3632,3.113,3633,5.31,3634,3.113,3635,3.255,3636,4.299,3637,4.299,3638,3.255,3639,3.255,3640,4.299,3641,5.31,3642,5.551,3643,5.31,3644,5.551,3645,5.551,3646,5.551,3647,5.551,3648,5.551,3649,4.912,3650,4.912]],["title/interfaces/RefreshOptions.html",[0,0.374,3629,3.185]],["body/interfaces/RefreshOptions.html",[0,0.698,2,0.1,3,0.041,4,0.041,5,0.035,11,0.035,12,0.063,13,1.094,16,2.142,21,0.315,22,0.056,23,0.006,28,0.945,29,0.956,30,4.044,33,3.284,34,0.937,49,0.084,50,1.164,73,1.709,113,0.004,114,0.004,132,0.866,147,1.319,148,1.383,152,1.601,159,1.451,162,1.557,164,1.931,181,3.453,183,1.361,184,0.816,224,0.431,244,1.841,263,2.224,277,4.418,309,1.776,313,0.88,314,1.557,350,2.879,452,2.706,487,2.648,506,2.254,527,2.023,630,3.207,643,3.358,716,2.883,760,2.242,843,3.53,850,3.97,1181,3.134,1267,2.023,1393,3.365,1576,3.307,1620,4.344,1792,3.049,1794,2.721,1800,3.44,1801,3.44,1948,2.974,2110,3.284,2296,3.073,2534,2.516,2577,3.855,2592,4.666,2593,3.44,2594,3.44,3104,3.791,3190,2.974,3215,3.303,3216,3.303,3236,3.073,3510,3.44,3588,3.44,3620,5.314,3621,3.44,3622,5.82,3623,3.44,3624,4.6,3625,4.809,3626,4.809,3627,5.768,3628,3.596,3629,5.534,3630,5.534,3631,4.809,3632,5.534,3633,6.158,3634,4.6,3635,5.784,3636,4.6,3637,4.6,3638,3.596,3639,3.596,3640,3.44,3641,3.44,3642,3.596,3643,3.44,3644,3.596,3645,3.596,3646,3.596,3647,3.596,3648,3.596,3649,3.182,3650,3.182]],["title/interfaces/RefreshProgress.html",[0,0.374,3627,3.185]],["body/interfaces/RefreshProgress.html",[0,0.707,2,0.105,3,0.043,4,0.043,5,0.036,11,0.036,12,0.065,16,1.678,21,0.321,22,0.053,23,0.006,28,0.844,29,0.942,30,3.614,33,2.573,34,0.982,49,0.085,50,1.22,73,1.339,113,0.004,114,0.004,132,0.908,147,1.382,148,1.449,152,2.624,159,1.52,162,1.22,164,1.968,181,3.534,183,2.23,184,0.918,224,0.452,244,1.929,263,1.907,277,3.461,309,1.861,313,0.922,314,1.22,452,2.791,487,2.775,506,2.325,527,2.12,630,2.513,643,3.073,716,3.02,760,2.349,843,3.563,850,3.933,1181,3.233,1267,2.12,1393,2.636,1576,3.385,1620,4.446,1792,3.12,1794,2.851,1800,3.604,1801,3.604,1948,3.116,2110,2.573,2296,3.22,2534,2.636,2577,3.977,2592,4.721,2593,3.604,2594,3.604,3104,3.88,3190,3.116,3215,3.461,3216,3.461,3236,3.22,3510,3.604,3588,3.604,3620,5.413,3621,3.604,3622,5.625,3623,3.604,3624,4.745,3625,4.96,3626,4.96,3627,6.014,3628,5.892,3629,5.304,3630,3.604,3631,3.767,3632,3.604,3633,5.637,3634,3.604,3635,3.767,3636,4.745,3637,4.745,3638,3.767,3639,3.767,3640,3.604,3641,3.604,3642,3.767,3643,3.604,3644,3.767,3645,3.767,3646,3.767,3647,3.767,3648,3.767,3649,3.334,3650,3.334]],["title/interfaces/RefreshResult.html",[0,0.374,3190,2.753]],["body/interfaces/RefreshResult.html",[0,0.706,2,0.105,3,0.043,4,0.043,5,0.036,11,0.036,12,0.065,16,1.666,21,0.321,22,0.057,23,0.006,28,0.841,29,0.948,30,3.602,33,2.555,34,0.975,49,0.084,50,1.211,73,1.329,113,0.004,114,0.004,132,0.901,147,1.372,148,1.438,152,1.666,159,2.371,162,1.211,164,1.962,181,3.522,183,1.416,184,0.829,224,0.449,244,1.916,263,1.898,277,3.436,309,1.848,313,1.438,314,1.211,452,2.778,487,2.755,506,2.314,527,3.307,630,2.495,643,3.065,716,2.999,760,2.333,843,3.558,850,3.928,1181,3.218,1267,2.105,1393,2.618,1576,3.373,1620,4.43,1792,3.109,1794,2.831,1800,3.578,1801,3.578,1948,3.094,2110,2.555,2296,3.197,2534,2.618,2577,3.958,2592,4.712,2593,3.578,2594,3.578,3104,3.867,3190,4.083,3215,3.436,3216,3.436,3236,5.022,3510,3.578,3588,3.578,3620,5.764,3621,3.578,3622,5.878,3623,3.578,3624,4.723,3625,4.937,3626,4.937,3627,5.844,3628,3.741,3629,5.286,3630,3.578,3631,3.741,3632,3.578,3633,5.621,3634,3.578,3635,3.741,3636,4.723,3637,4.723,3638,3.741,3639,3.741,3640,3.578,3641,3.578,3642,3.741,3643,3.578,3644,3.741,3645,3.741,3646,3.741,3647,3.741,3648,3.741,3649,3.31,3650,3.31]],["title/interfaces/RefreshState.html",[0,0.374,3623,3.185]],["body/interfaces/RefreshState.html",[0,0.701,2,0.102,3,0.042,4,0.042,5,0.035,7,0.331,11,0.035,12,0.064,16,1.628,21,0.323,22,0.06,23,0.006,28,0.832,29,0.946,30,3.561,33,2.497,34,0.953,49,0.084,50,1.183,73,1.299,113,0.004,114,0.004,132,0.881,147,1.341,148,1.406,152,1.628,159,1.475,162,1.183,164,2.158,181,3.482,183,1.384,184,0.88,224,0.438,244,1.872,263,1.87,277,3.359,309,1.806,311,1.714,313,0.895,314,1.183,452,2.736,487,2.693,506,2.279,527,2.057,630,2.438,643,3.162,716,2.931,751,3.235,760,2.28,843,3.542,850,3.91,1163,2.383,1181,3.169,1267,2.057,1393,2.558,1442,3.656,1576,3.335,1620,4.38,1700,3.656,1792,3.074,1794,2.767,1800,3.497,1801,3.497,1948,3.024,2110,2.497,2296,3.124,2534,2.558,2577,3.898,2592,4.686,2593,3.497,2594,3.497,3104,3.823,3190,3.024,3215,3.359,3216,3.359,3236,3.124,3510,3.497,3588,3.497,3620,5.844,3621,3.497,3622,5.57,3623,4.651,3624,5.8,3625,6.063,3626,6.063,3627,6.32,3628,3.656,3629,5.226,3630,3.497,3631,3.656,3632,3.497,3633,5.57,3634,3.497,3635,3.656,3636,4.651,3637,4.651,3638,3.656,3639,3.656,3640,3.497,3641,3.497,3642,3.656,3643,3.497,3644,3.656,3645,3.656,3646,3.656,3647,3.656,3648,3.656,3649,3.235,3650,3.235]],["title/classes/RefreshTimestamps.html",[1469,1.911,3651,4.293]],["body/classes/RefreshTimestamps.html",[3,0.047,4,0.047,5,0.039,7,0.372,11,0.039,12,0.069,13,0.89,22,0.056,23,0.006,28,0.624,43,0.773,49,0.069,50,1.97,66,3.638,71,0.709,74,1.283,113,0.005,114,0.005,132,1.575,159,2.752,164,2.338,184,0.887,190,1.922,207,1.12,220,3.132,227,3.006,285,4.637,327,3.579,350,2.179,451,1.324,590,3.86,615,3.579,618,4.254,643,3.174,1469,2.354,1471,3.192,1481,5.042,1809,4.201,2524,4.814,2635,5.525,2645,3.767,3191,4.308,3622,6.082,3651,7.849,3652,5.923,3653,7.448,3654,7.765,3655,8.791,3656,8.791,3657,7.57,3658,7.57,3659,7.57,3660,7.57,3661,7.57,3662,7.57,3663,7.57,3664,7.57,3665,7.57,3666,7.57,3667,7.57,3668,5.923,3669,5.923,3670,7.57,3671,7.57,3672,5.923,3673,7.57,3674,5.923,3675,7.57,3676,5.923,3677,7.57,3678,5.923,3679,5.923,3680,5.923,3681,5.923]],["title/interfaces/ReopenTicketRequest.html",[0,0.374,3682,4.293]],["body/interfaces/ReopenTicketRequest.html",[0,0.34,2,0.085,3,0.035,4,0.035,5,0.029,11,0.029,12,0.056,13,0.726,21,0.235,22,0.062,23,0.006,28,0.461,34,0.789,41,1.612,43,0.933,45,1.282,49,0.078,59,2.678,65,2.018,71,1.148,74,1.481,98,3.155,113,0.004,114,0.004,115,2.426,117,1.26,120,1.51,121,4.37,123,2.663,129,3.325,132,1.193,140,2.018,144,4.754,146,2.118,152,1.348,153,1.416,154,2.067,162,1.383,166,2.798,172,3.325,176,2.018,178,2.426,179,2.503,180,2.426,181,3.615,187,1.929,189,2.787,190,1.815,193,2.426,194,0.995,198,1.809,207,1.166,208,2.426,211,2.426,219,1.929,224,0.741,234,3.78,244,2.535,245,1.578,273,1.809,276,1.495,279,3.903,295,2.402,309,2.802,326,4.086,330,2.29,333,3.087,346,2.917,351,3.409,356,3.026,359,2.895,361,1.495,373,2.841,375,2.586,377,4.447,379,2.895,383,2.895,387,3.65,388,3.65,393,2.784,404,3.026,431,1.847,451,1.358,457,2.917,506,1.418,527,3.026,570,1.55,586,1.522,588,2.229,601,2.989,602,2.356,606,1.809,609,3.026,641,2.29,643,2.805,657,2.895,662,2.852,691,2.118,705,4.759,709,7.337,719,3.026,774,2.586,845,4.735,853,3.425,854,2.29,889,2.313,1004,4.447,1145,2.018,1146,5.959,1214,1.847,1230,2.426,1593,3.903,1609,2.678,1614,3.903,1620,2.426,1671,3.78,1882,2.426,2400,4.086,2401,2.895,2406,4.548,2407,7.157,2410,3.903,2419,6.387,2425,5.509,2431,5.509,2433,3.364,2434,2.895,2435,2.895,2437,4.086,2439,5.073,2444,3.364,2452,6.736,2453,5.073,2480,4.735,2481,4.735,2482,3.026,2483,4.735,2524,2.78,2577,2.426,2638,4.447,2967,3.903,2982,3.179,3104,2.118,3419,3.364,3682,5.509,3683,4.371,3684,6.17,3685,6.17,3686,4.371,3687,8.502,3688,4.371,3689,4.371,3690,4.371,3691,7.768,3692,8.502,3693,4.371,3694,4.371,3695,4.371,3696,4.371,3697,4.371,3698,4.371,3699,4.371,3700,4.371,3701,4.371,3702,4.371,3703,6.17,3704,4.371,3705,6.17,3706,4.371,3707,6.17,3708,4.371,3709,6.17,3710,4.371,3711,4.371,3712,4.371,3713,4.371,3714,3.903,3715,4.371,3716,4.371,3717,6.17,3718,6.17,3719,4.371,3720,4.371,3721,4.371,3722,4.371,3723,4.371,3724,3.903,3725,4.371,3726,4.371,3727,4.371]],["title/interfaces/RequestConfig.html",[0,0.374,332,3.329]],["body/interfaces/RequestConfig.html",[0,0.6,2,0.072,3,0.03,4,0.03,5,0.059,7,0.235,11,0.025,12,0.05,13,1.044,21,0.311,22,0.059,23,0.006,26,2.015,28,0.394,29,0.799,43,0.488,48,1.768,49,0.087,71,1.167,73,1.611,74,1.629,94,0.864,98,3.399,113,0.003,114,0.003,117,1.703,120,1.323,123,1.614,126,1.256,132,1.285,133,1.55,138,1.516,164,1.513,177,2.336,183,0.98,184,0.946,187,1.65,188,1.789,189,1.193,190,0.949,191,1.687,194,1.645,196,2.235,198,1.547,207,0.707,224,0.804,227,2.851,232,4.785,233,5.002,234,4.427,239,2.477,244,1.326,245,1.99,249,1.279,251,3.651,257,2.015,263,1.468,265,2.19,276,2.757,286,2.291,295,2.428,307,4.533,308,2.589,309,2.635,310,2.589,311,1.789,312,2.378,313,0.634,314,1.235,315,2.971,316,2.477,317,2.72,318,2.212,319,2.212,320,2.212,321,2.141,322,2.477,323,2.212,324,2.589,325,2.72,326,2.477,327,1.768,328,5.002,329,2.589,330,1.959,331,2.015,332,3.816,333,3.48,334,4.772,335,2.589,336,2.589,337,2.72,338,2.739,339,2.72,340,4.01,341,2.72,342,2.72,343,2.72,344,2.72,345,2.72,346,1.768,347,2.72,348,2.72,349,2.291,350,2.834,351,1.429,352,2.72,353,1.547,354,2.72,355,2.72,356,2.589,357,2.72,358,2.72,359,2.477,360,2.589,361,2.239,362,4.01,363,3.377,364,4.01,365,2.291,366,2.72,367,2.477,368,2.72,369,2.72,370,2.72,371,2.72,372,2.589,373,1.486,374,1.959,375,2.212,376,2.72,377,3.749,378,2.72,379,3.651,380,2.72,381,2.72,382,2.72,383,2.477,384,2.72,385,1.65,386,5.255,387,2.212,388,2.212,389,2.72,390,2.72,391,2.72,392,2.72,393,1.687,394,2.72,395,2.589,396,1.768,397,2.589,398,2.589,399,2.378,400,2.141,401,2.589,402,2.72,403,2.72,404,2.589,405,2.72,406,2.72,407,2.72,408,2.72,409,2.72,410,1.858,411,2.212,412,2.076,413,4.01,414,4.01,415,2.589,416,2.971,417,4.762,418,2.72,419,2.72,420,4.427,421,2.72,422,2.72,423,2.291,424,1.768,425,1.768,426,2.72,427,2.72,428,2.72,429,1.907,430,1.486,431,1.58,432,2.609,433,2.378,434,2.72,435,4.137,436,2.72,437,3.749,438,2.72,439,2.589,440,2.291,441,2.72,442,2.72,443,2.72,444,2.72,445,2.72,446,2.72,447,2.72,448,1.768,449,1.65,450,2.72,451,0.654,452,2.148,453,4.762,454,4.01,455,4.01,456,4.036,457,1.768,458,2.076,459,2.589,460,2.589,461,2.589,462,2.477,463,2.72,464,2.477,465,1.907,466,2.076,467,2.141,468,2.72,469,2.72,470,2.378,471,3.06,472,5.255,473,2.076,474,2.72,475,2.72,476,2.72,477,2.72,478,2.589,479,2.72,480,2.72,481,2.72,482,2.72,483,2.72]],["title/interfaces/RequestSasTokenRequest.html",[0,0.374,2388,2.669]],["body/interfaces/RequestSasTokenRequest.html",[0,0.745,2,0.122,3,0.05,4,0.05,5,0.042,7,0.395,11,0.042,12,0.072,13,0.924,21,0.33,22,0.062,23,0.006,49,0.089,113,0.005,114,0.005,117,1.835,118,2.687,133,1.724,148,2.462,153,1.556,166,2.464,177,1.906,190,1.596,202,3.284,361,2.932,797,2.773,837,3.904,1579,4.259,1717,4.362,1718,4.594,1723,3.718,1725,2.656,1728,4.053,1730,4.594,1732,3.598,1736,3.598,1738,3.598,1739,3.598,1740,3.598,1742,3.598,1792,3.499,2383,3.997,2384,3.997,2385,4.814,2386,4.983,2387,5.204,2388,4.362,2389,3.997,2390,4.649,2391,3.85,2392,4.162,2393,3.997,2394,3.997,2395,3.997]],["title/interfaces/RoleBasedGuardProps.html",[0,0.374,3728,4.293]],["body/interfaces/RoleBasedGuardProps.html",[0,0.482,2,0.12,3,0.049,4,0.049,5,0.041,7,0.389,8,3.255,10,1.978,11,0.041,12,0.071,13,1.051,16,2.402,22,0.057,23,0.006,28,0.653,29,0.816,33,2.93,34,1.118,35,1.759,43,1.166,44,1.641,49,0.071,71,1.07,72,2.238,74,1.56,113,0.005,114,0.005,122,2.627,162,1.746,164,1.969,175,2.966,263,1.65,276,2.119,315,3.34,396,3.683,452,2.414,506,2.011,542,3.683,543,5.898,630,2.862,701,5.994,816,4.769,909,2.93,918,4.34,1145,3.597,1147,4.508,1149,4.29,1195,7.005,1230,5.403,1274,3.44,1458,3.797,1936,3.941,2175,4.769,2191,4.508,2213,5.096,2215,6.507,2611,4.104,3085,5.533,3260,4.508,3728,6.955,3729,6.198,3730,9.541,3731,6.198,3732,6.198,3733,6.198,3734,7.79,3735,6.198,3736,6.198,3737,5.096,3738,6.198,3739,7.79,3740,6.198,3741,7.79,3742,6.198,3743,6.198,3744,6.198]],["title/interfaces/SafeAreaContainerProps.html",[0,0.374,917,2.845]],["body/interfaces/SafeAreaContainerProps.html",[0,0.724,2,0.094,3,0.06,4,0.039,5,0.033,7,0.306,8,1.865,10,1.925,11,0.033,12,0.061,13,1.125,15,2.701,16,2.338,20,1.796,21,0.331,22,0.065,23,0.006,25,2.063,27,1.979,28,0.702,29,0.952,42,2.125,43,0.869,44,1.403,47,1.201,48,3.149,49,0.089,50,1.972,61,3.309,64,3.309,88,3.761,95,3.258,108,2.203,110,1.83,113,0.004,114,0.004,120,1.245,184,0.946,224,0.629,287,2.631,295,1.64,311,2.975,313,1.129,350,1.796,432,2.405,494,1.505,495,1.557,561,1.902,619,3.076,626,2.939,674,2.254,713,3.59,852,3.193,855,5.424,856,2.888,857,2.795,858,2.489,859,3.585,860,4.645,861,4.853,862,4.645,863,3.941,864,2.709,865,2.888,866,2.888,867,3.941,868,3.501,869,3.346,870,3.767,871,2.888,872,2.02,873,2.254,874,3.941,875,2.815,876,2.991,877,2.709,878,2.063,879,2.991,880,2.254,881,3.941,882,2.888,883,2.888,884,2.888,885,2.709,886,2.02,887,2.365,888,2.888,889,1.83,890,2.489,891,2.888,892,2.991,893,2.489,894,2.991,895,2.991,896,2.991,897,2.991,898,2.991,899,2.991,900,2.991,901,2.308,902,2.991,903,2.709,904,2.991,905,2.991,906,2.991,907,2.709,908,2.709,909,3.149,910,3.941,911,2.888,912,2.888,913,4.081,914,3.941,915,2.795,916,3.697,917,3.941,918,3.761,919,4.819,920,4.819,921,3.053,922,3.594,923,3.941,924,2.888,925,2.709,926,3.941,927,2.888,928,2.888,929,2.365,930,2.557,931,2.888,932,2.888]],["title/interfaces/SafeAreaLayoutProps.html",[0,0.374,3745,4.293]],["body/interfaces/SafeAreaLayoutProps.html",[0,0.443,2,0.11,3,0.045,4,0.045,5,0.038,7,0.357,8,2.818,10,1.445,11,0.038,12,0.067,13,1.152,21,0.269,22,0.062,23,0.006,28,0.913,29,0.881,42,1.815,43,1.13,44,1.824,45,1.669,46,2.217,47,1.815,49,0.067,71,1.074,72,2.055,73,1.4,74,1.467,75,2.133,83,2.217,93,3.998,94,2.074,95,3.512,113,0.004,114,0.004,122,1.755,126,3.221,173,3.611,245,2.055,263,1.515,367,3.769,493,3.068,713,4.835,719,3.939,859,4.242,877,3.158,878,2.405,916,4.98,918,4.426,919,5.439,920,5.536,929,3.965,930,4.537,962,2.818,963,2.174,966,2.055,972,4.139,1137,5.676,1256,3.158,1299,5.081,1300,4.379,1766,3.939,1882,3.158,2073,2.69,2215,5.666,2583,6.73,3574,4.679,3616,5.081,3737,4.679,3745,6.586,3746,5.691,3747,8.972,3748,8.972,3749,7.377,3750,5.691,3751,5.691,3752,7.377,3753,5.691,3754,7.377]],["title/interfaces/SasInfo.html",[0,0.374,839,2.845]],["body/interfaces/SasInfo.html",[0,0.713,2,0.129,3,0.053,4,0.053,5,0.059,7,0.418,11,0.044,12,0.074,21,0.301,22,0.064,23,0.006,29,0.637,43,1.062,49,0.086,50,1.491,113,0.005,114,0.005,183,1.743,184,0.955,190,1.689,224,0.73,311,2.641,393,3.001,400,3.808,449,4.148,692,3.672,798,3.591,829,3.935,830,4.838,831,4.815,832,4.815,833,4.815,834,5.759,835,4.075,836,3.808,837,4.67,838,4.26,839,4.815,840,5.634,841,4.838,842,3.935,843,2.493,844,5.634,845,4.405,846,4.605,847,3.808,848,4.605,849,4.838,850,2.753,851,4.405,852,2.358,853,3.692,854,3.485,2386,3.585]],["title/classes/SasTokenMutex.html",[1469,1.911,2634,3.498]],["body/classes/SasTokenMutex.html",[0,0.335,3,0.021,4,0.021,5,0.051,7,0.17,11,0.018,12,0.039,13,0.505,21,0.289,22,0.051,23,0.006,28,0.285,29,0.412,34,0.775,35,2.359,36,2.032,41,1.476,42,0.862,43,1.062,49,0.065,50,1.199,65,1.248,66,1.779,68,1.79,69,1.599,71,1.125,74,1.473,94,1.409,113,0.003,114,0.003,117,0.552,122,2.184,132,0.451,135,1.978,138,1.743,139,2.044,147,1.091,148,2.251,152,1.325,159,0.755,162,1.588,166,0.848,183,0.708,184,0.523,189,0.862,190,1.548,194,0.978,202,2.893,204,1.416,207,1.695,217,3.369,219,1.193,224,0.802,252,2.815,254,1.248,264,3.109,273,1.119,276,2.085,291,2.734,295,2.792,327,2.032,333,1.167,338,1.343,346,2.529,350,0.994,353,2.214,361,3.038,410,1.343,424,1.278,425,1.278,429,1.378,430,2.126,431,1.142,432,0.976,435,1.548,437,3.491,440,1.656,448,2.032,449,4.09,451,1.239,457,1.278,458,1.5,466,2.97,467,1.548,473,2.386,506,1.395,507,1.416,515,2.414,518,1.416,564,3.349,570,2.886,572,1.278,573,2.541,579,1.719,583,3.094,586,2.834,588,2.728,593,1.31,599,4.044,606,3.438,627,3.278,630,1.985,638,2.633,643,2.402,646,2.734,656,1.416,662,2.765,683,1.343,689,2.361,692,2.751,693,1.599,705,3.278,707,3.512,711,2.512,722,1.932,734,1.167,736,1.013,761,1.79,771,1.343,794,1.548,797,1.193,798,2.69,809,1.278,829,1.599,831,3.936,832,4.916,833,3.936,834,1.656,835,2.633,836,4.841,837,1.343,838,3.223,839,4.395,842,1.599,843,3.051,852,0.958,1011,1.779,1077,3.693,1103,2.252,1105,2.97,1163,1.22,1177,1.5,1196,2.252,1214,1.142,1220,1.79,1230,2.386,1237,1.548,1270,2.316,1274,2.386,1285,1.966,1436,3.165,1469,1.708,1471,1.457,1473,4.987,1474,1.248,1476,2.734,1481,2.386,1488,1.719,1507,2.734,1606,2.69,1613,1.033,1687,2.976,1716,1.719,1718,2.135,1719,1.656,1721,1.656,1728,3.352,1730,3.69,1763,1.79,1792,2.084,1794,1.416,1805,1.79,1809,1.5,1838,1.248,1877,1.966,1907,1.599,1933,1.966,1935,3.735,1956,1.966,2110,1.278,2192,3.278,2247,1.31,2386,4.906,2388,2.97,2416,1.966,2446,4.221,2456,1.871,2467,3.278,2503,1.966,2507,2.316,2581,1.79,2603,3.126,2604,1.966,2605,4.117,2606,1.966,2607,1.79,2608,2.08,2609,2.08,2610,1.966,2611,1.79,2612,1.966,2613,3.126,2614,2.08,2615,2.08,2616,2.08,2617,2.08,2618,2.08,2619,2.08,2620,2.08,2621,3.126,2622,2.976,2623,2.976,2624,3.892,2625,6.574,2626,2.976,2627,2.08,2628,2.08,2629,2.08,2630,2.08,2631,1.871,2632,3.892,2633,2.976,2634,4.434,2635,3.543,2636,3.892,2637,3.892,2638,4.056,2639,1.79,2640,1.966,2641,1.966,2642,1.966,2643,1.966,2644,1.966,2645,1.719,2646,2.08,2647,2.08,2648,3.307,2649,2.08,2650,2.08,2651,2.08,2652,2.08,2653,3.543,2654,1.966,2655,2.08,2656,6.264,2657,2.08,2658,2.08,2659,2.08,2660,2.08,2661,2.08,2662,2.08,2663,2.08,2664,1.966,2665,2.08,2666,2.08,2667,2.976,2668,1.966,2669,4.117,2670,4.117,2671,2.08,2672,3.307,2673,2.08,2674,3.307,2675,2.08,2676,3.307,2677,3.307,2678,1.966,2679,2.08,2680,2.08,2681,3.307,2682,1.966,2683,3.126,2684,2.976,2685,4.117,2686,3.892,2687,1.966,2688,1.871,2689,3.307,2690,4.691,2691,6.604,2692,3.307,2693,2.08,2694,5.716,2695,2.08,2696,2.08,2697,1.871,2698,2.08,2699,2.08,2700,4.691,2701,3.307,2702,4.691,2703,2.08,2704,2.08,2705,2.08,2706,2.08,2707,2.08,2708,3.307,2709,1.871,2710,1.966,2711,2.08,2712,2.08,2713,5.451,2714,1.966,2715,4.117,2716,4.117,2717,4.117,2718,3.307,2719,2.08,2720,1.719,2721,1.871,2722,2.08,2723,2.846,2724,2.08,2725,3.892,2726,1.871,2727,2.08,2728,2.08,2729,1.966,2730,2.08,2731,2.08,2732,3.307,2733,2.08,2734,1.966,2735,2.08,2736,2.08,2737,1.966,2738,2.08,2739,2.08,2740,2.08,2741,2.08,2742,2.08,2743,5.052,2744,2.08,2745,1.966,2746,3.892,2747,2.08,2748,2.08,2749,2.08,2750,2.08,2751,2.08,2752,1.966,2753,2.08,2754,2.08,2755,2.08,2756,2.08,2757,3.307,2758,1.966,2759,2.08,2760,5.451,2761,1.966,2762,2.08,2763,1.966,2764,2.08,3755,2.703,3756,2.414,3757,2.703]],["title/interfaces/SasTokenResponse.html",[0,0.374,2389,3.058]],["body/interfaces/SasTokenResponse.html",[0,0.748,2,0.124,3,0.051,4,0.051,5,0.043,7,0.403,11,0.043,12,0.073,21,0.328,22,0.058,23,0.006,49,0.089,113,0.005,114,0.005,117,1.767,118,2.193,133,1.82,148,2.118,153,1.576,166,2.495,177,1.944,190,1.628,202,3.012,361,2.959,797,2.829,837,4.621,1579,4.298,1717,4.417,1718,4.298,1723,3.794,1725,2.71,1728,4.082,1730,3.953,1732,3.672,1736,3.672,1738,3.672,1739,3.672,1740,3.672,1742,3.672,1792,3.525,2383,4.078,2384,4.078,2385,4.875,2386,5.013,2387,5.27,2388,3.559,2389,5.061,2390,4.708,2391,3.929,2392,4.247,2393,4.078,2394,4.078,2395,4.078]],["title/classes/SecurePersistAdapter.html",[1469,1.911,3758,4.293]],["body/classes/SecurePersistAdapter.html",[0,0.512,3,0.038,4,0.038,5,0.032,7,0.301,11,0.032,13,0.883,21,0.316,22,0.054,23,0.006,29,0.459,34,0.865,43,1.055,44,1.01,47,1.179,49,0.074,66,3.108,71,1.014,74,1.603,113,0.004,114,0.004,164,1.869,190,1.907,207,0.906,213,3.488,224,0.792,227,1.639,256,4.28,273,1.984,314,1.683,327,3.11,338,4.016,350,3.358,353,4.07,361,2.765,451,1.313,506,2.135,527,3.41,552,5.88,553,3.942,554,3.689,555,5.062,556,5.062,557,3.689,564,4.43,570,2.663,573,2.993,583,2.926,586,2.615,589,5.19,590,5.015,599,4.348,606,1.984,609,6.205,613,4.169,618,3.83,625,4.785,628,5.2,687,3.049,707,2.266,744,6.266,843,3.281,995,3.833,1081,2.266,1196,3.447,1274,3.652,1353,3.942,1409,5.062,1469,2.614,1471,2.583,1475,4.555,1481,4.169,2073,3.551,2294,4.602,2645,3.049,2829,3.942,3100,5.463,3125,3.487,3401,3.942,3533,7.218,3653,4.28,3758,7.814,3759,4.794,3760,6.579,3761,6.579,3762,6.579,3763,6.579,3764,6.579,3765,4.794,3766,6.579,3767,4.794,3768,6.579,3769,4.794,3770,8.963,3771,4.28,3772,8.085,3773,4.794,3774,4.794,3775,3.942,3776,6.579,3777,4.794,3778,4.794,3779,8.472,3780,3.942,3781,7.512,3782,4.794,3783,4.794,3784,7.512,3785,7.512,3786,4.794,3787,4.794,3788,6.579,3789,4.28,3790,4.794]],["title/classes/SecureStorageError.html",[552,3.498,1469,1.911]],["body/classes/SecureStorageError.html",[3,0.039,4,0.039,5,0.033,7,0.314,11,0.033,12,0.062,13,1.065,21,0.329,22,0.061,23,0.006,24,2.156,49,0.046,52,2.773,66,3.557,74,1.456,113,0.004,114,0.004,120,1.35,190,2.182,207,1.555,224,0.84,300,4.684,309,3.195,327,3.199,331,4.432,353,3.667,361,1.708,451,1.584,493,2.536,552,7.135,586,2.863,589,5.265,590,4.518,641,4.894,691,2.42,692,2.254,694,4.88,705,6.129,759,4.107,852,2.399,1077,5.185,1214,3.895,1469,2.689,1471,2.692,1475,3.458,1476,5.942,1479,4.684,1480,3.844,1481,5.185,1483,6.613,1487,3.844,1488,4.303,1489,5.206,1492,3.458,1493,3.844,1494,3.844,1495,3.844,1496,3.844,1497,3.844,1619,5.563,1882,2.773,2077,6.985,2631,3.458,2638,5.349,3003,5.904,3093,4.866,3791,4.995,3792,6.766,3793,6.766,3794,6.766,3795,6.766,3796,7.343,3797,6.766,3798,4.995,3799,4.995,3800,6.766,3801,4.995,3802,6.766,3803,4.995,3804,6.766,3805,4.995,3806,6.766,3807,4.995,3808,8.224,3809,4.995,3810,6.041,3811,4.995,3812,6.041,3813,4.995,3814,4.995,3815,4.995,3816,4.995,3817,4.995,3818,4.46,3819,4.46,3820,4.46]],["title/interfaces/SendOtpRequest.html",[0,0.374,498,3.058]],["body/interfaces/SendOtpRequest.html",[0,0.741,2,0.118,3,0.048,4,0.048,5,0.041,7,0.384,11,0.041,12,0.071,21,0.326,22,0.051,23,0.006,29,0.74,41,1.086,49,0.089,71,0.924,73,1.504,113,0.005,114,0.005,117,1.729,120,1.268,125,2.951,132,1.019,133,1.703,135,1.983,162,1.993,175,2.128,184,0.896,224,0.641,265,3.364,309,2.09,313,1.036,361,2.09,393,3.484,396,2.89,416,3.294,430,3.364,451,1.069,484,3.5,485,3.888,487,3.117,488,4.911,489,4.911,490,4.911,491,4.911,492,4.731,493,2.291,494,2.888,495,1.95,496,4.699,497,4.336,498,4.911,499,3.888,500,4.048,501,5.114,502,3.888,503,3.888,504,3.888,505,3.5,506,1.983,507,3.202,508,3.888,509,4.048,510,4.048,511,4.048,512,3.202,513,4.048,514,4.048,515,3.82,516,4.048,517,4.731,518,4.659,519,4.731,520,4.048,521,4.048]],["title/interfaces/SendOtpResponse.html",[0,0.374,499,3.058]],["body/interfaces/SendOtpResponse.html",[0,0.738,2,0.116,3,0.048,4,0.048,5,0.04,7,0.378,11,0.04,12,0.07,21,0.326,22,0.059,23,0.006,29,0.847,41,1.069,49,0.089,71,0.915,73,1.48,113,0.005,114,0.005,117,1.562,120,1.498,125,2.921,132,1.003,133,1.778,135,1.952,162,1.982,175,2.095,184,0.926,224,0.635,265,3.339,309,2.058,313,1.019,361,2.058,393,3.45,396,2.844,416,3.242,430,3.339,451,1.052,484,3.445,485,3.826,487,3.068,488,4.862,489,4.862,490,4.862,491,4.862,492,4.684,493,2.255,494,2.591,495,1.919,496,4.664,497,4.315,498,3.826,499,4.862,500,5.856,501,6.045,502,3.826,503,3.826,504,3.826,505,3.445,506,1.952,507,3.152,508,3.826,509,3.984,510,3.984,511,3.984,512,3.152,513,3.984,514,3.984,515,3.792,516,3.984,517,4.684,518,4.632,519,4.684,520,3.984,521,3.984]],["title/interfaces/ServerError.html",[0,0.374,532,3.954]],["body/interfaces/ServerError.html",[0,0.667,2,0.121,3,0.05,4,0.05,5,0.042,7,0.394,11,0.042,12,0.072,13,0.923,21,0.323,22,0.06,23,0.006,49,0.084,71,0.94,73,1.932,74,1.452,98,2.77,113,0.005,114,0.005,120,1.518,132,1.047,133,1.263,153,1.831,154,2.968,177,2.803,184,0.877,224,0.835,227,2.147,271,4.566,313,1.064,377,5.141,385,2.77,484,3.594,493,3.366,522,5.605,523,5.605,524,5.161,525,5.2,526,4.811,527,3.338,528,3.118,529,4.984,530,7.011,531,5.711,532,7.046,533,5.605,534,5.161,535,5.012,536,7.011,537,5.161,538,5.605,539,5.605]],["title/interfaces/Service.html",[0,0.374,982,2.076]],["body/interfaces/Service.html",[0,0.696,2,0.12,3,0.049,4,0.049,5,0.041,7,0.578,11,0.041,12,0.071,13,1.166,21,0.337,22,0.067,23,0.006,29,0.901,49,0.082,113,0.005,114,0.005,161,3.171,182,2.124,183,1.628,184,0.932,188,2.016,196,2.518,224,0.648,313,1.322,314,1.748,451,1.564,486,4.087,982,3.978,1002,3.875,1004,5.122,1025,3.557,1181,2.803,1442,4.3,1460,5.122,1550,4.578,1575,3.627,2237,6.38,2239,5.401,2242,4.3,2531,3.557,2555,4.518,2556,4.78,2557,7.091,2558,6.883,2559,4.518,2560,4.518,3821,6.212,3822,5.546]],["title/classes/ServiceFetchError.html",[1146,3.498,1469,1.911]],["body/classes/ServiceFetchError.html",[3,0.04,4,0.04,5,0.034,7,0.321,11,0.034,12,0.063,13,1.104,21,0.329,22,0.063,23,0.006,24,2.206,49,0.047,52,2.836,66,3.212,74,1.315,113,0.004,114,0.004,120,1.363,132,0.852,166,2.434,184,0.927,190,1.971,207,1.299,221,4.021,224,0.822,225,3.328,300,4.756,309,3.21,327,3.248,451,1.514,452,3.024,486,3.599,493,2.575,586,2.392,641,4.538,691,2.475,692,2.306,694,4.936,705,5.942,852,2.436,982,3.934,1004,5.431,1077,5.437,1146,6.899,1181,2.306,1214,3.508,1469,2.73,1471,2.754,1475,3.537,1476,6.23,1479,4.756,1480,3.932,1481,5.21,1483,6.664,1487,3.932,1488,4.369,1489,5.286,1492,3.537,1493,3.932,1494,3.932,1495,3.932,1496,3.932,1497,3.932,1619,5.649,1882,2.836,2077,6.488,2419,8.017,2631,3.537,2638,5.374,3796,7.411,3810,6.134,3812,6.134,3818,4.562,3819,4.562,3820,4.562,3823,5.11,3824,7.762,3825,7.762,3826,6.87,3827,5.11,3828,5.11,3829,5.11,3830,5.11,3831,5.11,3832,5.11,3833,5.11,3834,5.11,3835,5.11,3836,5.11,3837,6.87,3838,5.11,3839,6.87,3840,5.11,3841,5.11,3842,5.11,3843,5.11,3844,5.11,3845,5.11]],["title/interfaces/ServiceItemProps.html",[0,0.374,3846,4.293]],["body/interfaces/ServiceItemProps.html",[0,0.187,2,0.047,3,0.039,4,0.019,5,0.016,7,0.151,10,1.256,11,0.016,12,0.036,16,1.757,21,0.079,22,0.052,23,0.006,25,1.017,27,2.725,28,0.254,29,0.474,31,1.665,32,1.53,33,2.339,34,1.278,35,1.618,42,1.248,43,1.131,44,1.556,45,1.451,46,0.937,47,1.217,49,0.022,50,0.877,52,1.335,70,0.996,71,1.15,72,1.413,74,1.139,75,1.854,77,1.26,79,1.593,83,0.937,84,3.591,85,3.481,87,3.36,88,2.896,89,3.294,90,3.596,91,3.842,93,3.104,94,1.893,95,1.495,98,2.515,100,2.832,103,2.178,107,1.423,113,0.002,114,0.002,119,1.296,120,0.642,148,0.64,150,1.296,176,1.807,177,1.187,182,1.692,184,0.613,185,1.413,189,1.248,194,1.828,207,0.74,220,2.358,221,1.061,224,0.74,244,2.618,249,1.338,263,1.517,273,0.996,311,0.781,313,0.838,314,1.506,338,2.457,346,1.85,351,2.178,373,2.671,379,2.592,383,2.592,388,1.423,411,2.927,424,1.137,506,0.781,526,1.474,527,0.937,535,1.26,542,1.85,570,2.512,573,0.823,583,1.927,586,2.467,601,2.761,602,3.071,615,1.85,626,1.061,637,1.665,643,3.129,657,2.592,662,0.838,674,1.111,693,1.423,711,1.754,715,1.75,716,2.746,722,2.058,734,1.039,751,2.398,756,1.335,760,1.039,810,2.172,859,1.85,868,1.111,872,0.996,873,3.271,875,2.65,878,1.017,886,2.315,889,1.854,921,2.136,922,3.126,959,1.086,960,3.218,961,2.148,962,1.89,963,0.919,964,2.148,965,2.927,966,1.413,967,5.451,968,3.218,969,2.148,970,2.846,971,1.75,972,2.846,973,1.978,974,3.478,975,4.139,976,1.53,977,4.562,978,1.53,982,3.99,988,5.363,995,3.056,1004,1.377,1011,2.358,1015,3.163,1028,3.011,1029,1.978,1046,3.011,1047,3.218,1078,1.086,1079,3.218,1080,1.75,1082,1.086,1083,1.061,1084,1.086,1087,3.625,1088,3.494,1089,3.494,1090,3.494,1091,1.665,1092,1.423,1093,2.148,1094,1.665,1095,3.544,1096,1.195,1097,1.335,1098,1.335,1099,1.335,1100,1.944,1101,3.609,1102,1.335,1104,1.335,1105,3.481,1106,2.927,1107,2.148,1108,3.218,1109,3.38,1110,4.192,1111,2.148,1116,1.727,1117,3.698,1118,3.388,1119,1.593,1120,2.148,1121,2.148,1122,1.377,1127,1.978,1129,3.218,1130,2.709,1131,3.218,1132,1.978,1133,2.932,1134,2.109,1135,1.423,1136,2.846,1138,4.067,1141,1.665,1152,1.978,1153,1.978,1157,1.335,1159,4.451,1160,1.689,1167,1.377,1170,4.067,1177,2.172,1180,4.826,1181,3.624,1183,4.826,1185,1.474,1196,1.26,1216,2.398,1230,2.172,1241,2.148,1242,4.417,1250,2.148,1256,3.731,1260,2.148,1294,1.665,1297,1.978,1300,1.851,1315,2.761,1321,2.709,1322,2.709,1323,3.521,1325,1.665,1326,2.241,1327,1.851,1328,2.148,1329,3.198,1441,1.335,1449,1.851,1465,1.75,1466,2.148,1550,1.195,1588,2.05,1609,1.474,1613,0.919,1620,1.335,1644,1.296,1673,2.846,1674,2.709,1678,1.851,1682,3.011,1685,1.978,1694,1.53,1695,1.593,1699,1.593,1700,2.709,1711,2.398,1768,1.75,1793,1.978,1794,1.26,1798,4.145,1803,2.846,1831,3.011,1858,1.75,1859,1.978,1860,1.75,1861,1.665,1880,1.593,1954,3.494,1995,1.53,2059,1.851,2088,1.665,2100,1.423,2126,1.423,2256,1.978,2294,1.474,2306,1.851,2564,2.148,2584,4.385,2697,1.665,2725,2.846,2774,1.75,2852,1.593,2877,1.851,2898,1.978,2899,1.978,2957,1.593,2965,2.148,2986,1.978,2989,2.148,3089,2.315,3140,2.148,3240,1.665,3242,1.75,3419,1.851,3421,1.978,3437,2.148,3550,1.593,3556,2.148,3578,2.148,3620,3.146,3624,1.593,3630,1.593,3632,1.593,3633,1.593,3634,1.593,3641,3.276,3643,3.276,3789,2.148,3846,3.494,3847,2.148,3848,7.848,3849,7.171,3850,6.272,3851,3.913,3852,3.494,3853,3.913,3854,2.406,3855,2.406,3856,2.406,3857,2.148,3858,1.978,3859,2.148,3860,2.148,3861,5.699,3862,3.913,3863,4.417,3864,4.947,3865,2.406,3866,2.406,3867,2.406,3868,2.406,3869,4.947,3870,2.406,3871,3.913,3872,2.406,3873,2.406,3874,3.913,3875,2.406,3876,2.406,3877,2.406,3878,3.913,3879,2.406,3880,2.406,3881,2.406,3882,6.272,3883,2.406,3884,2.406,3885,2.406,3886,2.148,3887,2.406,3888,2.406,3889,2.406,3890,2.406,3891,3.913,3892,2.406,3893,2.406,3894,2.406,3895,2.406,3896,2.406,3897,2.406,3898,2.406,3899,2.406,3900,2.406,3901,2.406,3902,2.406,3903,2.406,3904,2.406,3905,2.406,3906,2.406,3907,2.406,3908,2.406,3909,3.913,3910,2.406,3911,2.406,3912,2.406,3913,2.406,3914,2.406,3915,4.947,3916,2.406,3917,2.406,3918,2.406,3919,2.406,3920,2.406,3921,2.406,3922,2.406,3923,2.406,3924,2.406,3925,4.947,3926,4.947,3927,2.406,3928,2.406,3929,2.406,3930,2.406,3931,2.406,3932,2.406,3933,3.913,3934,3.913,3935,3.913,3936,2.406,3937,2.406,3938,2.406,3939,2.406,3940,2.406,3941,2.406,3942,3.913,3943,2.406,3944,2.148,3945,2.406,3946,2.406,3947,2.406,3948,2.406,3949,2.406,3950,2.148,3951,2.406,3952,2.406,3953,2.406,3954,2.406,3955,2.406,3956,5.699,3957,2.406,3958,2.406,3959,2.406,3960,2.406,3961,2.406,3962,2.406,3963,2.406,3964,2.406,3965,2.406,3966,2.406,3967,2.406,3968,2.406,3969,2.406,3970,2.406,3971,2.406,3972,2.406,3973,2.406,3974,2.406,3975,2.406,3976,2.406,3977,2.406,3978,2.406,3979,2.406,3980,2.406]],["title/interfaces/ServiceResponse.html",[0,0.374,2559,3.498]],["body/interfaces/ServiceResponse.html",[0,0.719,2,0.132,3,0.054,4,0.054,5,0.045,7,0.427,11,0.045,12,0.075,13,0.97,21,0.333,22,0.065,23,0.006,29,0.921,49,0.084,113,0.005,114,0.005,161,2.412,182,2.327,183,1.783,184,0.951,188,2.208,196,2.758,224,0.785,313,1.603,314,2.12,451,1.19,486,4.323,982,3.834,1002,4.099,1004,3.895,1460,3.895,1550,4.099,1575,2.758,2237,5.713,2239,5.713,2242,4.71,2555,4.949,2556,5.235,2557,6.349,2558,5.235,2559,6.002,2560,4.949]],["title/interfaces/ServicesCartState.html",[0,0.374,985,3.954]],["body/interfaces/ServicesCartState.html",[0,0.439,2,0.075,3,0.03,4,0.03,5,0.026,11,0.026,12,0.052,21,0.283,22,0.049,23,0.006,28,0.703,29,0.54,34,1.718,41,1.184,43,0.736,49,0.087,65,3.386,70,2.759,71,1.18,73,1.92,74,1.536,94,1.695,113,0.003,114,0.003,119,2.079,139,1.474,152,1.19,159,2.049,164,1.884,182,2.951,183,1.478,184,0.843,188,2.532,194,1.964,207,1.591,227,2.508,244,2.766,264,1.967,276,1.929,314,0.865,331,2.079,338,4.049,351,3.216,353,1.597,448,2.667,451,0.986,493,2.749,535,4.27,546,3.455,548,4.493,549,2.141,563,4.084,615,1.824,618,1.967,627,3.455,675,1.781,679,2.969,687,2.454,725,4.617,736,2.499,749,2.364,754,4.493,760,1.665,794,2.209,815,2.209,850,1.597,854,2.955,978,3.587,979,3.445,980,5.036,981,7.056,982,4.061,983,3.445,984,3.172,985,7.356,986,5.676,987,6.967,988,5.555,989,2.671,990,5.036,991,3.445,992,5.952,993,6.967,994,2.806,995,3.832,996,3.445,997,5.036,998,5.036,999,3.445,1000,2.969,1001,6.548,1002,2.802,1003,3.445,1004,5.302,1005,5.036,1006,5.036,1007,3.445,1008,5.952,1009,3.445,1010,5.036,1011,3.373,1012,2.969,1013,7.705,1014,3.445,1015,4.886,1016,3.445,1017,2.454,1018,3.445,1019,3.445,1020,3.445,1021,5.036,1022,2.283,1023,2.555,1024,3.445,1025,2.209,1026,3.172,1027,2.806,1028,4.34,1029,3.172,1030,3.445,1031,3.445,1032,3.172,1033,7.277,1034,5.036,1035,3.445,1036,5.952,1037,6.548,1038,3.445,1039,3.445,1040,5.036,1041,2.806,1042,3.445,1043,3.445,1044,3.445,1045,3.445,1046,4.34,1047,6.03,1048,5.036,1049,3.445,1050,2.555,1051,4.34,1052,4.637,1053,3.445,1054,5.036,1055,3.172,1056,3.445,1057,3.172,1058,3.445,1059,3.172,1060,3.445,1061,3.445,1062,2.969,1063,5.952,1064,3.445,1065,3.445,1066,2.969,1067,3.445,1068,3.445,1069,3.172,1070,3.445,1071,2.454,1072,3.172,1073,2.555,1074,3.445]],["title/interfaces/SingleServiceResponse.html",[0,0.374,2560,3.498]],["body/interfaces/SingleServiceResponse.html",[0,0.72,2,0.132,3,0.054,4,0.054,5,0.045,7,0.428,11,0.045,12,0.076,13,0.972,21,0.333,22,0.063,23,0.006,29,0.922,49,0.084,113,0.005,114,0.005,161,2.418,182,2.333,183,1.787,184,0.951,188,2.213,196,2.765,224,0.786,313,1.604,314,2.121,451,1.193,982,4.087,1002,4.106,1004,3.905,1460,3.905,1550,4.106,1575,2.765,2237,5.721,2239,5.721,2242,4.722,2555,4.961,2556,5.248,2557,6.359,2558,5.248,2559,4.961,2560,6.011]],["title/interfaces/SpacingScale.html",[0,0.374,1400,3.7]],["body/interfaces/SpacingScale.html",[0,0.581,2,0.092,3,0.059,4,0.037,5,0.032,11,0.032,12,0.06,15,2.645,21,0.33,22,0.058,23,0.006,28,0.688,49,0.083,60,5.586,61,4.19,64,4.19,71,1.01,77,3.417,78,5.127,87,2.592,89,3.133,94,1.094,96,3.996,103,1.809,106,3.011,110,1.775,112,6.188,113,0.004,114,0.004,122,1.46,147,1.202,153,1.478,184,0.98,194,2.102,224,0.542,313,1.105,626,2.878,711,2.646,722,3.046,868,3.012,869,3.847,870,3.241,886,2.263,887,3.16,909,3.528,929,4.409,930,4.213,965,2.801,966,1.71,974,2.592,976,4.149,1025,2.711,1096,3.995,1097,4.142,1098,4.142,1099,4.142,1100,3.707,1101,3.528,1102,4.142,1103,3.417,1104,4.142,1109,2.551,1116,2.878,1117,3.222,1163,3.629,1185,3.996,1302,3.278,1315,3.16,1326,3.735,1386,5.019,1387,3.893,1388,3.278,1393,3.615,1394,5.363,1395,5.363,1396,5.363,1397,5.363,1398,5.363,1399,4.745,1400,5.742,1401,7.345,1402,7.345,1403,7.345,1404,7.345,1405,7.483,1406,7.345,1407,4.927,1408,4.149,1409,5.019,1410,5.363,1411,5.363,1412,5.363,1413,3.011,1414,5.363,1415,4.745,1416,3.893,1417,3.893,1418,3.893,1419,6.188,1420,3.893,1421,3.893,1422,3.893,1423,2.48,1424,3.893,1425,3.444,1426,3.278,1427,3.643,1428,3.643,1429,3.893,1430,3.893,1431,3.643,1432,3.893,1433,3.278,1434,3.278,1435,6.136,1436,2.801,1437,3.643,1438,3.893,1439,3.893,1440,3.893,1441,2.628,1442,5.166,1443,3.893,1444,3.893,1445,3.893,1446,3.893,1447,3.444,1448,3.893,1449,3.643,1450,3.893,1451,3.893,1452,3.278]],["title/interfaces/StatusBadgeProps.html",[0,0.374,3981,4.293]],["body/interfaces/StatusBadgeProps.html",[0,0.452,2,0.112,3,0.046,4,0.046,5,0.039,10,1.896,11,0.039,12,0.068,13,1.026,20,3.32,21,0.296,22,0.058,23,0.006,28,0.974,40,3.618,41,1.327,43,1.178,44,1.838,46,2.26,47,1.838,49,0.068,62,3.842,71,1.08,72,2.095,74,1.478,75,2.8,83,2.26,87,2.305,95,3.333,96,3.554,97,4.22,103,2.854,110,2.175,113,0.004,114,0.004,121,2.679,122,1.789,127,5.01,128,2.81,129,3.126,153,1.955,245,2.095,432,2.697,457,2.743,708,4.946,874,5.561,958,5.471,959,2.618,962,2.854,963,2.217,966,2.983,974,2.968,975,3.711,1078,3.37,1081,3.531,1101,3.531,1109,4.025,1110,4.419,1116,3.296,1117,3.224,1135,3.432,1311,5.18,1326,3.322,1391,3.554,1415,4.22,1423,4.328,1431,4.464,1436,3.432,1703,4.22,1720,4.464,1724,6.345,1754,4.464,1818,3.554,1989,4.22,2018,7.375,2362,4.464,2367,3.842,2848,5.18,2852,3.842,2864,4.464,2982,4.22,2987,5.18,2996,4.22,3981,6.669,3982,5.802,3983,8.059,3984,5.802,3985,5.802,3986,5.802,3987,5.802,3988,5.802,3989,6.669,3990,6.669,3991,6.669,3992,5.802,3993,5.802]],["title/interfaces/StatusColorConfig.html",[0,0.374,3994,4.293]],["body/interfaces/StatusColorConfig.html",[0,0.46,2,0.114,3,0.047,4,0.047,5,0.039,11,0.039,12,0.069,21,0.317,22,0.059,23,0.006,29,0.724,34,1.065,43,0.771,49,0.083,60,3.91,63,4.543,65,3.846,66,3.447,71,1.051,74,1.411,78,3.277,95,3.687,96,3.617,97,6.752,98,4.004,106,3.755,110,3.122,113,0.005,114,0.005,135,2.451,153,1.974,160,2.886,227,2.019,245,2.132,263,2.011,276,2.583,451,1.032,493,2.213,929,2.86,1078,2.664,1267,3.723,1335,4.193,1391,3.617,1419,5.812,1423,4.754,1426,4.087,1433,4.087,1558,4.247,1724,7.02,1725,3.52,1992,5.271,2530,5.195,2531,4.769,2768,7.935,2829,4.854,2996,4.294,3107,3.91,3441,4.854,3442,4.854,3493,5.271,3994,7.839,3995,5.904,3996,5.271,3997,5.904,3998,5.904,3999,5.904,4000,5.904,4001,7.554,4002,5.904,4003,5.904,4004,5.904,4005,5.271,4006,5.904,4007,5.904]],["title/interfaces/StorageResult.html",[0,0.374,3039,3.954]],["body/interfaces/StorageResult.html",[0,0.658,2,0.137,3,0.067,4,0.056,5,0.047,7,0.444,11,0.047,12,0.077,13,1.1,21,0.314,22,0.06,23,0.006,29,0.865,49,0.083,113,0.005,114,0.005,120,1.161,153,1.401,224,0.777,313,1.585,314,2.097,315,4.867,487,3.607,586,2.941,590,4.307,662,3.144,691,3.427,2638,4.836,3003,5.443,3033,5.816,3034,5.816,3035,6.315,3036,6.945,3037,6.945,3038,6.945,3039,6.945]],["title/interfaces/TestWrapperProps.html",[0,0.374,2214,3.954]],["body/interfaces/TestWrapperProps.html",[0,0.422,2,0.071,3,0.029,4,0.043,5,0.024,7,0.405,10,1.639,11,0.024,12,0.049,16,1.99,20,1.343,21,0.212,22,0.051,23,0.006,24,1.576,27,2.617,29,0.831,34,1.442,35,1.036,40,4.6,41,1.268,43,1.207,44,1.504,47,1.588,49,0.088,54,4.275,68,2.417,71,1.176,72,1.318,73,1.877,74,1.354,94,1.847,113,0.003,114,0.003,120,1.06,126,2.169,132,0.903,135,1.184,147,1.639,153,0.723,161,1.92,162,1.854,164,1.492,194,0.831,202,1.271,207,1.024,213,2.466,217,1.511,224,0.663,244,1.294,245,1.318,249,1.248,263,2.031,309,1.248,313,1.354,314,1.447,315,1.967,346,2.56,351,1.395,353,1.511,361,2.208,451,1.249,493,2.03,494,1.99,495,1.164,497,1.726,505,2.09,506,1.757,526,2.236,542,3.052,543,2.527,544,2.809,545,2.809,549,2.026,550,2.809,561,1.422,562,2.322,564,3.778,573,2.608,574,2.417,575,2.655,587,1.861,593,1.768,597,2.809,606,3.707,614,2.09,616,4.167,641,1.912,643,1.318,675,1.685,711,1.294,742,2.623,744,2.417,771,1.813,843,2.03,852,1.294,869,1.611,889,1.368,918,4.077,963,1.395,982,3.083,1002,1.813,1017,3.444,1025,2.09,1027,3.939,1073,2.417,1081,3.778,1119,3.586,1125,2.322,1130,2.527,1145,1.685,1159,2.417,1181,1.647,1203,2.322,1214,3.376,1239,2.655,1256,3.583,1270,1.967,1324,3.001,1456,4.167,1460,2.09,1474,1.685,1527,2.809,1565,2.026,1566,2.417,1575,2.195,1714,2.809,1818,2.236,1838,2.5,1948,2.09,2173,4.452,2174,3.259,2175,2.809,2176,6.376,2177,7.585,2178,7.748,2179,5.871,2180,3.259,2181,4.835,2182,5.763,2183,5.763,2184,5.763,2185,2.809,2186,3.259,2187,3.259,2188,3.259,2189,3.259,2190,2.809,2191,2.655,2192,2.236,2193,4.835,2194,3.259,2195,4.835,2196,3.259,2197,4.835,2198,2.809,2199,3.259,2200,3.259,2201,3.259,2202,3.259,2203,3.259,2204,3.259,2205,3.259,2206,3.259,2207,4.835,2208,3.259,2209,3.259,2210,3.259,2211,3.259,2212,3.259,2213,6.271,2214,4.452,2215,4.944,2216,3.259,2217,4.452,2218,3.259,2219,3.259,2220,3.259,2221,4.835,2222,3.259,2223,3.259,2224,6.677,2225,4.835,2226,4.835,2227,3.259,2228,3.259,2229,7.134,2230,5.194,2231,3.259,2232,3.259,2233,6.376,2234,6.376,2235,6.376,2236,3.259,2237,2.527,2238,3.259,2239,2.527,2240,3.259,2241,3.259,2242,2.527,2243,3.259,2244,3.259,2245,2.655,2246,3.259,2247,2.623,2248,5.763,2249,3.259,2250,7.748,2251,3.259,2252,3.259,2253,3.259,2254,2.655,2255,3.259,2256,4.452,2257,3.259,2258,3.259,2259,5.308,2260,3.259,2261,6.376,2262,3.259,2263,4.452,2264,3.259,2265,4.452,2266,3.259,2267,3.259,2268,3.259,2269,4.835,2270,3.259,2271,3.259,2272,3.259,2273,3.259,2274,3.259,2275,3.259,2276,3.259,2277,3.259,2278,3.259,2279,3.001,2280,3.259,2281,3.259,2282,3.259,2283,3.259,2284,3.259,2285,3.259,2286,3.259,2287,4.835,2288,3.259,2289,3.259,2290,3.259,2291,3.001,2292,3.259,2293,3.001,2294,2.236,2295,3.001,2296,2.16]],["title/interfaces/TextInputProps.html",[0,0.374,884,2.845]],["body/interfaces/TextInputProps.html",[0,0.703,2,0.083,3,0.056,4,0.034,5,0.029,8,1.639,10,1.797,11,0.029,12,0.056,13,1.188,15,3.298,16,2.182,20,1.578,21,0.331,22,0.066,23,0.006,25,3.255,27,1.74,28,0.812,29,0.957,35,2.399,42,1.369,43,0.795,44,1.283,47,1.056,48,2.879,49,0.087,50,1.894,61,3.025,64,3.025,88,1.981,95,2.327,108,1.936,110,1.608,113,0.004,114,0.004,120,1.162,184,0.914,224,0.588,287,2.312,295,2.378,311,2.82,313,1.032,350,2.834,432,2.199,494,2.182,495,2.258,561,2.757,619,2.812,626,2.687,674,1.981,713,2.312,852,3.081,855,5.254,856,2.539,857,2.457,858,2.188,859,3.346,860,4.336,861,4.869,862,4.336,863,3.603,864,2.382,865,2.539,866,2.539,867,3.603,868,3.268,869,3.123,870,3.516,871,2.539,872,1.776,873,1.981,874,4.813,875,2.573,876,2.629,877,2.382,878,1.813,879,2.629,880,1.981,881,4.558,882,2.539,883,2.539,884,3.603,885,4.276,886,1.846,887,3.732,888,4.558,889,2.888,890,3.928,891,4.558,892,4.72,893,3.928,894,4.72,895,4.336,896,4.336,897,4.72,898,4.336,899,4.336,900,4.336,901,3.346,902,4.72,903,4.276,904,4.72,905,4.72,906,4.72,907,4.276,908,4.276,909,2.879,910,3.603,911,2.539,912,2.539,913,3.73,914,3.603,915,2.457,916,2.382,917,2.539,918,1.981,919,2.539,920,2.539,921,1.608,922,1.893,923,3.603,924,2.539,925,2.382,926,3.603,927,2.539,928,2.539,929,2.079,930,2.248,931,2.539,932,2.539]],["title/interfaces/ThemeProviderProps.html",[0,0.374,2346,3.954]],["body/interfaces/ThemeProviderProps.html",[0,0.529,2,0.097,3,0.04,4,0.04,5,0.034,7,0.316,8,2.597,10,1.276,11,0.034,12,0.075,22,0.045,23,0.006,24,3.56,28,0.53,43,1.076,44,1.815,47,1.894,49,0.07,61,2.498,64,2.498,71,1.063,72,1.815,74,1.152,77,4.32,78,3.772,97,4.943,103,3.151,113,0.004,114,0.004,122,1.55,140,2.322,171,2.791,207,0.951,224,0.417,244,1.783,249,1.719,264,2.564,282,2.975,535,4.32,599,2.498,852,1.783,864,2.791,918,4.099,959,3.721,962,1.921,966,3.471,974,3.884,1116,4.313,1145,3.138,1160,2.171,1388,3.481,1391,4.164,1393,2.436,1399,3.657,1407,5.052,1408,6.217,1423,4.033,1447,5.998,1766,4.705,1936,3.198,1993,3.481,1999,4.705,2023,3.481,2101,3.481,2142,3.657,2146,3.657,2147,4.943,2148,5.6,2149,6.457,2150,5.6,2151,5.6,2155,6.457,2156,6.457,2157,6.804,2163,3.657,2166,3.657,2185,5.924,2198,5.924,2215,5.33,2297,6.33,2298,4.489,2299,6.874,2300,4.489,2301,4.489,2302,6.068,2303,4.489,2304,6.068,2305,4.489,2306,3.869,2307,6.068,2308,6.068,2309,4.489,2310,6.068,2311,4.489,2312,7.362,2313,4.489,2314,7.926,2315,8.443,2316,4.489,2317,4.489,2318,4.489,2319,4.489,2320,4.489,2321,4.489,2322,4.489,2323,4.489,2324,4.489,2325,4.489,2326,4.489,2327,4.489,2328,4.489,2329,4.489,2330,4.489,2331,4.489,2332,4.489,2333,4.489,2334,4.489,2335,4.489,2336,4.489,2337,4.489,2338,4.489,2339,4.489,2340,4.489,2341,4.489,2342,4.489,2343,4.489,2344,4.489,2345,4.489,2346,5.588,2347,4.489]],["title/interfaces/Ticket.html",[0,0.374,121,2.22]],["body/interfaces/Ticket.html",[0,0.73,2,0.076,3,0.031,4,0.031,5,0.026,7,0.572,11,0.026,12,0.052,21,0.332,22,0.061,23,0.006,28,0.604,34,0.711,41,1.505,45,1.156,49,0.084,113,0.003,114,0.003,115,2.187,116,2.256,117,1.513,118,1.959,119,2.123,120,1.495,121,4.664,122,2.808,123,2.913,124,2.331,125,3.435,126,1.924,127,4.703,128,3.589,129,3.992,130,3.746,131,1.665,132,1.236,133,1.78,134,3.279,135,1.859,136,2.256,137,2.256,138,2.736,139,2.578,140,3.116,141,3.389,142,3.13,143,3.668,144,4.439,145,4.383,146,3.589,147,1.998,148,2.256,149,5.111,150,3.992,151,3.269,152,2.613,153,1.824,154,4.184,155,3.992,156,3.535,157,4.368,158,4.548,159,2.511,160,3.381,161,2.911,162,1.512,163,4.656,164,2.046,165,4.656,166,2.468,167,4.383,168,3.637,169,2.009,170,2.331,171,2.187,172,3.637,173,2.527,174,3.389,175,1.372,176,1.819,177,1.195,178,2.187,179,2.256,180,2.187,181,3.269,182,2.533,183,1.941,184,0.848,185,2.068,186,3.269,187,2.977,188,2.19,189,1.257,190,1,191,1.778,192,2.187,193,2.187,194,0.897,195,1.863,196,1.598,197,2.187,198,3.066,199,2.331,200,2.331,201,2.331,202,1.372,203,1.819,204,2.064,205,2.331,206,2.256,207,0.745,208,2.187,209,2.331,210,2.256,211,2.187,212,2.331,213,1.506,214,1.701,215,2.331,216,2.256,217,2.37,218,2.256,219,1.739,220,2.37,221,2.527,222,1.778,223,2.064,224,0.476,225,1.909,226,2.331,227,1.348]],["title/interfaces/TicketListItem.html",[0,0.374,168,2.591]],["body/interfaces/TicketListItem.html",[0,0.733,2,0.078,3,0.032,4,0.032,5,0.027,7,0.536,11,0.027,12,0.053,21,0.331,22,0.059,23,0.006,28,0.616,34,0.73,41,1.517,45,1.713,49,0.085,113,0.003,114,0.003,115,2.247,116,2.317,117,1.532,118,1.997,119,2.181,120,1.504,121,4.659,122,2.824,123,2.958,124,2.395,125,3.456,126,1.962,127,4.742,128,3.319,129,3.692,130,3.803,131,1.71,132,1.143,133,1.792,134,3.344,135,1.895,136,2.317,137,2.317,138,2.778,139,2.231,140,2.697,141,2.395,142,3.17,143,3.695,144,4.475,145,4.438,146,3.634,147,2.019,148,2.274,149,5.138,150,4.042,151,3.023,152,2.634,153,1.833,154,3.76,155,3.455,156,3.06,157,3.803,158,4.475,159,2.489,160,3.404,161,2.938,162,1.535,163,4.706,164,1.916,165,3.455,166,2.599,167,4.706,168,4.042,169,2.978,170,3.455,171,2.247,172,3.692,173,2.577,174,3.455,175,1.409,176,1.869,177,1.227,178,2.247,179,2.317,180,2.247,181,3.31,182,2.565,183,1.965,184,0.854,185,2.109,186,3.31,187,3.023,188,2.223,189,1.291,190,1.028,191,1.826,192,2.247,193,2.247,194,0.921,195,1.914,196,1.641,197,2.247,198,3.104,199,2.395,200,2.395,201,2.395,202,1.409,203,1.869,204,2.121,205,2.395,206,2.317,207,0.765,208,2.247,209,2.395,210,2.317,211,2.247,212,2.395,213,1.547,214,1.747,215,2.395,216,2.317,217,2.417,218,2.317,219,1.786,220,2.417,221,2.577,222,1.826,223,2.121,224,0.485,225,1.961,226,2.395,227,1.384]],["title/interfaces/TicketListItemProps.html",[0,0.374,4008,4.293]],["body/interfaces/TicketListItemProps.html",[0,0.421,2,0.105,3,0.043,4,0.043,5,0.036,10,1.372,11,0.036,12,0.065,13,0.839,20,3.246,21,0.279,22,0.057,23,0.006,25,2.283,28,0.57,35,2.025,36,3.371,38,4.219,40,3.455,41,1.508,42,1.723,43,1.239,44,1.859,45,1.585,46,2.105,47,1.964,49,0.065,50,1.211,62,3.578,71,1.085,72,1.951,74,0.916,75,2.673,77,2.831,83,2.105,84,4.86,85,4.898,87,2.834,90,3.664,91,3.512,93,3.293,94,1.845,98,3.146,100,3.094,103,2.725,113,0.004,114,0.004,121,4.459,144,3.736,147,1.372,148,1.438,149,3.958,153,1.412,160,2.725,166,1.694,168,4.574,194,1.23,249,1.848,252,2.495,314,1.598,526,3.31,711,2.528,722,1.951,873,4.074,886,1.638,921,2.025,962,2.725,963,2.065,966,1.951,974,3.373,975,4.217,995,2.951,1078,3.218,1081,3.371,1082,2.438,1083,2.384,1084,2.438,1087,3.436,1091,4.937,1095,3.522,1096,2.684,1097,2.999,1098,2.999,1099,2.999,1100,2.684,1101,2.555,1102,2.999,1103,2.831,1104,2.999,1106,4.219,1110,3.197,1116,2.384,1117,2.333,1118,3.078,1135,3.197,1157,2.999,1323,2.831,1391,3.31,1436,3.197,1613,2.065,1694,4.535,1695,4.723,1715,3.578,1818,3.31,1830,4.723,1834,4.723,1839,5.526,1846,4.158,2100,3.197,2362,4.158,2367,3.578,2566,3.93,2824,4.443,2864,4.158,2867,6.563,2870,4.824,2872,4.824,2874,4.443,2982,3.93,2996,3.93,2998,4.824,3177,4.824,3714,6.367,3983,4.824,3989,4.824,3990,4.824,3991,4.824,4008,6.367,4009,5.403,4010,5.403,4011,7.878,4012,5.403,4013,5.403,4014,7.131,4015,5.403,4016,5.403,4017,5.403,4018,5.403,4019,5.403,4020,5.403,4021,5.403,4022,5.403,4023,5.403,4024,5.403,4025,5.403]],["title/interfaces/TicketMessage.html",[0,0.374,157,2.669]],["body/interfaces/TicketMessage.html",[0,0.731,2,0.08,3,0.033,4,0.033,5,0.028,7,0.541,11,0.028,12,0.054,21,0.329,22,0.056,23,0.006,28,0.628,34,0.75,41,1.485,45,1.22,49,0.085,113,0.004,114,0.004,115,2.308,116,2.38,117,1.551,118,2.036,119,2.24,120,1.587,121,4.644,122,2.839,123,3.003,124,2.46,125,3.476,126,2.337,127,4.461,128,3.369,129,3.748,130,4.78,131,1.757,132,1.16,133,1.771,134,4.348,135,1.932,136,2.38,137,2.38,138,2.414,139,2.275,140,2.749,141,2.46,142,2.939,143,3.534,144,3.979,145,4.115,146,3.369,147,1.928,148,2.022,149,4.889,150,3.748,151,3.069,152,2.578,153,1.744,154,3.954,155,3.522,156,3.119,157,4.215,158,4.511,159,2.599,160,3.365,161,2.466,162,1.334,163,3.522,164,1.933,165,3.522,166,2.52,167,4.493,168,3.748,169,2.12,170,2.46,171,3.305,172,4.093,173,3.069,174,4.115,175,2.073,176,1.92,177,1.261,178,2.308,179,2.38,180,2.308,181,3.351,182,2.597,183,1.99,184,0.86,185,2.15,186,3.351,187,3.069,188,2.257,189,1.326,190,1.055,191,1.876,192,2.308,193,2.308,194,0.946,195,1.966,196,1.686,197,2.308,198,3.143,199,2.46,200,2.46,201,2.46,202,1.447,203,1.92,204,2.178,205,2.46,206,2.38,207,0.786,208,2.308,209,2.46,210,2.38,211,2.308,212,2.46,213,1.589,214,1.795,215,2.46,216,2.38,217,2.464,218,2.38,219,1.834,220,2.464,221,2.627,222,1.876,223,2.178,224,0.494,225,2.014,226,2.46,227,1.422]],["title/interfaces/TicketPollingConfig.html",[0,0.374,4026,3.954]],["body/interfaces/TicketPollingConfig.html",[0,0.417,2,0.07,3,0.028,4,0.028,5,0.024,7,0.226,11,0.024,12,0.049,13,0.995,15,2.173,22,0.047,23,0.006,28,0.912,29,0.789,30,3.201,34,1.434,43,0.926,44,1.129,47,0.886,49,0.049,50,1.201,52,1.999,71,1.169,73,1.575,74,1.513,79,2.385,94,1.239,113,0.003,114,0.003,117,0.736,121,3.275,132,0.601,138,2.173,159,1.497,164,1.904,181,1.589,184,0.893,207,1.013,224,0.63,244,1.277,245,1.936,249,2.894,252,1.663,254,1.663,263,2.253,265,2.545,271,2.619,282,3.172,301,6.158,313,1.085,373,1.431,385,1.589,410,2.663,412,3.554,420,5.045,423,2.206,424,1.703,425,1.703,429,3.265,430,3.159,515,3.201,527,2.495,570,1.277,573,1.833,583,1.403,586,1.254,613,1.999,615,1.703,643,2.312,662,1.866,671,3.284,683,1.789,689,1.589,707,3.028,711,1.277,725,3.172,741,2.493,771,3.181,800,1.663,805,3.284,809,1.703,843,2.009,854,3.355,889,2.4,1133,3.29,1157,1.999,1160,1.555,1163,1.625,1196,1.887,1200,2.619,1237,3.069,1393,3.102,1526,2.206,1529,2.493,1531,4.433,1545,2.385,1550,2.663,1587,3.284,1588,3.355,1644,1.941,1681,2.619,1711,3.923,1765,2.131,1838,3.502,1880,3.55,2002,3.899,2128,2.385,2247,1.745,2577,1.999,2591,2.961,2592,3.265,2813,3.899,2943,2.29,3130,5.93,3132,3.409,3183,6.336,3184,6.336,3185,5.516,3186,4.241,3187,2.29,3188,2.771,3189,4.125,3190,2.062,3191,2.619,3193,4.125,3194,4.125,3195,4.927,3196,6.118,3197,6.118,3198,6.118,3199,2.771,3200,2.771,3201,2.771,3202,4.125,3203,5.836,3204,2.771,3205,2.771,3206,2.062,3207,2.771,3208,2.771,3209,2.771,3210,2.771,3211,2.771,3212,4.241,3213,2.771,3217,2.771,3218,2.619,3219,2.493,3220,4.241,3221,2.771,3222,2.771,3223,2.771,3224,2.771,3225,2.771,3226,2.771,3227,5.458,3228,6.872,3229,4.927,3230,2.771,3231,4.125,3232,2.771,3233,2.771,3235,2.771,3236,3.789,3237,2.771,3238,4.125,3239,4.927,3240,2.493,3241,2.771,3242,2.619,3244,5.836,3245,6.653,3246,5.701,3247,4.433,3248,4.927,3249,5.458,3251,2.771,3252,2.771,3253,2.771,3254,2.771,3255,2.771,3256,2.771,3257,2.771,3258,2.771,3259,2.771,3260,2.619,3261,2.619,3262,4.927,3263,6.118,3264,5.458,3265,4.927,3266,4.125,3267,2.771,3268,2.771,3269,2.771,3270,2.771,3271,2.771,3272,2.771,3273,2.771,3274,2.385,3275,2.771,3276,2.771,3277,2.771,3278,2.771,3281,2.771,3649,3.923,3650,3.923,4026,5.265,4027,3.215,4028,4.408,4029,3.215,4030,4.408,4031,7.858,4032,3.215,4033,5.265,4034,2.771]],["title/interfaces/TicketPollingState.html",[0,0.374,4028,3.954]],["body/interfaces/TicketPollingState.html",[0,0.418,2,0.07,3,0.028,4,0.028,5,0.024,7,0.226,11,0.024,12,0.049,15,2.174,22,0.055,23,0.006,28,0.8,29,0.727,30,2.42,34,1.486,35,2.258,43,0.926,44,1.13,47,0.887,49,0.049,50,1.202,52,2,71,1.169,73,1.576,74,1.514,79,2.387,94,1.24,113,0.003,114,0.003,117,0.736,121,3.276,132,0.601,138,1.461,159,1.498,164,2.065,181,1.59,184,0.908,207,1.014,224,0.63,244,1.278,245,1.301,249,2.894,252,1.664,254,1.664,263,2.117,265,2.546,271,2.621,282,3.173,301,5.916,313,1.086,373,1.432,385,1.59,410,2.664,412,3.556,420,4.872,423,2.208,424,1.704,425,1.704,429,2.735,430,2.82,515,2.891,527,2.496,570,1.278,573,1.834,583,1.404,586,1.255,613,2,615,1.704,643,2.313,662,1.867,671,3.286,683,1.79,689,1.59,707,3.029,711,1.278,725,3.173,741,2.495,771,3.183,800,1.664,805,3.286,809,1.704,843,2.01,854,3.356,889,2.401,1133,3.291,1157,2,1160,1.556,1163,1.626,1196,1.888,1200,2.621,1237,2.063,1393,3.103,1526,2.208,1529,2.495,1531,4.435,1545,2.387,1550,2.664,1587,3.286,1588,3.356,1644,1.942,1681,2.621,1711,3.925,1765,2.132,1838,3.276,1880,2.387,2002,3.901,2128,2.387,2247,1.746,2577,2,2591,2.963,2592,3.267,2813,3.901,2943,2.292,3130,5.863,3132,4.825,3183,5.46,3184,5.46,3185,3.901,3186,3.552,3187,2.292,3188,2.773,3189,4.127,3190,2.063,3191,2.621,3193,5.837,3194,5.837,3195,6.119,3196,6.655,3197,6.655,3198,6.655,3199,2.773,3200,2.773,3201,2.773,3202,4.127,3203,5.837,3204,2.773,3205,2.773,3206,2.063,3207,2.773,3208,2.773,3209,2.773,3210,2.773,3211,2.773,3212,4.243,3213,2.773,3217,2.773,3218,2.621,3219,2.495,3220,4.243,3221,2.773,3222,2.773,3223,2.773,3224,2.773,3225,2.773,3226,2.773,3227,5.46,3228,6.873,3229,4.929,3230,2.773,3231,4.127,3232,2.773,3233,2.773,3235,2.773,3236,3.79,3237,2.773,3238,4.127,3239,4.929,3240,2.495,3241,2.773,3242,2.621,3244,5.837,3245,6.655,3246,5.702,3247,4.435,3248,4.929,3249,5.46,3251,2.773,3252,2.773,3253,2.773,3254,2.773,3255,2.773,3256,2.773,3257,2.773,3258,2.773,3259,2.773,3260,2.621,3261,2.621,3262,4.929,3263,6.119,3264,5.46,3265,4.929,3266,4.127,3267,2.773,3268,2.773,3269,2.773,3270,2.773,3271,2.773,3272,2.773,3273,2.773,3274,2.387,3275,2.773,3276,2.773,3277,2.773,3278,2.773,3281,2.773,3649,3.925,3650,3.925,4026,4.41,4027,3.217,4028,5.267,4029,3.217,4030,4.41,4031,7.859,4032,3.217,4033,5.267,4034,2.773]],["title/interfaces/TicketsQueryParams.html",[0,0.374,193,2.669]],["body/interfaces/TicketsQueryParams.html",[0,0.726,2,0.078,3,0.032,4,0.032,5,0.027,7,0.535,11,0.027,12,0.053,13,1.087,21,0.329,22,0.059,23,0.006,28,0.788,34,0.724,41,1.55,45,1.178,49,0.084,113,0.003,114,0.003,115,2.228,116,2.298,117,1.526,118,1.985,119,2.163,120,1.501,121,4.638,122,2.819,123,2.944,124,2.375,125,3.397,126,1.951,127,4.73,128,3.304,129,3.675,130,3.785,131,1.696,132,1.246,133,1.755,134,3.324,135,2.213,136,2.298,137,2.298,138,2.354,139,2.218,140,2.68,141,2.375,142,2.882,143,3.492,144,3.915,145,4.035,146,3.304,147,1.897,148,1.989,149,4.843,150,3.675,151,3.009,152,2.548,153,1.83,154,3.748,155,3.435,156,3.041,157,3.785,158,4.329,159,2.437,160,3.256,161,2.418,162,1.301,163,3.435,164,1.91,165,3.435,166,2.591,167,4.421,168,3.675,169,2.047,170,2.375,171,2.228,172,3.675,173,2.562,174,3.435,175,1.398,176,1.853,177,1.217,178,2.228,179,2.298,180,2.228,181,3.297,182,2.711,183,1.958,184,0.903,185,2.462,186,3.85,187,3.297,188,2.681,189,1.852,190,1.474,191,2.62,192,3.222,193,3.222,194,1.321,195,2.745,196,2.354,197,3.222,198,3.611,199,3.435,200,3.435,201,4.421,202,2.602,203,2.68,204,3.041,205,4.421,206,2.298,207,0.759,208,2.228,209,2.375,210,2.298,211,2.228,212,2.375,213,1.534,214,1.733,215,2.375,216,2.298,217,2.402,218,2.298,219,1.771,220,2.402,221,2.562,222,1.811,223,2.103,224,0.482,225,1.945,226,2.375,227,1.373]],["title/interfaces/TicketsState.html",[0,0.374,216,2.753]],["body/interfaces/TicketsState.html",[0,0.737,2,0.081,3,0.033,4,0.033,5,0.028,7,0.542,11,0.028,12,0.055,21,0.327,22,0.057,23,0.006,28,0.63,34,1.079,41,1.488,45,1.227,49,0.085,113,0.004,114,0.004,115,2.322,116,2.395,117,1.556,118,2.045,119,2.254,120,1.514,121,4.651,122,2.809,123,3.013,124,2.475,125,3.431,126,2.009,127,4.472,128,3.381,129,3.761,130,3.874,131,1.768,132,1.164,133,1.774,134,3.424,135,1.941,136,2.395,137,2.395,138,2.425,139,2.285,140,3.223,141,2.475,142,2.949,143,3.541,144,3.99,145,4.129,146,3.381,147,1.933,148,2.028,149,4.897,150,3.761,151,3.08,152,2.584,153,1.747,154,3.809,155,3.538,156,3.133,157,3.874,158,4.39,159,2.464,160,3.296,161,2.474,162,1.34,163,3.538,164,1.937,165,3.538,166,2.816,167,4.506,168,3.761,169,2.133,170,2.475,171,2.322,172,4.104,173,2.639,174,3.538,175,1.457,176,1.932,177,1.269,178,2.322,179,2.395,180,2.322,181,3.697,182,2.605,183,1.996,184,0.862,185,2.159,186,3.36,187,3.08,188,2.265,189,1.334,190,1.062,191,1.888,192,2.322,193,2.322,194,0.952,195,1.978,196,1.696,197,2.322,198,3.152,199,2.475,200,2.475,201,2.475,202,1.457,203,1.932,204,2.192,205,2.475,206,2.395,207,0.791,208,2.322,209,2.475,210,2.395,211,2.322,212,2.475,213,2.285,214,2.582,215,3.538,216,3.424,217,3.152,218,2.395,219,1.846,220,2.475,221,2.639,222,1.888,223,2.192,224,0.496,225,2.897,226,4.506,227,2.387,486,3.133]],["title/interfaces/TicketsTabProps.html",[0,0.374,4035,4.293]],["body/interfaces/TicketsTabProps.html",[0,0.291,2,0.072,3,0.029,4,0.029,5,0.025,10,1.66,11,0.048,12,0.05,16,2.226,21,0.265,22,0.044,23,0.006,25,1.577,27,2.231,28,0.393,33,2.602,34,1.389,42,1.19,43,1.221,44,1.697,45,1.095,46,1.454,47,1.609,49,0.05,62,2.471,70,1.544,71,1.163,72,1.347,73,0.918,74,1.108,75,1.399,83,1.454,89,2.144,90,2.823,91,3.725,93,3.333,94,1.779,113,0.003,114,0.003,120,0.613,121,4.348,122,1.151,144,4.364,147,2.115,148,2.507,154,1.764,160,2.499,168,2.011,172,2.966,181,3.675,182,1.276,183,0.978,184,0.365,186,2.429,188,1.211,194,1.643,197,2.071,207,1.041,213,1.426,218,2.137,221,1.647,224,0.599,263,0.993,268,3.332,301,2.471,313,0.632,314,1.465,349,2.286,373,3.2,411,2.208,542,2.602,570,1.951,573,1.276,579,2.373,583,1.454,586,1.299,601,1.808,602,2.011,619,1.723,643,2.779,656,3.426,662,1.916,683,1.854,707,2.602,710,2.373,751,2.286,803,2.583,850,1.544,873,1.723,878,1.577,886,1.132,922,2.885,959,1.684,962,2.103,963,1.426,966,2.361,970,2.714,971,2.714,974,3.059,975,2.734,995,2.987,1011,2.278,1071,2.373,1082,1.684,1083,1.647,1084,1.684,1095,3.185,1101,1.764,1110,3.256,1116,2.429,1117,3.886,1118,2.823,1128,4.914,1129,3.068,1130,2.583,1133,3.612,1134,2.966,1135,3.256,1138,5.377,1147,2.714,1149,2.583,1153,3.068,1157,2.071,1159,4.78,1165,3.332,1166,3.332,1167,3.151,1168,4.914,1169,5.838,1177,2.071,1185,4.006,1186,4.914,1188,3.332,1189,3.332,1190,3.332,1214,3.52,1239,4.756,1294,2.583,1296,3.332,1297,3.068,1300,2.871,1315,3.497,1323,4.033,1325,2.583,1326,3.744,1327,2.871,1329,3.925,1458,2.286,1583,4.78,1587,4.006,1594,3.332,1599,3.332,1613,2.758,1644,2.011,1651,3.332,1671,4.006,1673,2.714,1694,3.501,1696,2.373,1699,2.471,1700,2.583,1711,3.372,1712,2.871,1768,4.003,1796,2.871,1802,5.25,1803,4.003,1814,2.871,1818,2.286,1819,4.525,1820,3.068,1823,3.068,1827,3.332,1831,4.235,1838,2.541,1858,2.714,1859,3.068,1860,2.714,1861,2.583,1912,3.332,2092,2.583,2367,3.645,2507,2.011,2584,2.871,2585,3.068,2587,3.068,2590,3.068,2599,3.068,2982,2.714,3130,4.422,3185,2.714,3261,2.714,3288,2.871,3314,4.78,3529,3.332,3574,3.068,3579,4.914,3581,3.332,3615,3.332,3617,3.332,3619,3.332,3649,4.006,3650,2.286,3724,3.332,3858,3.068,3886,3.332,3944,3.332,3950,3.332,4011,4.914,4030,4.525,4033,4.525,4035,4.914,4036,3.732,4037,7.698,4038,3.732,4039,3.732,4040,3.732,4041,3.732,4042,3.732,4043,6.539,4044,7.698,4045,3.732,4046,3.732,4047,5.504,4048,3.732,4049,3.732,4050,3.732,4051,3.732,4052,3.732,4053,3.732,4054,3.732,4055,7.218,4056,3.732,4057,5.504,4058,3.732,4059,3.732,4060,3.732,4061,3.332,4062,5.504,4063,5.504,4064,3.732,4065,3.732,4066,3.732,4067,5.504,4068,3.732,4069,3.732,4070,3.732,4071,3.732,4072,3.732,4073,3.732,4074,3.732,4075,5.504,4076,5.504,4077,5.504,4078,3.732,4079,3.732,4080,3.732,4081,5.504,4082,3.732,4083,3.732,4084,3.732,4085,3.732]],["title/interfaces/TimerOptions.html",[0,0.374,1533,3.954]],["body/interfaces/TimerOptions.html",[0,0.619,2,0.124,3,0.051,4,0.051,5,0.043,7,0.402,11,0.043,12,0.073,13,1.142,22,0.063,23,0.006,24,2.765,29,0.866,35,2.567,49,0.085,50,2.124,71,0.952,94,1.481,113,0.005,114,0.005,153,1.268,184,0.926,245,2.871,265,2.545,273,2.651,311,2.078,374,3.356,425,3.028,430,3.16,452,3.098,512,3.356,517,3.924,518,4.166,519,3.924,635,4.928,689,2.826,1523,5.266,1524,5.266,1526,5.887,1527,4.928,1528,5.718,1529,4.434,1530,7.099,1531,4.434,1532,5.718,1533,6.538,1534,8.074,1535,8.074,1536,6.261,1537,8.074,1538,5.718,1539,5.718,1540,6.538,1541,5.718,1542,7.099,1543,6.538,1544,5.718,1545,4.242,1546,4.659,1547,5.266,1548,5.266,1549,4.928,1550,3.182,1551,5.266]],["title/interfaces/Typography.html",[0,0.374,1407,2.946]],["body/interfaces/Typography.html",[0,0.585,2,0.093,3,0.059,4,0.038,5,0.032,11,0.032,12,0.06,15,2.669,21,0.33,22,0.062,23,0.006,28,0.694,49,0.083,60,5.612,61,4.21,64,4.21,71,1.014,77,3.449,78,5.142,87,2.616,89,3.151,94,1.109,96,4.033,103,1.833,106,3.052,110,1.799,112,6.223,113,0.004,114,0.004,122,1.479,147,1.218,153,1.488,184,0.949,194,2.108,224,0.547,313,1.115,486,4.586,626,2.905,711,2.664,722,3.06,868,3.04,869,3.863,870,3.27,886,2.279,887,3.189,909,3.553,929,4.423,930,4.237,965,2.839,966,1.733,974,3.367,976,4.187,1025,2.747,1096,4.018,1097,4.171,1098,4.171,1099,4.171,1100,3.733,1101,3.553,1102,4.171,1103,3.449,1104,4.171,1109,2.586,1116,3.739,1117,3.244,1163,3.649,1185,4.033,1302,3.322,1315,3.189,1326,3.769,1386,5.065,1387,3.945,1388,3.322,1393,3.641,1394,5.413,1395,5.413,1396,5.413,1397,5.413,1398,5.413,1399,4.788,1400,5.065,1401,6.65,1402,6.65,1403,6.65,1404,6.65,1405,6.968,1406,6.65,1407,5.192,1408,5.39,1409,5.065,1410,5.413,1411,5.413,1412,5.413,1413,3.052,1414,5.413,1415,4.788,1416,3.945,1417,3.945,1418,3.945,1419,6.223,1420,3.945,1421,3.945,1422,3.945,1423,2.514,1424,3.945,1425,3.49,1426,3.322,1427,3.692,1428,3.692,1429,3.945,1430,3.945,1431,3.692,1432,3.945,1433,3.322,1434,3.322,1435,6.179,1436,2.839,1437,3.692,1438,3.945,1439,3.945,1440,3.945,1441,2.663,1442,5.203,1443,3.945,1444,3.945,1445,3.945,1446,3.945,1447,3.49,1448,3.945,1449,3.692,1450,3.945,1451,3.945,1452,3.322]],["title/interfaces/UIState.html",[0,0.374,4086,4.293]],["body/interfaces/UIState.html",[0,0.46,2,0.114,3,0.047,4,0.047,5,0.039,7,0.371,11,0.039,12,0.069,13,1.092,21,0.317,22,0.06,23,0.006,28,0.622,29,0.798,34,1.785,43,0.771,49,0.086,70,3.633,71,1.13,73,1.452,113,0.005,114,0.005,151,2.605,164,2.098,214,2.549,224,0.753,304,6.848,351,3.182,451,1.032,542,4.29,546,4.628,548,5.56,549,3.277,563,4.628,716,3.277,742,4.629,749,3.617,752,5.494,753,4.543,754,5.103,755,5.229,815,3.38,818,4.854,1604,5.002,4086,8.426,4087,5.904,4088,9.075,4089,9.075,4090,9.075,4091,8.78,4092,5.904,4093,5.904,4094,5.904,4095,5.904,4096,7.554,4097,7.554,4098,7.554,4099,7.554,4100,5.904,4101,5.904,4102,5.904,4103,5.904,4104,5.904,4105,5.904,4106,5.904,4107,5.904,4108,5.904,4109,5.904]],["title/interfaces/UpdateProfileRequest.html",[0,0.374,2519,2.946]],["body/interfaces/UpdateProfileRequest.html",[0,0.712,2,0.108,3,0.044,4,0.044,5,0.037,7,0.351,11,0.037,12,0.067,13,1.111,21,0.333,22,0.054,23,0.006,29,0.698,49,0.084,113,0.004,114,0.004,117,1.488,118,2.492,120,0.917,132,1.353,133,1.631,142,2.359,143,2.359,153,1.703,159,2.035,162,1.633,164,1.291,175,2.537,176,3.745,184,0.84,220,3.356,224,0.605,295,1.876,309,1.91,313,1.457,314,1.633,330,2.925,431,3.427,451,1.698,456,3.817,457,3.445,494,2.945,495,3.116,561,3.16,587,2.847,734,2.41,736,2.731,756,5.243,810,3.099,853,3.099,893,2.847,901,3.445,1002,3.62,1474,2.578,1575,2.264,1606,2.464,1613,3.099,1630,3.715,1733,3.698,2504,3.698,2505,3.865,2506,5.044,2507,3.927,2508,4.464,2509,3.865,2510,6.721,2511,3.865,2512,3.865,2513,5.044,2514,3.865,2515,5.044,2516,5.044,2517,3.865,2518,3.865,2519,4.464,2520,4.464,2521,3.698,2522,3.865,2523,3.698,2524,3.551,2525,3.865,2526,3.698]],["title/interfaces/UpdateProfileResponse.html",[0,0.374,2521,3.185]],["body/interfaces/UpdateProfileResponse.html",[0,0.719,2,0.112,3,0.046,4,0.046,5,0.039,7,0.364,11,0.039,12,0.068,13,0.681,21,0.33,22,0.039,23,0.006,29,0.835,49,0.084,113,0.004,114,0.004,117,1.184,118,1.982,120,0.951,132,1.454,133,1.754,142,2.449,143,2.449,153,1.787,159,2.085,162,1.673,164,1.34,175,2.599,176,3.446,184,0.807,220,3.417,224,0.62,295,1.947,309,1.982,313,1.613,314,1.673,330,3.91,431,3.154,451,1.643,456,3.036,457,2.74,494,2.782,495,2.997,561,2.908,587,2.955,734,2.502,736,2.172,756,5.284,810,3.217,853,3.217,893,2.955,901,2.74,1002,2.879,1474,2.676,1575,2.349,1606,2.557,1613,2.852,1630,2.955,1733,3.838,2504,3.838,2505,4.012,2506,5.716,2507,4.449,2508,4.573,2509,4.012,2510,6.591,2511,4.012,2512,4.012,2513,5.167,2514,4.012,2515,5.167,2516,5.167,2517,4.012,2518,4.012,2519,3.55,2520,3.55,2521,4.943,2522,4.012,2523,3.838,2524,3.686,2525,4.012,2526,3.838]],["title/interfaces/UploadError.html",[0,0.374,851,3.185]],["body/interfaces/UploadError.html",[0,0.71,2,0.127,3,0.052,4,0.052,5,0.058,7,0.412,11,0.044,12,0.074,13,0.95,21,0.265,22,0.066,23,0.006,29,0.838,43,1.054,49,0.086,50,1.472,113,0.005,114,0.005,183,1.721,184,0.953,190,1.668,224,0.778,311,2.621,393,2.965,400,5.224,449,4.133,692,2.965,798,3.564,829,3.887,830,4.779,831,3.887,832,3.887,833,4.779,834,4.949,835,4.025,836,3.762,837,4.013,838,4.237,839,3.887,840,5.592,841,4.779,842,3.887,843,2.463,844,6.317,845,4.351,846,4.548,847,3.762,848,4.548,849,4.779,850,3.343,851,5.349,852,2.864,853,5.064,854,3.442]],["title/classes/UploadMutex.html",[1469,1.911,4110,4.293]],["body/classes/UploadMutex.html",[3,0.029,4,0.029,5,0.06,7,0.228,11,0.024,12,0.049,13,0.428,21,0.25,22,0.06,23,0.006,28,0.383,29,0.517,35,2.265,39,2.517,43,0.474,44,1.137,47,1.328,49,0.033,50,1.21,65,1.679,66,2.234,71,1.147,73,1.328,74,1.4,79,4.72,94,0.84,113,0.003,114,0.003,120,0.597,122,1.986,126,1.221,131,1.536,153,1.069,183,2.09,184,0.807,190,1.809,194,1.622,207,1.508,224,0.72,234,4.665,235,2.797,245,1.313,248,1.905,249,1.243,252,2.493,254,2.973,257,1.959,262,3.246,263,1.437,265,2.559,266,3.246,273,1.504,276,2.202,295,1.221,315,1.959,327,2.552,334,2.081,346,3.045,350,1.337,351,2.46,353,2.665,361,2.202,373,3.026,388,4.217,393,1.64,399,4.533,400,4.568,410,1.806,411,3.194,424,1.719,429,2.753,430,1.445,433,2.312,435,3.091,449,4.275,451,0.944,458,2.018,466,3.574,470,4.096,473,3.956,493,1.363,507,2.828,515,1.64,527,2.103,564,3.369,570,1.289,573,1.243,579,2.312,586,1.88,588,2.753,590,1.854,599,1.806,606,1.504,618,1.854,630,2.493,643,1.313,656,1.905,662,1.88,667,2.644,683,2.682,689,1.604,707,3.369,729,2.227,736,1.363,771,3.199,797,1.604,798,3.949,803,2.517,809,2.552,829,3.194,831,3.194,832,4.505,833,4.505,834,3.945,835,3.945,836,4.081,837,3.963,838,1.761,839,2.151,840,4.458,841,3.927,842,3.194,843,3.396,844,3.737,845,2.408,846,2.517,847,4.081,848,3.737,850,1.504,851,4.265,853,2.997,1077,3.574,1126,3.246,1196,3.374,1214,2.721,1274,2.018,1460,2.081,1469,1.445,1471,1.959,1481,2.997,1505,2.644,1517,2.989,1545,2.408,1606,1.604,1613,2.909,1638,2.644,1671,2.227,1674,3.737,1763,2.408,1809,2.997,1838,2.973,1880,2.408,1907,2.151,1969,3.246,2247,1.761,2263,2.989,2306,2.797,2353,2.989,2386,1.959,2467,3.307,2581,2.408,2612,2.644,2613,2.644,2622,2.517,2632,5.184,2633,4.458,2635,4.265,2636,4.684,2637,4.684,2638,4.568,2639,2.408,2640,2.644,2641,2.644,2642,2.644,2643,2.644,2644,2.644,2645,2.312,2678,2.644,2684,4.934,2737,2.644,2945,3.246,3031,2.797,3186,3.575,3206,2.081,3274,3.575,3550,2.408,3610,4.82,3756,3.246,4005,3.246,4110,6.363,4111,3.246,4112,5.399,4113,3.636,4114,3.636,4115,3.636,4116,3.636,4117,3.636,4118,3.636,4119,3.636,4120,3.636,4121,3.636,4122,3.636,4123,3.636,4124,3.636,4125,5.399,4126,3.636,4127,3.246,4128,3.636,4129,7.978,4130,3.636,4131,3.636,4132,3.636,4133,3.636,4134,3.636,4135,3.636,4136,5.399,4137,3.636,4138,3.636,4139,3.636,4140,5.399,4141,6.44,4142,3.636,4143,5.399,4144,3.636,4145,3.636,4146,3.636,4147,6.44,4148,3.636,4149,5.399,4150,3.636,4151,3.636,4152,7.615,4153,3.636,4154,3.636,4155,3.636,4156,3.636,4157,3.636,4158,3.636,4159,3.636,4160,8.485,4161,3.636,4162,3.636,4163,7.127,4164,3.636,4165,5.399,4166,3.636,4167,3.246,4168,4.82,4169,3.636,4170,3.636,4171,3.636,4172,5.399,4173,5.399,4174,3.636,4175,3.636,4176,3.636,4177,3.636,4178,3.636,4179,3.636,4180,3.636,4181,3.636,4182,3.246,4183,3.636,4184,5.399,4185,3.636,4186,3.636,4187,3.636,4188,3.636,4189,3.246,4190,3.636,4191,3.636,4192,3.636,4193,3.636,4194,3.636,4195,3.246,4196,3.636,4197,3.636,4198,3.636]],["title/interfaces/UploadProgress.html",[0,0.374,840,3.329]],["body/interfaces/UploadProgress.html",[0,0.712,2,0.128,3,0.052,4,0.052,5,0.058,7,0.415,11,0.044,12,0.074,21,0.266,22,0.064,23,0.006,29,0.633,43,1.058,49,0.086,50,1.481,113,0.005,114,0.005,183,2.396,184,0.976,190,1.678,224,0.728,311,2.631,393,2.983,400,3.785,449,4.14,692,3.659,798,3.87,829,3.911,830,4.808,831,3.911,832,3.911,833,4.797,834,4.967,835,4.05,836,3.785,837,4.028,838,4.249,839,3.911,840,6.072,841,6.651,842,5.41,843,2.478,844,5.613,845,4.378,846,4.576,847,3.785,848,4.576,849,4.808,850,2.736,851,4.378,852,2.344,853,3.669,854,3.463]],["title/interfaces/UploadResult.html",[0,0.374,2623,3.329]],["body/interfaces/UploadResult.html",[0,0.338,2,0.053,3,0.022,4,0.022,5,0.052,7,0.172,11,0.018,12,0.04,13,0.322,21,0.295,22,0.053,23,0.006,29,0.416,34,0.784,35,2.321,36,2.054,41,1.481,42,0.874,43,1.067,49,0.065,50,0.974,65,1.265,66,1.134,68,1.815,69,2.571,71,1.127,74,1.478,94,1.42,113,0.003,114,0.003,117,0.56,122,2.198,132,0.457,135,1.994,138,1.762,139,2.063,147,1.103,148,2.259,152,1.34,159,0.766,162,1.597,166,0.859,183,0.718,184,0.527,189,0.874,190,1.371,194,0.989,202,2.904,204,1.436,207,1.684,217,3.382,219,1.209,224,0.803,252,2.837,254,1.265,264,3.133,273,1.134,276,2.101,291,2.764,295,2.931,333,1.183,338,1.361,346,2.552,353,1.798,361,3.017,410,1.361,424,1.296,425,1.296,429,1.397,430,2.145,431,1.158,432,0.99,435,1.569,437,3.518,440,1.679,448,2.054,449,4.119,451,1.171,457,1.296,458,1.521,466,2.997,467,1.569,473,2.412,506,1.41,507,1.436,515,2.436,518,1.436,564,2.905,570,2.898,572,1.296,573,2.554,579,1.743,583,3.108,586,2.846,588,2.753,593,1.328,599,4.061,606,3.452,627,3.308,630,2.006,638,2.662,643,2.218,646,2.764,656,1.436,662,2.846,683,1.361,689,2.382,692,3.022,693,1.621,705,3.308,707,3.531,711,2.527,722,1.949,734,1.183,736,1.027,761,1.815,771,1.361,794,1.569,797,1.209,798,2.711,809,1.296,829,1.621,831,3.963,832,5.02,833,3.963,834,1.679,835,2.662,836,4.858,837,1.361,838,3.245,839,4.419,842,1.621,843,2.991,852,0.972,1011,1.798,1077,2.997,1103,2.276,1105,2.997,1163,1.237,1177,1.521,1196,1.436,1214,1.158,1220,1.815,1230,2.412,1237,1.569,1270,2.342,1274,2.412,1285,1.993,1436,3.194,1469,1.727,1473,5.008,1474,1.265,1476,2.764,1488,1.743,1507,2.764,1606,2.711,1613,1.047,1687,3.008,1716,1.743,1718,2.159,1719,1.679,1721,1.679,1728,3.37,1730,3.71,1763,1.815,1792,2.103,1794,1.436,1805,1.815,1809,1.521,1838,1.265,1877,1.993,1907,1.621,1933,1.993,1935,3.764,1956,1.993,2110,1.296,2192,3.308,2247,1.328,2386,4.883,2388,2.997,2416,1.993,2446,4.253,2456,1.897,2467,2.662,2503,1.993,2507,1.477,2581,1.815,2603,3.16,2604,1.993,2605,4.154,2606,1.993,2607,1.815,2608,2.109,2609,2.109,2610,1.993,2611,1.815,2612,1.993,2613,3.16,2614,2.109,2615,2.109,2616,2.109,2617,2.109,2618,2.109,2619,2.109,2620,2.109,2621,3.16,2622,3.008,2623,3.738,2624,5.184,2625,6.59,2626,3.008,2627,2.109,2628,2.109,2629,2.109,2630,2.109,2631,1.897,2632,3.16,2633,1.897,2634,3.927,2635,1.815,2636,1.993,2637,1.993,2638,3.518,2639,1.815,2640,1.993,2641,1.993,2642,1.993,2643,1.993,2644,1.993,2645,1.743,2646,2.109,2647,2.109,2648,3.343,2649,2.109,2650,2.109,2651,2.109,2652,2.109,2653,3.575,2654,1.993,2655,2.109,2656,6.289,2657,2.109,2658,2.109,2659,2.109,2660,2.109,2661,2.109,2662,2.109,2663,2.109,2664,1.993,2665,2.109,2666,2.109,2667,3.008,2668,1.993,2669,4.154,2670,4.154,2671,2.109,2672,3.343,2673,2.109,2674,3.343,2675,2.109,2676,3.343,2677,3.343,2678,1.993,2679,2.109,2680,2.109,2681,3.343,2682,1.993,2683,3.16,2684,3.008,2685,4.154,2686,3.927,2687,1.993,2688,1.897,2689,3.343,2690,4.727,2691,6.626,2692,3.343,2693,2.109,2694,5.747,2695,2.109,2696,2.109,2697,1.897,2698,2.109,2699,2.109,2700,4.727,2701,3.343,2702,4.727,2703,2.109,2704,2.109,2705,2.109,2706,2.109,2707,2.109,2708,3.343,2709,1.897,2710,1.993,2711,2.109,2712,2.109,2713,5.484,2714,1.993,2715,4.154,2716,4.154,2717,4.154,2718,3.343,2719,2.109,2720,1.743,2721,1.897,2722,2.109,2723,2.878,2724,2.109,2725,3.927,2726,1.897,2727,2.109,2728,2.109,2729,1.993,2730,2.109,2731,2.109,2732,3.343,2733,2.109,2734,1.993,2735,2.109,2736,2.109,2737,1.993,2738,2.109,2739,2.109,2740,2.109,2741,2.109,2742,2.109,2743,5.074,2744,2.109,2745,1.993,2746,3.927,2747,2.109,2748,2.109,2749,2.109,2750,2.109,2751,2.109,2752,1.993,2753,2.109,2754,2.109,2755,2.109,2756,2.109,2757,3.343,2758,1.993,2759,2.109,2760,5.484,2761,1.993,2762,2.109,2763,1.993,2764,2.109]],["title/interfaces/UseActionDebounceOptions.html",[0,0.374,4199,3.954]],["body/interfaces/UseActionDebounceOptions.html",[0,0.488,2,0.086,3,0.035,4,0.035,5,0.03,7,0.281,10,1.591,11,0.03,12,0.057,13,0.737,21,0.147,22,0.042,23,0.006,24,2.706,26,2.409,28,0.763,29,0.428,30,2.017,34,1.619,35,1.779,41,0.794,43,0.818,44,0.942,49,0.072,50,1.002,51,3.251,59,2.738,65,2.894,66,1.85,69,2.645,70,3.901,71,1.179,74,1.4,76,3.439,113,0.004,114,0.004,122,1.378,131,1.889,140,2.064,142,1.889,143,1.889,152,1.378,159,2.022,164,1.673,184,0.766,194,1.017,195,2.963,207,0.845,220,1.85,227,1.529,245,1.614,252,2.064,254,3.622,265,3.117,276,1.529,353,1.85,374,2.342,425,2.113,430,3.117,452,3.336,471,2.481,493,1.675,515,2.017,590,2.279,606,1.85,615,2.113,618,2.279,640,3.251,671,3.84,715,3.251,736,2.349,760,3.124,771,3.113,794,2.559,800,2.064,854,3.283,994,3.251,1022,2.645,1023,2.96,1133,2.995,1134,2.409,1160,3.566,1167,2.559,1237,2.559,1267,3.218,1346,3.439,1492,3.094,1525,3.675,1526,4.806,1576,1.889,1588,3.792,1674,3.094,1679,3.675,1806,4.434,1809,3.479,1838,3.342,1882,2.481,2073,2.113,2092,3.094,2230,3.251,2294,2.738,2296,2.645,2364,3.675,2467,4.434,2534,4.002,2592,4.905,2653,4.151,2721,3.094,2915,3.094,2943,2.843,2957,2.96,3131,4.144,3186,2.96,3187,2.843,3206,2.559,3212,2.96,3219,3.094,3220,4.151,3246,5.01,3247,4.339,3279,2.843,3287,3.251,3490,5.951,3506,7.04,3508,7.04,3534,3.675,3541,3.675,3542,6.766,3550,2.96,3654,3.675,4034,4.822,4199,5.951,4200,3.991,4201,5.596,4202,8.339,4203,5.951,4204,6.462,4205,5.596,4206,3.991,4207,3.991,4208,5.153,4209,6.45,4210,5.596,4211,3.991,4212,3.991,4213,3.991,4214,3.991,4215,3.991,4216,3.991,4217,3.991,4218,3.991,4219,3.991,4220,3.991,4221,3.991,4222,3.991,4223,3.991,4224,3.991,4225,3.991,4226,7.375,4227,7.375,4228,5.596,4229,5.596,4230,3.991,4231,5.596,4232,5.596,4233,3.991,4234,3.991,4235,3.675,4236,3.991,4237,3.991,4238,5.596,4239,3.991,4240,3.991,4241,3.991,4242,3.991,4243,7.375,4244,6.462,4245,3.991,4246,3.991,4247,3.991,4248,3.991]],["title/interfaces/UseActionDebounceResult.html",[0,0.374,4208,3.954]],["body/interfaces/UseActionDebounceResult.html",[0,0.481,2,0.085,3,0.035,4,0.035,5,0.029,7,0.275,10,1.57,11,0.029,12,0.057,21,0.144,22,0.055,23,0.006,24,1.893,26,2.363,28,0.652,29,0.686,30,2.79,34,1.611,35,2.329,41,0.779,43,0.807,44,0.924,49,0.071,50,0.983,51,3.19,59,2.687,65,2.855,66,1.815,69,2.595,70,3.919,71,1.177,74,1.442,76,3.375,113,0.004,114,0.004,122,1.352,131,1.853,140,2.025,142,1.853,143,1.853,152,1.352,159,2.001,164,1.656,184,0.76,194,1.408,195,2.924,207,0.829,220,1.815,227,1.5,245,1.584,252,2.025,254,3.592,265,3.091,276,1.5,353,1.815,374,2.298,425,2.073,430,3.091,452,3.195,471,2.434,493,1.644,515,1.979,590,2.236,606,1.815,615,2.073,618,2.236,640,3.19,671,3.789,715,3.19,736,2.318,760,3.092,771,3.072,794,2.511,800,2.025,854,3.24,994,3.19,1022,2.595,1023,2.904,1133,2.964,1134,2.363,1160,3.541,1167,2.511,1237,2.511,1267,3.195,1346,3.375,1492,3.036,1525,3.606,1526,5.025,1576,1.853,1588,3.753,1674,3.036,1679,3.606,1806,4.766,1809,3.432,1838,3.592,1882,2.434,2073,2.073,2092,3.036,2230,3.19,2294,2.687,2296,2.595,2364,3.606,2467,4.389,2534,3.973,2592,4.918,2653,4.744,2721,4.281,2915,3.036,2943,2.789,2957,2.904,3131,4.454,3186,2.904,3187,2.789,3206,2.511,3212,2.904,3219,3.036,3220,4.095,3246,4.959,3247,4.281,3279,2.789,3287,3.19,3490,6.396,3506,7.466,3508,7.466,3534,3.606,3541,3.606,3542,6.987,3550,2.904,3654,3.606,4034,4.758,4199,5.085,4200,3.916,4201,3.916,4202,7.974,4203,5.89,4204,5.521,4205,5.521,4206,3.916,4207,3.916,4208,5.89,4209,7.191,4210,5.521,4211,3.916,4212,3.916,4213,3.916,4214,3.916,4215,3.916,4216,3.916,4217,3.916,4218,3.916,4219,3.916,4220,3.916,4221,3.916,4222,3.916,4223,3.916,4224,3.916,4225,3.916,4226,7.323,4227,7.323,4228,5.521,4229,5.521,4230,3.916,4231,5.521,4232,5.521,4233,3.916,4234,3.916,4235,3.606,4236,3.916,4237,3.916,4238,5.521,4239,3.916,4240,3.916,4241,3.916,4242,3.916,4243,7.323,4244,6.395,4245,3.916,4246,3.916,4247,3.916,4248,3.916]],["title/interfaces/UseAuthRestoreConfig.html",[0,0.374,4249,4.293]],["body/interfaces/UseAuthRestoreConfig.html",[0,0.415,2,0.103,3,0.042,4,0.042,5,0.036,7,0.334,11,0.036,12,0.065,13,1.1,15,2.16,22,0.056,23,0.006,28,0.926,29,0.759,30,3.188,35,2.563,36,3.991,43,1.035,44,1.122,49,0.072,50,1.583,65,2.46,66,2.205,71,1.133,73,1.738,74,1.43,98,2.351,113,0.004,114,0.004,139,2.699,153,1.055,184,0.774,224,0.658,245,2.862,263,2.338,282,4.69,301,6.099,412,5.254,452,2.076,493,1.997,506,2.988,564,3.34,570,1.889,573,2.416,583,2.076,586,1.855,593,2.581,634,5.809,637,4.891,662,2.76,683,2.647,684,7.655,689,2.351,750,4.891,798,2.351,809,2.519,843,2.648,1081,2.519,1148,4.891,1160,2.3,1182,4.679,1536,6.081,1546,3.875,1588,3.701,1776,4.679,1806,4.328,1907,3.152,2101,6.081,2294,3.264,2611,3.529,2785,5.436,2943,3.389,2947,4.381,3044,4.757,3187,3.389,3218,5.139,3279,3.389,3399,5.809,3527,4.757,3550,3.529,4182,6.308,4195,6.308,4249,7.077,4250,5.328,4251,7.065,4252,7.065,4253,4.381,4254,7.927,4255,5.328,4256,5.328,4257,8.441,4258,8.441,4259,8.441,4260,8.441,4261,7.077,4262,5.328,4263,5.328,4264,5.328,4265,5.328,4266,5.328,4267,5.328,4268,5.328,4269,7.065,4270,5.328,4271,5.328]],["title/interfaces/UseCartActionsReturn.html",[0,0.374,4272,4.293]],["body/interfaces/UseCartActionsReturn.html",[0,0.437,2,0.108,3,0.044,4,0.044,5,0.037,11,0.037,12,0.067,21,0.267,22,0.065,23,0.006,28,0.591,29,0.877,34,1.554,35,2.738,43,1.124,44,1.181,49,0.074,50,2.001,66,2.32,71,1.144,74,1.238,94,1.296,113,0.004,114,0.004,182,2.499,184,0.942,213,2.142,224,0.465,227,2.779,254,2.589,593,3.937,641,2.938,760,3.855,803,3.882,815,4.183,960,6.007,967,7.045,981,7.175,982,3.855,984,4.61,988,5.471,1004,4.653,1028,7.045,1046,7.045,1051,7.045,1052,7.528,1055,7.528,1057,4.61,1062,4.314,1066,4.314,1069,4.61,1072,4.61,1085,4.61,1133,3.363,1147,4.078,1148,5.058,1160,2.42,1170,7.528,1172,5.006,1173,8.174,1174,5.006,1238,5.006,1253,6.523,1606,2.474,1882,3.112,2073,2.651,2915,3.882,2976,3.317,3206,3.21,3849,8.174,3863,6.523,4253,4.61,4272,7.688,4273,5.607,4274,9.156,4275,5.607,4276,5.006,4277,5.607,4278,5.607,4279,5.607,4280,5.607,4281,5.607,4282,5.607,4283,5.607]],["title/interfaces/UseKycDocsResult.html",[0,0.374,2773,3.954]],["body/interfaces/UseKycDocsResult.html",[0,0.49,2,0.087,3,0.036,4,0.036,5,0.03,7,0.282,11,0.03,12,0.066,13,0.74,16,1.387,21,0.258,22,0.06,23,0.006,24,1.943,29,0.822,34,1.311,35,2.436,41,1.397,43,1.027,44,0.948,45,1.32,49,0.081,50,1.008,65,2.907,66,1.862,69,2.662,71,1.164,74,1.599,113,0.004,114,0.004,132,1.211,133,1.266,135,2.357,147,1.599,148,2.432,153,1.809,162,1.008,173,1.985,185,2.274,189,2.008,194,1.433,198,1.862,202,2.739,207,1.19,227,1.539,263,1.676,273,1.862,276,2.153,291,4.005,311,2.043,312,2.862,314,1.411,351,2.775,365,2.757,432,1.625,449,1.985,451,1.101,493,1.687,506,2.043,512,2.357,542,4.165,572,2.127,643,1.625,742,2.18,747,4.58,847,2.576,850,1.862,929,2.18,1077,2.498,1078,2.841,1133,2.606,1150,5.283,1160,3.136,1214,1.901,1579,4.114,1587,3.858,1590,4.359,1706,3.462,1708,6.023,1717,4.596,1718,4.114,1719,2.757,1721,5.507,1725,2.661,1728,4.056,1730,4.263,1732,3.605,1736,3.605,1738,3.605,1739,4.159,1740,4.159,1742,3.605,1780,3.273,1792,3.343,1797,6.408,1798,6.643,1822,3.462,2110,2.977,2367,2.98,2390,4.899,2391,2.757,2573,3.7,2607,2.98,2709,4.359,2723,2.98,2765,4.018,2766,4.018,2767,5.622,2768,5.177,2769,6.485,2770,5.622,2771,4.018,2772,4.018,2773,5.972,2774,5.723,2775,7.024,2776,5.622,2777,5.622,2778,4.018,2779,4.018,2780,4.018,2781,6.054,2782,4.018,2783,4.018,2784,4.018,2785,3.462,2786,4.018,2787,4.018,2788,4.018,2789,4.018,2790,4.018,2791,4.018,2792,4.018,2793,4.018,2794,2.98,2795,4.018,2796,4.018,2797,4.018,2798,4.018,2799,4.018,2800,4.018,2801,4.018,2802,4.018,2803,4.018,2804,4.018,2805,5.622,2806,5.622,2807,2.757,2808,4.018,2809,4.018,2810,7.661,2811,3.7,2812,6.485,2813,3.273,2814,4.018,2815,4.018,2816,4.018,2817,4.018,2818,4.018,2819,4.018]],["title/interfaces/UseKycUploadReturn.html",[0,0.374,4284,4.293]],["body/interfaces/UseKycUploadReturn.html",[0,0.262,2,0.065,3,0.027,4,0.027,5,0.046,7,0.211,11,0.022,12,0.047,13,0.866,21,0.167,22,0.063,23,0.006,24,1.451,28,0.354,29,0.488,33,1.589,34,1.328,35,2.285,41,1.217,43,1.082,44,0.708,49,0.071,50,1.141,66,1.391,69,1.989,71,1.166,74,1.569,113,0.003,114,0.003,122,1.037,132,0.561,139,1.284,147,0.853,148,2.063,152,1.57,153,1.765,159,0.939,162,1.377,164,1.702,166,1.927,184,0.757,194,1.159,195,2.407,202,1.17,207,1.521,217,2.543,222,1.517,224,0.774,227,1.15,236,2.138,238,2.138,248,1.761,252,2.837,254,3.164,257,1.812,263,0.895,265,2.023,276,2.518,287,3.693,291,3.238,295,1.129,311,1.652,313,1.248,373,2.023,374,1.761,425,1.589,430,2.441,433,4.359,449,4.277,466,1.866,470,2.138,471,1.866,473,1.866,493,1.26,507,1.761,518,3.219,525,3.371,527,1.31,529,2.826,564,1.589,570,1.192,571,2.764,573,1.15,583,1.31,586,2.386,590,1.714,593,3.567,601,1.628,606,2.107,613,3.41,627,3.119,630,1.552,636,2.587,637,2.327,638,2.059,643,1.214,646,2.138,656,2.667,662,2.802,671,3.119,675,2.351,683,1.67,689,2.246,693,1.989,707,2.407,721,2.764,736,1.26,771,3.052,798,3.878,806,2.764,809,2.407,810,1.866,833,1.989,836,1.925,838,2.976,842,3.012,847,3.518,851,5.329,1081,2.407,1133,2.836,1134,1.812,1143,4.545,1148,3.524,1150,4.469,1160,2.652,1182,2.226,1195,5.052,1214,2.151,1216,4.93,1270,1.812,1460,1.925,1549,2.587,1588,2.667,1604,3.371,1605,2.587,1613,1.284,1706,2.587,1709,6.37,1716,2.138,1718,3.998,1719,2.059,1728,3.74,1730,4.426,1752,6.37,1753,5.273,1776,4.069,1780,2.445,1792,2.394,1797,2.445,1798,2.445,1806,2.059,1809,1.866,1838,2.351,1875,3.001,1895,3.001,1898,2.764,1907,3.012,2073,1.589,2093,2.059,2110,1.589,2192,2.059,2224,5.666,2247,1.628,2366,4.545,2456,4.254,2467,2.059,2592,4.411,2606,2.445,2607,2.226,2622,4.254,2623,5.363,2624,2.445,2626,3.524,2653,4.539,2667,4.254,2668,2.445,2688,4.254,2697,2.327,2714,2.445,2729,3.703,2734,2.445,2743,3.238,2745,3.703,2746,4.985,2785,2.587,2807,2.059,2811,4.186,2902,2.138,2976,1.989,3021,3.001,3131,1.925,3187,2.138,3206,1.925,3212,2.226,3220,3.371,3274,2.226,3463,2.587,3532,2.764,3542,2.587,3595,3.001,4168,4.545,4203,2.764,4209,4.186,4235,2.764,4253,2.764,4284,5.486,4285,3.001,4286,3.362,4287,3.362,4288,6.144,4289,3.362,4290,7.748,4291,5.091,4292,3.362,4293,5.091,4294,3.362,4295,5.091,4296,3.362,4297,3.362,4298,3.362,4299,5.091,4300,3.362,4301,3.362,4302,3.362,4303,7.748,4304,5.091,4305,3.362,4306,5.091,4307,5.091,4308,6.853,4309,5.091,4310,6.144,4311,3.362,4312,3.362,4313,5.091,4314,3.362,4315,6.144,4316,5.091,4317,5.091,4318,3.362,4319,3.362,4320,5.091,4321,3.362,4322,3.362,4323,3.362,4324,3.362,4325,5.091,4326,3.362,4327,5.091,4328,3.362,4329,3.362,4330,3.001,4331,3.362,4332,3.362,4333,3.362,4334,5.091,4335,3.362,4336,3.362,4337,5.091,4338,5.091,4339,3.362,4340,3.362,4341,3.001,4342,4.545,4343,3.362,4344,3.362,4345,3.362,4346,3.362,4347,3.362,4348,3.362,4349,3.362,4350,3.362,4351,3.362,4352,7.363,4353,3.362,4354,3.362,4355,3.362,4356,3.362,4357,3.362,4358,3.362]],["title/interfaces/User.html",[0,0.374,162,1.078]],["body/interfaces/User.html",[0,0.386,2,0.037,3,0.015,4,0.015,5,0.013,7,0.12,11,0.013,12,0.03,13,0.877,16,1,21,0.311,22,0.054,23,0.006,26,1.034,28,0.202,29,0.404,31,2.246,34,1.762,39,1.329,41,0.984,43,0.723,49,0.078,70,3.681,71,1.082,73,2.201,74,1.507,94,0.444,113,0.002,114,0.002,118,2.301,120,0.692,132,1.275,133,0.653,139,1.24,151,0.847,159,0.536,162,1.968,175,1.725,177,0.984,184,0.188,185,1.172,189,1.035,207,1.137,213,2.117,214,1.401,217,0.794,222,1.464,224,0.801,248,2.596,249,2.19,254,0.886,257,1.749,263,2.116,264,0.979,265,0.763,270,4.468,273,1.343,276,1.441,284,2.494,285,1.176,300,2.918,313,1.085,349,3.036,351,3.658,361,3.217,385,2.187,396,1.534,448,0.907,451,1.051,494,2.406,495,1.767,496,2.751,497,3.82,505,3.442,506,2.985,527,1.642,529,1.065,540,6.132,541,1.714,542,1.534,543,4.852,544,2.497,545,2.497,546,1.988,547,5.763,548,3.394,549,1.065,550,1.477,551,1.714,552,4.895,553,1.578,554,1.477,555,3.813,556,2.497,557,1.477,558,1.714,559,1.714,560,1.714,561,1.931,562,3.152,563,1.988,564,3.526,565,1.714,566,3.763,567,1.714,568,1.714,569,6.008,570,2.978,571,3.465,572,3.427,573,2.803,574,2.791,575,3.066,576,2.897,577,1.714,578,3.763,579,1.221,580,1.714,581,1.714,582,1.714,583,3.148,584,7.097,585,4.424,586,2.925,587,4.409,588,0.979,589,5.636,590,4.673,591,1.714,592,1.714,593,3.914,594,1.477,595,1.578,596,1.714,597,2.497,598,1.714,599,0.954,600,1.578,601,2.913,602,2.271,603,1.714,604,1.714,605,1.714,606,1.744,607,1.714,608,7.319,609,5.503,610,3.763,611,6.968,612,4.162,613,4.242,614,4.95,615,3.313,616,1.477,617,4.424,618,2.527,619,1.498,620,4.946,621,2.897,622,4.626,623,2.897,624,3.763,625,4.029,626,1.86,627,3.683,628,2.246,629,2.897,630,1.498,631,1.477,632,1.329,633,4.424,634,2.668,635,3.243,636,3.243,637,3.431,638,1.176,639,1.714,640,3.066,641,1.006,642,2.897,643,2.43,644,1.714,645,1.714,646,3.152,647,2.668,648,1.714,649,1.714,650,2.897,651,1.714,652,1.714,653,1.714,654,1.714,655,1.578,656,2.208,657,2.149,658,1.578,659,1.714,660,1.714,661,1.329,662,1.13,663,1.714,664,1.578,665,1.714,666,1.714,667,3.066,668,1.714,669,1.714,670,1.136,671,1.176,672,1.714,673,2.897,674,1.498,675,0.886,676,1.714,677,3.066,678,1.714,679,1.477,680,1.714,681,1.714,682,1.714,683,0.954,684,5.88,685,2.897,686,1.714,687,4.28,688,5.716,689,1.86,690,1.714,691,1.572,692,1.464,693,2.494,694,2.064,695,2.897,696,1.714,697,1.714,698,1.714,699,1.714,700,1.714,701,5.88,702,2.668,703,4.926,704,1.714,705,1.988,706,1.714,707,1.534,708,3.282,709,4.075,710,1.221,711,0.68,712,1.714,713,1.749,714,1.714,715,2.36,716,2.751,717,1.714,718,1.714,719,2.918,720,1.714,721,2.668,722,0.693,723,1.714,724,1.578,725,1.136,726,1.714,727,1.714,728,1.714,729,1.176,730,4.075,731,1.714,732,1.714,733,1.578,734,0.829,735,1.714,736,1.216,737,2.897,738,1.714,739,1.714,740,1.714,741,1.329,742,1.572,743,2.497,744,1.271,745,1.714,746,1.714,747,1.396,748,1.714,749,1.176,750,1.329,751,1.176,752,2.36,753,6.653,754,4.781,755,5.986,756,1.065,757,2.897,758,6.417,759,2.668,760,1.401,761,2.149,762,1.714,763,2.149,764,5.96,765,6.132,766,4.075,767,6.659,768,4.946,769,3.465,770,5.368,771,2.094,772,2.897,773,1.578,774,1.92,775,1.714,776,3.763,777,1.714,778,1.714,779,1.714,780,1.714,781,1.714,782,1.714,783,1.578,784,1.714,785,1.714,786,1.714,787,1.714,788,1.714,789,1.714,790,1.714,791,1.714,792,1.714,793,1.714,794,1.858,795,1.714,796,1.714,797,0.847,798,0.847,799,1.714,800,0.886,801,1.578,802,1.477,803,1.329,804,1.714,805,1.176,806,1.578,807,1.714,808,1.714,809,0.907,810,1.065,811,1.578,812,1.714,813,1.714,814,1.714,815,1.099,816,1.477,817,1.714,818,1.578,819,1.714,820,1.714,821,1.714,822,1.578,823,2.668,824,1.578,825,1.714,826,1.578,827,1.714,828,1.714]],["title/interfaces/User-1.html",[0,0.312,94,0.925,162,0.897]],["body/interfaces/User-1.html",[0,0.735,2,0.115,3,0.047,4,0.047,5,0.039,7,0.372,11,0.039,12,0.069,13,1.034,21,0.331,22,0.061,23,0.006,29,0.725,41,1.561,49,0.088,71,0.906,73,1.457,113,0.005,114,0.005,117,1.546,120,1.243,125,3.187,132,0.988,133,1.678,135,1.922,162,2.082,175,3.061,184,0.887,224,0.628,265,3.315,309,2.026,313,1.004,361,2.026,393,3.416,396,2.8,416,3.192,430,3.315,451,1.537,484,3.391,485,3.767,487,3.02,488,4.814,489,4.814,490,4.814,491,4.814,492,4.637,493,2.837,494,2.865,495,2.804,496,4.201,497,4.156,498,3.767,499,3.767,500,3.923,501,5.013,502,3.767,503,3.767,504,3.767,505,3.391,506,1.922,507,3.103,508,3.767,509,3.923,510,3.923,511,3.923,512,3.103,513,3.923,514,3.923,515,3.764,516,3.923,517,4.637,518,4.606,519,4.637,520,3.923,521,3.923]],["title/interfaces/User-2.html",[0,0.312,162,0.897,711,1.419]],["body/interfaces/User-2.html",[0,0.754,2,0.116,3,0.048,4,0.048,5,0.04,7,0.378,11,0.04,12,0.07,21,0.331,22,0.063,23,0.006,28,0.634,29,0.576,41,1.571,43,0.998,49,0.089,71,0.915,113,0.005,114,0.005,117,1.229,123,3.3,126,2.569,131,2.542,132,1.475,133,1.778,162,2.124,175,3.078,189,2.438,207,1.137,245,2.172,295,2.569,313,1.019,333,3.3,334,4.377,363,4.684,451,1.546,494,2.876,495,2.82,497,3.614,506,2.869,587,4.508,588,3.068,606,2.49,614,4.811,632,4.165,763,3.984,774,3.56,1609,3.686,2400,5.063,2401,3.984,2406,5.344,2434,3.984,2435,3.984,2437,5.063,2480,5.063,2481,5.063,2483,5.063,2903,4.629,2904,4.165,2905,4.629,2906,4.376,2907,6.803,2908,5.883,2909,4.629,2910,4.629,2911,4.629]],["title/classes/ValidationError.html",[525,3.185,1469,1.911]],["body/classes/ValidationError.html",[3,0.052,4,0.052,5,0.044,7,0.416,11,0.044,12,0.074,13,1.104,21,0.33,22,0.061,23,0.006,24,2.861,49,0.061,52,3.678,113,0.005,114,0.005,120,1.333,185,2.393,190,1.682,224,0.78,309,3.31,350,3.56,451,1.159,525,6.061,528,4.808,694,4.215,852,2.879,1077,5.465,1469,2.633,1471,3.571,1475,4.588,1476,6.262,1479,5.622,1480,5.099,1481,5.08,1483,6.248,1487,5.099,1488,4.215,1489,5.099,1492,4.588,1493,5.099,1494,5.099,1495,5.099,1496,5.099,1497,5.099,1606,3.583,1728,2.99,1792,2.582,4359,6.627,4360,8.121,4361,6.627,4362,6.627,4363,6.627,4364,6.627,4365,6.627]],["title/interfaces/VerifyOtpRequest.html",[0,0.374,503,3.058]],["body/interfaces/VerifyOtpRequest.html",[0,0.739,2,0.117,3,0.048,4,0.048,5,0.04,7,0.381,11,0.04,12,0.07,21,0.328,22,0.056,23,0.006,29,0.736,41,1.077,49,0.089,71,0.92,73,1.492,113,0.005,114,0.005,117,1.723,120,1.261,125,2.936,132,1.011,133,1.696,135,1.968,162,1.987,175,2.111,184,0.894,224,0.638,265,3.351,309,2.074,313,1.028,361,2.074,393,3.467,396,2.867,416,3.268,430,3.351,451,1.06,484,3.472,485,3.857,487,3.092,488,4.887,489,4.887,490,4.887,491,4.887,492,4.707,493,2.273,494,2.882,495,1.934,496,4.265,497,4.542,498,3.857,499,3.857,500,4.016,501,5.088,502,4.887,503,4.887,504,3.857,505,3.472,506,1.968,507,3.177,508,3.857,509,4.016,510,4.016,511,4.016,512,3.177,513,4.016,514,4.016,515,3.806,516,4.016,517,4.707,518,4.646,519,4.707,520,4.016,521,4.016]],["title/dependencies.html",[4366,3.572,4367,4.762]],["body/dependencies.html",[23,0.006,44,2.152,45,2.384,47,2.483,113,0.005,114,0.005,203,3.064,213,3.105,249,2.269,282,3.926,549,3.683,564,3.137,590,4.144,713,3.576,744,4.394,916,3.683,959,2.994,972,4.826,1083,2.928,1125,4.22,1130,4.593,1132,5.455,1157,3.683,1160,2.864,1474,3.752,1758,5.105,1766,4.593,1867,5.924,2109,4.593,3153,5.924,3314,4.394,3737,5.455,3771,5.924,4189,5.924,4367,5.455,4368,6.635,4369,6.635,4370,6.635,4371,6.635,4372,6.635,4373,6.635,4374,6.635,4375,6.635,4376,8.127,4377,6.635,4378,8.127,4379,8.127,4380,6.635,4381,6.635,4382,6.635,4383,6.635,4384,6.635,4385,6.635,4386,6.635,4387,6.635,4388,5.924,4389,6.635,4390,6.635,4391,6.635,4392,6.635,4393,6.635,4394,6.635,4395,6.635,4396,6.635,4397,6.635,4398,6.635,4399,6.635,4400,6.635,4401,6.635,4402,6.635,4403,6.635]],["title/miscellaneous/enumerations.html",[4404,3.079,4405,5.171]],["body/miscellaneous/enumerations.html",[2,0.135,11,0.047,23,0.006,113,0.005,114,0.005,181,3.704,311,2.724,350,3.746,393,3.788,396,3.309,485,4.451,488,5.338,489,5.338,490,5.338,491,5.338,492,5.143,506,2.918,586,2.922,590,3.569,641,3.667,1181,3.788,1389,5.755,1576,3.547,1620,4.659,1792,3.27,3034,5.755,3036,6.902,3037,6.902,3038,6.902,3104,4.066,3621,4.635,3622,5.338,3636,5.559,3637,5.559,4404,5.386,4405,6.249,4406,6.999,4407,6.999,4408,6.999,4409,8.394,4410,7.494]],["title/index.html",[11,0.027,3780,3.29,4411,3.572]],["body/index.html",[4,0.027,5,0.023,16,1.063,22,0.023,23,0.006,24,1.488,25,1.456,27,1.397,34,0.622,40,4.046,43,0.45,44,1.944,45,2.036,47,2.316,54,4.596,58,3.077,59,2.111,71,0.412,74,0.584,89,1.342,94,0.797,110,1.292,111,2.386,113,0.003,114,0.003,117,0.704,128,3.022,132,0.575,139,3.265,147,1.317,148,0.917,153,1.374,154,1.629,162,0.772,176,2.395,177,1.045,182,1.178,183,0.903,185,1.244,188,1.683,189,1.099,194,0.784,195,1.629,196,1.397,202,1.2,207,1.407,217,3.08,219,1.52,224,0.576,235,4.799,236,2.192,244,2.773,248,3.636,249,3.024,251,5.179,252,3.611,254,2.88,264,1.757,273,2.146,274,4.631,275,3.077,276,2.373,277,2.192,278,4.631,287,1.857,304,2.833,309,1.774,311,1.118,314,0.772,353,2.146,361,1.178,375,2.039,388,2.039,411,2.039,424,2.949,432,1.244,449,3.062,458,1.913,462,2.282,464,2.282,465,2.645,502,2.192,507,3.268,515,1.555,529,1.913,573,1.178,588,4.138,589,3.178,590,2.645,601,1.669,606,1.426,609,2.386,612,2.386,618,2.645,622,2.652,643,2.252,656,2.717,657,2.282,658,6.12,662,1.2,675,1.591,689,1.52,691,3.606,692,2.814,703,3.991,711,1.222,734,2.693,736,1.944,742,1.669,743,4.799,750,2.386,751,2.111,760,1.488,798,3.062,800,3.204,802,2.652,803,2.386,831,2.039,832,2.039,836,1.973,850,2.146,854,1.805,886,1.045,958,3.435,988,5.116,989,2.386,995,1.426,1002,1.712,1011,1.426,1015,1.913,1022,5.413,1025,3.571,1026,4.265,1027,2.506,1032,2.833,1079,4.265,1081,3.698,1157,2.879,1181,3.855,1182,2.282,1204,2.652,1205,3.435,1214,2.636,1239,2.506,1267,2.704,1268,3.077,1269,2.506,1315,1.669,1456,5.34,1458,2.111,1459,3.077,1460,2.97,1471,1.857,1473,3.821,1474,2.395,1504,3.773,1569,2.386,1576,2.192,1606,2.289,1613,1.317,1634,2.506,1671,3.178,1687,2.386,1728,3.358,1730,1.712,1763,2.282,1764,3.077,1768,3.773,1776,4.131,1792,2.43,1796,3.991,1797,2.506,1802,3.773,1809,1.913,1818,2.111,1822,2.652,1838,3.437,1878,3.077,1883,3.077,1927,7.456,1935,2.111,1936,2.192,1937,3.077,1948,4.261,1977,5.569,2027,2.833,2073,2.452,2084,4.799,2126,2.039,2230,2.506,2293,6.43,2295,2.833,2385,3.178,2469,3.077,2471,3.077,2475,3.077,2479,4.631,2507,1.857,2604,2.506,2625,3.773,2682,2.506,2683,3.773,2684,2.386,2688,3.591,2743,2.192,2758,2.506,2761,2.506,2781,2.652,2807,3.178,2890,2.506,2900,2.833,2902,2.192,2915,5.414,2937,4.799,2957,2.282,2976,3.069,2996,4.537,3043,3.077,3093,2.039,3096,2.506,3111,3.435,3206,3.571,3274,4.131,3306,2.652,3314,2.282,3363,2.652,3398,5.706,3463,2.652,3468,3.077,3471,3.077,3532,4.265,3550,2.282,3603,3.077,3775,4.265,3780,5.706,3822,4.631,3996,3.077,4111,3.077,4127,3.077,4167,3.077,4261,8.701,4276,3.077,4330,3.077,4341,3.077,4342,4.631,4367,5.128,4388,4.631,4411,5.569,4412,7.443,4413,3.446,4414,3.446,4415,3.446,4416,7.443,4417,3.446,4418,6.94,4419,3.446,4420,3.446,4421,3.446,4422,9.415,4423,9.227,4424,3.446,4425,3.446,4426,3.446,4427,5.187,4428,3.446,4429,8.351,4430,3.446,4431,3.446,4432,6.237,4433,3.446,4434,3.446,4435,3.446,4436,3.446,4437,3.446,4438,3.446,4439,3.446,4440,3.446,4441,3.446,4442,3.446,4443,3.446,4444,3.446,4445,6.94,4446,3.446,4447,5.187,4448,3.446,4449,3.446,4450,3.446,4451,3.446,4452,3.446,4453,3.446,4454,3.446,4455,3.446,4456,3.446,4457,3.446,4458,3.446,4459,3.446,4460,3.446,4461,3.446,4462,6.237,4463,3.446,4464,3.446,4465,3.446,4466,5.187,4467,3.446,4468,3.446,4469,3.446,4470,3.446,4471,3.446,4472,3.446,4473,3.446,4474,3.446,4475,3.446,4476,3.446,4477,3.446,4478,3.446,4479,3.446,4480,3.446,4481,7.821,4482,3.446,4483,3.446,4484,3.446,4485,3.446,4486,6.237,4487,3.446,4488,3.446,4489,3.446,4490,3.446,4491,3.446,4492,3.446,4493,3.446,4494,5.187,4495,5.187,4496,5.187,4497,5.187,4498,5.187,4499,3.446,4500,3.446,4501,5.187,4502,3.446,4503,3.446,4504,3.446,4505,3.446,4506,3.446,4507,3.446,4508,3.446,4509,3.446,4510,3.446,4511,3.446,4512,3.446,4513,3.446,4514,3.446,4515,3.446,4516,2.833,4517,3.446,4518,3.446,4519,3.446,4520,3.446,4521,3.446,4522,5.187,4523,3.446,4524,3.446,4525,3.446,4526,3.446,4527,3.446,4528,3.446,4529,3.446,4530,3.446,4531,3.446,4532,3.446,4533,6.94,4534,6.237,4535,3.446,4536,5.187,4537,3.446,4538,3.446,4539,3.446,4540,5.187,4541,3.446,4542,5.187,4543,5.187,4544,5.187,4545,3.446,4546,3.446,4547,3.446,4548,6.237,4549,3.446,4550,3.446,4551,3.446,4552,3.446,4553,3.446,4554,3.446,4555,5.187,4556,3.446,4557,7.443,4558,3.446,4559,3.446,4560,3.446,4561,3.446,4562,4.265,4563,3.446,4564,3.446,4565,3.446,4566,3.446,4567,3.446,4568,3.446,4569,3.446,4570,3.446,4571,5.187,4572,3.446,4573,3.446,4574,5.187,4575,3.446,4576,3.446,4577,3.446]],["title/modules.html",[4516,5.421]],["body/modules.html",[23,0.005,113,0.005,114,0.005,4516,6.561]],["title/overview.html",[4562,5.421]],["body/overview.html",[2,0.153,23,0.005,113,0.005,114,0.005,1471,4.275,1846,6.104,4562,6.522,4578,7.932]],["title/properties.html",[12,0.053,4366,3.572]],["body/properties.html",[12,0.073,23,0.006,113,0.005,114,0.005,365,4.867,4579,7.944]],["title/miscellaneous/typealiases.html",[4404,3.079,4580,5.792]],["body/miscellaneous/typealiases.html",[2,0.153,3,0.05,5,0.03,8,3.721,10,1.613,11,0.03,16,1.959,22,0.062,23,0.006,24,1.967,27,1.848,28,0.48,61,2.264,64,2.264,113,0.004,114,0.004,116,2.609,120,1.043,121,2.933,122,1.959,123,1.967,125,1.741,127,3.526,128,2.208,129,2.456,130,2.53,131,2.684,132,1.06,133,0.917,134,3.637,135,2.061,136,2.609,137,2.609,146,2.208,147,2.112,153,1.448,160,1.741,161,1.616,162,1.021,166,1.429,185,3.004,207,0.862,224,0.691,229,4.069,235,6.087,236,2.898,237,4.069,238,2.898,245,1.646,273,1.886,308,3.155,311,3.16,313,1.076,320,2.696,321,2.609,326,3.018,327,2.155,328,4.398,329,3.155,330,2.388,331,2.456,346,3.457,374,2.388,393,2.056,396,2.155,449,2.803,486,4.359,593,2.208,606,1.886,626,2.803,641,2.388,674,2.104,689,2.011,694,4.04,702,3.747,750,3.155,797,2.803,830,3.315,844,4.398,845,3.018,846,3.155,847,3.637,848,3.155,849,3.315,856,2.696,863,3.759,864,2.53,865,2.696,866,2.696,867,3.759,868,2.933,869,2.803,870,3.156,872,1.886,880,2.104,881,3.759,882,2.696,883,2.696,909,2.155,910,3.759,911,2.696,923,3.759,925,2.53,926,3.759,1023,3.018,1025,2.609,1124,4.069,1131,5.223,1152,5.223,1156,5.672,1159,3.018,1163,3.3,1267,2.849,1335,2.53,1389,5.223,1413,2.898,1442,3.155,1461,3.155,1524,3.747,1526,3.892,1540,3.747,1543,3.747,1546,3.315,1547,5.223,1548,5.223,1549,4.888,1550,2.264,1551,3.747,1552,3.315,1553,4.398,1554,3.155,1555,3.315,1556,3.315,1557,3.315,1558,3.239,1559,3.155,1560,3.315,1561,3.155,1562,3.155,1563,3.315,1630,2.324,1671,3.892,1717,3.526,1718,3.156,1723,2.696,1725,2.684,1728,3.3,1732,2.609,1736,2.609,1738,2.609,1739,2.609,1740,2.609,1742,2.609,1753,4.888,1776,3.018,1792,2.849,2126,2.696,2179,5.223,2192,3.892,2245,3.315,2384,2.898,2482,3.155,2528,2.898,2530,3.759,2531,2.609,2621,3.315,2794,4.207,2915,4.398,3089,4.327,3090,3.315,3093,2.696,3099,4.398,3101,4.621,3103,3.155,3104,2.208,3107,3.018,3108,5.319,3109,4.621,3110,3.018,3111,3.018,3112,3.155,3113,3.315,3114,4.621,3115,3.315,3116,3.315,3117,4.621,3314,4.207,3775,3.747,3847,4.069,3852,5.672,3857,5.672,3858,6.84,3859,5.672,3860,5.672,4061,5.672,4285,4.069,4404,3.507,4410,5.672,4581,4.557,4582,6.353,4583,6.353,4584,6.353,4585,8.616,4586,7.911,4587,8.616,4588,4.557,4589,4.557,4590,4.557,4591,6.353,4592,6.353,4593,6.353,4594,6.353,4595,4.557,4596,8.616,4597,6.353,4598,6.353,4599,6.353,4600,6.353,4601,8.32,4602,4.557,4603,4.557,4604,4.557,4605,4.557,4606,4.557,4607,4.557,4608,4.557,4609,4.557,4610,4.557,4611,6.353,4612,4.557,4613,6.353,4614,6.353,4615,4.557,4616,6.353,4617,4.557,4618,4.557,4619,4.557,4620,4.557,4621,6.353,4622,4.557,4623,4.557,4624,4.557,4625,4.557,4626,4.557,4627,4.557,4628,4.557,4629,4.557,4630,4.557,4631,4.557,4632,4.557,4633,4.557,4634,4.557,4635,4.557,4636,4.557,4637,4.557]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":194,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["0).tostring",{"_index":3699,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["0.0.1",{"_index":4579,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":1103,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{}}}],["0.15",{"_index":1448,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["0.2",{"_index":1449,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["0.22",{"_index":1835,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["0.3",{"_index":3993,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["0.5",{"_index":1436,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{}}}],["0.6",{"_index":1466,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["0.7",{"_index":3568,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["0.8",{"_index":1437,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["0.80.1",{"_index":4376,"title":{},"body":{"dependencies.html":{}}}],["000",{"_index":1098,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["0000000000",{"_index":1229,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["001",{"_index":3096,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"index.html":{}}}],["01",{"_index":2234,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["01b",{"_index":1350,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["01t00:00:00z",{"_index":2235,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["03a9f4",{"_index":3493,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["0d47a1",{"_index":1421,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["1",{"_index":94,"title":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/User-1.html":{}},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["1.0.0",{"_index":366,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["1.2",{"_index":1443,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["1.4",{"_index":1444,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["1.5",{"_index":1982,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["1.5.5",{"_index":4387,"title":{},"body":{"dependencies.html":{}}}],["1.6",{"_index":1445,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["10",{"_index":457,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{}}}],["10.1.5",{"_index":4374,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":4401,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1613,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["1000",{"_index":265,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CountdownTimerState.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["10000",{"_index":262,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/UploadMutex.html":{}}}],["100000",{"_index":2241,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["100kb",{"_index":2491,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["100ms",{"_index":4149,"title":{},"body":{"classes/UploadMutex.html":{}}}],["1013",{"_index":2730,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["1014",{"_index":2714,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["1024",{"_index":437,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["1024)}kb",{"_index":2494,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["10mb",{"_index":458,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["10s",{"_index":4118,"title":{},"body":{"classes/UploadMutex.html":{}}}],["11",{"_index":1846,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{},"overview.html":{}}}],["12",{"_index":87,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["120",{"_index":1826,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["123",{"_index":2230,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["123456",{"_index":597,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["1234567890",{"_index":2226,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["14",{"_index":1109,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Typography.html":{}}}],["140",{"_index":3569,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["15",{"_index":517,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TimerOptions.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["1500",{"_index":576,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["158",{"_index":4578,"title":{},"body":{"overview.html":{}}}],["16",{"_index":1117,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["18",{"_index":965,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["180",{"_index":2066,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["19.1.0",{"_index":4385,"title":{},"body":{"dependencies.html":{}}}],["1976d2",{"_index":1420,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["1b5e20",{"_index":1416,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["1kb",{"_index":2459,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["1mb/s",{"_index":2675,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["2",{"_index":711,"title":{"interfaces/User-2.html":{}},"body":{"interfaces/AuthState.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["2.1",{"_index":56,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["2.2.0",{"_index":4373,"title":{},"body":{"dependencies.html":{}}}],["2.20.0",{"_index":4390,"title":{},"body":{"dependencies.html":{}}}],["2.22",{"_index":1836,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["2.27.1",{"_index":4392,"title":{},"body":{"dependencies.html":{}}}],["2.8.2",{"_index":4383,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1011,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["200",{"_index":1638,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/GetLeadsRequest.html":{},"classes/UploadMutex.html":{}}}],["2000",{"_index":267,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CreateTicketModalProps.html":{}}}],["201",{"_index":4161,"title":{},"body":{"classes/UploadMutex.html":{}}}],["2024",{"_index":2233,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["212121",{"_index":1430,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["2196f3",{"_index":1426,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["22",{"_index":4020,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["24",{"_index":1315,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"index.html":{}}}],["25",{"_index":197,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["25).tostring",{"_index":3702,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["28",{"_index":1311,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/StatusBadgeProps.html":{}}}],["280",{"_index":1468,"title":{},"body":{"interfaces/ComingSoonProps.html":{}}}],["2^attempt",{"_index":418,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["2e7d32",{"_index":1415,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Typography.html":{}}}],["2mb",{"_index":2682,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["3",{"_index":264,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["3).join('\\n",{"_index":2136,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["3.0.11",{"_index":4370,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":429,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["30000",{"_index":427,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["30s",{"_index":3209,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["32",{"_index":1326,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["340",{"_index":2144,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["36",{"_index":3956,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["4",{"_index":722,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["4.0.3",{"_index":4389,"title":{},"body":{"dependencies.html":{}}}],["4.1",{"_index":2856,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["4.1.0",{"_index":4384,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":4399,"title":{},"body":{"dependencies.html":{}}}],["4.11.1",{"_index":4398,"title":{},"body":{"dependencies.html":{}}}],["4.2",{"_index":2827,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["4.3",{"_index":2869,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["40",{"_index":2725,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{}}}],["400",{"_index":526,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["401",{"_index":398,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{}}}],["401/403",{"_index":2919,"title":{},"body":{"classes/LogoutManager.html":{}}}],["403",{"_index":399,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{}}}],["404",{"_index":3444,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["408",{"_index":404,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{}}}],["409",{"_index":3446,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["429",{"_index":405,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["42a5f5",{"_index":1422,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["44",{"_index":101,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["44px",{"_index":82,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["48",{"_index":1441,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["4caf50",{"_index":96,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["5",{"_index":515,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["5.1.1",{"_index":4372,"title":{},"body":{"dependencies.html":{}}}],["5.14.5",{"_index":4396,"title":{},"body":{"dependencies.html":{}}}],["5.5.1",{"_index":4397,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1452,"title":{},"body":{"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["500",{"_index":98,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["5000",{"_index":3271,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["50000",{"_index":2240,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["500ms",{"_index":4252,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["502",{"_index":406,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["503",{"_index":407,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["504",{"_index":408,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["5xx",{"_index":530,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["6",{"_index":1105,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{}}}],["6.0.0",{"_index":4403,"title":{},"body":{"dependencies.html":{}}}],["6.8.1",{"_index":4395,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":518,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TimerOptions.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["600",{"_index":1110,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["60s",{"_index":2591,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["64",{"_index":1855,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["673ab7",{"_index":1427,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["7",{"_index":1822,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"index.html":{}}}],["7.1.14",{"_index":4382,"title":{},"body":{"dependencies.html":{}}}],["7.3.2",{"_index":4381,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":4379,"title":{},"body":{"dependencies.html":{}}}],["7.60.0",{"_index":4386,"title":{},"body":{"dependencies.html":{}}}],["757575",{"_index":1431,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Typography.html":{}}}],["8",{"_index":89,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"index.html":{}}}],["8.2.1",{"_index":4393,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":2989,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["8000",{"_index":266,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/UploadMutex.html":{}}}],["82",{"_index":4514,"title":{},"body":{"index.html":{}}}],["85",{"_index":2999,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["87",{"_index":4515,"title":{},"body":{"index.html":{}}}],["8px",{"_index":1439,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["8s",{"_index":4120,"title":{},"body":{"classes/UploadMutex.html":{}}}],["9",{"_index":3979,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["9.2.0",{"_index":4402,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":1687,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["900",{"_index":1542,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["95",{"_index":2750,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["99",{"_index":968,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["9e9e9e",{"_index":1433,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["_",{"_index":349,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/User.html":{}}}],["__dev__",{"_index":257,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["_getstate",{"_index":2927,"title":{},"body":{"classes/LogoutManager.html":{}}}],["_persist",{"_index":3010,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["aa",{"_index":57,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["aadhaar",{"_index":1739,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["abort",{"_index":4168,"title":{},"body":{"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["abortcontroller",{"_index":4295,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref",{"_index":4301,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref.current",{"_index":4303,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref.current.abort",{"_index":4306,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref.current.signal",{"_index":4336,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref.current.signal.aborted",{"_index":4334,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["abortcontrollerref.current?.signal.aborted",{"_index":4340,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["aborted",{"_index":4175,"title":{},"body":{"classes/UploadMutex.html":{}}}],["aborthandler",{"_index":4172,"title":{},"body":{"classes/UploadMutex.html":{}}}],["abortsignal",{"_index":833,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["abortsignal.aborted",{"_index":4176,"title":{},"body":{"classes/UploadMutex.html":{}}}],["abortsignal.addeventlistener('abort",{"_index":4174,"title":{},"body":{"classes/UploadMutex.html":{}}}],["above",{"_index":4567,"title":{},"body":{"index.html":{}}}],["absolute",{"_index":971,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["ac",{"_index":2826,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["accept",{"_index":26,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["accept/reject",{"_index":3441,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["acceptance",{"_index":3462,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["acceptbutton",{"_index":92,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["accepted",{"_index":1558,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{},"miscellaneous/typealiases.html":{}}}],["accepted/rejected",{"_index":4006,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["acceptedat",{"_index":2550,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["accepting",{"_index":3544,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["acceptlabel",{"_index":14,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["acceptquotation",{"_index":3473,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["acceptquotation(quotation.quotationid).unwrap",{"_index":3545,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["acceptrejectbuttons",{"_index":9,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["acceptrejectbuttonsprops",{"_index":1,"title":{"interfaces/AcceptRejectButtonsProps.html":{}},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["access",{"_index":1936,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/ThemeProviderProps.html":{},"index.html":{}}}],["accessed",{"_index":4464,"title":{},"body":{"index.html":{}}}],["accessibility",{"_index":54,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["accessibilityhint",{"_index":857,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["accessibilityhint=\"enter",{"_index":1283,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["accessibilityhint=\"navigate",{"_index":3900,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["accessibilityhint=\"opens",{"_index":1971,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["accessibilityhint=\"tap",{"_index":2059,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["accessibilityhint={`opens",{"_index":2022,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["accessibilitylabel",{"_index":858,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["accessibilitylabel=\"browse",{"_index":1975,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["accessibilitylabel=\"reset",{"_index":3394,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["accessibilitylabel=\"select",{"_index":1970,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["accessibilitylabel=\"service",{"_index":1282,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["accessibilitylabel=\"take",{"_index":1973,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["accessibilitylabel={`${service.name",{"_index":3875,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["accessibilitylabel={`shopping",{"_index":3899,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["accessibilitylabel={`status",{"_index":2020,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["accessibilitylabel={`upload",{"_index":2021,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["accessibilitylabel={label",{"_index":2058,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["accessibilityrole=\"button",{"_index":1682,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["accessible",{"_index":2870,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["accessible={true",{"_index":3874,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["accessiblelabel",{"_index":2872,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["accessing",{"_index":2340,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["accesstoken",{"_index":2905,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["account",{"_index":1733,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["acquired",{"_index":2716,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["acquisition",{"_index":2727,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["action",{"_index":70,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UIState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["action.error.message",{"_index":3079,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["action.payload",{"_index":754,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["action.payload.address",{"_index":1355,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["action.payload.cartsnapshot.length",{"_index":1359,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["action.payload.cartsnapshot.reduce",{"_index":1360,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["action.payload.data",{"_index":941,"title":{},"body":{"interfaces/CacheState.html":{}}}],["action.payload.instructions?.length",{"_index":1357,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["action.payload.isloading",{"_index":4093,"title":{},"body":{"interfaces/UIState.html":{}}}],["action.payload.isloggedin",{"_index":3071,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["action.payload.message",{"_index":4095,"title":{},"body":{"interfaces/UIState.html":{}}}],["action.payload.qty",{"_index":1021,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["action.payload.refreshtoken",{"_index":768,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["action.payload.service",{"_index":1020,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["action.payload.serviceid",{"_index":1045,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["action.payload.token",{"_index":766,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["action.payload.user",{"_index":769,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["actionable",{"_index":4002,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["actions",{"_index":760,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["actionscontainer",{"_index":3431,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["actionsection",{"_index":1847,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["active",{"_index":1550,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["activemodal",{"_index":4088,"title":{},"body":{"interfaces/UIState.html":{}}}],["activeopacity={0.7",{"_index":3873,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["activityindicator",{"_index":1699,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["actual",{"_index":131,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/Notification.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User-2.html":{},"miscellaneous/typealiases.html":{}}}],["actually",{"_index":3411,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["actualsize",{"_index":2487,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["adapter",{"_index":3760,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["adb",{"_index":4517,"title":{},"body":{"index.html":{}}}],["add",{"_index":244,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"index.html":{}}}],["addbutton",{"_index":3959,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["addbuttoncontent",{"_index":3961,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["addbuttondisabled",{"_index":3960,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["addbuttonlabel",{"_index":3962,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["addcase(loginsuccess.fulfilled",{"_index":3077,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(loginsuccess.pending",{"_index":3076,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(loginsuccess.rejected",{"_index":3078,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(loginsuccessenhanced.fulfilled",{"_index":808,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginsuccessenhanced.pending",{"_index":807,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginsuccessenhanced.rejected",{"_index":812,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotp.fulfilled",{"_index":780,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotp.pending",{"_index":779,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotp.rejected",{"_index":781,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotpenhanced.fulfilled",{"_index":790,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotpenhanced.pending",{"_index":789,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(loginwithotpenhanced.rejected",{"_index":791,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(logoutuser.fulfilled",{"_index":783,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["addcase(logoutuser.pending",{"_index":782,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(logoutuser.rejected",{"_index":784,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(logoutuserenhanced.fulfilled",{"_index":792,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(refreshtokenthunk.fulfilled",{"_index":786,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(refreshtokenthunk.pending",{"_index":785,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(refreshtokenthunk.rejected",{"_index":787,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(restoreauth.fulfilled",{"_index":3074,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(restoreauth.pending",{"_index":3073,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(restoreauth.rejected",{"_index":3075,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["addcase(restoreauthstate.fulfilled",{"_index":799,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(restoreauthstate.pending",{"_index":793,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(restoreauthstate.rejected",{"_index":804,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(sendotpthunk.fulfilled",{"_index":777,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(sendotpthunk.pending",{"_index":775,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addcase(sendotpthunk.rejected",{"_index":778,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["addedat",{"_index":980,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["adding",{"_index":119,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["additional",{"_index":2353,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"classes/LogoutManager.html":{},"classes/UploadMutex.html":{}}}],["additionalheaders",{"_index":362,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["addjitter",{"_index":3201,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["addjitter(basems",{"_index":3232,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["addlistener",{"_index":2255,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["addmessage",{"_index":3719,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["addmessagerequest",{"_index":115,"title":{"interfaces/AddMessageRequest.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["address",{"_index":561,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DraftLead.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{}}}],["address.split(',').map(part",{"_index":2861,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["adds",{"_index":3007,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["addsuffix",{"_index":3169,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["addtocart",{"_index":1028,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["addtocart(service",{"_index":3914,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["adjust",{"_index":4559,"title":{},"body":{"index.html":{}}}],["admin",{"_index":136,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["affect",{"_index":3478,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["affects",{"_index":1515,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotationActionResponse.html":{}}}],["again",{"_index":602,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/User.html":{}}}],["against",{"_index":680,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["alert",{"_index":1136,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["alert.alert",{"_index":1180,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["alert.alert('action",{"_index":3553,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["alert.alert('download",{"_index":3611,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["alert.alert('error",{"_index":3556,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["alert.alert('success",{"_index":3546,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["aliases",{"_index":4581,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alignitems",{"_index":90,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["alignment",{"_index":3963,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["alignself",{"_index":1844,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/MessageBubbleProps.html":{}}}],["allow",{"_index":2947,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["allowed",{"_index":471,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["allowed_mime_types",{"_index":1879,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["allowedextensions",{"_index":455,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["allowedextensions.includes(extension",{"_index":476,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["allowedstatuses",{"_index":3584,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["allowedstatuses.includes(quotation.status",{"_index":3586,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["allowedtypes",{"_index":454,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["allowedtypes.includes(file.type",{"_index":469,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["allowing",{"_index":4215,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["allowmultiselection",{"_index":1951,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["allows",{"_index":2785,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["allstyles",{"_index":2901,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["already",{"_index":809,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["alternative",{"_index":2085,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["always",{"_index":579,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["amount",{"_index":1044,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["anchorposition=\"bottom",{"_index":2060,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["android",{"_index":1927,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"index.html":{}}}],["androidios",{"_index":4430,"title":{},"body":{"index.html":{}}}],["announcement",{"_index":3103,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["another",{"_index":1898,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["any).__redux_store_state__",{"_index":4328,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["any).data",{"_index":1247,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["any).message",{"_index":1245,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["any).navigate('ticketthread",{"_index":4062,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["anyway",{"_index":741,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/User.html":{}}}],["anywhere",{"_index":3589,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["api",{"_index":132,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["api/endpoints/auth",{"_index":551,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["api/endpoints/kyc",{"_index":2607,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["api/endpoints/leads",{"_index":1140,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["api/endpoints/newauth",{"_index":3042,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["api/endpoints/notifications",{"_index":3139,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["api/endpoints/quotations",{"_index":3488,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["api/endpoints/services",{"_index":2564,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["api/endpoints/tickets",{"_index":1594,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["api/kycservice",{"_index":2609,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["api/v1/notifications",{"_index":3092,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["api/v1/profile",{"_index":3342,"title":{},"body":{"interfaces/ProfileData.html":{}}}],["api/v1/quotations",{"_index":2532,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["api/v1/quotations/{id",{"_index":2544,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["api/v1/tickets",{"_index":167,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["api/v1/tickets/{id",{"_index":174,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["api/v1/tickets/{id}/messages",{"_index":124,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["api_config",{"_index":246,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["api_error",{"_index":2425,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["api_timeout",{"_index":242,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["apiconfig",{"_index":228,"title":{"interfaces/ApiConfig.html":{}},"body":{"interfaces/ApiConfig.html":{}}}],["apidata",{"_index":2441,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["apidata.items",{"_index":2445,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["apidata.limit",{"_index":2448,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["apidata.offset",{"_index":2451,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["apidata.total",{"_index":2449,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["apidocuments",{"_index":2801,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["apierror",{"_index":307,"title":{"interfaces/ApiError.html":{}},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["apierrorresponse",{"_index":484,"title":{"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["apirefetch",{"_index":2812,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["apiresponse",{"_index":312,"title":{"interfaces/ApiResponse.html":{}},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/UseKycDocsResult.html":{}}}],["apiresponse?.documents",{"_index":2816,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["apis",{"_index":3633,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["apitickets",{"_index":4048,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["apk/ipa",{"_index":4541,"title":{},"body":{"index.html":{}}}],["apologize",{"_index":2130,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["app",{"_index":249,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/User.html":{},"dependencies.html":{},"index.html":{}}}],["app.tsx",{"_index":4454,"title":{},"body":{"index.html":{}}}],["app_env",{"_index":241,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig",{"_index":239,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["appconfig.api_config",{"_index":299,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig.api_config.enablelogging",{"_index":303,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig.api_config.enableofflinecache",{"_index":306,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig.api_timeout",{"_index":2950,"title":{},"body":{"classes/LogoutManager.html":{}}}],["appconfig.app_env",{"_index":293,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig.base_api_url",{"_index":297,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["appconfig.base_api_url.replace",{"_index":337,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["appdispatch",{"_index":4582,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["appear",{"_index":1793,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["appears",{"_index":700,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["application",{"_index":4554,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":363,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/User-2.html":{}}}],["application/octet",{"_index":1961,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["application/pdf",{"_index":461,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["approach",{"_index":4187,"title":{},"body":{"classes/UploadMutex.html":{}}}],["appropriate",{"_index":3539,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["approved",{"_index":1723,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"miscellaneous/typealiases.html":{}}}],["approximate",{"_index":1827,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["appstate",{"_index":3188,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["appstate.addeventlistener",{"_index":3277,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["appstate.currentstate",{"_index":3280,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["appstateref",{"_index":3225,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["appstateref.current",{"_index":3265,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["appstatestatus",{"_index":3189,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["area",{"_index":916,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{},"dependencies.html":{}}}],["args",{"_index":2265,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"classes/LogoutManager.html":{},"interfaces/TestWrapperProps.html":{}}}],["args.background",{"_index":2962,"title":{},"body":{"classes/LogoutManager.html":{}}}],["array",{"_index":173,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseKycDocsResult.html":{}}}],["array.isarray(response",{"_index":2463,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["array.isarray(response.data",{"_index":2462,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["arrow_left",{"_index":3310,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["arrow_right",{"_index":3312,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["arrowleft",{"_index":3311,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["arrowright",{"_index":3313,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["artifacts",{"_index":4540,"title":{},"body":{"index.html":{}}}],["asc",{"_index":320,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["ask",{"_index":1940,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["assert",{"_index":2269,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["asset",{"_index":1916,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["asset.filename",{"_index":1919,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["asset.filesize",{"_index":1922,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["asset.type",{"_index":1921,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["asset.uri",{"_index":1918,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["assigned",{"_index":1557,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["assignedto",{"_index":1572,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["assignment",{"_index":3157,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["associated",{"_index":145,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["assume",{"_index":706,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["async",{"_index":564,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["asyncstorage",{"_index":3770,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["asyncstorage.getitem(key",{"_index":3782,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["asyncstorage.removeitem(key",{"_index":3790,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["asyncstorage.setitem(key",{"_index":3787,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["asynctest",{"_index":2260,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["atob",{"_index":3049,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["atob(str",{"_index":3050,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["attach",{"_index":2377,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/NotificationListItemProps.html":{}}}],["attempt",{"_index":416,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["attempting",{"_index":1949,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["attempts",{"_index":4125,"title":{},"body":{"classes/UploadMutex.html":{}}}],["attemptsleft",{"_index":509,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["audit",{"_index":4522,"title":{},"body":{"index.html":{}}}],["auth",{"_index":506,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["auth/login",{"_index":2909,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["auth/loginsuccessenhanced",{"_index":732,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/loginwithotp",{"_index":592,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/loginwithotpenhanced",{"_index":660,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/logout",{"_index":632,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{}}}],["auth/logoutuserenhanced",{"_index":669,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/refreshtoken",{"_index":645,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/restoreauthstate",{"_index":682,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth/sendotp",{"_index":568,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auth_constants",{"_index":513,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["auth_token_secure",{"_index":3776,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["authapi",{"_index":550,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["authapi.endpoints.verifyotp.initiate({phone",{"_index":663,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authapi.reducer",{"_index":2201,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["authapi.reducerpath",{"_index":2200,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["authattemptstate",{"_index":508,"title":{"interfaces/AuthAttemptState.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["authenticated",{"_index":2456,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["authentication",{"_index":396,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["autherror",{"_index":488,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["authreducer",{"_index":2193,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["authresponse",{"_index":504,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["authservice.logout",{"_index":639,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authservice.refreshtoken(refreshtoken",{"_index":649,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authslice",{"_index":748,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authslice.actions",{"_index":813,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authslice.reducer",{"_index":814,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["authstackparamlist",{"_index":4584,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["authstackscreenprops",{"_index":4586,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["authstate",{"_index":540,"title":{"interfaces/AuthState.html":{}},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["auto",{"_index":2807,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["autocapitalize",{"_index":897,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["autocorrect",{"_index":902,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["autofocus",{"_index":3295,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["automated",{"_index":4535,"title":{},"body":{"index.html":{}}}],["automatic",{"_index":3206,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["automatically",{"_index":4457,"title":{},"body":{"index.html":{}}}],["autostart",{"_index":1535,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["available",{"_index":185,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/ComingSoonProps.html":{},"classes/CompressionError.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"classes/ValidationError.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["avatar",{"_index":2513,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["avoid",{"_index":795,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["await",{"_index":573,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["azure",{"_index":831,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["azureblobuploader",{"_index":4152,"title":{},"body":{"classes/UploadMutex.html":{}}}],["azureblobuploadparams",{"_index":829,"title":{"interfaces/AzureBlobUploadParams.html":{}},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{}}}],["b",{"_index":2797,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["back",{"_index":2284,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["backbutton",{"_index":2283,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["backend",{"_index":2482,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"miscellaneous/typealiases.html":{}}}],["background",{"_index":1393,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedTheme.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/Typography.html":{}}}],["background/foreground",{"_index":3210,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["backgroundcolor",{"_index":95,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TextInputProps.html":{}}}],["backgrounded",{"_index":3272,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["backoff",{"_index":414,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["backspace",{"_index":3309,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["backup",{"_index":1290,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["backward",{"_index":2503,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["badge",{"_index":958,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"index.html":{}}}],["badgesize",{"_index":3136,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["balance",{"_index":1734,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["bam.tech/react",{"_index":4368,"title":{},"body":{"dependencies.html":{}}}],["bar",{"_index":1783,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["base",{"_index":138,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{}}}],["base64').tostring('ascii",{"_index":3053,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["base64decode",{"_index":3047,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["base_api_url",{"_index":240,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["basecomponentprops",{"_index":855,"title":{"interfaces/BaseComponentProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["based",{"_index":122,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["basedelay",{"_index":417,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["baseerror",{"_index":2427,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{}}}],["baseerror.code",{"_index":2432,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["baseerror.message",{"_index":2429,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["basefetchquery",{"_index":2949,"title":{},"body":{"classes/LogoutManager.html":{}}}],["baseintervalms",{"_index":3202,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["baseintervalseconds",{"_index":3183,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["basems",{"_index":3230,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["basequery",{"_index":2406,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["basequeryfn",{"_index":2930,"title":{},"body":{"classes/LogoutManager.html":{}}}],["basequerywithretry",{"_index":2958,"title":{},"body":{"classes/LogoutManager.html":{}}}],["baseurl",{"_index":336,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["baseurl}/api/v1/${cleanendpoint",{"_index":344,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["basic",{"_index":2291,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/MigrationManifest.html":{},"interfaces/TestWrapperProps.html":{}}}],["basics",{"_index":4571,"title":{},"body":{"index.html":{}}}],["batch",{"_index":2946,"title":{},"body":{"classes/LogoutManager.html":{}}}],["bdbdbd",{"_index":1432,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["bearer",{"_index":370,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["become",{"_index":1368,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["before",{"_index":1182,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["behavior",{"_index":4219,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["bell",{"_index":3891,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["benchmarks",{"_index":4500,"title":{},"body":{"index.html":{}}}],["better",{"_index":1995,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ServiceItemProps.html":{}}}],["between",{"_index":1695,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["bgcolor",{"_index":3753,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["bill",{"_index":2780,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["blob",{"_index":832,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["blobname",{"_index":2624,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["blobs",{"_index":4192,"title":{},"body":{"classes/UploadMutex.html":{}}}],["block",{"_index":1954,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["blockblob",{"_index":4183,"title":{},"body":{"classes/UploadMutex.html":{}}}],["blocked",{"_index":3542,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["blog",{"_index":4574,"title":{},"body":{"index.html":{}}}],["blue",{"_index":1419,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["body",{"_index":2481,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["bodylarge",{"_index":2322,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["bodymedium",{"_index":2323,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["bodysmall",{"_index":2324,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["bold",{"_index":976,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["bootstrapped",{"_index":4413,"title":{},"body":{"index.html":{}}}],["border",{"_index":112,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["borderbottomleftradius",{"_index":3969,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["borderbottomrightradius",{"_index":3972,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["bordercolor",{"_index":105,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["borderleftcolor",{"_index":2154,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["borderleftwidth",{"_index":2153,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["borderradius",{"_index":103,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["borderradius.medium",{"_index":2998,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["bordertopcolor",{"_index":2170,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["bordertopleftradius",{"_index":3968,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["bordertoprightradius",{"_index":3971,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["bordertopwidth",{"_index":2169,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["borderwidth",{"_index":107,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["both",{"_index":31,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/User.html":{}}}],["bottom",{"_index":3574,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["bottomtabscreenprops",{"_index":4622,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["boundary",{"_index":2071,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["branch",{"_index":4542,"title":{},"body":{"index.html":{}}}],["breakdown",{"_index":2538,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["browse",{"_index":1977,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"index.html":{}}}],["browser",{"_index":1886,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["bubble",{"_index":2373,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/MessageBubbleProps.html":{}}}],["buffer",{"_index":2678,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["buffer.from(str",{"_index":3052,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["buffertimeseconds",{"_index":2672,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["build",{"_index":251,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["buildapiurl",{"_index":335,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["builder",{"_index":774,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{}}}],["builder.mutation",{"_index":2480,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["builder.query",{"_index":2439,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["buildqueryparams",{"_index":345,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["builds",{"_index":274,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["built",{"_index":4276,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{},"index.html":{}}}],["bundle",{"_index":278,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["bundler",{"_index":4436,"title":{},"body":{"index.html":{}}}],["business",{"_index":3471,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"index.html":{}}}],["button",{"_index":27,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["buttoncontainer",{"_index":2161,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["buttoncontent",{"_index":1983,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["buttonlabel",{"_index":1984,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["buttonnegative",{"_index":1941,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["buttonneutral",{"_index":1939,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["buttonpositive",{"_index":1942,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["buttonprops",{"_index":871,"title":{"interfaces/ButtonProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["buttons",{"_index":32,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["buttonsize",{"_index":867,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["buttonvariant",{"_index":863,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["bytes",{"_index":435,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["cache",{"_index":217,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["cached",{"_index":218,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["cacheddata",{"_index":935,"title":{},"body":{"interfaces/CacheState.html":{}}}],["cachereducer",{"_index":2195,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["caches",{"_index":3467,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["cacheslice",{"_index":938,"title":{},"body":{"interfaces/CacheState.html":{}}}],["cacheslice.actions",{"_index":948,"title":{},"body":{"interfaces/CacheState.html":{}}}],["cacheslice.reducer",{"_index":949,"title":{},"body":{"interfaces/CacheState.html":{}}}],["cachestate",{"_index":933,"title":{"interfaces/CacheState.html":{}},"body":{"interfaces/CacheState.html":{}}}],["caching",{"_index":215,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["calculate",{"_index":410,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["calculated",{"_index":3128,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["calculatenextpolltime",{"_index":3229,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["calculatepayloadsize",{"_index":2404,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["calculatepayloadsize(payload",{"_index":2488,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["calculateprogress(loaded",{"_index":4136,"title":{},"body":{"classes/UploadMutex.html":{}}}],["calculateretrydelay",{"_index":415,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["calculatetotalitems(items",{"_index":1007,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["calculatetotalitems(state.items",{"_index":1036,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["calculations",{"_index":4218,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["call",{"_index":572,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{}}}],["callback",{"_index":36,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CreateTicketModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["callbacks",{"_index":4484,"title":{},"body":{"index.html":{}}}],["called",{"_index":2093,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["calling",{"_index":3413,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["calls",{"_index":4112,"title":{},"body":{"classes/UploadMutex.html":{}}}],["came",{"_index":3267,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["camera",{"_index":1885,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["cameraoptions",{"_index":1874,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["campaign",{"_index":3161,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["canaddtocart",{"_index":3870,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cancel",{"_index":1216,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["cancelable",{"_index":1522,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["cancellation",{"_index":2622,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["cancelled",{"_index":847,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocView.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["cancelledcheque",{"_index":1738,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["cancelling",{"_index":4305,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["canceltext",{"_index":1512,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["canrefresh",{"_index":3644,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshkyc",{"_index":1801,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshleads",{"_index":3646,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshnotifications",{"_index":3216,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshquotations",{"_index":3588,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshsinglelead",{"_index":2594,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshsinglequotation",{"_index":3648,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["canrefreshtickets",{"_index":3650,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["canupload",{"_index":2767,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["canuploaddoctype",{"_index":4289,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["canuploaddoctype(doctype",{"_index":4316,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["canuploaddocument",{"_index":2786,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["canuploaddocument(status",{"_index":2805,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["canuploadkycdoctype",{"_index":4357,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["canuploadkycdocument",{"_index":2818,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["cap",{"_index":428,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["capture",{"_index":1924,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["card",{"_index":1590,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocView.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/UseKycDocsResult.html":{}}}],["cart",{"_index":988,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{},"index.html":{}}}],["cart_checkout_route",{"_index":3856,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartbadge",{"_index":964,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["cartbadgeprops",{"_index":956,"title":{"interfaces/CartBadgeProps.html":{}},"body":{"interfaces/CartBadgeProps.html":{}}}],["cartbadgetext",{"_index":3980,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartbuttoncontainer",{"_index":3955,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartcheckout",{"_index":1232,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartcheckoutscreen",{"_index":1158,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartcheckoutscreennavigationprop",{"_index":1156,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"miscellaneous/typealiases.html":{}}}],["cartcount",{"_index":967,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["cartcount.tostring",{"_index":969,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["cartcounttext",{"_index":3958,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["carticoncontainer",{"_index":3978,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartitem",{"_index":978,"title":{"interfaces/CartItem.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{}}}],["cartitem.id",{"_index":997,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["cartitem.qty",{"_index":998,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["cartitem?.qty",{"_index":3931,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartitemcount",{"_index":3848,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartitemrow",{"_index":1086,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{}}}],["cartitemrowprops",{"_index":1075,"title":{"interfaces/CartItemRowProps.html":{}},"body":{"interfaces/CartItemRowProps.html":{}}}],["cartitems",{"_index":1170,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["cartitems.length",{"_index":1219,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartitems.map",{"_index":1225,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartitems[item.serviceid",{"_index":3930,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartitems[service.serviceid",{"_index":3912,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["cartitemscontainer",{"_index":1313,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartsnapshot",{"_index":1340,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["cartsummary",{"_index":1251,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartsummary.totalitems",{"_index":1261,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartsummary.uniqueservices",{"_index":1259,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cartsummarytext",{"_index":3964,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["case",{"_index":708,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/User.html":{}}}],["cases",{"_index":1546,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseAuthRestoreConfig.html":{},"miscellaneous/typealiases.html":{}}}],["catalogue",{"_index":3822,"title":{},"body":{"interfaces/Service.html":{},"index.html":{}}}],["catch",{"_index":583,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["catch(e",{"_index":1953,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["category",{"_index":2237,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{}}}],["category/type",{"_index":3102,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["caught",{"_index":2107,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["cause",{"_index":4350,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["center",{"_index":91,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["change",{"_index":805,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/User.html":{}}}],["changed",{"_index":3334,"title":{},"body":{"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["changes",{"_index":800,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["channel",{"_index":199,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["character",{"_index":3290,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["characters",{"_index":901,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["charcounttext",{"_index":1691,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["chars",{"_index":3685,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["chat",{"_index":2997,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["check",{"_index":276,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusColorConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["checking",{"_index":2685,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["checklist",{"_index":2775,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["checkout",{"_index":1080,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServiceItemProps.html":{}}}],["checkoutformdata",{"_index":1123,"title":{"interfaces/CheckoutFormData.html":{}},"body":{"interfaces/CheckoutFormData.html":{}}}],["checkoutslice",{"_index":1341,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["checkoutslice.actions",{"_index":1375,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["checkoutslice.reducer",{"_index":1385,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["checkoutstate",{"_index":1333,"title":{"interfaces/CheckoutState.html":{}},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["checks",{"_index":4127,"title":{},"body":{"classes/UploadMutex.html":{},"index.html":{}}}],["cheque",{"_index":2782,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["child",{"_index":2352,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["children",{"_index":918,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{}}}],["children(enhancedmethods",{"_index":2379,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["chip",{"_index":1703,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["choice",{"_index":4456,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1968,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["chronological",{"_index":155,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["ci",{"_index":4528,"title":{},"body":{"index.html":{}}}],["ci/cd",{"_index":4533,"title":{},"body":{"index.html":{}}}],["circle",{"_index":2001,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["city",{"_index":1286,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["class",{"_index":1469,"title":{"classes/CompressionError.html":{},"classes/ErrorBoundary.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"classes/ValidationError.html":{}},"body":{"classes/CompressionError.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"classes/ValidationError.html":{}}}],["classes",{"_index":1471,"title":{},"body":{"classes/CompressionError.html":{},"classes/ErrorBoundary.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"classes/ValidationError.html":{},"index.html":{},"overview.html":{}}}],["clean",{"_index":2581,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["cleanendpoint",{"_index":341,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["cleaning",{"_index":3281,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["cleanparams",{"_index":347,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["cleanparams.length",{"_index":355,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["cleanup",{"_index":671,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["clear",{"_index":615,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["clear_orphaned_token",{"_index":718,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["clearall",{"_index":3655,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["clearauthstate",{"_index":3072,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["clearcache",{"_index":942,"title":{},"body":{"interfaces/CacheState.html":{}}}],["clearcart",{"_index":1051,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["clearcartbutton",{"_index":1331,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["clearcartbuttontext",{"_index":1332,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["clearcartcontainer",{"_index":1330,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cleardraft",{"_index":1373,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["cleared",{"_index":633,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["clearerror",{"_index":716,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["clearing",{"_index":714,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["clearinterval(intervalref.current",{"_index":4244,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["clearjwt",{"_index":555,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["cleartimeout(timeoutid",{"_index":4267,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["cleartimeout(timerref.current",{"_index":3247,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["client",{"_index":1622,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{}}}],["clone",{"_index":4433,"title":{},"body":{"index.html":{}}}],["close",{"_index":1651,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["closed",{"_index":129,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["closedat",{"_index":165,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["closemenu",{"_index":2038,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["cmd",{"_index":4468,"title":{},"body":{"index.html":{}}}],["cocoapods",{"_index":4432,"title":{},"body":{"index.html":{}}}],["code",{"_index":309,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"classes/CompressionError.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User-1.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["coded",{"_index":4330,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["codes",{"_index":3306,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"index.html":{}}}],["collective",{"_index":3882,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["color",{"_index":110,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"index.html":{}}}],["colored",{"_index":1998,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["colorpalette",{"_index":1386,"title":{"interfaces/ColorPalette.html":{}},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["colors",{"_index":78,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["colors.background",{"_index":2142,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.border.default",{"_index":2166,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.border.light",{"_index":2023,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.error",{"_index":1993,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.primary",{"_index":2163,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.primarylight",{"_index":2331,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.secondary",{"_index":2332,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.secondarylight",{"_index":2334,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.success",{"_index":1990,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["colors.surface",{"_index":2146,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.text.disabled",{"_index":1994,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["colors.text.primary",{"_index":1999,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["colors.text.secondary",{"_index":1991,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["combines",{"_index":2871,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["come",{"_index":250,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["coming",{"_index":1463,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["comingsoon",{"_index":1457,"title":{},"body":{"interfaces/ComingSoonProps.html":{}}}],["comingsoonprops",{"_index":1453,"title":{"interfaces/ComingSoonProps.html":{}},"body":{"interfaces/ComingSoonProps.html":{}}}],["comma",{"_index":2571,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["command",{"_index":4421,"title":{},"body":{"index.html":{}}}],["commands",{"_index":4428,"title":{},"body":{"index.html":{}}}],["commission",{"_index":3112,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["commits",{"_index":4546,"title":{},"body":{"index.html":{}}}],["common",{"_index":48,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["common/statusbadge",{"_index":4010,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["communicate",{"_index":1680,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["community/cli",{"_index":4414,"title":{},"body":{"index.html":{}}}],["compact",{"_index":2018,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["compactchip",{"_index":3987,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["compacttext",{"_index":3992,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["compatibility",{"_index":761,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["compatible",{"_index":3607,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["complementary",{"_index":1418,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["complete",{"_index":139,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileData.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["completed",{"_index":689,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceStatus.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["completely",{"_index":1040,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["completes",{"_index":4195,"title":{},"body":{"classes/UploadMutex.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["completing",{"_index":740,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["completion",{"_index":4158,"title":{},"body":{"classes/UploadMutex.html":{}}}],["compliance",{"_index":58,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"index.html":{}}}],["compliant",{"_index":99,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{}}}],["component",{"_index":10,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"miscellaneous/typealiases.html":{}}}],["component.displayname",{"_index":3743,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["component.name",{"_index":3744,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["componentcolors",{"_index":928,"title":{"interfaces/ComponentColors.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["componentdidcatch",{"_index":2076,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["componentdidcatch(error",{"_index":2089,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["components",{"_index":1145,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{}}}],["components/common",{"_index":3855,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["components/forms",{"_index":1705,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["components/modals/createticketmodal",{"_index":4038,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["components/quotes",{"_index":3489,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["components/tickets",{"_index":4039,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["componentsizes",{"_index":932,"title":{"interfaces/ComponentSizes.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["comprehensive",{"_index":3532,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["compress",{"_index":2699,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compressimage",{"_index":2616,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compressimage(file",{"_index":2706,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compressing",{"_index":2703,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compression",{"_index":1473,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/RNFile.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["compression_failed",{"_index":1486,"title":{},"body":{"classes/CompressionError.html":{}}}],["compressionerror",{"_index":1470,"title":{"classes/CompressionError.html":{}},"body":{"classes/CompressionError.html":{}}}],["compressionoptions",{"_index":1498,"title":{"interfaces/CompressionOptions.html":{}},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["compressionratio",{"_index":1508,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["compressionresult",{"_index":1507,"title":{"interfaces/CompressionResult.html":{}},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/RNFile.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compressionresult.size",{"_index":2707,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["compute",{"_index":3144,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["computed",{"_index":2766,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["concat(authapi.middleware",{"_index":2210,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["concat(leadsapi.middleware",{"_index":2212,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["concat(servicesapi.middleware",{"_index":2211,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["concurrent",{"_index":2633,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["config",{"_index":282,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseAuthRestoreConfig.html":{},"dependencies.html":{}}}],["config.debug_mode",{"_index":288,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["config/environments",{"_index":310,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["configs",{"_index":1722,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["configs.draft",{"_index":3494,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["configs.missing",{"_index":1727,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["configs[status",{"_index":1726,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["configuration",{"_index":245,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/User-2.html":{},"miscellaneous/typealiases.html":{}}}],["configurations",{"_index":247,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["configure",{"_index":2306,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ThemeProviderProps.html":{},"classes/UploadMutex.html":{}}}],["configured",{"_index":3470,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["configurefonts",{"_index":2304,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["configurestore",{"_index":2181,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["configuring",{"_index":4201,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["confirm",{"_index":1514,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["confirmation",{"_index":1201,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["confirmdialogoptions",{"_index":1509,"title":{"interfaces/ConfirmDialogOptions.html":{}},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["confirmed",{"_index":1518,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["confirmtext",{"_index":1513,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["conflict",{"_index":3538,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["congratulations",{"_index":4549,"title":{},"body":{"index.html":{}}}],["connected",{"_index":4448,"title":{},"body":{"index.html":{}}}],["connecting",{"_index":3598,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["connection",{"_index":3689,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["consider",{"_index":788,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["consistency",{"_index":715,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["consistent",{"_index":719,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/User.html":{}}}],["console.error",{"_index":667,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/UploadMutex.html":{},"interfaces/User.html":{}}}],["console.error('[api",{"_index":2966,"title":{},"body":{"classes/LogoutManager.html":{}}}],["console.error('[auth",{"_index":584,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["console.error('[azureblobuploader",{"_index":4165,"title":{},"body":{"classes/UploadMutex.html":{}}}],["console.error('[cartcheckout",{"_index":1244,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["console.error('[createlead",{"_index":2500,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["console.error('[createticketmodal",{"_index":1653,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["console.error('[docstab",{"_index":1807,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["console.error('[documentpickermodal",{"_index":1905,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["console.error('[errorboundary",{"_index":2106,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["console.error('[formproviderwrapper",{"_index":2372,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["console.error('[infotab",{"_index":2598,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["console.error('[kycuploader",{"_index":2694,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["console.error('[newauth",{"_index":3061,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["console.error('[notificationpolling",{"_index":3243,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["console.error('[persist",{"_index":3032,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["console.error('[quotestab",{"_index":3530,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["console.error('[servicesscreen",{"_index":3915,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["console.error('[ticketpolling",{"_index":4032,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["console.error('[ticketstab",{"_index":4056,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["console.error('[useauthrestore",{"_index":4264,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["console.error('[usekycupload",{"_index":4313,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["console.error('[usepersistencestatus",{"_index":3326,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["console.error('error",{"_index":482,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["console.error(`[docstab",{"_index":1773,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["console.error(`[securepersistadapter",{"_index":3784,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["console.group(`[api",{"_index":479,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["console.groupend",{"_index":483,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["console.log",{"_index":707,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["console.log('[api",{"_index":2941,"title":{},"body":{"classes/LogoutManager.html":{}}}],["console.log('[auth",{"_index":608,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["console.log('[azureblobuploader",{"_index":4170,"title":{},"body":{"classes/UploadMutex.html":{}}}],["console.log('[cartcheckout",{"_index":1199,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["console.log('[checkout",{"_index":1354,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["console.log('[createticketmodal",{"_index":1646,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["console.log('[docstab",{"_index":1804,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["console.log('[documentpickermodal",{"_index":1902,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["console.log('[environment",{"_index":290,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["console.log('[errorboundary",{"_index":2116,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["console.log('[infotab",{"_index":2596,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["console.log('[kycuploader",{"_index":2691,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["console.log('[leadlistitem",{"_index":2836,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["console.log('[migration",{"_index":3009,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["console.log('[notificationpolling",{"_index":3234,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["console.log('[profileform",{"_index":3376,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["console.log('[quotestab",{"_index":3528,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["console.log('[ticketpolling",{"_index":4031,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["console.log('[ticketstab",{"_index":4055,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["console.log('[useauthrestore",{"_index":4260,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["console.log('[usekycupload",{"_index":4304,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["console.log('[usepersistencestatus",{"_index":3323,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["console.log('reduxtoken",{"_index":686,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["console.log('request",{"_index":480,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["console.log('response",{"_index":481,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["console.log('user",{"_index":3552,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["console.log(`${progress",{"_index":4490,"title":{},"body":{"index.html":{}}}],["console.log(`[auth",{"_index":581,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["console.log(`[docstab",{"_index":1760,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["console.log(`[documentrow",{"_index":2007,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["console.log(`[environment",{"_index":289,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["console.log(`[kycuploader",{"_index":2689,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["console.log(`[refreshtimestamps",{"_index":3678,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["console.log(`[securepersistadapter",{"_index":3779,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["console.log(`[usekycupload",{"_index":4320,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["console.warn",{"_index":627,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["console.warn('[auth",{"_index":739,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["console.warn('[createlead",{"_index":2492,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["console.warn('[persist",{"_index":3030,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["console.warn('[quotestab",{"_index":3514,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["console.warn('[usekycupload",{"_index":4319,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["console.warn(`[cart",{"_index":1048,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["console.warn(`[docstab",{"_index":1771,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["console.warn(`[documentrow",{"_index":2008,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["const",{"_index":71,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["constants",{"_index":512,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/KycDocView.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["constraint",{"_index":1030,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["constraints",{"_index":2522,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["construction",{"_index":1462,"title":{},"body":{"interfaces/ComingSoonProps.html":{}}}],["constructor",{"_index":1479,"title":{},"body":{"classes/CompressionError.html":{},"classes/ErrorBoundary.html":{},"classes/KycUploadError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["constructor(message",{"_index":1480,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["constructor(props",{"_index":2080,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["constructor(step",{"_index":2627,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["contact",{"_index":1094,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ServiceItemProps.html":{}}}],["container",{"_index":42,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadResult.html":{}}}],["containing",{"_index":69,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["contains",{"_index":4626,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["content",{"_index":126,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"classes/UploadMutex.html":{},"interfaces/User-2.html":{}}}],["contentcontainerstyle",{"_index":3615,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["contentcontainerstyle={styles.listcontainer",{"_index":3939,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["contentcontainerstyle={styles.listcontent",{"_index":1817,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["contentstyle={styles.uploadbuttoncontent",{"_index":1785,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["context",{"_index":1766,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ThemeProviderProps.html":{},"dependencies.html":{}}}],["continue",{"_index":625,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"classes/LogoutManager.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["continues",{"_index":2138,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["continuing",{"_index":673,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["continuous",{"_index":4537,"title":{},"body":{"index.html":{}}}],["contrast",{"_index":1996,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/LeadListItemProps.html":{}}}],["control",{"_index":751,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["controlled",{"_index":2049,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["controller",{"_index":1143,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["controls",{"_index":1079,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{},"index.html":{}}}],["convert",{"_index":1619,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["correctly",{"_index":4444,"title":{},"body":{"index.html":{}}}],["count",{"_index":219,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["countdown",{"_index":1525,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["countdowntimerstate",{"_index":1523,"title":{"interfaces/CountdownTimerState.html":{}},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["coverage",{"_index":4494,"title":{},"body":{"index.html":{}}}],["cpid",{"_index":201,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["crash",{"_index":2113,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["crashlytics.recorderror(error",{"_index":2115,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["create",{"_index":1214,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"classes/LogoutManager.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["create_lead",{"_index":2497,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["createapi",{"_index":2400,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["createasyncthunk",{"_index":547,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["createbutton",{"_index":4084,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["createcontext",{"_index":2300,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["createcontext(customtheme",{"_index":2343,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["created",{"_index":160,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"miscellaneous/typealiases.html":{}}}],["createdat",{"_index":161,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["createdby",{"_index":163,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["createerror",{"_index":1652,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createerror.data.error",{"_index":1655,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createerror.message",{"_index":1657,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createerror?.data?.error",{"_index":1654,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createerror?.message",{"_index":1656,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createlead",{"_index":1161,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{}}}],["createlead(createleadpayload).unwrap",{"_index":1233,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["createleadpayload",{"_index":1227,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["createleadrequest",{"_index":1154,"title":{"interfaces/CreateLeadRequest.html":{}},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["createmockauthstate",{"_index":2228,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["createmocklead",{"_index":2231,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["createmocknavigation",{"_index":2249,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["createmockroute",{"_index":2257,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["createmockservice",{"_index":2236,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["createmockuser",{"_index":2225,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["creates",{"_index":1019,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["createselector",{"_index":983,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["createselector([selectcartitems",{"_index":1060,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["createslice",{"_index":546,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["createtag",{"_index":2973,"title":{},"body":{"classes/LogoutManager.html":{}}}],["createtag(type",{"_index":2975,"title":{},"body":{"classes/LogoutManager.html":{}}}],["createticket",{"_index":1614,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["createticketmodal",{"_index":1599,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["createticketmodalprops",{"_index":1581,"title":{"interfaces/CreateTicketModalProps.html":{}},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["createticketmodalvisible",{"_index":4045,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["createticketrequest",{"_index":208,"title":{"interfaces/CreateTicketRequest.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["createticketresponse",{"_index":211,"title":{"interfaces/CreateTicketResponse.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["createuploaderror",{"_index":4129,"title":{},"body":{"classes/UploadMutex.html":{}}}],["creating",{"_index":206,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["creation",{"_index":210,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["credentials",{"_index":2908,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["credit",{"_index":1741,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["critical",{"_index":629,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["crud",{"_index":3690,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["ctrl",{"_index":4465,"title":{},"body":{"index.html":{}}}],["curious",{"_index":4556,"title":{},"body":{"index.html":{}}}],["currency",{"_index":2242,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{}}}],["current",{"_index":152,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["currentauthstate",{"_index":697,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["currentdoctyperef",{"_index":4302,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["currentdoctyperef.current",{"_index":4325,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["currentenv",{"_index":281,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["currently",{"_index":3131,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["currentsasurl",{"_index":4197,"title":{},"body":{"classes/UploadMutex.html":{}}}],["currentstep",{"_index":3628,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["currenttotal",{"_index":1006,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["currentuser",{"_index":1164,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["currentuser.email",{"_index":1265,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["currentuser?.email",{"_index":1264,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["currentuser?.name",{"_index":1207,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["currentuser?.phone",{"_index":1209,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["cust",{"_index":2469,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"index.html":{}}}],["custom",{"_index":24,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"classes/CompressionError.html":{},"interfaces/CountdownTimerState.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocView.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"classes/ValidationError.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["customer",{"_index":135,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["customer_${date.now",{"_index":1228,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["customer_accepted",{"_index":2845,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["customercontainer",{"_index":1301,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["customerheader",{"_index":1303,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["customerid",{"_index":202,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["customername",{"_index":1217,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["customers",{"_index":3549,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["customertext",{"_index":1305,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["customertitle",{"_index":1304,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["customtheme",{"_index":2328,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["danger",{"_index":866,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["dark",{"_index":930,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{}}}],["darker",{"_index":1417,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["data",{"_index":314,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationResult.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseKycDocsResult.html":{},"index.html":{}}}],["data.address",{"_index":1211,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["data.address.trim",{"_index":1231,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["data.items",{"_index":3456,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["data/data/com.solariumcustapp/shared_prefs",{"_index":4521,"title":{},"body":{"index.html":{}}}],["date",{"_index":203,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":725,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/User.html":{}}}],["date(a.uploadedat).gettime",{"_index":2799,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["date(b.uploadedat).gettime",{"_index":2798,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["date(document.latestdoc.uploadedat).tolocaledatestring",{"_index":1781,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["date(notification.createdat",{"_index":3168,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["date.now",{"_index":771,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["date.now()}.pdf",{"_index":4346,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["date:\\n${errormessage",{"_index":3924,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["datefrom",{"_index":3119,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["daterange",{"_index":205,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["dateto",{"_index":3120,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["debounce",{"_index":2592,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["debounce_windows",{"_index":4206,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debounce_windows.quote_action",{"_index":4204,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debounced",{"_index":4212,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debouncems",{"_index":4231,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debounceseconds",{"_index":4202,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debouncewindow",{"_index":4217,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["debouncing",{"_index":4477,"title":{},"body":{"index.html":{}}}],["debug",{"_index":286,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["debug_mode",{"_index":243,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["debugapicall",{"_index":478,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["debugging",{"_index":285,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/User.html":{}}}],["decode",{"_index":3046,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["decrease",{"_index":1038,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["decreases",{"_index":1042,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["decrement",{"_index":3869,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["default",{"_index":28,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"miscellaneous/typealiases.html":{}}}],["default_length",{"_index":3301,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["default_placeholder",{"_index":3304,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["defaultchip",{"_index":3986,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["defaultduration",{"_index":1534,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["defaults",{"_index":359,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{}}}],["defaulttext",{"_index":3988,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["defaultvalues",{"_index":1176,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["defined",{"_index":1481,"title":{},"body":{"classes/CompressionError.html":{},"classes/ErrorBoundary.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"classes/ValidationError.html":{}}}],["defines",{"_index":1389,"title":{},"body":{"interfaces/ColorPalette.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["definition",{"_index":2433,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/MigrationManifest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["definitions",{"_index":1442,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/RefreshState.html":{},"interfaces/Service.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["delay",{"_index":412,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["delete",{"_index":331,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/MigrationManifest.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SecureStorageError.html":{},"interfaces/ServicesCartState.html":{},"miscellaneous/typealiases.html":{}}}],["delete_error",{"_index":3815,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["demo",{"_index":578,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["demo@solarium.com",{"_index":604,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["demo_token",{"_index":4520,"title":{},"body":{"index.html":{}}}],["demo_token_${date.now",{"_index":605,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["denied",{"_index":3445,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["dependencies",{"_index":4367,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependent",{"_index":2763,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotationActionResponse.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["deployment",{"_index":275,"title":{},"body":{"interfaces/ApiConfig.html":{},"index.html":{}}}],["deps",{"_index":4434,"title":{},"body":{"index.html":{}}}],["derive",{"_index":2809,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["derives",{"_index":2808,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["desc",{"_index":321,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["descending",{"_index":2795,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["description.length",{"_index":1641,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["description.length}/2000",{"_index":1676,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["description.trim",{"_index":1639,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["description.trim().length",{"_index":1648,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["descriptioninput",{"_index":1689,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["descriptionlength",{"_index":1647,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["design",{"_index":1391,"title":{},"body":{"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["despite",{"_index":4344,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["destructive",{"_index":1255,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["detail",{"_index":2576,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["detailed",{"_index":691,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/MigrationResult.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/StorageResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["detailrow",{"_index":2578,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["details",{"_index":177,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/User.html":{},"index.html":{}}}],["detailsbutton",{"_index":3952,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["detailsbuttontext",{"_index":3953,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["detection",{"_index":271,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["determine",{"_index":256,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/SecurePersistAdapter.html":{}}}],["dev",{"_index":4342,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["dev/staging",{"_index":4119,"title":{},"body":{"classes/UploadMutex.html":{}}}],["development",{"_index":236,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ComingSoonProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["device",{"_index":4449,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":1511,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["different",{"_index":374,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CountdownTimerState.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["digit",{"_index":3292,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["digits",{"_index":2520,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["direct",{"_index":729,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"classes/LogoutManager.html":{},"classes/UploadMutex.html":{},"interfaces/User.html":{}}}],["directly",{"_index":3603,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"index.html":{}}}],["dirty",{"_index":3384,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["disable",{"_index":2209,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["disabled",{"_index":15,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/Typography.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["disabled={disabled",{"_index":2053,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["discussion",{"_index":1554,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["dismiss",{"_index":1297,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["dismissible",{"_index":913,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["dispatch",{"_index":593,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["dispatch(addtocart",{"_index":1024,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["dispatch(authapi.endpoints.logoutuser.initiate()).unwrap",{"_index":672,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["dispatch(authapi.util.resetapistate",{"_index":676,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["dispatch(clearauthstate",{"_index":3069,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["dispatch(clearcart",{"_index":1238,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["dispatch(leadsapi.util.invalidatetags(['lead",{"_index":3525,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["dispatch(loginsuccess(payload",{"_index":737,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["dispatch(logout",{"_index":617,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["dispatch(newlogout",{"_index":2944,"title":{},"body":{"classes/LogoutManager.html":{}}}],["dispatch(removeservice({serviceid",{"_index":4280,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["dispatch(restoreauth()).unwrap",{"_index":4262,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["dispatch(setauthstate({user",{"_index":3060,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["dispatch(setloading({isloading",{"_index":2963,"title":{},"body":{"classes/LogoutManager.html":{}}}],["dispatch(setuierror(error.message",{"_index":1811,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["dispatched",{"_index":811,"title":{},"body":{"interfaces/AuthState.html":{},"classes/LogoutManager.html":{},"interfaces/User.html":{}}}],["dispatches",{"_index":2918,"title":{},"body":{"classes/LogoutManager.html":{}}}],["display",{"_index":1078,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/UseKycDocsResult.html":{}}}],["displaylarge",{"_index":2309,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["displaymedium",{"_index":2311,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["displayname",{"_index":2768,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/UseKycDocsResult.html":{}}}],["displays",{"_index":2005,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/InfoTabProps.html":{}}}],["displaysmall",{"_index":2313,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["divider",{"_index":1591,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["doc",{"_index":2762,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["doc.doctype",{"_index":2792,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["docid",{"_index":2387,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["docs",{"_index":1797,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["docs/cartfunctionality.md",{"_index":4563,"title":{},"body":{"index.html":{}}}],["docs/servicescatalogue.md",{"_index":4561,"title":{},"body":{"index.html":{}}}],["docs/testing.md",{"_index":4564,"title":{},"body":{"index.html":{}}}],["docsoftype",{"_index":2790,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["docsoftype.length",{"_index":2793,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["docsoftype.sort",{"_index":2796,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["docstab",{"_index":1795,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["docstabprops",{"_index":1697,"title":{"interfaces/DocsTabProps.html":{}},"body":{"interfaces/DocsTabProps.html":{}}}],["doctype",{"_index":1730,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["document",{"_index":1728,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"classes/ValidationError.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["document.canupload",{"_index":1770,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["document.displayname",{"_index":1778,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["document.doctype",{"_index":1762,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["document.latestdoc",{"_index":1779,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["document.status",{"_index":1782,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["document_picker_canceled",{"_index":1967,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["documentation",{"_index":4481,"title":{},"body":{"index.html":{}}}],["documentcontent",{"_index":1840,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["documentheader",{"_index":1837,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["documenticon",{"_index":1756,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["documentitem",{"_index":1833,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["documentlistitem",{"_index":1747,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["documentname",{"_index":1841,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["documentpicker",{"_index":1866,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["documentpicker.pick",{"_index":1952,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["documentpickermodal",{"_index":1704,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["documentpickermodalprops",{"_index":1863,"title":{"interfaces/DocumentPickerModalProps.html":{}},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["documentrow",{"_index":2006,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["documentrowprops",{"_index":1985,"title":{"interfaces/DocumentRowProps.html":{}},"body":{"interfaces/DocumentRowProps.html":{}}}],["documents",{"_index":1579,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{}}}],["documents.filter(doc",{"_index":2791,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["documents/picker",{"_index":1867,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"dependencies.html":{}}}],["don't",{"_index":794,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["done",{"_index":2499,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["double",{"_index":1197,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["down",{"_index":2599,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["download",{"_index":2385,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"index.html":{}}}],["downloads",{"_index":4475,"title":{},"body":{"index.html":{}}}],["draft",{"_index":1335,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{},"miscellaneous/typealiases.html":{}}}],["draftlead",{"_index":1338,"title":{"interfaces/DraftLead.html":{}},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["drive",{"_index":1745,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["dropdown",{"_index":1595,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["dropdownoption",{"_index":1596,"title":{"interfaces/DropdownOption.html":{}},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["dropdownprops",{"_index":2029,"title":{"interfaces/DropdownProps.html":{}},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["due",{"_index":2721,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["dummy",{"_index":3596,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["duration={4000",{"_index":1296,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["duration={5000",{"_index":3943,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["during",{"_index":630,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["d{10",{"_index":2525,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["e",{"_index":1955,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["e.g",{"_index":169,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["e.stoppropagation",{"_index":3575,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["e0e0e0",{"_index":1302,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["each",{"_index":994,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["early",{"_index":1194,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["easier",{"_index":2381,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["easy",{"_index":1288,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/FormProviderWrapperProps.html":{}}}],["edges",{"_index":3747,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["editable={false",{"_index":2051,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["editor",{"_index":4455,"title":{},"body":{"index.html":{}}}],["effect",{"_index":3527,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["effects",{"_index":3469,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["elapsed",{"_index":4293,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["elapsedseconds",{"_index":4140,"title":{},"body":{"classes/UploadMutex.html":{}}}],["electrical",{"_index":1737,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["element",{"_index":68,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UploadResult.html":{}}}],["elevation",{"_index":1096,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["email",{"_index":495,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["emailvalue",{"_index":3361,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["emphasize",{"_index":3557,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["empty",{"_index":1177,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadResult.html":{}}}],["emptycontainer",{"_index":1325,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["emptydescription",{"_index":4083,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["emptydocsstate",{"_index":1791,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["emptyicon",{"_index":1856,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["emptylistcontainer",{"_index":4082,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["emptymessage",{"_index":1328,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{}}}],["emptystate",{"_index":3579,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["emptysubtitle",{"_index":1857,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["emptytitle",{"_index":1327,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["emulator",{"_index":4446,"title":{},"body":{"index.html":{}}}],["enable",{"_index":3399,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["enabled",{"_index":301,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["enablelogging",{"_index":230,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["enableofflinecache",{"_index":231,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["encountered",{"_index":2132,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["encrypted",{"_index":4388,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["end",{"_index":1119,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["endpoint",{"_index":191,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["endpoint.replace",{"_index":342,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["endpoints",{"_index":2437,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["energy",{"_index":1414,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["enforcement",{"_index":2475,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"index.html":{}}}],["enforces",{"_index":1016,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["enhanced",{"_index":270,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{}}}],["enhancedmethods",{"_index":2378,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["enough",{"_index":3957,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["ensure",{"_index":1674,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["ensures",{"_index":76,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["enter",{"_index":3315,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["entered",{"_index":3294,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["entire",{"_index":1050,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ServicesCartState.html":{}}}],["entity",{"_index":3091,"title":{},"body":{"interfaces/Notification.html":{}}}],["entry",{"_index":3291,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["enum",{"_index":487,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/MigrationResult.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/StorageResult.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["enumerations",{"_index":4405,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums",{"_index":4409,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["envelope",{"_index":2506,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["environment",{"_index":235,"title":{},"body":{"interfaces/ApiConfig.html":{},"classes/UploadMutex.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["environments",{"_index":259,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["environments[currentenv",{"_index":283,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["ephemeral",{"_index":1362,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["err",{"_index":1964,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/PersistenceStatus.html":{}}}],["err.api",{"_index":3921,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["err.error",{"_index":3922,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["error",{"_index":224,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["error('cannot",{"_index":3606,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error('customer",{"_index":2693,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["error('invalid",{"_index":600,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/User.html":{}}}],["error('pdf",{"_index":3608,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error('persistence",{"_index":3325,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["error('query",{"_index":2460,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["error('store",{"_index":2662,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["error('upload",{"_index":4355,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["error('useapptheme",{"_index":2345,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["error('user",{"_index":2668,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["error(message",{"_index":4130,"title":{},"body":{"classes/UploadMutex.html":{}}}],["error(response.error",{"_index":2970,"title":{},"body":{"classes/LogoutManager.html":{}}}],["error(result.error",{"_index":3547,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error).stack",{"_index":1966,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["error.capturestacktrace",{"_index":1496,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["error.capturestacktrace(this",{"_index":1497,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["error.code",{"_index":1965,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["error.data",{"_index":383,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{}}}],["error.data.error",{"_index":3688,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["error.data.error.details",{"_index":380,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error.data.error.message",{"_index":378,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error.data.message",{"_index":382,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error.data?.error",{"_index":3555,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error.data?.error?.includes('access",{"_index":3554,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error.data?.error?.includes('only",{"_index":3548,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["error.error",{"_index":539,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["error.errors",{"_index":536,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["error.message",{"_index":385,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServerError.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/User.html":{}}}],["error.retryable",{"_index":4133,"title":{},"body":{"classes/UploadMutex.html":{}}}],["error.stack",{"_index":695,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["error.status",{"_index":377,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServerError.html":{}}}],["error.statuscode",{"_index":4132,"title":{},"body":{"classes/UploadMutex.html":{}}}],["error.success",{"_index":538,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["error.ts",{"_index":523,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["error.type",{"_index":4131,"title":{},"body":{"classes/UploadMutex.html":{}}}],["error={!!error",{"_index":2052,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["error?.code",{"_index":392,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error?.data?.error",{"_index":376,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error?.data?.message",{"_index":381,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error?.message",{"_index":384,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error?.name",{"_index":390,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["error?.status",{"_index":386,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["errorboundary",{"_index":2069,"title":{"classes/ErrorBoundary.html":{}},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorboundaryprops",{"_index":2081,"title":{"interfaces/ErrorBoundaryProps.html":{}},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorboundarystate",{"_index":2097,"title":{"interfaces/ErrorBoundaryState.html":{}},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorcontainer",{"_index":1860,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["errordata",{"_index":1246,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["errordata.message",{"_index":1248,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["errordescription",{"_index":4085,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["errordetails",{"_index":2152,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorinfo",{"_index":2090,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorinfo.componentstack.split('\\n').slice(0",{"_index":2135,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errormessage",{"_index":889,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["errormessage={fieldstate.error?.message",{"_index":1277,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["errormessageprops",{"_index":924,"title":{"interfaces/ErrorMessageProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["errormessagetext",{"_index":3434,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errormessagetype",{"_index":923,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["errors",{"_index":527,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["errors.description",{"_index":1640,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["errors.email",{"_index":3391,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errors.email.message",{"_index":3392,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errors.leadid",{"_index":1633,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["errors.name",{"_index":3388,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errors.name.message",{"_index":3389,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errors.subject",{"_index":1636,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["errors/securestorageerror",{"_index":553,"title":{},"body":{"interfaces/AuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["errors/validationerror",{"_index":1875,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["errorstack",{"_index":2158,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["errorstate",{"_index":4075,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["errorsubtitle",{"_index":1862,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["errortext",{"_index":2068,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["errortitle",{"_index":1861,"title":{},"body":{"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["errortoset",{"_index":4352,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["escape",{"_index":4060,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["essential",{"_index":2580,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["estimate",{"_index":2674,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["estimated",{"_index":2670,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["estimatedduration",{"_index":2558,"title":{},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["estimateduploadtimeseconds",{"_index":2676,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["estimatekycuploadtime(file",{"_index":2759,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["estimateuploadtime",{"_index":2614,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["estimateuploadtime(file.size",{"_index":2677,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["etc",{"_index":279,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["even",{"_index":636,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["event",{"_index":2263,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{}}}],["event.lengthcomputable",{"_index":4155,"title":{},"body":{"classes/UploadMutex.html":{}}}],["event.total",{"_index":4157,"title":{},"body":{"classes/UploadMutex.html":{}}}],["everything",{"_index":4443,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":1223,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["example",{"_index":1022,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ConfirmDialogOptions.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MigrationManifest.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["exceed",{"_index":1001,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["exceeded",{"_index":2968,"title":{},"body":{"classes/LogoutManager.html":{}}}],["exceeds",{"_index":2490,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["exec",{"_index":4438,"title":{},"body":{"index.html":{}}}],["execute",{"_index":3233,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["executed",{"_index":146,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["executedleads",{"_index":1623,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["executedleads.map((lead",{"_index":1625,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["executewithlock",{"_index":2637,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["executewithlock(key",{"_index":3756,"title":{},"body":{"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{}}}],["executing",{"_index":3237,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["execution",{"_index":1560,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["exist",{"_index":2841,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["existing",{"_index":854,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/CartItem.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SasInfo.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["existingitem",{"_index":1047,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{}}}],["existingitem.qty",{"_index":1049,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["existingqty",{"_index":1008,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["exists",{"_index":687,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServicesCartState.html":{},"interfaces/User.html":{}}}],["expect",{"_index":2273,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expect(getbytestid(testid)).tobetruthy",{"_index":2272,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expect(getbytext(errormessage)).tobetruthy",{"_index":2277,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expect(querybyrole).tobedefined",{"_index":2292,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expected",{"_index":4332,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["expecterrorstate",{"_index":2275,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expectloadingstate",{"_index":2270,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["expects",{"_index":2734,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["experience",{"_index":745,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["expired",{"_index":3610,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"classes/UploadMutex.html":{}}}],["expired_token",{"_index":846,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["expires",{"_index":2717,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["expiresin",{"_index":501,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["expiresinsec",{"_index":834,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{}}}],["expiresinsec}s",{"_index":4198,"title":{},"body":{"classes/UploadMutex.html":{}}}],["expiry",{"_index":2684,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["expiry_buffer_ms",{"_index":4128,"title":{},"body":{"classes/UploadMutex.html":{}}}],["explicit",{"_index":2839,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["explicitly",{"_index":3524,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["exponential",{"_index":413,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["exponentialdelay",{"_index":421,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["export",{"_index":49,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["exports",{"_index":2380,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["exposes",{"_index":2876,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["extend",{"_index":2305,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["extendedrenderoptions",{"_index":2173,"title":{"interfaces/ExtendedRenderOptions.html":{}},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["extendedtheme",{"_index":2297,"title":{"interfaces/ExtendedTheme.html":{}},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["extends",{"_index":852,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/RNFile.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"classes/ValidationError.html":{}}}],["extension",{"_index":472,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["external",{"_index":2819,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["extra",{"_index":3567,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["extract",{"_index":2446,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["extractbaseurl(sasinfo.sasurl",{"_index":2754,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["extractbaseurl(sasurl",{"_index":2658,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["extractblobname(sasinfo.sasurl",{"_index":2753,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["extractblobname(sasurl",{"_index":2647,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["extractor",{"_index":1813,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["extraoptions",{"_index":2959,"title":{},"body":{"classes/LogoutManager.html":{}}}],["extrareducers",{"_index":773,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["f44336",{"_index":106,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["f5f5f5",{"_index":1434,"title":{},"body":{"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["f8f8f8",{"_index":2160,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["f8f9fa",{"_index":1424,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["fab",{"_index":4037,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["facebook/react",{"_index":4577,"title":{},"body":{"index.html":{}}}],["fail",{"_index":642,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["failed",{"_index":586,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StorageResult.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{}}}],["fails",{"_index":637,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["failure",{"_index":806,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["failures",{"_index":1475,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["fallback",{"_index":1230,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{}}}],["fallbacks",{"_index":4624,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["false",{"_index":73,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UIState.html":{},"classes/UploadMutex.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["fast",{"_index":4460,"title":{},"body":{"index.html":{}}}],["faster",{"_index":4479,"title":{},"body":{"index.html":{}}}],["feature",{"_index":1456,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["featurename",{"_index":1455,"title":{},"body":{"interfaces/ComingSoonProps.html":{}}}],["features",{"_index":1460,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetServicesRequest.html":{},"classes/LogoutManager.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["feedback",{"_index":3535,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["fetch",{"_index":221,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["fetch_error",{"_index":2967,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["fetchargs",{"_index":2931,"title":{},"body":{"classes/LogoutManager.html":{}}}],["fetchbasequery",{"_index":2933,"title":{},"body":{"classes/LogoutManager.html":{}}}],["fetchbasequeryerror",{"_index":2932,"title":{},"body":{"classes/LogoutManager.html":{}}}],["fetches",{"_index":2568,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["ff9800",{"_index":1425,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["ffffff",{"_index":1423,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["field",{"_index":528,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServerError.html":{},"classes/ValidationError.html":{}}}],["field.onchange(text",{"_index":1276,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["fielderrors",{"_index":1607,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{}}}],["fielderrors.description",{"_index":1670,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["fielderrors.leadid",{"_index":1662,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["fielderrors.subject",{"_index":1667,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["fielderrortext",{"_index":1690,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["fields",{"_index":1630,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"miscellaneous/typealiases.html":{}}}],["fieldscontainer",{"_index":3424,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["fieldvalues",{"_index":2359,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["file.name",{"_index":473,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["file.size",{"_index":466,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["file.type",{"_index":470,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["file.uri",{"_index":4184,"title":{},"body":{"classes/UploadMutex.html":{}}}],["file.uri.startswith('file",{"_index":4185,"title":{},"body":{"classes/UploadMutex.html":{}}}],["file_size_exceeded",{"_index":1894,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["filename",{"_index":4321,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["files",{"_index":1883,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"index.html":{}}}],["filesize",{"_index":1895,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["filetype",{"_index":4322,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["filled",{"_index":883,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["filled_placeholder",{"_index":3305,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["filter",{"_index":198,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseKycDocsResult.html":{}}}],["filtered",{"_index":4047,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["filteredquotations",{"_index":3583,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["filteredquotations.length",{"_index":3613,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["filtering",{"_index":3108,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["filtering/pagination",{"_index":3694,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["filters",{"_index":192,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["final",{"_index":4005,"title":{},"body":{"interfaces/StatusColorConfig.html":{},"classes/UploadMutex.html":{}}}],["finalized",{"_index":4004,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["finally",{"_index":1907,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceStatus.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["find",{"_index":2787,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["findlatestdocument",{"_index":2789,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["findlatestdocument(apidocuments",{"_index":2803,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["fire",{"_index":2262,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["fired",{"_index":37,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["fireevent",{"_index":2266,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["fireevent[event](element",{"_index":2268,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["fireeventandwait",{"_index":2264,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["first",{"_index":734,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["firstname",{"_index":2511,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["fix",{"_index":2937,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"index.html":{}}}],["fixed",{"_index":2774,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseKycDocsResult.html":{}}}],["flag",{"_index":258,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["flatlist",{"_index":1135,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["flex",{"_index":93,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["flexdirection",{"_index":84,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["flexgrow",{"_index":1300,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["flicker",{"_index":796,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["flow",{"_index":4341,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["flush",{"_index":3318,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["fns",{"_index":3153,"title":{},"body":{"interfaces/NotificationListItemProps.html":{},"dependencies.html":{}}}],["focus",{"_index":1185,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["focus/blur",{"_index":4029,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["focused",{"_index":3288,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/TicketsTabProps.html":{}}}],["focusedindex",{"_index":3299,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["follow",{"_index":2828,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["following",{"_index":2996,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TicketListItemProps.html":{},"index.html":{}}}],["follows",{"_index":3686,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["followupdate",{"_index":1571,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["fontconfig",{"_index":2308,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["fontfamily",{"_index":1408,"title":{},"body":{"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["fonts",{"_index":2307,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["fontsize",{"_index":974,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["fontstyle",{"_index":1321,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["fontweight",{"_index":975,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["footer",{"_index":1091,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["force",{"_index":2813,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseKycDocsResult.html":{}}}],["forcefully",{"_index":4461,"title":{},"body":{"index.html":{}}}],["forces",{"_index":3519,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["fordelete",{"_index":3792,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["fordelete(key",{"_index":3800,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["foreground",{"_index":3268,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["foregrounded",{"_index":3269,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["forlistfetch",{"_index":3824,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["forlistfetch(originalerror",{"_index":3831,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["form",{"_index":1125,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/TestWrapperProps.html":{},"dependencies.html":{}}}],["format",{"_index":431,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{}}}],["formatdisplaydate",{"_index":2565,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["formatdisplaydate(quotation.createdat",{"_index":3513,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["formatdistancetonow",{"_index":3152,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["formatdistancetonow(new",{"_index":3167,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["formatfilesize",{"_index":434,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["formatfilesize(maxsize",{"_index":468,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["formats",{"_index":375,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/LeadListItemProps.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["formatteddate",{"_index":3511,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["formatting",{"_index":3515,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["formcontainer",{"_index":1318,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{}}}],["formcontent",{"_index":3420,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formdata",{"_index":3405,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formdata.email",{"_index":3409,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formdata.name",{"_index":3408,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formigration",{"_index":3793,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["formigration(originalerror",{"_index":3802,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["formoptions",{"_index":2350,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["formprovider",{"_index":2357,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["formproviderwrapper",{"_index":1142,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formproviderwrapper's",{"_index":3416,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["formproviderwrapperprops",{"_index":2348,"title":{"interfaces/FormProviderWrapperProps.html":{}},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["forms",{"_index":1987,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["formstate",{"_index":3357,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["forread",{"_index":3794,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["forread(key",{"_index":3804,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["forservicefetch",{"_index":3825,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["forservicefetch(serviceid",{"_index":3833,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["forwrite",{"_index":3795,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["forwrite(key",{"_index":3806,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["found",{"_index":710,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/User.html":{}}}],["fresh",{"_index":2723,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{}}}],["freshsas",{"_index":2732,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["freshsas.expiresinsec}s",{"_index":2733,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["friendly",{"_index":1459,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"index.html":{}}}],["fromdate",{"_index":2398,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["fromkey",{"_index":3035,"title":{},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{}}}],["frontend",{"_index":141,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["fs",{"_index":4189,"title":{},"body":{"classes/UploadMutex.html":{},"dependencies.html":{}}}],["full",{"_index":176,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"index.html":{}}}],["fullresponse",{"_index":1236,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["fullscreen",{"_index":911,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["fullwidth",{"_index":879,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["fully",{"_index":634,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/User.html":{}}}],["function",{"_index":35,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/ButtonProps.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["functionality",{"_index":1796,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["functions",{"_index":3021,"title":{},"body":{"interfaces/MigrationManifest.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["future",{"_index":269,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ComingSoonProps.html":{}}}],["gallery",{"_index":1884,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["gap",{"_index":86,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["gb",{"_index":441,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["generate",{"_index":2471,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"index.html":{}}}],["generated",{"_index":3572,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["generic",{"_index":524,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServerError.html":{}}}],["gesture",{"_index":4391,"title":{},"body":{"dependencies.html":{}}}],["getall",{"_index":3656,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["getapibaseurl",{"_index":296,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["getapiconfig",{"_index":298,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["getappconfig",{"_index":280,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["getbytestid",{"_index":2271,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["getbytestid(testid)).tothrow",{"_index":2274,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["getbytext",{"_index":2276,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["getcurrentenvironment",{"_index":272,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["getcurrentuserid(store",{"_index":2661,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["getcurrentversion",{"_index":3025,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["getcustomerleads",{"_index":2457,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["getdefaultmiddleware",{"_index":2207,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["getderivedstatefromerror",{"_index":2078,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["getderivedstatefromerror(error",{"_index":2095,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["getdocumenticon",{"_index":1729,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["getdocumenticon(document.doctype",{"_index":1757,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["getdocumentsasrequest",{"_index":2383,"title":{"interfaces/GetDocumentSasRequest.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["getdocumentsasresponse",{"_index":2395,"title":{"interfaces/GetDocumentSasResponse.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["getformattedlastrefresh",{"_index":3643,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["getfreshsas",{"_index":835,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{}}}],["getitem",{"_index":3761,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["getitem(key",{"_index":3764,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["getitemlayout",{"_index":4073,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["getitemlayout={(data",{"_index":1825,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["getjwt",{"_index":556,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["getkycdocumentdisplayname",{"_index":2817,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["getkycuploaddebouncetime",{"_index":4358,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["getlastrefresh",{"_index":3657,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["getlastrefresh(api",{"_index":3673,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["getleadbyid",{"_index":2477,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["getleads",{"_index":2438,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["getleadsrequest",{"_index":2396,"title":{"interfaces/GetLeadsRequest.html":{}},"body":{"interfaces/GetLeadsRequest.html":{}}}],["getmessagestyle",{"_index":2983,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["getmessagestyle(message.sender",{"_index":2992,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["getnotificationicon",{"_index":3156,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["getnotificationicon(notification.type",{"_index":3171,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["getprofileresponse",{"_index":2504,"title":{"interfaces/GetProfileResponse.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["getquotationbyid",{"_index":3458,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["getquotationpdf",{"_index":3460,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["getquotationpdf(quotationid).unwrap",{"_index":3593,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["getquotations",{"_index":3451,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["getquotationsbyleadid",{"_index":3454,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["getquotationsrequest",{"_index":2527,"title":{"interfaces/GetQuotationsRequest.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["getquotationstatusconfig",{"_index":3998,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["getrelativetime",{"_index":2824,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["getrelativetime(lead.updatedat",{"_index":2868,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["getrelativetime(message.timestamp",{"_index":2993,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["getrelativetime(ticket.createdat",{"_index":4012,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["getremainingdebouncetime",{"_index":4292,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["getremainingdebouncetime(doctype",{"_index":4317,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["getrequestheaders",{"_index":360,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["getrequestheaders(token",{"_index":2954,"title":{},"body":{"classes/LogoutManager.html":{}}}],["getservicesrequest",{"_index":2555,"title":{"interfaces/GetServicesRequest.html":{}},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["getseveritycolor",{"_index":3162,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["getseveritycolor(notification.severity",{"_index":3173,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["getstageicon",{"_index":2891,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["getstagemessage",{"_index":2888,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["getstate",{"_index":646,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["getstatuscolor",{"_index":1988,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getstatuscolor(document.status",{"_index":2011,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getstatusconfig",{"_index":1720,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["getstatusconfig(document.status",{"_index":1755,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["getstatusconfig(lead.status",{"_index":2865,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["getstatusconfig(quotation.status",{"_index":3499,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["getstatusconfig(status",{"_index":3984,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["getstatusicon",{"_index":2000,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getstatusicon(document.status",{"_index":2015,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getstatustextcolor",{"_index":1997,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getstatustextcolor(document.status",{"_index":2013,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["getticketbyid",{"_index":3715,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["getticketbyidresponse",{"_index":178,"title":{"interfaces/GetTicketByIdResponse.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["gettickets",{"_index":3695,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["getticketsresponse",{"_index":180,"title":{"interfaces/GetTicketsResponse.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["getting",{"_index":3780,"title":{"index.html":{}},"body":{"classes/SecurePersistAdapter.html":{},"index.html":{}}}],["ghost",{"_index":865,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["github",{"_index":4536,"title":{},"body":{"index.html":{}}}],["given",{"_index":2788,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["global",{"_index":1809,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["goback",{"_index":2251,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["good",{"_index":723,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["graceful",{"_index":2072,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["granted",{"_index":1929,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["green",{"_index":60,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Typography.html":{}}}],["grep",{"_index":4519,"title":{},"body":{"index.html":{}}}],["grey",{"_index":1992,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["grid",{"_index":1440,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["gst",{"_index":2543,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["guarantee",{"_index":4135,"title":{},"body":{"classes/UploadMutex.html":{}}}],["guard",{"_index":1195,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["guards",{"_index":533,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["guide",{"_index":4416,"title":{},"body":{"index.html":{}}}],["guided",{"_index":4572,"title":{},"body":{"index.html":{}}}],["guidelines",{"_index":3996,"title":{},"body":{"interfaces/StatusColorConfig.html":{},"index.html":{}}}],["handle",{"_index":373,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["handleaccept",{"_index":3541,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["handleaddtocart",{"_index":3863,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["handleappstatechange",{"_index":3262,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["handlecameracapture",{"_index":1925,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["handleclearcart",{"_index":1253,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["handleclosecreateticketmodal",{"_index":4065,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["handlecreateticket",{"_index":4063,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["handled",{"_index":801,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/User.html":{}}}],["handledecrement",{"_index":3867,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handledescriptionchange",{"_index":1668,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["handledownloadpdf",{"_index":3592,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["handleemailchange",{"_index":3379,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handleemptycartredirect",{"_index":1179,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["handlefallbackrefresh",{"_index":3925,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handlefilebrowse",{"_index":1947,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["handlefilepicked",{"_index":1759,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["handleformsubmit",{"_index":3415,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handlegallerypick",{"_index":1909,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["handleincrement",{"_index":3865,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handleleadselect",{"_index":1660,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["handlelogout",{"_index":2922,"title":{},"body":{"classes/LogoutManager.html":{}}}],["handlelogout(dispatch",{"_index":2926,"title":{},"body":{"classes/LogoutManager.html":{}}}],["handlenamechange",{"_index":3375,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handlenotificationpress",{"_index":3887,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handlepersistorstatechange",{"_index":3330,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["handlepress",{"_index":2874,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["handleprofilepress",{"_index":3889,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handler",{"_index":2109,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/NewAuthState.html":{},"dependencies.html":{}}}],["handlerefresh",{"_index":1803,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["handlerefresh().catch",{"_index":3927,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handlereject",{"_index":3560,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["handleremovefromcart",{"_index":4281,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["handleremoveservice",{"_index":4283,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["handlereset",{"_index":3380,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handleretry",{"_index":3926,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handles",{"_index":1765,"title":{},"body":{"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["handleselect",{"_index":2040,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["handleselect(item.value",{"_index":2044,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["handleservicepress",{"_index":3909,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["handlesubjectchange",{"_index":1665,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["handlesubmit",{"_index":1193,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handleticketcreated",{"_index":4068,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["handleticketpress",{"_index":4057,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["handleupdatepress",{"_index":3381,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["handleupdatequantity",{"_index":4282,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["handleuploaderror",{"_index":1810,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["handleuploadpress",{"_index":1769,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["handleuploadsuccess",{"_index":1808,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["handleviewdetails",{"_index":3590,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["handling",{"_index":2073,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["hard",{"_index":4329,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["haserror",{"_index":890,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["haserror={!!fieldstate.error",{"_index":1278,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["hasnext",{"_index":324,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["haspermission",{"_index":1930,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["hasprev",{"_index":325,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["hasrun",{"_index":4271,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["hasrunref",{"_index":4255,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["hasrunref.current",{"_index":4259,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["hasuser",{"_index":698,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["hasvalidchanges",{"_index":3386,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["having",{"_index":4566,"title":{},"body":{"index.html":{}}}],["header",{"_index":1087,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["headercartbutton",{"_index":3976,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headercontainer",{"_index":3421,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["headernotificationbutton",{"_index":3977,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headerright",{"_index":3897,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headerrightcontainer",{"_index":3975,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headers",{"_index":334,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{},"interfaces/User-2.html":{}}}],["headers.authorization",{"_index":369,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["headers.set(key",{"_index":2956,"title":{},"body":{"classes/LogoutManager.html":{}}}],["headershown",{"_index":3893,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headerstyle",{"_index":3894,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headersubtitle",{"_index":3423,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["headertintcolor",{"_index":3895,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headertitle",{"_index":3422,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["headertitlestyle",{"_index":3896,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["headlinelarge",{"_index":2316,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["headlinemedium",{"_index":2317,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["headlinesmall",{"_index":2318,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["height",{"_index":1101,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["help",{"_index":4074,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["helper",{"_index":2259,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["helpertext",{"_index":888,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["helptext",{"_index":1693,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["herd",{"_index":3200,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["here",{"_index":1794,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{}}}],["hidden",{"_index":2899,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["hide",{"_index":3297,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["hidemodal",{"_index":4098,"title":{},"body":{"interfaces/UIState.html":{}}}],["high",{"_index":1568,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["higher",{"_index":3785,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["hoc",{"_index":3738,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["hook",{"_index":1160,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocView.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"dependencies.html":{}}}],["hookform/resolvers",{"_index":4371,"title":{},"body":{"dependencies.html":{}}}],["hooks",{"_index":1609,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/User-2.html":{}}}],["hooks/useactiondebounce",{"_index":3491,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["hooks/usecartactions",{"_index":961,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["hooks/usekycdocuments",{"_index":1707,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["hooks/usekycupload",{"_index":1710,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["hooks/usenewauth",{"_index":1151,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/QuotesTabProps.html":{}}}],["hooks/userefreshcontrol",{"_index":1712,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["hooks/useticketpolling",{"_index":4040,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["hooks/usetypedredux",{"_index":1149,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["hour",{"_index":4478,"title":{},"body":{"index.html":{}}}],["http",{"_index":326,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["httpmethod",{"_index":328,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["https://example.com/image.jpg",{"_index":2244,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["https://mock",{"_index":4347,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["https://storage.blob.core.windows.net/container/path/filename.ext?sas=token",{"_index":2646,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["https://truereach",{"_index":260,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["https://www.w3.org/wai/er/tests/xhtml/testfiles/resources/pdf/dummy.pdf",{"_index":3600,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["httpstatus",{"_index":2419,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/ServiceFetchError.html":{}}}],["human",{"_index":2771,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["i)).tofixed(2",{"_index":446,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["icon",{"_index":875,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{}}}],["icon=\"build",{"_index":2600,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["iconcolor",{"_index":3438,"title":{},"body":{"interfaces/ProfileIconProps.html":{}}}],["iconcontainer",{"_index":2145,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{}}}],["iconmap",{"_index":1731,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["iconmap[doctype",{"_index":1746,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["iconname",{"_index":3170,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["iconposition",{"_index":876,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["icons",{"_index":4400,"title":{},"body":{"dependencies.html":{}}}],["icons/materialicons",{"_index":1084,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["iconsize",{"_index":3137,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["id",{"_index":41,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["idempotent",{"_index":2914,"title":{},"body":{"classes/LogoutManager.html":{}}}],["identifier",{"_index":143,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["identify",{"_index":3693,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["idle",{"_index":1549,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["ids",{"_index":1565,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/TestWrapperProps.html":{}}}],["ids.length",{"_index":2978,"title":{},"body":{"classes/LogoutManager.html":{}}}],["ids.map(id",{"_index":2979,"title":{},"body":{"classes/LogoutManager.html":{}}}],["ignoring",{"_index":1200,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["image",{"_index":1474,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/RNFile.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"dependencies.html":{},"index.html":{}}}],["image/jpeg",{"_index":459,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["image/png",{"_index":460,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["image_${date.now()}.jpg",{"_index":1920,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["imagelibraryoptions",{"_index":1873,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["imagepickerresponse",{"_index":1869,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["immediate",{"_index":2720,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["immediately",{"_index":1237,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["implement",{"_index":3551,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["implementation",{"_index":2479,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"index.html":{}}}],["implemented",{"_index":3639,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["implements",{"_index":3533,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"classes/SecurePersistAdapter.html":{}}}],["import",{"_index":43,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UIState.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"index.html":{}}}],["import('@testing",{"_index":2267,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["importing",{"_index":2382,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["inaccessible",{"_index":699,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["inactive",{"_index":3266,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["include",{"_index":3631,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["includebase64",{"_index":1911,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["includes",{"_index":2761,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["includeuserdata",{"_index":3632,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["including",{"_index":1285,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["income",{"_index":2778,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["incomeproof",{"_index":1732,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["inconvenience",{"_index":2131,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["increase",{"_index":1014,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["increased",{"_index":3570,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["increases",{"_index":1018,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["increment",{"_index":3861,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["independent",{"_index":4210,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["indexable",{"_index":3004,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["indicate",{"_index":3868,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["indicates",{"_index":4001,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["indicating",{"_index":3129,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["indicator",{"_index":2279,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["indicators",{"_index":277,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"index.html":{}}}],["individual",{"_index":225,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"classes/ServiceFetchError.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["information",{"_index":692,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["infosection",{"_index":2024,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["infotab",{"_index":2579,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["infotab.styles",{"_index":2567,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["infotabprops",{"_index":2561,"title":{"interfaces/InfoTabProps.html":{}},"body":{"interfaces/InfoTabProps.html":{}}}],["infotext",{"_index":1320,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["infrastructure",{"_index":3208,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["initial",{"_index":151,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["initialdata",{"_index":3352,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata.email",{"_index":3372,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata.name",{"_index":3370,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata.phone",{"_index":3374,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata?.email",{"_index":3403,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata?.name",{"_index":3402,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialdata?.phone",{"_index":3387,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["initialize",{"_index":2364,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["initializing",{"_index":2883,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["initialnumtorender={10",{"_index":3619,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["initialnumtorender={7",{"_index":1824,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["initialstate",{"_index":563,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["initiating",{"_index":2942,"title":{},"body":{"classes/LogoutManager.html":{}}}],["input",{"_index":1017,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{}}}],["inputref",{"_index":3284,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["inputs",{"_index":3296,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["inr",{"_index":2243,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["insert",{"_index":1744,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["install",{"_index":1026,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"index.html":{}}}],["installation",{"_index":1027,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["installationfee",{"_index":2541,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["installfor",{"_index":4440,"title":{},"body":{"index.html":{}}}],["installthen",{"_index":4437,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2645,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["instanceof",{"_index":613,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["instead",{"_index":728,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["instructions",{"_index":1339,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["instructionslength",{"_index":1356,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["insufficient",{"_index":2722,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["integrates",{"_index":3207,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["integration",{"_index":658,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{},"index.html":{}}}],["integrations",{"_index":4506,"title":{},"body":{"index.html":{}}}],["interested",{"_index":1562,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["internal",{"_index":531,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ServerError.html":{}}}],["interval",{"_index":3186,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["intervalref",{"_index":4225,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["intervalref.current",{"_index":4243,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["intervals",{"_index":1545,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{}}}],["intervalwithjitter",{"_index":3231,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["invalid",{"_index":3031,"title":{},"body":{"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotesTabProps.html":{},"classes/UploadMutex.html":{}}}],["invalid_otp",{"_index":489,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["invalid_phone",{"_index":491,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["invalid_response",{"_index":848,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["invalidate",{"_index":638,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["invalidates",{"_index":3465,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["invalidatestags",{"_index":2483,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["invalidatetags",{"_index":2977,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{}}}],["invalidating",{"_index":2741,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["invalidation",{"_index":2743,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["inverters",{"_index":2548,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["ios",{"_index":4429,"title":{},"body":{"index.html":{}}}],["iosif",{"_index":4442,"title":{},"body":{"index.html":{}}}],["isaccepting",{"_index":3504,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["isactionallowed",{"_index":4229,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["isactiondisabled",{"_index":3563,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["isactive",{"_index":1527,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TimerOptions.html":{}}}],["isapierrorresponse",{"_index":2402,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["isapierrorresponse(error",{"_index":2422,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["isapiloggingenabled",{"_index":302,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["isautherror",{"_index":397,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["isbackground",{"_index":3635,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["isbackgroundrequest",{"_index":2961,"title":{},"body":{"classes/LogoutManager.html":{}}}],["isblocked",{"_index":3506,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["iscartempty",{"_index":1173,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["iscartfull",{"_index":3849,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["iscollectiverefreshing",{"_index":3883,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["iscompressibleimage",{"_index":2617,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["iscompressibleimage(file",{"_index":2701,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["iscreatinglead",{"_index":1162,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["iscreatingticket",{"_index":1615,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["iscurrentlypersisting",{"_index":3332,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["iscustomer",{"_index":2984,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["isdebounceblocked",{"_index":3507,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["isdevelopment",{"_index":292,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["isdirty",{"_index":3358,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["iserror",{"_index":2584,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["isfetching",{"_index":2585,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["isfocused",{"_index":2254,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/TestWrapperProps.html":{}}}],["isimage",{"_index":2700,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["isinprogress",{"_index":2923,"title":{},"body":{"classes/LogoutManager.html":{}}}],["isjwtkey",{"_index":3777,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["isjwtkey(key",{"_index":3781,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["isloading",{"_index":542,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UIState.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{}}}],["isloadingleads",{"_index":1611,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["islockedout",{"_index":510,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["isloggedin",{"_index":543,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/NewAuthState.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["isloggingout",{"_index":2920,"title":{},"body":{"classes/LogoutManager.html":{}}}],["isnetworkerror",{"_index":389,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["isnetworkerror(error",{"_index":402,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["iso",{"_index":158,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["isofflinecacheenabled",{"_index":305,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["isoutsidedebouncewindow",{"_index":4205,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["isoutsidedebouncewindow(lastactiontime",{"_index":4239,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["ispayloadtoolarge",{"_index":2405,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["ispayloadtoolarge(params",{"_index":2458,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["ispayloadtoolarge(payload",{"_index":2486,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["ispdfloading",{"_index":3587,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["ispersisting",{"_index":3319,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["ispolling",{"_index":3132,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["ispollingref",{"_index":3217,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["ispollingref.current",{"_index":3245,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["isprocessing",{"_index":1887,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["isproduction",{"_index":294,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["isquotationactionable",{"_index":4003,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["isquotationfinalized",{"_index":4007,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["isread",{"_index":3155,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["isrefreshing",{"_index":3624,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["isrejecting",{"_index":3505,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["isretryableerror",{"_index":401,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["isrunning",{"_index":4270,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["isrunningref",{"_index":4256,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["isrunningref.current",{"_index":4258,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["issecurestorageerror",{"_index":696,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["issendingotp",{"_index":544,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["isservererror",{"_index":537,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ServerError.html":{}}}],["isservererror(error",{"_index":2420,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["issubmitting",{"_index":1336,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["issue",{"_index":2133,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["issues",{"_index":743,"title":{},"body":{"interfaces/AuthState.html":{},"classes/LogoutManager.html":{},"interfaces/User.html":{},"index.html":{}}}],["isuploadexpired(starttime",{"_index":4139,"title":{},"body":{"classes/UploadMutex.html":{}}}],["isuploading",{"_index":1775,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["isvalid",{"_index":3383,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["isvalidationerror",{"_index":534,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ServerError.html":{}}}],["isvalidationerror(error",{"_index":2412,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["italic",{"_index":1322,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["item",{"_index":995,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["item.doctype",{"_index":1816,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["item.id",{"_index":1291,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"classes/LogoutManager.html":{}}}],["item.label",{"_index":2047,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["item.qty",{"_index":1000,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServicesCartState.html":{}}}],["item.quotationid",{"_index":3453,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["item.service.serviceid",{"_index":1226,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["item.serviceid",{"_index":3937,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["item.sublabel",{"_index":2048,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["item.ticketid",{"_index":4071,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["item.value",{"_index":2046,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["items",{"_index":182,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseCartActionsReturn.html":{},"index.html":{}}}],["items[serviceid]?.qty",{"_index":1009,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["items\\n\\nthis",{"_index":1213,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["item{cartcount",{"_index":3936,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["item{cartsummary.totalitems",{"_index":1262,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["itself",{"_index":802,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["javascript",{"_index":4419,"title":{},"body":{"index.html":{}}}],["jest.fn",{"_index":2250,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["jitter",{"_index":420,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["join",{"_index":2416,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["join('\\n",{"_index":3923,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["jpeg",{"_index":463,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["jpg",{"_index":462,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["json.parse(base64decode(token.split('.')[1",{"_index":3054,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["json.stringify(payload).substring(0",{"_index":2495,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["jsx",{"_index":67,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["jsx.element",{"_index":2363,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["justifycontent",{"_index":1118,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["jwt",{"_index":609,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{},"index.html":{}}}],["k",{"_index":436,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["kam",{"_index":137,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["kb",{"_index":439,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["keep",{"_index":3259,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["keepexif",{"_index":1500,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["keeping",{"_index":762,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["keeps",{"_index":4492,"title":{},"body":{"index.html":{}}}],["key",{"_index":353,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["keyboard",{"_index":3307,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["keyboardavoiding",{"_index":919,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{}}}],["keyboardavoidingview",{"_index":3749,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["keyboardtype",{"_index":894,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["keyextractor",{"_index":1814,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["keys",{"_index":3772,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["kyc",{"_index":1792,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"classes/ValidationError.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["kyc_document_checklist",{"_index":2776,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kyc_document_checklist.map(doctype",{"_index":2802,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kyc_document_display_names",{"_index":2777,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kyc_document_display_names[doctype",{"_index":2806,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kycapi",{"_index":2606,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["kycapi.util.invalidatetags",{"_index":2745,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["kycdoc",{"_index":2746,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["kycdocument",{"_index":2390,"title":{"interfaces/KycDocument.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kycdocumentstatus",{"_index":1717,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["kycdocumenttype",{"_index":1718,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["kycdocuploadparams",{"_index":2603,"title":{"interfaces/KycDocUploadParams.html":{}},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycdocview",{"_index":1708,"title":{"interfaces/KycDocView.html":{}},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["kycuploader",{"_index":2656,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror",{"_index":2626,"title":{"classes/KycUploadError.html":{}},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["kycuploaderror('authentication",{"_index":2695,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror('compression",{"_index":2711,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror('result_preparation",{"_index":2756,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror('sas_token",{"_index":2728,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror('upload",{"_index":2740,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["kycuploaderror('validation",{"_index":2698,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["label",{"_index":25,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["labellarge",{"_index":2325,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["labelmedium",{"_index":2326,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["labelsmall",{"_index":2327,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["labelstyle={styles.uploadbuttonlabel",{"_index":1786,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["landmarks",{"_index":1287,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["language",{"_index":2516,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["large",{"_index":870,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["last",{"_index":220,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["lastactiontime",{"_index":4227,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["lastfetched",{"_index":223,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["lastloginat",{"_index":2518,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["lastlogintime",{"_index":545,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["lastname",{"_index":2512,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["lastpollat",{"_index":3193,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["lastpollatref",{"_index":3221,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["lastpollatref.current",{"_index":3238,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["lastprogresstime",{"_index":4147,"title":{},"body":{"classes/UploadMutex.html":{}}}],["lastrefreshat",{"_index":3625,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["lastrefreshheader",{"_index":3948,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["lastrefreshtext",{"_index":3949,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["lastsubmittedat",{"_index":1337,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["lastsynctime",{"_index":936,"title":{},"body":{"interfaces/CacheState.html":{}}}],["lastupdated",{"_index":987,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["lastupload",{"_index":4290,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["later",{"_index":595,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/User.html":{}}}],["latest",{"_index":2781,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/UseKycDocsResult.html":{},"index.html":{}}}],["latestdoc",{"_index":2769,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["latestdoc?.status",{"_index":2804,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["launchcamera",{"_index":1871,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["launchcamera(options",{"_index":1945,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["launchimagelibrary",{"_index":1870,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["launchimagelibrary(options",{"_index":1913,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["layout",{"_index":2583,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{}}}],["lead",{"_index":147,"title":{"interfaces/Lead.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/SasTokenMutex.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["lead.assignedto",{"_index":2602,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["lead.customer",{"_index":2472,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead.customerid",{"_index":2468,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead.customername",{"_index":2473,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LeadListItemProps.html":{}}}],["lead.followupdate",{"_index":2601,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["lead.id",{"_index":2466,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead.leadid",{"_index":1626,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LeadListItemProps.html":{}}}],["lead.phone",{"_index":2474,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead.phone?.slice",{"_index":2470,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead.services.join(',\\n",{"_index":1629,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["lead.status",{"_index":2873,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["lead_api_error",{"_index":2424,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead_server_error",{"_index":2421,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead_unknown_error",{"_index":2430,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["lead_validation",{"_index":2417,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["leadcustomer",{"_index":1564,"title":{"interfaces/LeadCustomer.html":{}},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["leaddetail",{"_index":1597,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leaddetailrouteprop",{"_index":4592,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["leaddetailtabparamlist",{"_index":4594,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["leadicon",{"_index":4022,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["leadid",{"_index":148,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["leadidtouse",{"_index":1645,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadinfo",{"_index":4021,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["leading",{"_index":343,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["leadlistitem",{"_index":2832,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["leadlistitem.displayname",{"_index":2878,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["leadlistitem.styles",{"_index":2825,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["leadlistitemprops",{"_index":2822,"title":{"interfaces/LeadListItemProps.html":{}},"body":{"interfaces/LeadListItemProps.html":{}}}],["leadoptions",{"_index":1621,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadoptions.length",{"_index":1672,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadresponse",{"_index":1580,"title":{"interfaces/LeadResponse.html":{}},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["leads",{"_index":1620,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"miscellaneous/enumerations.html":{}}}],["leads.map((lead",{"_index":2465,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["leads/${leadid",{"_index":2478,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["leadsapi",{"_index":2190,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["leadsapi.createlead(action.payload",{"_index":1369,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["leadsapi.reducer",{"_index":2205,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["leadsapi.reducerpath",{"_index":2204,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["leadserror",{"_index":1612,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadslist",{"_index":2436,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["leadsresponse",{"_index":1610,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadsresponse?.data",{"_index":1624,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["leadstatus",{"_index":1553,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["leadtickets",{"_index":4050,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["leadtickets.length",{"_index":4077,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["learn",{"_index":4557,"title":{},"body":{"index.html":{}}}],["left",{"_index":877,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{}}}],["legacy",{"_index":759,"title":{},"body":{"interfaces/AuthState.html":{},"classes/SecureStorageError.html":{},"interfaces/User.html":{}}}],["length",{"_index":1071,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/DocsTabProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketsTabProps.html":{}}}],["length}/100",{"_index":3390,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["less",{"_index":467,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["let's",{"_index":4453,"title":{},"body":{"index.html":{}}}],["letterspacing",{"_index":3991,"title":{},"body":{"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["level",{"_index":3100,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"classes/SecurePersistAdapter.html":{}}}],["lg",{"_index":1404,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["lib/kycuploader",{"_index":4286,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["libraries",{"_index":4188,"title":{},"body":{"classes/UploadMutex.html":{}}}],["library",{"_index":2295,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["library/react",{"_index":2183,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["lifecycle",{"_index":2092,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["light",{"_index":929,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/KycDocView.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"interfaces/UseKycDocsResult.html":{}}}],["lightbill",{"_index":1736,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["limit",{"_index":188,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["limits",{"_index":4491,"title":{},"body":{"index.html":{}}}],["line",{"_index":150,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["line1",{"_index":2859,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["line2",{"_index":2860,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["lineheight",{"_index":1116,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["lines",{"_index":2855,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["linking",{"_index":3487,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["linking.openurl",{"_index":3605,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["linking.openurl(testpdfurl",{"_index":3604,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["links",{"_index":4538,"title":{},"body":{"index.html":{}}}],["lint",{"_index":4525,"title":{},"body":{"index.html":{}}}],["lint:ci",{"_index":4527,"title":{},"body":{"index.html":{}}}],["lint:fix",{"_index":4526,"title":{},"body":{"index.html":{}}}],["linting",{"_index":4524,"title":{},"body":{"index.html":{}}}],["list",{"_index":166,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/ServiceFetchError.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["list_fetch",{"_index":3842,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["list_fetch_error",{"_index":3843,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["listcontainer",{"_index":3944,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["listcontent",{"_index":1829,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["listemptycomponent",{"_index":3614,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["listemptycomponent={iserror",{"_index":4078,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["listemptycomponent={renderemptystate",{"_index":3941,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["listener",{"_index":3275,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["listheadercomponent={services.length",{"_index":3940,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["listkycdocumentsrequest",{"_index":2393,"title":{"interfaces/ListKycDocumentsRequest.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["listkycdocumentsresponse",{"_index":2394,"title":{"interfaces/ListKycDocumentsResponse.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["literal",{"_index":486,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/ColorPalette.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationDetail.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceResponse.html":{},"interfaces/TicketsState.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":1673,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["loaded",{"_index":841,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{}}}],["loaded}/${total",{"_index":4153,"title":{},"body":{"classes/UploadMutex.html":{}}}],["loader",{"_index":4623,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["loading",{"_index":16,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["loadingcontainer",{"_index":1858,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["loadingmessage",{"_index":4089,"title":{},"body":{"interfaces/UIState.html":{}}}],["loadingoverlay",{"_index":2191,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["loadingoverlaycontainer",{"_index":1144,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["loadingoverlaycontainermode",{"_index":910,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["loadingoverlaycontainerprops",{"_index":912,"title":{"interfaces/LoadingOverlayContainerProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["loadingoverlayprops",{"_index":2879,"title":{"interfaces/LoadingOverlayProps.html":{}},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["loadingspinnerprops",{"_index":927,"title":{"interfaces/LoadingSpinnerProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["loadingtext",{"_index":1859,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["local",{"_index":674,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["locally",{"_index":3098,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["location",{"_index":1289,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["lock",{"_index":2643,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["locked_out",{"_index":490,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["lockout",{"_index":1543,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["lockout_duration",{"_index":1541,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["lockout_duration_ms",{"_index":516,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["lockoutexpiresat",{"_index":511,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["locks",{"_index":2636,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["log",{"_index":284,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{}}}],["logged",{"_index":701,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/User.html":{}}}],["logging",{"_index":300,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/User.html":{}}}],["logging/analytics",{"_index":2103,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["logic",{"_index":2957,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["login",{"_index":587,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{}}}],["logindata",{"_index":3063,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["logindata.accesstoken",{"_index":3067,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["logindata.user",{"_index":3066,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["loginfailure",{"_index":772,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["loginform",{"_index":2280,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["loginrequest",{"_index":763,"title":{"interfaces/LoginRequest.html":{}},"body":{"interfaces/AuthState.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{}}}],["loginresponse",{"_index":2904,"title":{"interfaces/LoginResponse.html":{}},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/User-2.html":{}}}],["loginsuccess",{"_index":730,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["loginsuccessenhanced",{"_index":731,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["loginwithotp",{"_index":591,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["loginwithotpenhanced",{"_index":659,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["logout",{"_index":614,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{}}}],["logoutbutton",{"_index":2285,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["logoutmanager",{"_index":2912,"title":{"classes/LogoutManager.html":{}},"body":{"classes/LogoutManager.html":{}}}],["logoutpromise",{"_index":2921,"title":{},"body":{"classes/LogoutManager.html":{}}}],["logoutresponse",{"_index":2906,"title":{"interfaces/LogoutResponse.html":{}},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["logoutuser",{"_index":631,"title":{},"body":{"interfaces/AuthState.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["logoutuserenhanced",{"_index":668,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["logs",{"_index":1345,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["look",{"_index":4569,"title":{},"body":{"index.html":{}}}],["loses",{"_index":3289,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["low",{"_index":1567,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["lowercase",{"_index":2833,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["m",{"_index":4466,"title":{},"body":{"index.html":{}}}],["macos",{"_index":4469,"title":{},"body":{"index.html":{}}}],["made",{"_index":2620,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["main",{"_index":2126,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ServiceItemProps.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["maintabparamlist",{"_index":3857,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["maintabscreenprops",{"_index":4596,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["maintain",{"_index":721,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["maintains",{"_index":1492,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"classes/ValidationError.html":{}}}],["make",{"_index":3398,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"index.html":{}}}],["manage",{"_index":3097,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["management",{"_index":2915,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["manager",{"_index":2948,"title":{},"body":{"classes/LogoutManager.html":{}}}],["manages",{"_index":3122,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["mandatorily",{"_index":4331,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["manifest",{"_index":3019,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["manual",{"_index":750,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/User.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["map",{"_index":2467,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["map(([field",{"_index":2414,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["map(([key",{"_index":352,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["map(err",{"_index":3920,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["mappedprogress",{"_index":2736,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["mapping",{"_index":2829,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/StatusColorConfig.html":{}}}],["maps",{"_index":2440,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/MigrationManifest.html":{}}}],["margin",{"_index":1685,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["marginbottom",{"_index":1095,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["marginhorizontal",{"_index":3177,"title":{},"body":{"interfaces/NotificationListItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["marginleft",{"_index":1122,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["marginright",{"_index":1106,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["margintop",{"_index":1323,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["marginvertical",{"_index":1692,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["marked",{"_index":3124,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["match",{"_index":1127,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ServiceItemProps.html":{}}}],["matches",{"_index":111,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/Notification.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"index.html":{}}}],["matching",{"_index":114,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["material",{"_index":97,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/ThemeProviderProps.html":{}}}],["materialicons",{"_index":1082,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["math.abs(increment",{"_index":3917,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["math.ceil(apidata.total",{"_index":2450,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["math.ceil(remaining",{"_index":4294,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["math.ceil(remainingms",{"_index":4236,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["math.ceil(totalseconds",{"_index":2764,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["math.floor(apidata.offset",{"_index":2447,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["math.floor(math.log(bytes",{"_index":442,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["math.log(k",{"_index":443,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["math.max(...object.keys(migrations).map(number",{"_index":3026,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["math.max(0",{"_index":4235,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["math.max(1000",{"_index":3205,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["math.min(exponentialdelay",{"_index":426,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["math.min(percentage",{"_index":4138,"title":{},"body":{"classes/UploadMutex.html":{}}}],["math.pow(2",{"_index":422,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["math.pow(k",{"_index":445,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["math.random",{"_index":423,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["math.round",{"_index":2489,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["math.round((loaded",{"_index":4137,"title":{},"body":{"classes/UploadMutex.html":{}}}],["math.round(actualsize",{"_index":2493,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["math.round(delay",{"_index":3252,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["math.round(progress",{"_index":2892,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["max",{"_index":1002,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetServicesRequest.html":{},"classes/LogoutManager.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"index.html":{}}}],["max_file_size",{"_index":1881,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["max_length",{"_index":3303,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["max_otp_attempts",{"_index":514,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["max_retry_attempts",{"_index":4126,"title":{},"body":{"classes/UploadMutex.html":{}}}],["maxallowedsize",{"_index":1477,"title":{},"body":{"classes/CompressionError.html":{}}}],["maxheight",{"_index":1686,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["maxheightpx",{"_index":1501,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["maximum",{"_index":1880,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{}}}],["maxjitter",{"_index":3204,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["maxjitterms",{"_index":3203,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["maxjitterseconds",{"_index":3184,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["maxlength",{"_index":893,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["maxlength={300",{"_index":1280,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["maxretries",{"_index":2960,"title":{},"body":{"classes/LogoutManager.html":{}}}],["maxsize",{"_index":453,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["maxsizemb",{"_index":1502,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["maxtorenderperbatch={10",{"_index":3617,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["maxtorenderperbatch={7",{"_index":1821,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["maxwidth",{"_index":1467,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{}}}],["maxwidthpx",{"_index":1503,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["mb",{"_index":440,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["md",{"_index":1403,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["md3lighttheme",{"_index":2302,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["md3lighttheme.colors",{"_index":2329,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["md3theme",{"_index":2299,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["measureperformance",{"_index":2286,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["mediatype",{"_index":1872,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["medium",{"_index":869,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["meeting",{"_index":1556,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["memoized",{"_index":2367,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocView.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycDocsResult.html":{}}}],["menu",{"_index":2027,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"index.html":{}}}],["menucontent",{"_index":2064,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["menuitem",{"_index":2067,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["merge",{"_index":2900,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"index.html":{}}}],["message",{"_index":120,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationResult.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["message.message",{"_index":2994,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["message/description",{"_index":1516,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["messagebubble",{"_index":2990,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["messagebubble.displayname",{"_index":2995,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["messagebubbleprops",{"_index":2980,"title":{"interfaces/MessageBubbleProps.html":{}},"body":{"interfaces/MessageBubbleProps.html":{}}}],["messages",{"_index":154,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServerError.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["messages.join",{"_index":2415,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["messagesender",{"_index":134,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["messagestyle",{"_index":2991,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["messagetext",{"_index":3000,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["metadata",{"_index":1506,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/RNFile.html":{}}}],["method",{"_index":333,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User-2.html":{}}}],["methods",{"_index":327,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/FormProviderWrapperProps.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"miscellaneous/typealiases.html":{}}}],["methods.handlesubmit",{"_index":2376,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["metro",{"_index":4418,"title":{},"body":{"index.html":{}}}],["middleware",{"_index":2206,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["migrate",{"_index":3816,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["migrated",{"_index":3038,"title":{},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{},"miscellaneous/enumerations.html":{}}}],["migrating",{"_index":2885,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["migration",{"_index":3003,"title":{},"body":{"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"classes/SecureStorageError.html":{},"interfaces/StorageResult.html":{}}}],["migration0to1",{"_index":3008,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["migration1to2",{"_index":3013,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["migration2to3",{"_index":3023,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["migration3to4",{"_index":3024,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["migration_error",{"_index":3817,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["migrationmanifest",{"_index":3001,"title":{"interfaces/MigrationManifest.html":{}},"body":{"interfaces/MigrationManifest.html":{}}}],["migrationresult",{"_index":3033,"title":{"interfaces/MigrationResult.html":{}},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{}}}],["migrations",{"_index":3022,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["migrationstatus",{"_index":3036,"title":{},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{},"miscellaneous/enumerations.html":{}}}],["milliseconds",{"_index":4116,"title":{},"body":{"classes/UploadMutex.html":{}}}],["mime",{"_index":1878,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"index.html":{}}}],["min",{"_index":2239,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{}}}],["min_length",{"_index":3302,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["min_progress_ticks",{"_index":4124,"title":{},"body":{"classes/UploadMutex.html":{}}}],["minheight",{"_index":100,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["minimum",{"_index":79,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{}}}],["minus",{"_index":3876,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["minutes",{"_index":519,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TimerOptions.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["minwidth",{"_index":977,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["miscellaneous",{"_index":4404,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["missing",{"_index":1721,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{}}}],["mobile",{"_index":368,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["mock",{"_index":2224,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["mockapiresponse",{"_index":2246,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["mockresult",{"_index":4345,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["mocks",{"_index":4509,"title":{},"body":{"index.html":{}}}],["modal",{"_index":1583,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["modalcontainer",{"_index":1684,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["mode",{"_index":287,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["model",{"_index":3821,"title":{},"body":{"interfaces/Service.html":{}}}],["modern",{"_index":2125,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["modified",{"_index":4552,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1032,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"index.html":{}}}],["modules",{"_index":4516,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["money",{"_index":3159,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["monitor",{"_index":3329,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["monospace",{"_index":2159,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["more",{"_index":1948,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/MigrationManifest.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["mount",{"_index":3279,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["move",{"_index":2710,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["ms",{"_index":4182,"title":{},"body":{"classes/UploadMutex.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["msw",{"_index":4508,"title":{},"body":{"index.html":{}}}],["multiline",{"_index":891,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["multiple",{"_index":2917,"title":{},"body":{"classes/LogoutManager.html":{}}}],["mutation",{"_index":661,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{}}}],["mutations",{"_index":3503,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["mutex",{"_index":2632,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["n/a",{"_index":1218,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["n/a'}\\naddress",{"_index":1210,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["name",{"_index":451,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComingSoonProps.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RNFile.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["names",{"_index":2573,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["namesection",{"_index":2025,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["namevalue",{"_index":3359,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["native",{"_index":47,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"dependencies.html":{},"index.html":{}}}],["native/new",{"_index":4375,"title":{},"body":{"dependencies.html":{}}}],["nature",{"_index":3559,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["navigate",{"_index":1239,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["navigating",{"_index":4058,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["navigation",{"_index":1159,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"classes/LogoutManager.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketsTabProps.html":{},"miscellaneous/typealiases.html":{}}}],["navigation.goback",{"_index":1184,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["navigation.navigate('main",{"_index":1240,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["navigation.navigate('profile",{"_index":3890,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigation.navigate('servicedetail",{"_index":3910,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigation.navigate(cart_checkout_route",{"_index":3898,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigation.setoptions",{"_index":3892,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigation.setparams",{"_index":3907,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigation/bottom",{"_index":4377,"title":{},"body":{"dependencies.html":{}}}],["navigation/material",{"_index":4380,"title":{},"body":{"dependencies.html":{}}}],["navigation/native",{"_index":1130,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketsTabProps.html":{},"dependencies.html":{}}}],["navigation/stack",{"_index":1132,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"dependencies.html":{}}}],["navigation/types",{"_index":1153,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["navigationcontainer",{"_index":2180,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["navigationtonotiscreen",{"_index":3885,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigationtonotiscreen.navigate('notifications",{"_index":3888,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["navigator",{"_index":4061,"title":{},"body":{"interfaces/TicketsTabProps.html":{},"miscellaneous/typealiases.html":{}}}],["navigator.online",{"_index":394,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["necessary",{"_index":4275,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["need",{"_index":1763,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["needed",{"_index":1270,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/MigrationManifest.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["needs",{"_index":1935,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["needsrefresh",{"_index":2680,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["needssastokenrefresh",{"_index":2671,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["needssastokenrefresh(sasinfo",{"_index":2719,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["nestedscrollenabled={true",{"_index":2063,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["network",{"_index":388,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"classes/UploadMutex.html":{},"index.html":{}}}],["network_error",{"_index":393,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/SasInfo.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["networkerror",{"_index":391,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["networkstatus",{"_index":4090,"title":{},"body":{"interfaces/UIState.html":{}}}],["never",{"_index":1363,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/LogoutManager.html":{}}}],["new",{"_index":207,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/QuotesTabProps.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["newappdispatch",{"_index":4598,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["newauth",{"_index":2664,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NewAuthState.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["newauth/loginsuccess",{"_index":3062,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauth/logout",{"_index":3068,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauth/restore",{"_index":3045,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauth?.user",{"_index":2666,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["newauthapi",{"_index":2907,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["newauthslice",{"_index":3070,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauthslice.actions",{"_index":3080,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauthslice.reducer",{"_index":3088,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["newauthstate",{"_index":3040,"title":{"interfaces/NewAuthState.html":{}},"body":{"interfaces/NewAuthState.html":{}}}],["newduration",{"_index":1532,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["newlogout",{"_index":2935,"title":{},"body":{"classes/LogoutManager.html":{}}}],["newly",{"_index":212,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["newrootstate",{"_index":4600,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["newtokens",{"_index":650,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["newtokens.token",{"_index":654,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["newtotal",{"_index":1010,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["next",{"_index":3227,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nextappstate",{"_index":3263,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nextpollat",{"_index":3194,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nextpollatref",{"_index":3222,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nextpollatref.current",{"_index":3249,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nextpolltime",{"_index":3248,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["nice",{"_index":2751,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["non",{"_index":628,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/LogoutManager.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["none",{"_index":898,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["normal",{"_index":1411,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["normally",{"_index":4351,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["not_interested",{"_index":2851,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["not_needed",{"_index":3037,"title":{},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{},"miscellaneous/enumerations.html":{}}}],["note",{"_index":4415,"title":{},"body":{"index.html":{}}}],["notif",{"_index":3095,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["notification",{"_index":3089,"title":{"interfaces/Notification.html":{}},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["notification.isread",{"_index":3176,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["notification.message",{"_index":3175,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["notification.title",{"_index":3174,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["notificationbellicon",{"_index":3140,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["notificationbelliconprops",{"_index":3134,"title":{"interfaces/NotificationBellIconProps.html":{}},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["notificationlistitem",{"_index":3164,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["notificationlistitemprops",{"_index":3150,"title":{"interfaces/NotificationListItemProps.html":{}},"body":{"interfaces/NotificationListItemProps.html":{}}}],["notificationpolling",{"_index":3250,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["notificationpollingconfig",{"_index":3181,"title":{"interfaces/NotificationPollingConfig.html":{}},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["notificationpollingstate",{"_index":3192,"title":{"interfaces/NotificationPollingState.html":{}},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["notifications",{"_index":3104,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["notifications.filter(notification",{"_index":3147,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["notificationsapiresponse",{"_index":3105,"title":{"interfaces/NotificationsApiResponse.html":{}},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["notificationseverity",{"_index":3099,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["notificationsortby",{"_index":3114,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["notificationsortorder",{"_index":3117,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["notificationsqueryparams",{"_index":3118,"title":{"interfaces/NotificationsQueryParams.html":{}},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["notificationsstate",{"_index":3123,"title":{"interfaces/NotificationsState.html":{}},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["notificationstatus",{"_index":3109,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["notificationtype",{"_index":3101,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["notifies",{"_index":2087,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["notify",{"_index":2118,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["now",{"_index":254,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["nphone",{"_index":1208,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["npm",{"_index":4422,"title":{},"body":{"index.html":{}}}],["nservices",{"_index":1212,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["null",{"_index":164,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["nullable",{"_index":2514,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["number",{"_index":184,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["numberoflines",{"_index":892,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["numberoflines={4",{"_index":1279,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["numbers",{"_index":3020,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["numeric",{"_index":895,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["object",{"_index":493,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocView.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["object.entries(error.errors",{"_index":2413,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["object.entries(params",{"_index":348,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["object.entries(requestheaders).foreach(([key",{"_index":2955,"title":{},"body":{"classes/LogoutManager.html":{}}}],["object.entries(state.items",{"_index":996,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["object.keys(errors",{"_index":3382,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["object.keys(errors).length",{"_index":1643,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["object.keys(sanitizeddata).length",{"_index":3412,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["object.keys(state.servicescart?.items",{"_index":1070,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["object.keys(this.timestamps).foreach(key",{"_index":3679,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["object.values(items",{"_index":1061,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["object.values(items).reduce((total",{"_index":999,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["objects",{"_index":4193,"title":{},"body":{"classes/UploadMutex.html":{}}}],["occurred",{"_index":379,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{}}}],["occurs",{"_index":2094,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["official",{"_index":4575,"title":{},"body":{"index.html":{}}}],["offline",{"_index":304,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/UIState.html":{},"index.html":{}}}],["offset",{"_index":186,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["ok",{"_index":1183,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["omit",{"_index":2175,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["onaccept",{"_index":17,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["onaddtocart",{"_index":3850,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["onaddtocart(service",{"_index":3864,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["onbackground",{"_index":2337,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["onblur",{"_index":908,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["once",{"_index":1678,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["onchange",{"_index":2365,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["onchangetext",{"_index":885,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["onclose",{"_index":1584,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["oncomplete",{"_index":1536,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["oncomplete?.(result",{"_index":4263,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["ondismiss",{"_index":914,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["ondownloadpdf",{"_index":3497,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["ondownloadpdf(quotation.quotationid",{"_index":3577,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["one",{"_index":4427,"title":{},"body":{"index.html":{}}}],["onerror",{"_index":2101,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["onerror?.(error",{"_index":4265,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["ones",{"_index":3913,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["onfilepicked",{"_index":1865,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["onfilepicked(file",{"_index":1904,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["onfilepicked={handlefilepicked",{"_index":1790,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["onfocus",{"_index":907,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["onformsubmit",{"_index":2374,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["oninvalidate",{"_index":2605,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["oninvalidate(leadid",{"_index":2747,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onkeypress",{"_index":3285,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["online",{"_index":4091,"title":{},"body":{"interfaces/UIState.html":{}}}],["onpress",{"_index":873,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["onpress(lead.id",{"_index":2875,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["onpress(notification",{"_index":3165,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["onpress(service",{"_index":3872,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["onpress(ticket.ticketid",{"_index":4016,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["onpress={openmenu",{"_index":2054,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["onprimary",{"_index":2335,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["onprogress",{"_index":836,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["onprogress(10",{"_index":2705,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(100",{"_index":2755,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(20",{"_index":2708,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(30",{"_index":2712,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(40",{"_index":2724,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(90",{"_index":2739,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(95",{"_index":2749,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(calculateprogress(100",{"_index":4162,"title":{},"body":{"classes/UploadMutex.html":{}}}],["onprogress(math.round(mappedprogress",{"_index":2738,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["onprogress(progress",{"_index":4151,"title":{},"body":{"classes/UploadMutex.html":{}}}],["onquerystarted",{"_index":2484,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["onreject",{"_index":18,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["onreset",{"_index":2102,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["onsecondary",{"_index":2336,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["onselect",{"_index":2030,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["onselect(selectedvalue",{"_index":2042,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["onsubmit",{"_index":2351,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["onsubmit(data",{"_index":2371,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["onsubmit(sanitizeddata",{"_index":3414,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["onsuccess",{"_index":1585,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["onsuccess(result.ticketid",{"_index":1650,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["onsurface",{"_index":2338,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["ontick",{"_index":1537,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["ontouchstart={openmenu",{"_index":2050,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["onuploaderror",{"_index":1748,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["onuploaderror(error",{"_index":1774,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["onuploaderror?.(error",{"_index":2009,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["onuploadsuccess",{"_index":1749,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["onviewdetails",{"_index":3498,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["onviewdetails(quotation.quotationid",{"_index":3564,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["op",{"_index":1342,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["opacity",{"_index":1465,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["open",{"_index":128,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["openconfirmdialog",{"_index":1519,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{}}}],["opening",{"_index":1912,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["openmenu",{"_index":2036,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["operation",{"_index":2638,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationResult.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/StorageResult.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["operations",{"_index":641,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["optimizations",{"_index":1819,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["optimized",{"_index":2361,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["option",{"_index":2031,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["option.value",{"_index":2035,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["optional",{"_index":13,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutState.html":{},"interfaces/ComingSoonProps.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationResult.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationDetail.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshOptions.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StorageResult.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TimerOptions.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"classes/ValidationError.html":{}}}],["optionally",{"_index":4070,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["optionbutton",{"_index":1981,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["options",{"_index":452,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/ServiceFetchError.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["options.find(option",{"_index":2034,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["options.length",{"_index":2061,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["options?.httpstatus",{"_index":3840,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["options?.originalerror",{"_index":3841,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["options?.serviceid",{"_index":3838,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["optionscontainer",{"_index":1980,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["optionslist",{"_index":2065,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["order",{"_index":156,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["orders",{"_index":3116,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["organized",{"_index":2582,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["original",{"_index":3395,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["originalerror",{"_index":705,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["originalerror.message",{"_index":2629,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["originalsize",{"_index":1478,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["orphaned",{"_index":717,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["others",{"_index":598,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["otherwise",{"_index":1041,"title":{},"body":{"interfaces/CartItem.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ServicesCartState.html":{}}}],["otp",{"_index":497,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["otp_input_constants",{"_index":3300,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["otp_key_codes",{"_index":3308,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["otp_validity_ms",{"_index":521,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["otpinput",{"_index":2282,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["otpinputfieldprops",{"_index":3282,"title":{"interfaces/OTPInputFieldProps.html":{}},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["otpinputprops",{"_index":3293,"title":{"interfaces/OTPInputProps.html":{}},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["otpinputstate",{"_index":3298,"title":{"interfaces/OTPInputState.html":{}},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["otpsent",{"_index":500,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["otpservice.sendotp(phone",{"_index":577,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["out",{"_index":703,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["outline",{"_index":864,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"miscellaneous/typealiases.html":{}}}],["outlined",{"_index":882,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["outlinevariant",{"_index":2339,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["outside",{"_index":2341,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["over",{"_index":2893,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["overflow",{"_index":2898,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["overlay",{"_index":909,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["overrides",{"_index":2229,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["overview",{"_index":4562,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["owner",{"_index":2529,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["package",{"_index":4366,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pad",{"_index":896,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["padding",{"_index":921,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["paddingbottom",{"_index":1831,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["paddinghorizontal",{"_index":922,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["paddingleft",{"_index":1310,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["paddingtop",{"_index":1696,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["paddingvertical",{"_index":88,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{}}}],["page",{"_index":196,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"index.html":{}}}],["pager",{"_index":4394,"title":{},"body":{"dependencies.html":{}}}],["paginated",{"_index":179,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["paginatedrequest",{"_index":316,"title":{"interfaces/PaginatedRequest.html":{}},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["paginatedresponse",{"_index":322,"title":{"interfaces/PaginatedResponse.html":{}},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["pagination",{"_index":187,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["palette",{"_index":1388,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["pan",{"_index":1740,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["panels",{"_index":2547,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["paper",{"_index":959,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketsTabProps.html":{},"dependencies.html":{}}}],["paperprovider",{"_index":2303,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["param",{"_index":65,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DraftLead.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusColorConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{}}}],["parameter",{"_index":2621,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":190,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"classes/CompressionError.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"classes/ErrorBoundary.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"classes/ValidationError.html":{}}}],["params",{"_index":346,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"miscellaneous/typealiases.html":{}}}],["params.cpid",{"_index":3705,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["params.customerid",{"_index":3707,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["params.daterange",{"_index":3709,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["params.limit",{"_index":3701,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["params.offset",{"_index":3698,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["params.status",{"_index":3703,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["parent",{"_index":2088,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["parent's",{"_index":3385,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["parse",{"_index":371,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["parseapierror",{"_index":372,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["parseapierror(error",{"_index":2971,"title":{},"body":{"classes/LogoutManager.html":{}}}],["parsefloat((bytes",{"_index":444,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["part.trim",{"_index":2862,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["partial",{"_index":616,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["partner",{"_index":200,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["parts",{"_index":2654,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["parts.length",{"_index":2863,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["partying_face",{"_index":4553,"title":{},"body":{"index.html":{}}}],["pass",{"_index":1764,"title":{},"body":{"interfaces/DocsTabProps.html":{},"index.html":{}}}],["passed",{"_index":2697,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["passport",{"_index":2783,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["passportphoto",{"_index":1742,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["patch",{"_index":330,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"miscellaneous/typealiases.html":{}}}],["pathparts",{"_index":2649,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["pathparts.slice(2",{"_index":2652,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["pathwithoutcontainer",{"_index":2651,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["pathwithoutcontainer.join",{"_index":2655,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["pattern",{"_index":2524,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["patterns",{"_index":2362,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["pause",{"_index":1528,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["paused",{"_index":1551,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["pausing",{"_index":3273,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["payload",{"_index":118,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{}}}],["payload.email",{"_index":3057,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["payload.name",{"_index":3056,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["payload.phone",{"_index":3058,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["payload.role",{"_index":3059,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["payload.userid",{"_index":3055,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["payload_too_large",{"_index":2498,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["payloadaction",{"_index":548,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["pdf",{"_index":465,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["pdfs",{"_index":4476,"title":{},"body":{"index.html":{}}}],["pdfurl",{"_index":2554,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["pdf{'\\n",{"_index":1979,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["pending",{"_index":797,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["per",{"_index":195,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["percentage",{"_index":842,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["perform",{"_index":3550,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"index.html":{}}}],["performance",{"_index":1818,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["performance.now",{"_index":2287,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["performing",{"_index":3543,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["performrestore",{"_index":4257,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["performupload",{"_index":4144,"title":{},"body":{"classes/UploadMutex.html":{}}}],["period",{"_index":4247,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["permanent",{"_index":3558,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["permission",{"_index":1926,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["permissionsandroid",{"_index":1868,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["permissionsandroid.check",{"_index":1931,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["permissionsandroid.permissions.camera",{"_index":1932,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["permissionsandroid.request",{"_index":1934,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["permissionsandroid.results.granted",{"_index":1943,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["persist",{"_index":744,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/MigrationManifest.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["persist/integration/react",{"_index":2188,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["persist:root",{"_index":3774,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["persist_key_mapping",{"_index":3773,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["persist_key_mapping[key",{"_index":3778,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["persisted",{"_index":1364,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/MigrationManifest.html":{}}}],["persistedstate",{"_index":3005,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["persistence",{"_index":989,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ServicesCartState.html":{},"index.html":{}}}],["persistenceloadingoverlay",{"_index":2887,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["persistenceloadingprops",{"_index":2881,"title":{"interfaces/PersistenceLoadingProps.html":{}},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["persistencestatus",{"_index":3316,"title":{"interfaces/PersistenceStatus.html":{}},"body":{"interfaces/PersistenceStatus.html":{}}}],["persistencestyles",{"_index":2895,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["persistgate",{"_index":2187,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["persistor",{"_index":2217,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/TestWrapperProps.html":{}}}],["persistor.flush",{"_index":3324,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["persistor.getstate",{"_index":3331,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["persistor.subscribe(handlepersistorstatechange",{"_index":3340,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["persistor={persistor",{"_index":2219,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["persists",{"_index":1346,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["persiststore",{"_index":2186,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["persiststore(store",{"_index":2218,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["person",{"_index":1743,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["personal",{"_index":3418,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["phone",{"_index":494,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["phoneinput",{"_index":2281,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["photo",{"_index":1910,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["photo_${date.now()}.jpg",{"_index":1946,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["photograph",{"_index":2784,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["photos",{"_index":1938,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["physical",{"_index":1555,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["pick",{"_index":1950,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["picked",{"_index":1761,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["picker",{"_index":1758,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"dependencies.html":{}}}],["pincode",{"_index":562,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["pipeline",{"_index":4534,"title":{},"body":{"index.html":{}}}],["placeholder",{"_index":887,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{}}}],["plain",{"_index":3810,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["platform",{"_index":367,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaLayoutProps.html":{}}}],["platform.os",{"_index":1928,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["play",{"_index":712,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["please",{"_index":601,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/InfoTabProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["plus",{"_index":3877,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["png",{"_index":464,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"index.html":{}}}],["pod",{"_index":4439,"title":{},"body":{"index.html":{}}}],["poll",{"_index":3228,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["pollcount",{"_index":3195,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["pollcountref",{"_index":3223,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["pollcountref.current",{"_index":3239,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["pollerror",{"_index":3133,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["polling",{"_index":3130,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["pollnow",{"_index":3198,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["polyfill",{"_index":3051,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["populate",{"_index":3351,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["portal",{"_index":1589,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["position",{"_index":970,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["positioned",{"_index":3573,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["post",{"_index":123,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/User-2.html":{},"miscellaneous/typealiases.html":{}}}],["posts",{"_index":4576,"title":{},"body":{"index.html":{}}}],["powered",{"_index":4459,"title":{},"body":{"index.html":{}}}],["prefer",{"_index":2742,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["preference",{"_index":2517,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["prefilled",{"_index":4081,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["prefilledleadid",{"_index":1586,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["prefix",{"_index":904,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["preloadedstate",{"_index":2176,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["prepare",{"_index":1220,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["prepared",{"_index":3580,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["prepareheaders",{"_index":2951,"title":{},"body":{"classes/LogoutManager.html":{}}}],["preparing",{"_index":2752,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["press",{"_index":1768,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["pressable",{"_index":1701,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["pressed",{"_index":38,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["prev",{"_index":1664,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["prevent",{"_index":1196,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["preventing",{"_index":4213,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["prevents",{"_index":2916,"title":{},"body":{"classes/LogoutManager.html":{}}}],["previous",{"_index":3918,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["previousstate",{"_index":3264,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["price",{"_index":2238,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["pricecontainer",{"_index":1120,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["pricerange",{"_index":2557,"title":{},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["pricetext",{"_index":1121,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["pricing",{"_index":1092,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/ServiceItemProps.html":{}}}],["pricingfooter",{"_index":1314,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["pricingrow",{"_index":1316,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["pricingtext",{"_index":1317,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["primary",{"_index":61,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["primarybutton",{"_index":2162,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["primarybuttontext",{"_index":2164,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["primarycontainer",{"_index":2330,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["primarydark",{"_index":1394,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["primarylight",{"_index":1395,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["priority",{"_index":1566,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/TestWrapperProps.html":{}}}],["private",{"_index":2635,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["problem",{"_index":2137,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["proceeding",{"_index":4417,"title":{},"body":{"index.html":{}}}],["process",{"_index":747,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{}}}],["processed",{"_index":3447,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["processedfile",{"_index":2690,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["processing",{"_index":733,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/User.html":{}}}],["processkycdocuments",{"_index":2800,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["processkycdocuments(apiresponse?.documents",{"_index":2815,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["processselectedfile",{"_index":1899,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["processselectedfile(file",{"_index":1923,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["prod",{"_index":4121,"title":{},"body":{"classes/UploadMutex.html":{}}}],["production",{"_index":238,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["production.up.railway.app",{"_index":261,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["profile",{"_index":756,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{}}}],["profileapierror",{"_index":2526,"title":{"interfaces/ProfileApiError.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["profiledata",{"_index":2508,"title":{"interfaces/ProfileData.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["profileform",{"_index":3400,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profileformdata",{"_index":3343,"title":{"interfaces/ProfileFormData.html":{}},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profileformfields",{"_index":3353,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profileformprops",{"_index":3350,"title":{"interfaces/ProfileFormProps.html":{}},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profileicon",{"_index":3437,"title":{},"body":{"interfaces/ProfileIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["profileiconprops",{"_index":3435,"title":{"interfaces/ProfileIconProps.html":{}},"body":{"interfaces/ProfileIconProps.html":{}}}],["profilevalidation",{"_index":2523,"title":{"interfaces/ProfileValidation.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["profilevalidationrules",{"_index":3347,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profilevalidationrules.email",{"_index":3367,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["profilevalidationrules.name",{"_index":3365,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["progress",{"_index":798,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["progress.percentage",{"_index":2737,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["progress_interval_ms",{"_index":4122,"title":{},"body":{"classes/UploadMutex.html":{}}}],["progressactions",{"_index":1849,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["progressbar",{"_index":1702,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["progresscontainer",{"_index":2897,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["progresssection",{"_index":1848,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["progresstext",{"_index":1850,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["project",{"_index":4412,"title":{},"body":{"index.html":{}}}],["promise",{"_index":843,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["promise((resolve",{"_index":4145,"title":{},"body":{"classes/UploadMutex.html":{}}}],["promise(resolve",{"_index":574,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/ExtendedRenderOptions.html":{},"classes/LogoutManager.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["promise.resolve",{"_index":2940,"title":{},"body":{"classes/LogoutManager.html":{}}}],["proof",{"_index":2779,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["prop",{"_index":2370,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["proper",{"_index":52,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"classes/CompressionError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/ValidationError.html":{}}}],["properly",{"_index":724,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/User.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"properties.html":{}}}],["props",{"_index":8,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"miscellaneous/typealiases.html":{}}}],["protected",{"_index":4480,"title":{},"body":{"index.html":{}}}],["protection",{"_index":4543,"title":{},"body":{"index.html":{}}}],["provide",{"_index":1284,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{}}}],["provided",{"_index":2110,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["provider",{"_index":2185,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{}}}],["providers",{"_index":2220,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["provides",{"_index":1882,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["providestags",{"_index":2453,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["providetags",{"_index":2409,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{}}}],["providetags('lead",{"_index":2454,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["public",{"_index":1476,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UploadResult.html":{},"classes/ValidationError.html":{}}}],["pull",{"_index":1802,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["purple",{"_index":1428,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["purposes",{"_index":2356,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["push",{"_index":4545,"title":{},"body":{"index.html":{}}}],["put",{"_index":329,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["qty",{"_index":981,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["qtytoadd",{"_index":1005,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["quality",{"_index":1504,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/RNFile.html":{},"index.html":{}}}],["quantities",{"_index":4560,"title":{},"body":{"index.html":{}}}],["quantity",{"_index":1015,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"index.html":{}}}],["quantitybutton",{"_index":3966,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantitybuttonleft",{"_index":3967,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantitybuttonright",{"_index":3970,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantitycontainer",{"_index":1112,"title":{},"body":{"interfaces/CartItemRowProps.html":{}}}],["quantitycontrolsblock",{"_index":3965,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantitydisplay",{"_index":3973,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantitylabel",{"_index":1114,"title":{},"body":{"interfaces/CartItemRowProps.html":{}}}],["quantitytext",{"_index":3974,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["quantityvalue",{"_index":1115,"title":{},"body":{"interfaces/CartItemRowProps.html":{}}}],["query",{"_index":189,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"index.html":{}}}],["query's",{"_index":3521,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["querybyrole",{"_index":2289,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["queryfulfilled",{"_index":2485,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["quick",{"_index":4486,"title":{},"body":{"index.html":{}}}],["quotation",{"_index":1267,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["quotation.createdat",{"_index":3516,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotation.quotationid",{"_index":3509,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotation.quotationid.split",{"_index":3518,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotation.status",{"_index":3502,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotation_status_colors",{"_index":3997,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["quotation_status_colors.draft",{"_index":4000,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["quotation_status_colors[status",{"_index":3999,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["quotationactionresponse",{"_index":3439,"title":{"interfaces/QuotationActionResponse.html":{}},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotationactiontimestamps",{"_index":4211,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["quotationactiontimestamps.get(quotationid",{"_index":4228,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["quotationactiontimestamps.set(quotationid",{"_index":4240,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["quotationcomponent",{"_index":2537,"title":{"interfaces/QuotationComponent.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["quotationdetail",{"_index":2545,"title":{"interfaces/QuotationDetail.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["quotationid",{"_index":2534,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["quotationlistitem",{"_index":2533,"title":{"interfaces/QuotationListItem.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["quotationpdf",{"_index":3450,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotationpdfresponse",{"_index":2553,"title":{"interfaces/QuotationPdfResponse.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["quotationpricing",{"_index":2539,"title":{"interfaces/QuotationPricing.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["quotations",{"_index":1576,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["quotations.filter(quotation",{"_index":3585,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotations/${quotationid",{"_index":3459,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotations/${quotationid}/accept",{"_index":3474,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotations/${quotationid}/pdf",{"_index":3461,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotations/${quotationid}/reject",{"_index":3477,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotationsapi",{"_index":3448,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotationslist",{"_index":3449,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["quotationslistresponse",{"_index":2552,"title":{"interfaces/QuotationsListResponse.html":{}},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["quotationstatus",{"_index":2530,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{},"miscellaneous/typealiases.html":{}}}],["quotationtitle",{"_index":3517,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quote",{"_index":3495,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quoted",{"_index":1396,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["quoted/discussion",{"_index":1429,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["quoteitem",{"_index":3496,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotestab",{"_index":3523,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["quotestabprops",{"_index":3485,"title":{"interfaces/QuotesTabProps.html":{}},"body":{"interfaces/QuotesTabProps.html":{}}}],["r",{"_index":4462,"title":{},"body":{"index.html":{}}}],["radio",{"_index":2003,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["radius",{"_index":1450,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["random",{"_index":419,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["range",{"_index":204,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UploadResult.html":{}}}],["rapid",{"_index":3534,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["re",{"_index":2294,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["reached",{"_index":2965,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/ServiceItemProps.html":{}}}],["react",{"_index":44,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"dependencies.html":{},"index.html":{}}}],["react.componenttype",{"_index":3740,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["react.fc",{"_index":72,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["react.memo",{"_index":2864,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["react.reactnode",{"_index":2215,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{}}}],["react.refobject",{"_index":3286,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["react.usecallback(async",{"_index":2595,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["react.useeffect",{"_index":1889,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["react.usememo",{"_index":3512,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["reactelement",{"_index":2184,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["reactnode",{"_index":861,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["read",{"_index":3093,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/SecureStorageError.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["read_error",{"_index":3813,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["readable",{"_index":2772,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["readat",{"_index":3115,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["reader",{"_index":4471,"title":{},"body":{"index.html":{}}}],["readers",{"_index":4013,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["readids",{"_index":3127,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["readidset",{"_index":3145,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["readidset.has(notification.id",{"_index":3148,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["readonly",{"_index":1077,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"classes/CompressionError.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"classes/ValidationError.html":{}}}],["readonlyfieldcontainer",{"_index":3425,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["readonlyhelper",{"_index":3430,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["readonlyicon",{"_index":3428,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["readonlylabel",{"_index":3426,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["readonlyvalue",{"_index":3429,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["readonlyvaluecontainer",{"_index":3427,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["ready",{"_index":2726,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["real",{"_index":248,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["reason",{"_index":709,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User.html":{}}}],["receipt",{"_index":3158,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["received",{"_index":3609,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["recent",{"_index":4539,"title":{},"body":{"index.html":{}}}],["record",{"_index":227,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServerError.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["recover",{"_index":2134,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["recovery",{"_index":990,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["recreates",{"_index":2369,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["red",{"_index":63,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["redirect",{"_index":1178,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["redirects",{"_index":3731,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["reducer",{"_index":1073,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{}}}],["reducerpath",{"_index":2434,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["reducers",{"_index":749,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["redux",{"_index":213,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PersistenceLoadingProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["reduxjs/toolkit",{"_index":549,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["reduxjs/toolkit/query",{"_index":2934,"title":{},"body":{"classes/LogoutManager.html":{}}}],["reduxjs/toolkit/query/react",{"_index":2401,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["reduxtoken",{"_index":685,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["ref",{"_index":3287,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["reference",{"_index":2902,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["referral",{"_index":1570,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["refetch",{"_index":1798,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["refetchonmountorargchange",{"_index":2814,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["reflect",{"_index":4458,"title":{},"body":{"index.html":{}}}],["reflected",{"_index":3520,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["refresh",{"_index":643,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["refresh/refreshtypes",{"_index":3191,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["refreshableapi",{"_index":3622,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"miscellaneous/enumerations.html":{}}}],["refreshableapi.auth",{"_index":3659,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.kyc",{"_index":3665,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.leads",{"_index":3661,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.notifications",{"_index":3666,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.quotations",{"_index":3663,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.services",{"_index":3660,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.single_lead",{"_index":3662,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.single_quotation",{"_index":3664,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshableapi.tickets",{"_index":3667,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshall",{"_index":3641,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["refreshcontrol",{"_index":1700,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["refreshcount",{"_index":3626,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshed",{"_index":655,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{}}}],["refreshed_refresh_${date.now",{"_index":652,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["refreshed_token_${date.now",{"_index":651,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["refreshedapis",{"_index":3236,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["refresherror",{"_index":3620,"title":{"interfaces/RefreshError.html":{}},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["refreshes",{"_index":3634,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["refreshhookreturn",{"_index":3640,"title":{"interfaces/RefreshHookReturn.html":{}},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshing",{"_index":1805,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["refreshkyc",{"_index":1800,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshleaddata",{"_index":3522,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["refreshleads",{"_index":3645,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshnotifications",{"_index":3215,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshoptions",{"_index":3629,"title":{"interfaces/RefreshOptions.html":{}},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshprogress",{"_index":3627,"title":{"interfaces/RefreshProgress.html":{}},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshquotations",{"_index":3510,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshresult",{"_index":3190,"title":{"interfaces/RefreshResult.html":{}},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["refreshsinglelead",{"_index":2593,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshsinglelead(leadid",{"_index":2597,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["refreshsinglequotation",{"_index":3647,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshspecific",{"_index":3642,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshstate",{"_index":3623,"title":{"interfaces/RefreshState.html":{}},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["refreshtickets",{"_index":3649,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["refreshtimestamps",{"_index":3651,"title":{"classes/RefreshTimestamps.html":{}},"body":{"classes/RefreshTimestamps.html":{}}}],["refreshtoken",{"_index":505,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["refreshtokenthunk",{"_index":644,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["register",{"_index":3354,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["register('email",{"_index":3366,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["register('name",{"_index":3364,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["register('phone",{"_index":3368,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["registry",{"_index":3335,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["regular",{"_index":1409,"title":{},"body":{"interfaces/ColorPalette.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["rehydrating",{"_index":2884,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["rehydration",{"_index":4251,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["reject",{"_index":39,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AuthState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/User.html":{}}}],["reject(error",{"_index":4163,"title":{},"body":{"classes/UploadMutex.html":{}}}],["rejectbutton",{"_index":104,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["rejectbuttontext",{"_index":109,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["rejected",{"_index":1725,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["rejectedat",{"_index":2551,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["rejecting",{"_index":3561,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["rejection",{"_index":3475,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["rejectlabel",{"_index":19,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["rejectquotation",{"_index":3476,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["rejectquotation(quotation.quotationid).unwrap",{"_index":3562,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["rejectwithvalue",{"_index":569,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["rejectwithvalue('failed",{"_index":746,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["rejectwithvalue('no",{"_index":648,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["rejectwithvalue('secure",{"_index":623,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["rejectwithvalue(error.message",{"_index":585,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["related",{"_index":4410,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["relative",{"_index":2877,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["relativetime",{"_index":2867,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["relaxed",{"_index":1412,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["relevant",{"_index":3466,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["reload",{"_index":2084,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"index.html":{}}}],["reloadapp",{"_index":2074,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["reloading",{"_index":2120,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["remaining",{"_index":2653,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["remainingms",{"_index":4233,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["remainingseconds",{"_index":4209,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["remainingseconds}s",{"_index":4318,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["remainingsecs",{"_index":4234,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["remains",{"_index":720,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["remarks",{"_index":1573,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["remember",{"_index":4431,"title":{},"body":{"index.html":{}}}],["remove",{"_index":338,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UploadResult.html":{}}}],["removeclippedsubviews={true",{"_index":1820,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["removed",{"_index":1353,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/SecurePersistAdapter.html":{}}}],["removefromcart",{"_index":1046,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["removefromcart(service.serviceid",{"_index":3916,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["removeitem",{"_index":3762,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["removeitem(key",{"_index":3766,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["removes",{"_index":1039,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["removeservice",{"_index":1052,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["removing",{"_index":3789,"title":{},"body":{"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{}}}],["render",{"_index":1256,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["render(ui",{"_index":2223,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["rendercartitem",{"_index":1257,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["rendercartsummary",{"_index":1258,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["rendercontent",{"_index":3754,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["rendercustomerinfo",{"_index":1263,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["renderdefaultfallback",{"_index":2079,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["renderdocumentitem",{"_index":1812,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["renderemptystate",{"_index":3932,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["rendererrormessage",{"_index":3417,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["rendererrorstate",{"_index":3934,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["renderformsection",{"_index":1271,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["renderheader",{"_index":3935,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["renderitem={rendercartitem",{"_index":1292,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["renderitem={renderserviceitem",{"_index":3938,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["renderloadingstate",{"_index":3933,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["renderoption",{"_index":2043,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["renderoptions",{"_index":2182,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["renderpricingfooter",{"_index":1266,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["renderquotationitem",{"_index":3612,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["renders",{"_index":51,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["renderserviceitem",{"_index":3929,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["renderticketitem",{"_index":4072,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["renderwithproviders",{"_index":2221,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["renderwithproviders(component",{"_index":2290,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["reopen",{"_index":3721,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["reopening",{"_index":3684,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["reopenticket",{"_index":3722,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["reopenticketrequest",{"_index":3682,"title":{"interfaces/ReopenTicketRequest.html":{}},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["replace",{"_index":594,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/User.html":{}}}],["replaced",{"_index":1347,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["report",{"_index":4511,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":2114,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["repository",{"_index":4544,"title":{},"body":{"index.html":{}}}],["request",{"_index":117,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["request/response",{"_index":477,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["request?\\n\\ncustomer",{"_index":1206,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["requestconfig",{"_index":332,"title":{"interfaces/RequestConfig.html":{}},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["requested",{"_index":2121,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["requestheaders",{"_index":2953,"title":{},"body":{"classes/LogoutManager.html":{}}}],["requesting",{"_index":1933,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["requestkycsasparams",{"_index":2713,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["requestkycsastoken",{"_index":2608,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["requestkycsastoken(requestkycsasparams",{"_index":2715,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["requests",{"_index":2507,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["requestsastokenrequest",{"_index":2388,"title":{"interfaces/RequestSasTokenRequest.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadResult.html":{}}}],["requireauth",{"_index":3730,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["required",{"_index":1274,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["requiredtimeseconds",{"_index":2679,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["required{'\\n",{"_index":1677,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["requirements",{"_index":1268,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"index.html":{}}}],["requires",{"_index":395,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["reschedule",{"_index":3258,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["rescheduling",{"_index":3257,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["resend",{"_index":1540,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["resend_cooldown_ms",{"_index":520,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["resend_duration",{"_index":1539,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["reset",{"_index":675,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["resetbutton",{"_index":3432,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["resetcartstate",{"_index":1054,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["resetcheckoutstate",{"_index":1374,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["reseterror",{"_index":2075,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["resetstate",{"_index":4310,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["resetting",{"_index":2117,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["resizer",{"_index":4369,"title":{},"body":{"dependencies.html":{}}}],["resolve",{"_index":2945,"title":{},"body":{"classes/LogoutManager.html":{},"classes/UploadMutex.html":{}}}],["resolve(false",{"_index":1520,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["resolve(true",{"_index":1521,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["resolve(undefined",{"_index":2964,"title":{},"body":{"classes/LogoutManager.html":{}}}],["resolvedcustomerid",{"_index":2810,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["resolves",{"_index":1517,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{},"classes/UploadMutex.html":{}}}],["resolving",{"_index":2687,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotationActionResponse.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["resources",{"_index":4570,"title":{},"body":{"index.html":{}}}],["respect",{"_index":3213,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["respects",{"_index":3254,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["responding",{"_index":1561,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["response",{"_index":133,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["response.assets?.[0",{"_index":1917,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["response.data",{"_index":2443,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{}}}],["response.data.items",{"_index":2461,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["response.didcancel",{"_index":1914,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["response.errormessage",{"_index":1915,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["response.success",{"_index":2442,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{}}}],["response?.success",{"_index":2969,"title":{},"body":{"classes/LogoutManager.html":{}}}],["responses",{"_index":2245,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/TestWrapperProps.html":{},"miscellaneous/typealiases.html":{}}}],["restart",{"_index":635,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"interfaces/User.html":{}}}],["restarts",{"_index":4474,"title":{},"body":{"index.html":{}}}],["restoration",{"_index":684,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/User.html":{}}}],["restoration_error",{"_index":726,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["restore",{"_index":677,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/User.html":{}}}],["restoreauth",{"_index":3044,"title":{},"body":{"interfaces/NewAuthState.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["restoreauthstate",{"_index":681,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["restoring",{"_index":2889,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["restructure",{"_index":3012,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["result",{"_index":662,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationResult.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StorageResult.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["result.data",{"_index":2590,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["result.data.data",{"_index":2589,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["result.data?.leadid",{"_index":1235,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["result.data?.success",{"_index":2588,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["result.errors",{"_index":3919,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["result.errors.length",{"_index":3242,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["result.items",{"_index":3712,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["result.items.map(ticket",{"_index":3713,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["result.leadid",{"_index":1234,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["result.map(item",{"_index":2974,"title":{},"body":{"classes/LogoutManager.html":{}}}],["result.name",{"_index":1959,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["result.pdfurl",{"_index":3594,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["result.refreshedapis.length",{"_index":3241,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["result.size",{"_index":1963,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["result.success",{"_index":3240,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["result.ticketid",{"_index":1649,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["result.token",{"_index":665,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["result.type",{"_index":1960,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["result.uri",{"_index":1958,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["result?.data",{"_index":2455,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["result?.items.map(item",{"_index":3452,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["result?.map(item",{"_index":3457,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["results",{"_index":113,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["results[0",{"_index":1957,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["resume",{"_index":1529,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{}}}],["resuming",{"_index":3270,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["retries",{"_index":232,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["retrieve",{"_index":690,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["retrieved",{"_index":3783,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["retry",{"_index":411,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"index.html":{}}}],["retryable",{"_index":400,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{}}}],["retryablestatuses",{"_index":403,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["retryablestatuses.includes(error?.status",{"_index":409,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["retrybutton",{"_index":3950,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["retrybuttontext",{"_index":3951,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["retrydelay",{"_index":233,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["return",{"_index":74,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/ServerError.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["returned",{"_index":3341,"title":{},"body":{"interfaces/ProfileData.html":{}}}],["returns",{"_index":66,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ConfirmDialogOptions.html":{},"classes/ErrorBoundary.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/StatusColorConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["returntype",{"_index":2179,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"miscellaneous/typealiases.html":{}}}],["reuse",{"_index":3866,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["rgba(0",{"_index":1435,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["rgba(0,0,0,0.05",{"_index":1113,"title":{},"body":{"interfaces/CartItemRowProps.html":{}}}],["right",{"_index":878,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["rnfile",{"_index":838,"title":{"interfaces/RNFile.html":{}},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/RNFile.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["rnrestart",{"_index":2122,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["role",{"_index":175,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["rolebasedguard",{"_index":3734,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["rolebasedguardprops",{"_index":3728,"title":{"interfaces/RoleBasedGuardProps.html":{}},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["rooftype",{"_index":2546,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["root",{"_index":3775,"title":{},"body":{"classes/SecurePersistAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["rootstackparamlist",{"_index":1152,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["rootstackscreenprops",{"_index":3858,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"miscellaneous/typealiases.html":{}}}],["rootstate",{"_index":2192,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["rough",{"_index":2673,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["round",{"_index":1451,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["route",{"_index":2256,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["route.params",{"_index":3908,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["route.params?.showsuccessmessage",{"_index":3902,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["route.params?.successmessage",{"_index":3903,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["routeprop",{"_index":3852,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["row",{"_index":85,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["rtk",{"_index":657,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["ruby",{"_index":4435,"title":{},"body":{"index.html":{}}}],["rules",{"_index":3363,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotationActionResponse.html":{},"index.html":{}}}],["run",{"_index":4261,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{},"index.html":{}}}],["running",{"_index":1776,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["s",{"_index":1260,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{}}}],["s3",{"_index":1348,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["safe",{"_index":713,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/User.html":{},"dependencies.html":{}}}],["safeareacontainer",{"_index":1141,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["safeareacontainerprops",{"_index":917,"title":{"interfaces/SafeAreaContainerProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["safearealayout",{"_index":3752,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["safearealayoutprops",{"_index":3745,"title":{"interfaces/SafeAreaLayoutProps.html":{}},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["safeareaview",{"_index":3751,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["safety",{"_index":702,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["same",{"_index":3419,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ServiceItemProps.html":{}}}],["sanitization",{"_index":3404,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["sanitize",{"_index":3406,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["sanitized",{"_index":3410,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["sanitizeddata",{"_index":3407,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["sanitizeprofiledata",{"_index":3348,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["sas",{"_index":2386,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["sasinfo",{"_index":839,"title":{"interfaces/SasInfo.html":{}},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{}}}],["sasinfo.expiresinsec",{"_index":2681,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sasinfo.expiresinsec}s",{"_index":2718,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sasinfo.sasurl",{"_index":2735,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sastokenmutex",{"_index":2634,"title":{"classes/SasTokenMutex.html":{}},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sastokenmutex.executewithlock",{"_index":2731,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sastokenresponse",{"_index":2389,"title":{"interfaces/SasTokenResponse.html":{}},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["sasurl",{"_index":837,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{}}}],["sasurl.split('?')[0",{"_index":2660,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["save",{"_index":612,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["saved",{"_index":610,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["savejwt",{"_index":554,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["savejwt(logindata.accesstoken",{"_index":3064,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["savejwt(payload.token",{"_index":735,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["savejwt(result.token",{"_index":666,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["savejwt(token",{"_index":607,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["savejwt(value",{"_index":3786,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["saves",{"_index":727,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["saving",{"_index":3397,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["scale",{"_index":1438,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["scenario",{"_index":3540,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["scenarios",{"_index":3537,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["schedule",{"_index":2002,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["schedulenextpoll",{"_index":3244,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["scheduling",{"_index":3251,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["scheme",{"_index":1390,"title":{},"body":{"interfaces/ColorPalette.html":{}}}],["screen",{"_index":1157,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"dependencies.html":{},"index.html":{}}}],["screens",{"_index":3737,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"dependencies.html":{}}}],["scrollable",{"_index":920,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/TextInputProps.html":{}}}],["scrollcontent",{"_index":1299,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/SafeAreaLayoutProps.html":{}}}],["scrollenabled={false",{"_index":1293,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["scrollview",{"_index":1137,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{}}}],["search",{"_index":317,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["searchparams",{"_index":356,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{}}}],["searchparams.append('cpid",{"_index":3706,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.append('customerid",{"_index":3708,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.append('daterange",{"_index":3710,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.append('limit",{"_index":3700,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.append('offset",{"_index":3697,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.append('status",{"_index":3704,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["searchparams.tostring",{"_index":358,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["second",{"_index":425,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["secondary",{"_index":64,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["secondarybutton",{"_index":2165,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["secondarybuttontext",{"_index":2167,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["secondarycontainer",{"_index":2333,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["secondarydark",{"_index":1397,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["secondarylight",{"_index":1398,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["seconds",{"_index":430,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["secondsleft",{"_index":1530,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["secrets",{"_index":4547,"title":{},"body":{"index.html":{}}}],["section",{"_index":1269,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/InfoTabProps.html":{},"index.html":{}}}],["sectiontitle",{"_index":1319,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["secure",{"_index":589,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/User.html":{},"index.html":{}}}],["secure_storage_error",{"_index":704,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["securepersistadapter",{"_index":3758,"title":{"classes/SecurePersistAdapter.html":{}},"body":{"classes/SecurePersistAdapter.html":{}}}],["securestorageerror",{"_index":552,"title":{"classes/SecureStorageError.html":{}},"body":{"interfaces/AuthState.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/User.html":{}}}],["securetextentry",{"_index":903,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["securetoken",{"_index":688,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["security",{"_index":3111,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["security:audit",{"_index":4531,"title":{},"body":{"index.html":{}}}],["security:auditsee",{"_index":4523,"title":{},"body":{"index.html":{}}}],["see",{"_index":4445,"title":{},"body":{"index.html":{}}}],["select",{"_index":1634,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"index.html":{}}}],["selectactivemodal",{"_index":4106,"title":{},"body":{"interfaces/UIState.html":{}}}],["selectautherror",{"_index":826,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["selectauthloading",{"_index":3085,"title":{},"body":{"interfaces/NewAuthState.html":{},"interfaces/RoleBasedGuardProps.html":{}}}],["selectcacheddata",{"_index":950,"title":{},"body":{"interfaces/CacheState.html":{}}}],["selectcartcount",{"_index":1062,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["selectcartisempty",{"_index":1066,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["selectcartitembyid",{"_index":1064,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["selectcartitems",{"_index":1057,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["selectcartitemsarray",{"_index":1059,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ServicesCartState.html":{}}}],["selectcartlastupdated",{"_index":1067,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["selectcheckoutdraft",{"_index":1376,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["selectcurrentuser",{"_index":828,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["selected",{"_index":1890,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["selectedfile",{"_index":4489,"title":{},"body":{"index.html":{}}}],["selectedleadid",{"_index":1600,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["selectedleadid.trim",{"_index":1632,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["selectedoption",{"_index":2033,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["selectedvalue",{"_index":2041,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["selectfromresult",{"_index":2587,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["selecthasdraft",{"_index":1384,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["selection",{"_index":1659,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["selectiscartfull",{"_index":1072,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["selectisloading",{"_index":818,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["selectisloggedin",{"_index":816,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/User.html":{}}}],["selectissendingotp",{"_index":820,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["selectissubmitting",{"_index":1378,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["selectlastsubmittedat",{"_index":1382,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["selectlastsynctime",{"_index":952,"title":{},"body":{"interfaces/CacheState.html":{}}}],["selectloadingmessage",{"_index":4104,"title":{},"body":{"interfaces/UIState.html":{}}}],["selectnetworkstatus",{"_index":4108,"title":{},"body":{"interfaces/UIState.html":{}}}],["selectnewauth",{"_index":2610,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NewAuthState.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["selectnewauth(state",{"_index":2665,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["selectors",{"_index":815,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UIState.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{}}}],["selectsubmissionerror",{"_index":1380,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["selectsyncinprogress",{"_index":954,"title":{},"body":{"interfaces/CacheState.html":{}}}],["selectticketsbyleadid",{"_index":4041,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["selecttoken",{"_index":824,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["selectuniqueitemscount",{"_index":1069,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["selectuser",{"_index":822,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["send",{"_index":496,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["sender",{"_index":130,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["sendotprequest",{"_index":498,"title":{"interfaces/SendOtpRequest.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["sendotpresponse",{"_index":499,"title":{"interfaces/SendOtpResponse.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["sendotpthunk",{"_index":567,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["sends",{"_index":3464,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["sent",{"_index":582,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["sentences",{"_index":899,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["separated",{"_index":2572,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["separately",{"_index":1578,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/MigrationManifest.html":{}}}],["serializablecheck",{"_index":2208,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["serialization",{"_index":3126,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["server",{"_index":529,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/AuthState.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServerError.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["server_error",{"_index":492,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["servererror",{"_index":532,"title":{"interfaces/ServerError.html":{}},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["service",{"_index":982,"title":{"interfaces/Service.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["service.description",{"_index":1090,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["service.name",{"_index":1088,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["service.pricerange",{"_index":1093,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["service.serviceid",{"_index":1029,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{}}}],["service.type",{"_index":1089,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["service?.name",{"_index":2570,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["service_error",{"_index":3836,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["service_fetch",{"_index":3844,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["service_fetch_error",{"_index":3845,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["servicedescription",{"_index":3947,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["servicedetailrouteprop",{"_index":4611,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["servicefetcherror",{"_index":1146,"title":{"classes/ServiceFetchError.html":{}},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/ServiceFetchError.html":{}}}],["servicefetcherror(error.error",{"_index":2423,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["servicefooter",{"_index":3954,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["serviceheader",{"_index":3945,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["serviceicon",{"_index":3946,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["serviceid",{"_index":1004,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["serviceids",{"_index":1224,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/InfoTabProps.html":{}}}],["serviceids.map((serviceid",{"_index":2575,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["serviceinfo",{"_index":1107,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["serviceitem",{"_index":3862,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["serviceitemprops",{"_index":3846,"title":{"interfaces/ServiceItemProps.html":{}},"body":{"interfaces/ServiceItemProps.html":{}}}],["servicename",{"_index":1108,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["serviceresponse",{"_index":2559,"title":{"interfaces/ServiceResponse.html":{}},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["services",{"_index":1181,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/InfoTabProps.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TestWrapperProps.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["services:\\n",{"_index":1628,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["servicesapi",{"_index":2189,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["servicesapi.reducer",{"_index":2203,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["servicesapi.reducerpath",{"_index":2202,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["servicescart",{"_index":1013,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["servicescartslice",{"_index":1012,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServicesCartState.html":{}}}],["servicescartslice.actions",{"_index":1056,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["servicescartslice.reducer",{"_index":1074,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["servicescartstate",{"_index":985,"title":{"interfaces/ServicesCartState.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["servicescount",{"_index":1358,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["serviceslist",{"_index":2574,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["servicesscreen",{"_index":3878,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["servicesscreennavigationprop",{"_index":3859,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["servicesscreenrouteprop",{"_index":3860,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["servicetype",{"_index":1111,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["session",{"_index":622,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{},"index.html":{}}}],["set",{"_index":618,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"classes/LogoutManager.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/RefreshTimestamps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServicesCartState.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["set(readids",{"_index":3146,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["setauthstate",{"_index":3065,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["setcacheddata",{"_index":939,"title":{},"body":{"interfaces/CacheState.html":{}}}],["setcreateticketmodalvisible",{"_index":4046,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["setcreateticketmodalvisible(false",{"_index":4066,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["setcreateticketmodalvisible(true",{"_index":4064,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["setdescription",{"_index":1603,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setdescription(text",{"_index":1669,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["seterror",{"_index":1604,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/UIState.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["seterror('camera",{"_index":1944,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["seterror('failed",{"_index":1906,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["seterror('file",{"_index":1897,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["seterror(error",{"_index":3327,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["seterror(errormessage",{"_index":1658,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["seterror(errortoset",{"_index":4356,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["seterror(new",{"_index":4314,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["seterror(null",{"_index":1617,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PersistenceStatus.html":{}}}],["seterror(undefined",{"_index":4309,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["seterror(validationerror.message",{"_index":1896,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["setfielderrors",{"_index":1608,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setfielderrors(errors",{"_index":1642,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setfielderrors(prev",{"_index":1663,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setinterval",{"_index":4245,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setisblocked",{"_index":4222,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setisblocked(blocked",{"_index":4230,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setisblocked(false",{"_index":4248,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setisblocked(true",{"_index":4241,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setispersisting",{"_index":3321,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["setispersisting(false",{"_index":3328,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["setispersisting(iscurrentlypersisting",{"_index":3337,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["setispersisting(true",{"_index":3322,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["setisprocessing",{"_index":1888,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["setisprocessing(false",{"_index":1908,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["setisprocessing(true",{"_index":1900,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["setitem",{"_index":3763,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["setitem(key",{"_index":3768,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["setlastrefresh",{"_index":3658,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["setlastrefresh(api",{"_index":3675,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["setloading",{"_index":752,"title":{},"body":{"interfaces/AuthState.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["setnetworkstatus",{"_index":4099,"title":{},"body":{"interfaces/UIState.html":{}}}],["setoptions",{"_index":2253,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["setparams",{"_index":2252,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["setprogress",{"_index":4298,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setprogress(0",{"_index":4324,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setprogress(100",{"_index":4338,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setprogress(null",{"_index":4308,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setprogress(percentage",{"_index":4335,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setremainingseconds",{"_index":4223,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setremainingseconds(0",{"_index":4238,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setremainingseconds(debounceseconds",{"_index":4242,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setremainingseconds(remainingsecs",{"_index":4237,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["setresult",{"_index":4300,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setresult(mockresult",{"_index":4349,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setresult(undefined",{"_index":4312,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setresult(uploadresult",{"_index":4339,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setselectedleadid",{"_index":1601,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setselectedleadid(leadid",{"_index":1661,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setselectedleadid(prefilledleadid",{"_index":1618,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setshowpicker",{"_index":1751,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["setshowpicker(false",{"_index":1789,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["setshowpicker(true",{"_index":1772,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["setsnackbarmessage",{"_index":1169,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["setsnackbarmessage(message",{"_index":1189,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["setsnackbarvisible",{"_index":1166,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["setsnackbarvisible(false",{"_index":1186,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["setsnackbarvisible(true",{"_index":1190,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["setstatus",{"_index":4296,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstatus('cancelled",{"_index":4307,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstatus('error",{"_index":4315,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstatus('idle",{"_index":4311,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstatus('running",{"_index":4323,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstatus('success",{"_index":4337,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["setstorageitem",{"_index":558,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["setstorageitem(storage_keys.auth_token",{"_index":653,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["setsubject",{"_index":1602,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setsubject(text",{"_index":1666,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["setsubmissionerror",{"_index":1372,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["setsubmitting",{"_index":1370,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["setsuccessmessage",{"_index":3881,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["setsuccessmessage(route.params.successmessage",{"_index":3904,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["setsuccesssnackbarvisible",{"_index":3880,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["setsuccesssnackbarvisible(false",{"_index":3942,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["setsuccesssnackbarvisible(true",{"_index":3905,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["setsyncinprogress",{"_index":946,"title":{},"body":{"interfaces/CacheState.html":{}}}],["setsynctime",{"_index":945,"title":{},"body":{"interfaces/CacheState.html":{}}}],["settimeout",{"_index":2943,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["settimeout(async",{"_index":3253,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["settimeout(resolve",{"_index":575,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/User.html":{}}}],["setting",{"_index":3401,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/SecurePersistAdapter.html":{}}}],["settings",{"_index":3160,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["setuierror",{"_index":1713,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["setup",{"_index":3274,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["setupteststore",{"_index":2199,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["setupteststore(preloadedstate",{"_index":2222,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["setvalue",{"_index":3355,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["setvalue('email",{"_index":3371,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["setvalue('name",{"_index":3369,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["setvalue('phone",{"_index":3373,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["setvisible",{"_index":2032,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["setvisible(false",{"_index":2039,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["setvisible(true",{"_index":2037,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["severities",{"_index":3113,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["severity",{"_index":3094,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["severitycolor",{"_index":3172,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["shadow",{"_index":1446,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["shadowcolor",{"_index":1097,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["shadowoffset",{"_index":1099,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["shadowopacity",{"_index":1102,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["shadowradius",{"_index":1104,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["shadows",{"_index":1447,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["shape",{"_index":3121,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["shared",{"_index":2531,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/Service.html":{},"interfaces/StatusColorConfig.html":{},"miscellaneous/typealiases.html":{}}}],["sharedat",{"_index":2549,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["shell",{"_index":4518,"title":{},"body":{"index.html":{}}}],["shouldcompressfile(file",{"_index":2757,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["shoulddirty",{"_index":3378,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["shouldshowacceptreject",{"_index":3501,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["shouldshowloading",{"_index":4076,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["shouldvalidate",{"_index":3377,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["show",{"_index":33,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["showcharactercount",{"_index":906,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["showerror",{"_index":1187,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["showerror(errormessage",{"_index":1249,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["showerroralert",{"_index":3928,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["showing",{"_index":3906,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["showloading",{"_index":3630,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ServiceItemProps.html":{}}}],["showmessage",{"_index":4067,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["showmessage(`ticket",{"_index":4069,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["showmodal",{"_index":4096,"title":{},"body":{"interfaces/UIState.html":{}}}],["showpicker",{"_index":1750,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["showquantitycontrols",{"_index":3871,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["shows",{"_index":1458,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TicketsTabProps.html":{},"index.html":{}}}],["showsuccess",{"_index":1191,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["showsuccessmessage",{"_index":1241,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{}}}],["showsverticalscrollindicator={false",{"_index":1294,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["showuploadbutton",{"_index":1777,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["side",{"_index":670,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/User.html":{}}}],["signal",{"_index":4171,"title":{},"body":{"classes/UploadMutex.html":{}}}],["silently",{"_index":3788,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["similar",{"_index":2123,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/QuotesTabProps.html":{}}}],["simple",{"_index":3043,"title":{},"body":{"interfaces/NewAuthState.html":{},"index.html":{}}}],["simplified",{"_index":1126,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"classes/UploadMutex.html":{}}}],["simply",{"_index":1344,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["simulate",{"_index":571,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["simulating",{"_index":4343,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["simulator",{"_index":4447,"title":{},"body":{"index.html":{}}}],["simultaneously",{"_index":4216,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["single",{"_index":2577,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["single_lead",{"_index":3636,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"miscellaneous/enumerations.html":{}}}],["single_quotation",{"_index":3637,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"miscellaneous/enumerations.html":{}}}],["singleserviceresponse",{"_index":2560,"title":{"interfaces/SingleServiceResponse.html":{}},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["singleton",{"_index":3653,"title":{},"body":{"classes/RefreshTimestamps.html":{},"classes/SecurePersistAdapter.html":{}}}],["siteaddress",{"_index":2857,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["size",{"_index":432,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/RNFile.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"index.html":{}}}],["sizemb",{"_index":2702,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sizemb.tofixed(2",{"_index":2704,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["sizes",{"_index":438,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["sizes[i",{"_index":447,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["skip",{"_index":2709,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{}}}],["skipped",{"_index":3255,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["skipping",{"_index":3235,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["slash",{"_index":340,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["slice",{"_index":214,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["sm",{"_index":1402,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["small",{"_index":868,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["smart",{"_index":2683,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["snackbar",{"_index":1138,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["snackbarmessage",{"_index":1168,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["snackbarvisible",{"_index":1165,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["snapshot",{"_index":1351,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["solar",{"_index":1025,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/Service.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SpacingScale.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Typography.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["solarium",{"_index":1413,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{},"miscellaneous/typealiases.html":{}}}],["something",{"_index":2127,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["soon",{"_index":1464,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/QuotesTabProps.html":{}}}],["sort",{"_index":2794,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/UseKycDocsResult.html":{},"miscellaneous/typealiases.html":{}}}],["sortby",{"_index":318,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["sortorder",{"_index":319,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["space",{"_index":1694,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["spacing",{"_index":77,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["spacing.lg",{"_index":2143,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["spacing.md",{"_index":1830,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["spacing.sm",{"_index":1839,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/TicketListItemProps.html":{}}}],["spacing.xl",{"_index":1832,"title":{},"body":{"interfaces/DocsTabProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["spacing.xs",{"_index":1834,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["spacingscale",{"_index":1400,"title":{"interfaces/SpacingScale.html":{}},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["spec",{"_index":1222,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["special",{"_index":4268,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["specialized",{"_index":2886,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["specific",{"_index":850,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/CartItem.html":{},"interfaces/DocsTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/SasInfo.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UseKycDocsResult.html":{},"index.html":{}}}],["specified",{"_index":1043,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["spinner",{"_index":925,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["spinnercolor",{"_index":915,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["spinnersize",{"_index":926,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["split",{"_index":2853,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["splitaddress",{"_index":2858,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["splitaddress(lead.address",{"_index":2866,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["src/.../apihelpers.ts",{"_index":4590,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../auth.ts",{"_index":4406,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../azureblob.ts",{"_index":4617,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cartcheckoutscreen.tsx",{"_index":4588,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../components.ts",{"_index":4587,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../documentsscreen.tsx",{"_index":4604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environments.ts",{"_index":4589,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../helpscreen.tsx",{"_index":4605,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../homescreen.tsx",{"_index":4606,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../index.ts",{"_index":4583,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../kycdocument.ts",{"_index":4591,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../kycservice.ts",{"_index":4615,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../lead.ts",{"_index":4595,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../leaddetailtabnavigator.tsx",{"_index":4593,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../loginscreen.tsx",{"_index":4602,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../myrecordsscreen.tsx",{"_index":4607,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../newstore.ts",{"_index":4599,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../notification.ts",{"_index":4601,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../notificationsscreen.tsx",{"_index":4608,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../otpverificationscreen.tsx",{"_index":4603,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../quotation.ts",{"_index":4610,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../refreshtypes.ts",{"_index":4408,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../servicedetailscreen.tsx",{"_index":4612,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../servicesscreen.tsx",{"_index":4613,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../storage.ts",{"_index":4407,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../ticket.ts",{"_index":4597,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ticketthreadscreen.tsx",{"_index":4609,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../timer.ts",{"_index":4616,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../types.ts",{"_index":4585,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../usekycupload.ts",{"_index":4618,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/api/basequery.ts",{"_index":2913,"title":{},"body":{"classes/LogoutManager.html":{}}}],["src/api/basequery.ts:33",{"_index":2924,"title":{},"body":{"classes/LogoutManager.html":{}}}],["src/api/basequery.ts:34",{"_index":2925,"title":{},"body":{"classes/LogoutManager.html":{}}}],["src/api/basequery.ts:36",{"_index":2928,"title":{},"body":{"classes/LogoutManager.html":{}}}],["src/api/basequery.ts:68",{"_index":2929,"title":{},"body":{"classes/LogoutManager.html":{}}}],["src/api/endpoints/leads.ts",{"_index":2397,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["src/api/endpoints/newauth.ts",{"_index":2903,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["src/api/endpoints/quotations.ts",{"_index":3440,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["src/api/endpoints/tickets.ts",{"_index":3683,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["src/api/kycservice.ts",{"_index":4637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/components/cart/cartitemrow/cartitemrow.tsx",{"_index":1076,"title":{},"body":{"interfaces/CartItemRowProps.html":{}}}],["src/components/common/cartbadge/cartbadge.tsx",{"_index":957,"title":{},"body":{"interfaces/CartBadgeProps.html":{}}}],["src/components/common/dropdown/dropdown.tsx",{"_index":2026,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["src/components/common/notificationbellicon/notificationbellicon.tsx",{"_index":3135,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["src/components/common/profileicon.tsx",{"_index":3436,"title":{},"body":{"interfaces/ProfileIconProps.html":{}}}],["src/components/common/statusbadge/statusbadge.tsx",{"_index":3982,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["src/components/feedback/errorboundary.tsx",{"_index":2070,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["src/components/feedback/errorboundary.tsx:103",{"_index":2099,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:165",{"_index":2098,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:33",{"_index":2082,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:42",{"_index":2096,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:52",{"_index":2091,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:75",{"_index":2086,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/errorboundary.tsx:94",{"_index":2083,"title":{},"body":{"classes/ErrorBoundary.html":{}}}],["src/components/feedback/loadingoverlay.tsx",{"_index":2880,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["src/components/forms/documentpickermodal.tsx",{"_index":1864,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["src/components/forms/formproviderwrapper.tsx",{"_index":2349,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["src/components/forms/profileform.tsx",{"_index":3344,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["src/components/kyc/documentrow.tsx",{"_index":1986,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["src/components/layout/safearealayout.tsx",{"_index":3746,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["src/components/leads/leadlistitem/leadlistitem.tsx",{"_index":2823,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["src/components/modals/createticketmodal.tsx",{"_index":1582,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["src/components/notifications/notificationlistitem.tsx",{"_index":3151,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["src/components/quotes/acceptrejectbuttons.tsx",{"_index":6,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["src/components/tickets/messagebubble.tsx",{"_index":2981,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["src/components/tickets/ticketlistitemcomponent.tsx",{"_index":4009,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["src/config/environments.ts",{"_index":229,"title":{},"body":{"interfaces/ApiConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/constants/quotestatus.ts",{"_index":3995,"title":{},"body":{"interfaces/StatusColorConfig.html":{}}}],["src/errors/compressionerror.ts",{"_index":1472,"title":{},"body":{"classes/CompressionError.html":{}}}],["src/errors/compressionerror.ts:7",{"_index":1484,"title":{},"body":{"classes/CompressionError.html":{}}}],["src/errors/compressionerror.ts:8",{"_index":1485,"title":{},"body":{"classes/CompressionError.html":{}}}],["src/errors/compressionerror.ts:9",{"_index":1482,"title":{},"body":{"classes/CompressionError.html":{}}}],["src/errors/securestorageerror.ts",{"_index":3791,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:32",{"_index":3805,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:44",{"_index":3807,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:56",{"_index":3801,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:68",{"_index":3803,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:7",{"_index":3798,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:8",{"_index":3799,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:80",{"_index":3809,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/securestorageerror.ts:9",{"_index":3797,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["src/errors/servicefetcherror.ts",{"_index":3823,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:10",{"_index":3828,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:11",{"_index":3826,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:40",{"_index":3832,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:55",{"_index":3834,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:7",{"_index":3827,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:71",{"_index":3835,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:8",{"_index":3829,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/servicefetcherror.ts:9",{"_index":3830,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["src/errors/validationerror.ts",{"_index":4359,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/errors/validationerror.ts:7",{"_index":4361,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/errors/validationerror.ts:8",{"_index":4362,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/errors/validationerror.ts:9",{"_index":4360,"title":{},"body":{"classes/ValidationError.html":{}}}],["src/hooks/useactiondebounce.ts",{"_index":4200,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["src/hooks/useauthrestore.ts",{"_index":4250,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["src/hooks/usecartactions.ts",{"_index":4273,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["src/hooks/usekycdocuments.ts",{"_index":2765,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["src/hooks/usekycupload.ts",{"_index":4285,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["src/hooks/usenotificationpolling.ts",{"_index":3182,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["src/hooks/usepersistencestatus.ts",{"_index":3317,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["src/hooks/useticketpolling.ts",{"_index":4027,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["src/lib/kycuploader",{"_index":4487,"title":{},"body":{"index.html":{}}}],["src/lib/kycuploader.ts",{"_index":2604,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["src/lib/kycuploader.ts:49",{"_index":2821,"title":{},"body":{"classes/KycUploadError.html":{}}}],["src/lib/kycuploader.ts:50",{"_index":2820,"title":{},"body":{"classes/KycUploadError.html":{}}}],["src/lib/kycuploader.ts:64",{"_index":3755,"title":{},"body":{"classes/SasTokenMutex.html":{}}}],["src/lib/kycuploader.ts:66",{"_index":3757,"title":{},"body":{"classes/SasTokenMutex.html":{}}}],["src/navigation/rolebasedguard.tsx",{"_index":3729,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["src/navigation/types.ts",{"_index":4620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/refresh/refreshtypes.ts",{"_index":3621,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"miscellaneous/enumerations.html":{}}}],["src/screens/auth/loginscreen.tsx",{"_index":4628,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/auth/otpverificationscreen.tsx",{"_index":4629,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/cartcheckoutscreen.tsx",{"_index":1124,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"miscellaneous/typealiases.html":{}}}],["src/screens/main/documentsscreen.tsx",{"_index":4630,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/helpscreen.tsx",{"_index":4631,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/homescreen.tsx",{"_index":4632,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/leaddetail/comingsoon.tsx",{"_index":1454,"title":{},"body":{"interfaces/ComingSoonProps.html":{}}}],["src/screens/main/leaddetail/docstab.tsx",{"_index":1698,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["src/screens/main/leaddetail/infotab.tsx",{"_index":2562,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["src/screens/main/leaddetail/leaddetailtabnavigator.tsx",{"_index":4625,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/leaddetail/quotestab.tsx",{"_index":3486,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["src/screens/main/leaddetail/ticketstab.tsx",{"_index":4036,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["src/screens/main/myrecordsscreen.tsx",{"_index":4633,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/notificationsscreen.tsx",{"_index":4634,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/servicedetailscreen.tsx",{"_index":4636,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/screens/main/servicesscreen.tsx",{"_index":3847,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["src/screens/main/ticketthreadscreen.tsx",{"_index":4635,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/store/authslice.ts",{"_index":541,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["src/store/cacheslice.ts",{"_index":934,"title":{},"body":{"interfaces/CacheState.html":{}}}],["src/store/checkoutslice.ts",{"_index":1334,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["src/store/index.ts",{"_index":4619,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/store/migrations.ts",{"_index":3002,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["src/store/migrations.ts:11",{"_index":3006,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["src/store/newauthslice.ts",{"_index":3041,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["src/store/newstore.ts",{"_index":4627,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/store/securepersistadapter.ts",{"_index":3759,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["src/store/securepersistadapter.ts:36",{"_index":3765,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["src/store/securepersistadapter.ts:69",{"_index":3769,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["src/store/securepersistadapter.ts:98",{"_index":3767,"title":{},"body":{"classes/SecurePersistAdapter.html":{}}}],["src/store/servicescartslice.ts",{"_index":979,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["src/store/uislice.ts",{"_index":4087,"title":{},"body":{"interfaces/UIState.html":{}}}],["src/theme/palette.ts",{"_index":1387,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["src/theme/themeprovider.tsx",{"_index":2298,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["src/types/api",{"_index":522,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/ServerError.html":{}}}],["src/types/auth.ts",{"_index":485,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/enumerations.html":{}}}],["src/types/azureblob.ts",{"_index":830,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/components.ts",{"_index":856,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/file.ts",{"_index":1499,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/RNFile.html":{}}}],["src/types/kycdocument.ts",{"_index":2384,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/lead.ts",{"_index":1552,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/notification.ts",{"_index":3090,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/otpinput.ts",{"_index":3283,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{}}}],["src/types/profile.ts",{"_index":2505,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["src/types/quotation.ts",{"_index":2528,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/service.ts",{"_index":2556,"title":{},"body":{"interfaces/GetServicesRequest.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{}}}],["src/types/storage.ts",{"_index":3034,"title":{},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{},"miscellaneous/enumerations.html":{}}}],["src/types/ticket.ts",{"_index":116,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["src/types/timer.ts",{"_index":1524,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/apihelpers.ts",{"_index":308,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/azureblobuploader.ts",{"_index":4111,"title":{},"body":{"classes/UploadMutex.html":{},"index.html":{}}}],["src/utils/azureblobuploader.ts:38",{"_index":4113,"title":{},"body":{"classes/UploadMutex.html":{}}}],["src/utils/azureblobuploader.ts:40",{"_index":4114,"title":{},"body":{"classes/UploadMutex.html":{}}}],["src/utils/imagecompression.ts",{"_index":4483,"title":{},"body":{"index.html":{}}}],["src/utils/kycvalidation.ts",{"_index":4482,"title":{},"body":{"index.html":{}}}],["src/utils/openconfirmdialog.ts",{"_index":1510,"title":{},"body":{"interfaces/ConfirmDialogOptions.html":{}}}],["src/utils/refreshtimestamps.ts",{"_index":3652,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/refreshtimestamps.ts:12",{"_index":3668,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/refreshtimestamps.ts:27",{"_index":3674,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/refreshtimestamps.ts:34",{"_index":3676,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/refreshtimestamps.ts:42",{"_index":3669,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/refreshtimestamps.ts:51",{"_index":3672,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["src/utils/testutils.tsx",{"_index":2174,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["stack",{"_index":694,"title":{},"body":{"interfaces/AuthState.html":{},"classes/CompressionError.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/User.html":{},"classes/ValidationError.html":{},"miscellaneous/typealiases.html":{}}}],["stacknavigationprop",{"_index":1131,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"miscellaneous/typealiases.html":{}}}],["stackscreenprops",{"_index":4621,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stage",{"_index":2882,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["stageicon",{"_index":2896,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["staging",{"_index":237,"title":{},"body":{"interfaces/ApiConfig.html":{},"miscellaneous/typealiases.html":{}}}],["stale",{"_index":2748,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["standard",{"_index":2426,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{}}}],["start",{"_index":1838,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["started",{"_index":4411,"title":{"index.html":{}},"body":{"index.html":{}}}],["startimmediately",{"_index":3185,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["starting",{"_index":683,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["startpolling",{"_index":3196,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["starts",{"_index":4221,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["startstep",{"_index":4424,"title":{},"body":{"index.html":{}}}],["starttime",{"_index":4141,"title":{},"body":{"classes/UploadMutex.html":{}}}],["startup",{"_index":678,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["startupload",{"_index":1752,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["startupload(document.doctype",{"_index":1767,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["state",{"_index":34,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UIState.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["state._persist",{"_index":3011,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["state.activemodal",{"_index":4097,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.auth",{"_index":647,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/MigrationManifest.html":{},"interfaces/User.html":{}}}],["state.auth.error",{"_index":827,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.auth.isloading",{"_index":819,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.auth.isloggedin",{"_index":817,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.auth.issendingotp",{"_index":821,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.auth.token",{"_index":825,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.auth.user",{"_index":823,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/MigrationManifest.html":{},"interfaces/User.html":{}}}],["state.auth?.user",{"_index":3028,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["state.cache.cacheddata",{"_index":951,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.cache.lastsynctime",{"_index":953,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.cache.syncinprogress",{"_index":955,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.cacheddata",{"_index":943,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.cacheddata[action.payload.key",{"_index":940,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.checkout.draft",{"_index":1377,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.checkout.error",{"_index":1381,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.checkout.issubmitting",{"_index":1379,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.checkout.lastsubmittedat",{"_index":1383,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.draft",{"_index":1365,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.error",{"_index":755,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/NewAuthState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["state.isloading",{"_index":753,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/UIState.html":{},"interfaces/User.html":{}}}],["state.isloggedin",{"_index":764,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["state.issendingotp",{"_index":776,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.issubmitting",{"_index":1371,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.items",{"_index":992,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.items[serviceid",{"_index":1033,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.items[serviceid].qty",{"_index":1034,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.items[serviceid].service",{"_index":1035,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.lastlogintime",{"_index":770,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.lastsubmittedat",{"_index":1366,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["state.lastsynctime",{"_index":944,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.lastupdated",{"_index":1037,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.loadingmessage",{"_index":4094,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.networkstatus",{"_index":4100,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.newauth",{"_index":3081,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth.error",{"_index":3087,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth.isloading",{"_index":3086,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth.isloggedin",{"_index":3082,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth.token",{"_index":3084,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth.user",{"_index":3083,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["state.newauth?.token",{"_index":2952,"title":{},"body":{"classes/LogoutManager.html":{}}}],["state.notifications?.readids",{"_index":3143,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["state.refreshtoken",{"_index":767,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["state.registry",{"_index":3336,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["state.registry.length",{"_index":3333,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["state.servicescart?.items",{"_index":1058,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.servicescart?.items[serviceid",{"_index":1065,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.servicescart?.lastupdated",{"_index":1068,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.servicescart?.totalitems",{"_index":1063,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.syncinprogress",{"_index":947,"title":{},"body":{"interfaces/CacheState.html":{}}}],["state.token",{"_index":765,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["state.totalitems",{"_index":993,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["state.ui.activemodal",{"_index":4107,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.ui.isloading",{"_index":4103,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.ui.loadingmessage",{"_index":4105,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.ui.networkstatus",{"_index":4109,"title":{},"body":{"interfaces/UIState.html":{}}}],["state.user",{"_index":758,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/User.html":{}}}],["states",{"_index":3581,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["static",{"_index":2077,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["status",{"_index":153,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ColorPalette.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationResult.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/ServerError.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["status.tolowercase",{"_index":2831,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["status=executed",{"_index":209,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["statusbadge",{"_index":3983,"title":{},"body":{"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["statusbadge.displayname",{"_index":3985,"title":{},"body":{"interfaces/StatusBadgeProps.html":{}}}],["statusbadgeprops",{"_index":3981,"title":{"interfaces/StatusBadgeProps.html":{}},"body":{"interfaces/StatusBadgeProps.html":{}}}],["statusbar",{"_index":3750,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["statusbarstyle",{"_index":3748,"title":{},"body":{"interfaces/SafeAreaLayoutProps.html":{}}}],["statuschip",{"_index":1843,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["statuscode",{"_index":853,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SasInfo.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{}}}],["statuscolor",{"_index":2010,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["statuscolorconfig",{"_index":3994,"title":{"interfaces/StatusColorConfig.html":{}},"body":{"interfaces/StatusColorConfig.html":{}}}],["statusconfig",{"_index":1754,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["statuses",{"_index":3107,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{},"miscellaneous/typealiases.html":{}}}],["statusicon",{"_index":2014,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["statuslower",{"_index":2830,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('accepted",{"_index":2843,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('customer",{"_index":2842,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('discussion",{"_index":2837,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('executed",{"_index":2847,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('meeting",{"_index":2838,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('new",{"_index":2834,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('not",{"_index":2849,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statuslower.includes('won",{"_index":2846,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["statusmessage",{"_index":1854,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["statustext",{"_index":1845,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["statustextcolor",{"_index":2012,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["step",{"_index":2625,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["steps",{"_index":2758,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["still",{"_index":640,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/User.html":{}}}],["stop",{"_index":1531,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{}}}],["stopped",{"_index":3256,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["stopping",{"_index":3261,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["stoppolling",{"_index":3197,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["storage",{"_index":590,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"classes/RefreshTimestamps.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/StorageResult.html":{},"classes/UploadMutex.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["storage.blob.core.windows.net/kyc",{"_index":4348,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["storage/async",{"_index":3771,"title":{},"body":{"classes/SecurePersistAdapter.html":{},"dependencies.html":{}}}],["storage/securestorage",{"_index":557,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/NewAuthState.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/User.html":{}}}],["storage_error",{"_index":3811,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["storage_keys",{"_index":559,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["storageerror",{"_index":611,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["storageresult",{"_index":3039,"title":{"interfaces/StorageResult.html":{}},"body":{"interfaces/MigrationResult.html":{},"interfaces/StorageResult.html":{}}}],["store",{"_index":606,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store.dispatch",{"_index":2744,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["store.getstate",{"_index":2663,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["store/authslice",{"_index":2194,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["store/cacheslice",{"_index":2196,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["store/newauthslice",{"_index":2611,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["store/servicescartslice",{"_index":1085,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["store/ticketsslice",{"_index":4042,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["store/uislice",{"_index":1714,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"classes/LogoutManager.html":{},"interfaces/TestWrapperProps.html":{}}}],["stored",{"_index":3125,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"classes/SecurePersistAdapter.html":{}}}],["storeref",{"_index":4327,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["storetype",{"_index":4614,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["str",{"_index":3048,"title":{},"body":{"interfaces/NewAuthState.html":{}}}],["strategies",{"_index":4565,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":4485,"title":{},"body":{"index.html":{}}}],["stream",{"_index":1962,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["street",{"_index":2232,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["string",{"_index":21,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["string(value",{"_index":354,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["structure",{"_index":125,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileData.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["stub",{"_index":1343,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["studio",{"_index":4451,"title":{},"body":{"index.html":{}}}],["style",{"_index":859,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{}}}],["style={({pressed",{"_index":3565,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["style={[styles.statuschip",{"_index":2016,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["style={styles.menuitem",{"_index":2045,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["style={styles.optionslist",{"_index":2062,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["style={styles.snackbar",{"_index":1298,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["style={styles.uploadbutton",{"_index":1784,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["styles",{"_index":75,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["styles.emptylistcontainer",{"_index":4079,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["styles.listcontainer",{"_index":4080,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["styles.textinput",{"_index":2055,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["stylesheet",{"_index":46,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["stylesheet.create",{"_index":83,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["stylesloadingoverlayoriginal",{"_index":2894,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{}}}],["styling",{"_index":62,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["subject",{"_index":149,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["subject.length",{"_index":1637,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["subject.length}/200",{"_index":1675,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["subject.trim",{"_index":1635,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["sublabel",{"_index":1627,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["submission",{"_index":1192,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DraftLead.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["submissions",{"_index":1198,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["submit",{"_index":1203,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["submitbutton",{"_index":1324,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["submitdraftlead",{"_index":1352,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["submithandler",{"_index":2355,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["submitted",{"_index":1243,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["submitting",{"_index":1202,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["subscribe",{"_index":3338,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["subscription",{"_index":3276,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["subscription?.remove",{"_index":3278,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["substring(file.name.lastindexof",{"_index":475,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["subtitle",{"_index":1688,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["succeed",{"_index":580,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["succeeded",{"_index":1956,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["success",{"_index":313,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"miscellaneous/typealiases.html":{}}}],["success/error",{"_index":1295,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/QuotationActionResponse.html":{}}}],["successful",{"_index":222,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["successfully",{"_index":656,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["successive",{"_index":4214,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["successmessage",{"_index":1242,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{}}}],["successsnackbarvisible",{"_index":3879,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["suffix",{"_index":905,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["suites",{"_index":4512,"title":{},"body":{"index.html":{}}}],["sum",{"_index":1361,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["summary",{"_index":1250,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{}}}],["summarycontainer",{"_index":1306,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["summaryheader",{"_index":1307,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["summarystats",{"_index":1309,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["summarytext",{"_index":1312,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["summarytitle",{"_index":1308,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["super(`kyc",{"_index":2628,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["super(message",{"_index":1487,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["super(props",{"_index":2104,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["supplementary",{"_index":3531,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["support",{"_index":1671,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["support@solarium.in",{"_index":2139,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["supportcontainer",{"_index":2168,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["supported",{"_index":1978,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["supportemail",{"_index":2172,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["supports",{"_index":3911,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["supporttext",{"_index":2171,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["sure",{"_index":1204,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/QuotesTabProps.html":{},"index.html":{}}}],["surface",{"_index":1399,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["survives",{"_index":4473,"title":{},"body":{"index.html":{}}}],["swagger",{"_index":1221,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["switch",{"_index":1989,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["synchronized",{"_index":4493,"title":{},"body":{"index.html":{}}}],["syncinprogress",{"_index":937,"title":{},"body":{"interfaces/CacheState.html":{}}}],["system",{"_index":1163,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/RefreshState.html":{},"classes/SasTokenMutex.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/Typography.html":{},"interfaces/UploadResult.html":{},"miscellaneous/typealiases.html":{}}}],["system's",{"_index":3601,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["systemcost",{"_index":2540,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["systemkw",{"_index":2535,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["t",{"_index":315,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationResult.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{}}}],["tab",{"_index":3314,"title":{},"body":{"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/TicketsTabProps.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["tabs",{"_index":4378,"title":{},"body":{"dependencies.html":{}}}],["tada",{"_index":4550,"title":{},"body":{"index.html":{}}}],["tag",{"_index":2972,"title":{},"body":{"classes/LogoutManager.html":{}}}],["tags",{"_index":2686,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["tagtypes",{"_index":2435,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/User-2.html":{}}}],["take",{"_index":1937,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"index.html":{}}}],["takes",{"_index":3526,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["tap",{"_index":4558,"title":{},"body":{"index.html":{}}}],["target",{"_index":102,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["targets",{"_index":81,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["task",{"_index":1349,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{}}}],["tasks",{"_index":596,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["team",{"_index":1215,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/QuotesTabProps.html":{}}}],["temporary",{"_index":3595,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["terminal",{"_index":4425,"title":{},"body":{"index.html":{}}}],["territory",{"_index":1563,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["test",{"_index":40,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"index.html":{}}}],["test:a11y",{"_index":4501,"title":{},"body":{"index.html":{}}}],["test:a11y:services",{"_index":4505,"title":{},"body":{"index.html":{}}}],["test:cart",{"_index":4503,"title":{},"body":{"index.html":{}}}],["test:coverage",{"_index":4495,"title":{},"body":{"index.html":{}}}],["test:integration",{"_index":4498,"title":{},"body":{"index.html":{}}}],["test:integration:all",{"_index":4507,"title":{},"body":{"index.html":{}}}],["test:mswcoverage",{"_index":4510,"title":{},"body":{"index.html":{}}}],["test:performance",{"_index":4499,"title":{},"body":{"index.html":{}}}],["test:services",{"_index":4504,"title":{},"body":{"index.html":{}}}],["test:unit",{"_index":4496,"title":{},"body":{"index.html":{}}}],["test@example.com",{"_index":2227,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testaccessibility",{"_index":2288,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testfn",{"_index":2261,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testid",{"_index":20,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["testid=\"address",{"_index":1281,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["testid=\"browse",{"_index":1976,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["testid=\"camera",{"_index":1974,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["testid=\"create",{"_index":1683,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["testid=\"docs",{"_index":1828,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["testid=\"gallery",{"_index":1972,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["testid=\"reset",{"_index":3393,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["testid=\"update",{"_index":3396,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["testid={`${testid",{"_index":2019,"title":{},"body":{"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["testid={`doc",{"_index":1787,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["testid={`quote",{"_index":3571,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["testid={testid",{"_index":2057,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["testids",{"_index":2278,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testing",{"_index":1081,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["testing/corruption",{"_index":1053,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["testing/logout",{"_index":3671,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["testpdfurl",{"_index":3599,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["tests",{"_index":2293,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{},"index.html":{}}}],["testscart",{"_index":4502,"title":{},"body":{"index.html":{}}}],["testscoverage",{"_index":4513,"title":{},"body":{"index.html":{}}}],["testscreen",{"_index":2258,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testwrapper",{"_index":2216,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["testwrapperprops",{"_index":2214,"title":{"interfaces/TestWrapperProps.html":{}},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["text",{"_index":886,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{},"index.html":{}}}],["textalign",{"_index":1329,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["textcolor",{"_index":1724,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["textcontainer",{"_index":3178,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["textinput",{"_index":880,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["textinputprops",{"_index":884,"title":{"interfaces/TextInputProps.html":{}},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["textinputvariant",{"_index":881,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["textstyle",{"_index":862,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["textstyle={[styles.statustext",{"_index":2017,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["texttransform",{"_index":3989,"title":{},"body":{"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["theme",{"_index":966,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/Typography.html":{}}}],["theme.colors",{"_index":3901,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["theme.colors.background",{"_index":3616,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{}}}],["theme.colors.error",{"_index":2850,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/NotificationListItemProps.html":{}}}],["theme.colors.info",{"_index":2835,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["theme.colors.onprimary",{"_index":2986,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["theme.colors.onprimary}cc",{"_index":2988,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["theme.colors.onsurfacevariant",{"_index":2987,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["theme.colors.primary",{"_index":2852,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["theme.colors.primarycontainer",{"_index":3578,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{}}}],["theme.colors.quoted",{"_index":2840,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["theme.colors.success",{"_index":2848,"title":{},"body":{"interfaces/LeadListItemProps.html":{},"interfaces/StatusBadgeProps.html":{}}}],["theme.colors.surface",{"_index":3566,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["theme.colors.surfacedisabled",{"_index":2056,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["theme.colors.surfacevariant",{"_index":2985,"title":{},"body":{"interfaces/MessageBubbleProps.html":{}}}],["theme.colors.tertiary",{"_index":3163,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["theme.colors.warning",{"_index":2844,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["theme/palette",{"_index":1715,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["theme/themeprovider",{"_index":963,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["themecontext",{"_index":2342,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["themeprovider",{"_index":2198,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/ThemeProviderProps.html":{}}}],["themeproviderprops",{"_index":2346,"title":{"interfaces/ThemeProviderProps.html":{}},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["theming",{"_index":53,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/DocsTabProps.html":{}}}],["there's",{"_index":2639,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["they're",{"_index":3638,"title":{},"body":{"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{}}}],["this.code",{"_index":1489,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["this.field",{"_index":4364,"title":{},"body":{"classes/ValidationError.html":{}}}],["this.httpstatus",{"_index":3839,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["this.isloggingout",{"_index":2938,"title":{},"body":{"classes/LogoutManager.html":{}}}],["this.locks.delete(key",{"_index":2644,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["this.locks.get(key",{"_index":2641,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["this.locks.has(key",{"_index":2640,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["this.locks.set(key",{"_index":2642,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["this.logoutpromise",{"_index":2939,"title":{},"body":{"classes/LogoutManager.html":{}}}],["this.maxallowedsize",{"_index":1491,"title":{},"body":{"classes/CompressionError.html":{}}}],["this.message",{"_index":3818,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["this.name",{"_index":1488,"title":{},"body":{"classes/CompressionError.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UploadResult.html":{},"classes/ValidationError.html":{}}}],["this.operation",{"_index":3812,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["this.originalerror",{"_index":2631,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"interfaces/UploadResult.html":{}}}],["this.originalerror?.message",{"_index":3820,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["this.originalsize",{"_index":1490,"title":{},"body":{"classes/CompressionError.html":{}}}],["this.props",{"_index":2140,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.props.onerror",{"_index":2111,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.props.onerror(error",{"_index":2112,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.props.onreset",{"_index":2119,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.renderdefaultfallback",{"_index":2141,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.reseterror",{"_index":2124,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.serviceid",{"_index":3837,"title":{},"body":{"classes/ServiceFetchError.html":{}}}],["this.setstate",{"_index":2108,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.stack",{"_index":3819,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["this.state",{"_index":2105,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["this.step",{"_index":2630,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["this.timestamps",{"_index":3681,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["this.timestamps[api",{"_index":3677,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["this.timestamps[key",{"_index":3680,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["this.value",{"_index":4365,"title":{},"body":{"classes/ValidationError.html":{}}}],["thread",{"_index":172,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["threads",{"_index":226,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["through",{"_index":1681,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["throw",{"_index":599,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ThemeProviderProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["thrown",{"_index":1494,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["thundering",{"_index":3199,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["thunk",{"_index":566,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["thunks",{"_index":565,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["tick",{"_index":4134,"title":{},"body":{"classes/UploadMutex.html":{}}}],["tick_interval",{"_index":1544,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["ticket",{"_index":121,"title":{"interfaces/Ticket.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"miscellaneous/typealiases.html":{}}}],["ticket.leadid",{"_index":4017,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticket.status",{"_index":4015,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticket.subject",{"_index":4014,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticket.ticketid",{"_index":3714,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{},"interfaces/TicketListItemProps.html":{}}}],["ticketdata",{"_index":3718,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["ticketheader",{"_index":4019,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticketid",{"_index":144,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["ticketlistitem",{"_index":168,"title":{"interfaces/TicketListItem.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{}}}],["ticketlistitemcomponent",{"_index":4011,"title":{},"body":{"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["ticketlistitemcomponent.displayname",{"_index":4018,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticketlistitemprops",{"_index":4008,"title":{"interfaces/TicketListItemProps.html":{}},"body":{"interfaces/TicketListItemProps.html":{}}}],["ticketlistitemtype",{"_index":4043,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticketmessage",{"_index":157,"title":{"interfaces/TicketMessage.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["ticketpolling",{"_index":4033,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["ticketpolling.startpolling",{"_index":4052,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticketpolling.stoppolling",{"_index":4054,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticketpollingconfig",{"_index":4026,"title":{"interfaces/TicketPollingConfig.html":{}},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["ticketpollingstate",{"_index":4028,"title":{"interfaces/TicketPollingState.html":{}},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["tickets",{"_index":181,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"miscellaneous/enumerations.html":{}}}],["tickets/${ticketid",{"_index":3716,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["tickets/${ticketid}/messages",{"_index":3720,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["tickets/${ticketid}/reopen",{"_index":3723,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["tickets?${searchparams.tostring",{"_index":3711,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["ticketsapi",{"_index":3691,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["ticketslist",{"_index":3692,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["ticketsqueryparams",{"_index":193,"title":{"interfaces/TicketsQueryParams.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["ticketsstate",{"_index":216,"title":{"interfaces/TicketsState.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["ticketstab",{"_index":4044,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticketstabprops",{"_index":4035,"title":{"interfaces/TicketsTabProps.html":{}},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticketstatus",{"_index":127,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"miscellaneous/typealiases.html":{}}}],["ticketthread",{"_index":4059,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["ticks",{"_index":4123,"title":{},"body":{"classes/UploadMutex.html":{}}}],["tight",{"_index":1410,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["time",{"_index":252,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["timeago",{"_index":3166,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["timecontainer",{"_index":4023,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["timeicon",{"_index":4024,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["timeout",{"_index":234,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{}}}],["timeout_error",{"_index":845,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["timeout_ms",{"_index":4117,"title":{},"body":{"classes/UploadMutex.html":{}}}],["timeoutid",{"_index":4266,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["timeouts",{"_index":4167,"title":{},"body":{"classes/UploadMutex.html":{},"index.html":{}}}],["timer",{"_index":1526,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"miscellaneous/typealiases.html":{}}}],["timer_constants",{"_index":1538,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["timeroptions",{"_index":1533,"title":{"interfaces/TimerOptions.html":{}},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{}}}],["timerref",{"_index":3219,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["timerref.current",{"_index":3246,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["timers",{"_index":4034,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["timerstatus",{"_index":1548,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["timertype",{"_index":1547,"title":{},"body":{"interfaces/CountdownTimerState.html":{},"interfaces/TimerOptions.html":{},"miscellaneous/typealiases.html":{}}}],["timesincelastaction",{"_index":4232,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["timestamp",{"_index":159,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DraftLead.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["timestamps",{"_index":3654,"title":{},"body":{"classes/RefreshTimestamps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["timetext",{"_index":4025,"title":{},"body":{"interfaces/TicketListItemProps.html":{}}}],["timezone",{"_index":2515,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["title",{"_index":872,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"miscellaneous/typealiases.html":{}}}],["titlelarge",{"_index":2319,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["titlemedium",{"_index":2320,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["titlesmall",{"_index":2321,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["tkt004",{"_index":170,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["todate",{"_index":2399,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["todo",{"_index":1367,"title":{},"body":{"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/QuotesTabProps.html":{}}}],["tojson",{"_index":3796,"title":{},"body":{"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{}}}],["token",{"_index":361,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["tokennumber",{"_index":1574,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["tokens",{"_index":1392,"title":{},"body":{"interfaces/ColorPalette.html":{}}}],["tolowercase",{"_index":474,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["tool",{"_index":4420,"title":{},"body":{"index.html":{}}}],["top",{"_index":972,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"dependencies.html":{}}}],["total",{"_index":183,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["totalcost",{"_index":2536,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["totalitems",{"_index":986,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/DraftLead.html":{},"interfaces/ServicesCartState.html":{}}}],["totalpages",{"_index":323,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["totalseconds",{"_index":2760,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["touch",{"_index":80,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["touchableopacity",{"_index":2100,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["touchableripple",{"_index":2028,"title":{},"body":{"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["tour",{"_index":4573,"title":{},"body":{"index.html":{}}}],["trace",{"_index":1493,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["track",{"_index":1679,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["tracking",{"_index":507,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["trailing",{"_index":339,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["transform",{"_index":2444,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["transformation",{"_index":2410,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["transformedleads",{"_index":2464,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["transformedleads.slice(0",{"_index":2476,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["transformerror",{"_index":2408,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{}}}],["transformerror(error",{"_index":2428,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{}}}],["transformerrorresponse",{"_index":2452,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["transformleaderror",{"_index":2411,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["transformquotationerror",{"_index":3443,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["transformresponse",{"_index":2407,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"classes/LogoutManager.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["transformresponse(response",{"_index":3455,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["transforms",{"_index":4470,"title":{},"body":{"index.html":{}}}],["transformticketerror",{"_index":3687,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["transitions",{"_index":3211,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["transparent",{"_index":108,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["transportfee",{"_index":2542,"title":{},"body":{"interfaces/GetQuotationsRequest.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{}}}],["trigger",{"_index":1806,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["triggeraction",{"_index":3508,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["triggered",{"_index":3529,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["triggering",{"_index":3576,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["triggerrestore",{"_index":4269,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["triggers",{"_index":3468,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"index.html":{}}}],["trimmed",{"_index":1272,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["trimmed.length",{"_index":1275,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["troubleshooting",{"_index":4548,"title":{},"body":{"index.html":{}}}],["true",{"_index":263,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocView.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["try",{"_index":570,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["trying",{"_index":3260,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["twice",{"_index":4463,"title":{},"body":{"index.html":{}}}],["two",{"_index":2854,"title":{},"body":{"interfaces/LeadListItemProps.html":{}}}],["type",{"_index":22,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/ApiErrorResponse-1.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CacheState.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItem.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CheckoutState.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"classes/CompressionError.html":{},"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DraftLead.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"classes/KycUploadError.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/MigrationManifest.html":{},"interfaces/MigrationResult.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RNFile.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/SasTokenResponse.html":{},"classes/SecurePersistAdapter.html":{},"classes/SecureStorageError.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/ServerError.html":{},"interfaces/Service.html":{},"classes/ServiceFetchError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServiceResponse.html":{},"interfaces/ServicesCartState.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/SpacingScale.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/StatusColorConfig.html":{},"interfaces/StorageResult.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/Typography.html":{},"interfaces/UIState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"classes/ValidationError.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":4580,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":1577,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{}}}],["typedstate",{"_index":3014,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["typedstate.auth",{"_index":3015,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["typedstate.auth.phone",{"_index":3016,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["typedstate.auth.user",{"_index":3018,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["typedstate.auth.user?.phone",{"_index":3017,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["typeof",{"_index":535,"title":{},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/InfoTabProps.html":{},"classes/LogoutManager.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/ServerError.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/ThemeProviderProps.html":{}}}],["types",{"_index":311,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocView.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshState.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SasInfo.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TimerOptions.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["types/azureblob",{"_index":2612,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["types/file",{"_index":1716,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["types/kycdocument",{"_index":1719,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["types/lead",{"_index":1155,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/LeadListItemProps.html":{}}}],["types/notification",{"_index":3154,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["types/profile",{"_index":3346,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["types/quotation",{"_index":3442,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/StatusColorConfig.html":{}}}],["types/service",{"_index":984,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["types/ticket",{"_index":2982,"title":{},"body":{"interfaces/MessageBubbleProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["typescript",{"_index":1023,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ConfirmDialogOptions.html":{},"classes/LogoutManager.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"miscellaneous/typealiases.html":{}}}],["typography",{"_index":1407,"title":{"interfaces/Typography.html":{}},"body":{"interfaces/ColorPalette.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/SpacingScale.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Typography.html":{}}}],["typography.fontfamily.bold",{"_index":2148,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontfamily.medium",{"_index":2157,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontfamily.regular",{"_index":2150,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.lg",{"_index":2314,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.md",{"_index":2149,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.sm",{"_index":2155,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.xl",{"_index":2312,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.xs",{"_index":2156,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.fontsize.xxl",{"_index":2147,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.lineheight.normal",{"_index":2315,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.lineheight.relaxed",{"_index":2151,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["typography.lineheight.tight",{"_index":2310,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["ui",{"_index":742,"title":{},"body":{"interfaces/AuthState.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocView.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UIState.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"index.html":{}}}],["ui/seterror",{"_index":620,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["uireducer",{"_index":2197,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["uislice",{"_index":4092,"title":{},"body":{"interfaces/UIState.html":{}}}],["uislice.actions",{"_index":4101,"title":{},"body":{"interfaces/UIState.html":{}}}],["uislice.reducer",{"_index":4102,"title":{},"body":{"interfaces/UIState.html":{}}}],["uistate",{"_index":4086,"title":{"interfaces/UIState.html":{}},"body":{"interfaces/UIState.html":{}}}],["unable",{"_index":621,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["unauthenticated",{"_index":3732,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["unavailable",{"_index":624,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["unblock",{"_index":4246,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["unchecked",{"_index":2004,"title":{},"body":{"interfaces/DocumentRowProps.html":{}}}],["undefined",{"_index":351,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CacheState.html":{},"interfaces/CartItem.html":{},"interfaces/CheckoutState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DraftLead.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/KycDocView.html":{},"interfaces/LoadingOverlayProps.html":{},"classes/LogoutManager.html":{},"interfaces/NewAuthState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/ServicesCartState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UIState.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{}}}],["under",{"_index":1461,"title":{},"body":{"interfaces/ComingSoonProps.html":{},"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["undone",{"_index":1254,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/QuotesTabProps.html":{}}}],["unexpected",{"_index":387,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"classes/LogoutManager.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{}}}],["unfocused",{"_index":4053,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["unique",{"_index":142,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["uniqueitemscount",{"_index":4274,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["uniqueservices",{"_index":1252,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["unit",{"_index":4497,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":693,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["unknown_error",{"_index":2431,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["unmount",{"_index":3212,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["unnecessary",{"_index":2368,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["unread",{"_index":3110,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"miscellaneous/typealiases.html":{}}}],["unreadcount",{"_index":3106,"title":{},"body":{"interfaces/Notification.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{}}}],["unreadcount.tostring",{"_index":3149,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["unreadindicator",{"_index":3180,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["unreadindicatorcontainer",{"_index":3179,"title":{},"body":{"interfaces/NotificationListItemProps.html":{}}}],["unsubscribe",{"_index":3339,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["unwrap",{"_index":664,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/User.html":{}}}],["up",{"_index":424,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"index.html":{}}}],["update",{"_index":736,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/ComingSoonProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/NewAuthState.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["updateblockedstate",{"_index":4226,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["updatebutton",{"_index":3433,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["updatecellsbatchingperiod={50",{"_index":3618,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["updated",{"_index":810,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{}}}],["updatedat",{"_index":1575,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetQuotationsRequest.html":{},"interfaces/GetServicesRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationComponent.html":{},"interfaces/QuotationDetail.html":{},"interfaces/QuotationListItem.html":{},"interfaces/QuotationPdfResponse.html":{},"interfaces/QuotationPricing.html":{},"interfaces/QuotationsListResponse.html":{},"interfaces/Service.html":{},"interfaces/ServiceResponse.html":{},"interfaces/SingleServiceResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["updateprofilerequest",{"_index":2519,"title":{"interfaces/UpdateProfileRequest.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["updateprofileresponse",{"_index":2521,"title":{"interfaces/UpdateProfileResponse.html":{}},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["updateprogress",{"_index":4148,"title":{},"body":{"classes/UploadMutex.html":{}}}],["updateprogress(event.loaded",{"_index":4156,"title":{},"body":{"classes/UploadMutex.html":{}}}],["updatequantity",{"_index":1055,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["updates",{"_index":2976,"title":{},"body":{"classes/LogoutManager.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["updateuserprofile",{"_index":757,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["updating",{"_index":2890,"title":{},"body":{"interfaces/LoadingOverlayProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"index.html":{}}}],["upload",{"_index":449,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["upload_config",{"_index":4115,"title":{},"body":{"classes/UploadMutex.html":{}}}],["upload_config.expiry_buffer_ms",{"_index":4142,"title":{},"body":{"classes/UploadMutex.html":{}}}],["upload_config.progress_interval_ms",{"_index":4150,"title":{},"body":{"classes/UploadMutex.html":{}}}],["upload_config.timeout_ms",{"_index":4179,"title":{},"body":{"classes/UploadMutex.html":{}}}],["upload_debounce_ms",{"_index":4288,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["upload_expired",{"_index":849,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["uploadable",{"_index":1788,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["uploadbutton",{"_index":1851,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["uploadbuttoncontent",{"_index":1852,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["uploadbuttonlabel",{"_index":1853,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["uploaddate",{"_index":1842,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{}}}],["uploaddebouncetimestamps",{"_index":4287,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uploaddebouncetimestamps.get(doctype",{"_index":4291,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uploaddebouncetimestamps.set(doctype",{"_index":4326,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uploaded",{"_index":1780,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["uploadedat",{"_index":2391,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{},"interfaces/UseKycDocsResult.html":{}}}],["uploadedby",{"_index":2392,"title":{},"body":{"interfaces/GetDocumentSasRequest.html":{},"interfaces/GetDocumentSasResponse.html":{},"interfaces/KycDocument.html":{},"interfaces/ListKycDocumentsRequest.html":{},"interfaces/ListKycDocumentsResponse.html":{},"interfaces/RequestSasTokenRequest.html":{},"interfaces/SasTokenResponse.html":{}}}],["uploaderror",{"_index":851,"title":{"interfaces/UploadError.html":{}},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["uploaderror.originalerror.message",{"_index":4354,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uploaderror.step",{"_index":4353,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uploaderrortype",{"_index":844,"title":{},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"miscellaneous/typealiases.html":{}}}],["uploadfiletosas",{"_index":2613,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{}}}],["uploading",{"_index":2729,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["uploadkey",{"_index":4196,"title":{},"body":{"classes/UploadMutex.html":{}}}],["uploadkycdocument",{"_index":2688,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["uploadmutex",{"_index":4110,"title":{"classes/UploadMutex.html":{}},"body":{"classes/UploadMutex.html":{}}}],["uploadprogress",{"_index":840,"title":{"interfaces/UploadProgress.html":{}},"body":{"interfaces/AzureBlobUploadParams.html":{},"interfaces/SasInfo.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{}}}],["uploadresult",{"_index":2623,"title":{"interfaces/UploadResult.html":{}},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["uploads",{"_index":433,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/UploadMutex.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["uploadstatus",{"_index":1753,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/UseKycUploadReturn.html":{},"miscellaneous/typealiases.html":{}}}],["uppercase",{"_index":3990,"title":{},"body":{"interfaces/StatusBadgeProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["uri",{"_index":1505,"title":{},"body":{"interfaces/CompressionOptions.html":{},"interfaces/CompressionResult.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/RNFile.html":{},"classes/UploadMutex.html":{}}}],["uris",{"_index":4186,"title":{},"body":{"classes/UploadMutex.html":{}}}],["url",{"_index":295,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TextInputProps.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User-2.html":{}}}],["url(sasurl",{"_index":2648,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["url.origin}${url.pathname",{"_index":2659,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["url.pathname.split",{"_index":2650,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["urls",{"_index":3597,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["urlsearchparams",{"_index":3696,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["urlsearchparams(cleanparams",{"_index":357,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["usage",{"_index":1598,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["use",{"_index":273,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/CountdownTimerState.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TimerOptions.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/User.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["useacceptquotationmutation",{"_index":3483,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["useactiondebounce",{"_index":3490,"title":{},"body":{"interfaces/QuotesTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["useactiondebounce('quote",{"_index":4220,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["useactiondebounceoptions",{"_index":4199,"title":{"interfaces/UseActionDebounceOptions.html":{}},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["useactiondebounceresult",{"_index":4208,"title":{"interfaces/UseActionDebounceResult.html":{}},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["useaddmessagemutation",{"_index":3726,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["useappdispatch",{"_index":1148,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["useappselector",{"_index":1147,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(selectauthloading",{"_index":3736,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["useappselector(selectcartcount",{"_index":1172,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(selectcartisempty",{"_index":1174,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(selectcartitems",{"_index":4279,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(selectcartitemsarray",{"_index":1171,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["useappselector(selectiscartfull",{"_index":4278,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(selectisloggedin",{"_index":3735,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["useappselector(selectticketsbyleadid(leadid",{"_index":4051,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["useappselector(selectuniqueitemscount",{"_index":4277,"title":{},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["useappselector(state",{"_index":3142,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["useapptheme",{"_index":962,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["useauthrestore",{"_index":4254,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["useauthrestoreconfig",{"_index":4249,"title":{"interfaces/UseAuthRestoreConfig.html":{}},"body":{"interfaces/UseAuthRestoreConfig.html":{}}}],["usecallback",{"_index":1133,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/KycDocView.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usecallback((file",{"_index":1892,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["usecallback((item",{"_index":1815,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{}}}],["usecallback((message",{"_index":1188,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["usecallback((quotationid",{"_index":3591,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["usecallback(async",{"_index":1644,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["usecallback(methods.handlesubmit(handlesubmit",{"_index":2375,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["usecartactions",{"_index":960,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/UseCartActionsReturn.html":{}}}],["usecartactionsreturn",{"_index":4272,"title":{"interfaces/UseCartActionsReturn.html":{}},"body":{"interfaces/UseCartActionsReturn.html":{}}}],["usecontext",{"_index":2301,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["usecontext(themecontext",{"_index":2344,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["usecreateleadmutation",{"_index":1139,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/GetLeadsRequest.html":{}}}],["usecreateticketmutation",{"_index":1593,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/ReopenTicketRequest.html":{}}}],["used",{"_index":140,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["useeffect",{"_index":1588,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usefocuseffect",{"_index":1128,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/TicketsTabProps.html":{}}}],["useform",{"_index":2354,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["useformcontext",{"_index":3345,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["useformprops",{"_index":2358,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["useformreturn",{"_index":2360,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{}}}],["useful",{"_index":3670,"title":{},"body":{"classes/RefreshTimestamps.html":{}}}],["usegetcustomerleadsquery",{"_index":2501,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["usegetleadbyidquery",{"_index":2502,"title":{},"body":{"interfaces/GetLeadsRequest.html":{},"interfaces/InfoTabProps.html":{}}}],["usegetleadbyidquery(leadid",{"_index":2586,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["usegetleadsquery",{"_index":1592,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/GetLeadsRequest.html":{}}}],["usegetnotificationsquery",{"_index":3138,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["usegetnotificationsquery(undefined",{"_index":3141,"title":{},"body":{"interfaces/NotificationBellIconProps.html":{}}}],["usegetquotationbyidquery",{"_index":3481,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["usegetquotationpdfmutation",{"_index":3482,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["usegetquotationsbyleadidquery",{"_index":3480,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["usegetquotationsbyleadidquery(leadid",{"_index":3582,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["usegetquotationsquery",{"_index":3479,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["usegetservicebyidquery",{"_index":2563,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["usegetservicebyidquery(serviceid",{"_index":2569,"title":{},"body":{"interfaces/InfoTabProps.html":{}}}],["usegetservicesquery",{"_index":3854,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["usegetservicesquery({active",{"_index":3884,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["usegetticketbyidquery",{"_index":3725,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["usegetticketsquery",{"_index":3724,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{},"interfaces/TicketsTabProps.html":{}}}],["usegetticketsquery(undefined",{"_index":4049,"title":{},"body":{"interfaces/TicketsTabProps.html":{}}}],["usekycdocsresult",{"_index":2773,"title":{"interfaces/UseKycDocsResult.html":{}},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["usekycdocuments",{"_index":1706,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usekycdocuments(undefined",{"_index":1799,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["usekycupload",{"_index":1709,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usekycuploadreturn",{"_index":4284,"title":{"interfaces/UseKycUploadReturn.html":{}},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["uselayouteffect",{"_index":3853,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["uselistkycdocumentsquery",{"_index":2770,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{}}}],["useloginmutation",{"_index":2910,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["uselogoutmutation",{"_index":2911,"title":{},"body":{"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/User-2.html":{}}}],["usememo",{"_index":1587,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/KycDocView.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycDocsResult.html":{}}}],["usenavigation",{"_index":1129,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["usenavigation['navigation",{"_index":3886,"title":{},"body":{"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["usenewauth",{"_index":1150,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/KycDocView.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usenotificationpolling",{"_index":3214,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{}}}],["usepersistencestatus",{"_index":3320,"title":{},"body":{"interfaces/PersistenceStatus.html":{}}}],["user",{"_index":162,"title":{"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{}},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"interfaces/LogoutResponse.html":{},"interfaces/MigrationManifest.html":{},"interfaces/NewAuthState.html":{},"interfaces/Notification.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/RoleBasedGuardProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{},"interfaces/User.html":{},"interfaces/User-1.html":{},"interfaces/User-2.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["user's",{"_index":2510,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["user.id",{"_index":2667,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["user.phone",{"_index":3029,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["user?.id",{"_index":2811,"title":{},"body":{"interfaces/KycDocView.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["user?.role",{"_index":3500,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["user_${date.now",{"_index":603,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["useref",{"_index":3187,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["useref(0",{"_index":3224,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["useref(appstate.currentstate",{"_index":3226,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["useref(false",{"_index":3218,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["useref(null",{"_index":3220,"title":{},"body":{"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["userefreshcontrol",{"_index":1711,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["userejectquotationmutation",{"_index":3484,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{}}}],["usereopenticketmutation",{"_index":3727,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["userid",{"_index":2509,"title":{},"body":{"interfaces/GetProfileResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileValidation.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["useroute",{"_index":3851,"title":{},"body":{"interfaces/ServiceItemProps.html":{}}}],["users",{"_index":3733,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["uses",{"_index":59,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/ApiConfig.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"index.html":{}}}],["usestate",{"_index":1134,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usestate('idle",{"_index":4297,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["usestate(0",{"_index":4224,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["usestate(false",{"_index":1167,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["usestate(null",{"_index":1605,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["usestate(undefined",{"_index":4299,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["useticketpolling",{"_index":4030,"title":{},"body":{"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TicketsTabProps.html":{}}}],["usetypedredux",{"_index":4253,"title":{},"body":{"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["using",{"_index":588,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/LoginRequest.html":{},"interfaces/LoginResponse.html":{},"classes/LogoutManager.html":{},"interfaces/LogoutResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"classes/SasTokenMutex.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{},"interfaces/User-2.html":{},"index.html":{}}}],["utilities",{"_index":2296,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["utility",{"_index":291,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["utils",{"_index":2403,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["utils/apihelpers",{"_index":2936,"title":{},"body":{"classes/LogoutManager.html":{}}}],["utils/azureblobuploader",{"_index":2615,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["utils/datehelpers",{"_index":2566,"title":{},"body":{"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketListItemProps.html":{}}}],["utils/debouncewindow",{"_index":4207,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{}}}],["utils/imagecompression",{"_index":2618,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["utils/kycvalidation",{"_index":1877,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["utils/openconfirmdialog",{"_index":3492,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["utils/profilevalidation",{"_index":3349,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["utils/storagehelpers",{"_index":560,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["ux",{"_index":2366,"title":{},"body":{"interfaces/FormProviderWrapperProps.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["v8",{"_index":1495,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["valid",{"_index":456,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"interfaces/RequestConfig.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{}}}],["validate",{"_index":448,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServicesCartState.html":{},"interfaces/UploadResult.html":{},"interfaces/User.html":{}}}],["validatecartstate",{"_index":991,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["validated",{"_index":1903,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["validatefile",{"_index":1891,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["validatefile(file",{"_index":1901,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["validatefileupload",{"_index":450,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["validateform",{"_index":1631,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{}}}],["validatekycdocument",{"_index":2619,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["validatekycdocument(file",{"_index":2696,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["validatemimetype",{"_index":1876,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["validatemimetype(file.type",{"_index":1893,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{}}}],["validatepersistedstate",{"_index":3027,"title":{},"body":{"interfaces/MigrationManifest.html":{}}}],["validates",{"_index":679,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{},"interfaces/User.html":{}}}],["validating",{"_index":2692,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["validation",{"_index":1606,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/GetProfileResponse.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"interfaces/MigrationManifest.html":{},"interfaces/ProfileApiError.html":{},"interfaces/ProfileData.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileValidation.html":{},"classes/SasTokenMutex.html":{},"interfaces/UpdateProfileRequest.html":{},"interfaces/UpdateProfileResponse.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseCartActionsReturn.html":{},"classes/ValidationError.html":{},"index.html":{}}}],["validation_error",{"_index":2418,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["validation_failed",{"_index":4363,"title":{},"body":{"classes/ValidationError.html":{}}}],["validationerror",{"_index":525,"title":{"classes/ValidationError.html":{}},"body":{"interfaces/ApiErrorResponse-1.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/ServerError.html":{},"interfaces/UseKycUploadReturn.html":{},"classes/ValidationError.html":{}}}],["validationerror.message",{"_index":2496,"title":{},"body":{"interfaces/GetLeadsRequest.html":{}}}],["validity",{"_index":2669,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["value",{"_index":350,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"classes/LogoutManager.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RefreshOptions.html":{},"classes/RefreshTimestamps.html":{},"interfaces/RequestConfig.html":{},"interfaces/SafeAreaContainerProps.html":{},"classes/SasTokenMutex.html":{},"classes/SecurePersistAdapter.html":{},"interfaces/TextInputProps.html":{},"classes/UploadMutex.html":{},"classes/ValidationError.html":{},"miscellaneous/enumerations.html":{}}}],["value?.trim",{"_index":1273,"title":{},"body":{"interfaces/CheckoutFormData.html":{}}}],["values",{"_index":1175,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/FormProviderWrapperProps.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["variables",{"_index":253,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["variant",{"_index":874,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/StatusBadgeProps.html":{},"interfaces/TextInputProps.html":{}}}],["various",{"_index":3536,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["vector",{"_index":1083,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/InfoTabProps.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketsTabProps.html":{},"dependencies.html":{}}}],["verify",{"_index":502,"title":{},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{},"index.html":{}}}],["verifyotprequest",{"_index":503,"title":{"interfaces/VerifyOtpRequest.html":{}},"body":{"interfaces/ApiErrorResponse.html":{},"interfaces/AuthAttemptState.html":{},"interfaces/AuthResponse.html":{},"interfaces/SendOtpRequest.html":{},"interfaces/SendOtpResponse.html":{},"interfaces/User-1.html":{},"interfaces/VerifyOtpRequest.html":{}}}],["version",{"_index":365,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/KycDocView.html":{},"interfaces/MigrationManifest.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{},"interfaces/UseKycDocsResult.html":{},"properties.html":{}}}],["via",{"_index":803,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/TicketsTabProps.html":{},"classes/UploadMutex.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/User.html":{},"index.html":{}}}],["view",{"_index":45,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AddMessageRequest.html":{},"interfaces/CartBadgeProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/CheckoutFormData.html":{},"interfaces/ComingSoonProps.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/InfoTabProps.html":{},"interfaces/KycDocView.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ReopenTicketRequest.html":{},"interfaces/SafeAreaLayoutProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/UseKycDocsResult.html":{},"dependencies.html":{},"index.html":{}}}],["viewer",{"_index":3602,"title":{},"body":{"interfaces/QuotesTabProps.html":{}}}],["viewstyle",{"_index":860,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["visibility",{"_index":1616,"title":{},"body":{"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{}}}],["visible",{"_index":619,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketsTabProps.html":{},"interfaces/User.html":{}}}],["visit",{"_index":4441,"title":{},"body":{"index.html":{}}}],["voice",{"_index":4472,"title":{},"body":{"index.html":{}}}],["void",{"_index":50,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/AzureBlobUploadParams.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/CountdownTimerState.html":{},"interfaces/CreateTicketModalProps.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentPickerModalProps.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/DropdownOption.html":{},"interfaces/DropdownProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/KycDocUploadParams.html":{},"interfaces/KycDocView.html":{},"classes/KycUploadError.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/ProfileIconProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"classes/RefreshTimestamps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/SasInfo.html":{},"classes/SasTokenMutex.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/TextInputProps.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/TimerOptions.html":{},"interfaces/UploadError.html":{},"classes/UploadMutex.html":{},"interfaces/UploadProgress.html":{},"interfaces/UploadResult.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{},"interfaces/UseCartActionsReturn.html":{},"interfaces/UseKycDocsResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["voterid",{"_index":4488,"title":{},"body":{"index.html":{}}}],["vulnerabilities",{"_index":4532,"title":{},"body":{"index.html":{}}}],["wait",{"_index":2247,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/LogoutManager.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{},"interfaces/QuotesTabProps.html":{},"classes/SasTokenMutex.html":{},"interfaces/TestWrapperProps.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"classes/UploadMutex.html":{},"interfaces/UploadResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["waitforasync",{"_index":2248,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["wallet",{"_index":1735,"title":{},"body":{"interfaces/DocsTabProps.html":{}}}],["want",{"_index":1205,"title":{},"body":{"interfaces/CheckoutFormData.html":{},"interfaces/ConfirmDialogOptions.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/QuotesTabProps.html":{},"index.html":{}}}],["warn",{"_index":738,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/User.html":{}}}],["warning",{"_index":626,"title":{},"body":{"interfaces/AuthState.html":{},"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/Notification.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/NotificationsApiResponse.html":{},"interfaces/NotificationsQueryParams.html":{},"interfaces/NotificationsState.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TextInputProps.html":{},"interfaces/Typography.html":{},"interfaces/User.html":{},"miscellaneous/typealiases.html":{}}}],["warnings)security",{"_index":4530,"title":{},"body":{"index.html":{}}}],["wasn't",{"_index":4333,"title":{},"body":{"interfaces/UseKycUploadReturn.html":{}}}],["watch",{"_index":3356,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["watch('email",{"_index":3362,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["watch('name",{"_index":3360,"title":{},"body":{"interfaces/ProfileFormData.html":{},"interfaces/ProfileFormProps.html":{}}}],["way",{"_index":4450,"title":{},"body":{"index.html":{}}}],["wcag",{"_index":55,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{}}}],["we'll",{"_index":255,"title":{},"body":{"interfaces/ApiConfig.html":{}}}],["we're",{"_index":268,"title":{},"body":{"interfaces/ApiConfig.html":{},"interfaces/TicketsTabProps.html":{}}}],["web",{"_index":4191,"title":{},"body":{"classes/UploadMutex.html":{}}}],["website",{"_index":1569,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/GetLeadsRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadResponse.html":{},"index.html":{}}}],["went",{"_index":2128,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{}}}],["whether",{"_index":30,"title":{},"body":{"interfaces/AcceptRejectButtonsProps.html":{},"interfaces/CartItemRowProps.html":{},"interfaces/ConfirmDialogOptions.html":{},"interfaces/NotificationPollingConfig.html":{},"interfaces/NotificationPollingState.html":{},"interfaces/OTPInputFieldProps.html":{},"interfaces/OTPInputProps.html":{},"interfaces/OTPInputState.html":{},"interfaces/PersistenceStatus.html":{},"interfaces/RefreshError.html":{},"interfaces/RefreshHookReturn.html":{},"interfaces/RefreshOptions.html":{},"interfaces/RefreshProgress.html":{},"interfaces/RefreshResult.html":{},"interfaces/RefreshState.html":{},"interfaces/TicketPollingConfig.html":{},"interfaces/TicketPollingState.html":{},"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseAuthRestoreConfig.html":{}}}],["white",{"_index":931,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/DocumentRowProps.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["width",{"_index":1100,"title":{},"body":{"interfaces/CartItemRowProps.html":{},"interfaces/ColorPalette.html":{},"interfaces/DocsTabProps.html":{},"interfaces/DocumentRowProps.html":{},"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{},"interfaces/LoadingOverlayProps.html":{},"interfaces/MessageBubbleProps.html":{},"interfaces/NotificationListItemProps.html":{},"interfaces/PersistenceLoadingProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/ServiceItemProps.html":{},"interfaces/SpacingScale.html":{},"interfaces/TicketListItemProps.html":{},"interfaces/Typography.html":{}}}],["window",{"_index":4203,"title":{},"body":{"interfaces/UseActionDebounceOptions.html":{},"interfaces/UseActionDebounceResult.html":{},"interfaces/UseKycUploadReturn.html":{}}}],["window/pane",{"_index":4426,"title":{},"body":{"index.html":{}}}],["windows/linux",{"_index":4467,"title":{},"body":{"index.html":{}}}],["windowsize={10",{"_index":1823,"title":{},"body":{"interfaces/DocsTabProps.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/TicketsTabProps.html":{}}}],["within",{"_index":171,"title":{},"body":{"interfaces/AddMessageRequest.html":{},"interfaces/CreateTicketRequest.html":{},"interfaces/CreateTicketResponse.html":{},"interfaces/ExtendedTheme.html":{},"interfaces/GetTicketByIdResponse.html":{},"interfaces/GetTicketsResponse.html":{},"interfaces/ThemeProviderProps.html":{},"interfaces/Ticket.html":{},"interfaces/TicketListItem.html":{},"interfaces/TicketMessage.html":{},"interfaces/TicketsQueryParams.html":{},"interfaces/TicketsState.html":{}}}],["withnavigation",{"_index":2177,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["without",{"_index":2657,"title":{},"body":{"interfaces/KycDocUploadParams.html":{},"classes/KycUploadError.html":{},"classes/SasTokenMutex.html":{},"interfaces/UploadResult.html":{}}}],["withpersistence",{"_index":2178,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/TestWrapperProps.html":{}}}],["withrolebasedguard",{"_index":3739,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["won",{"_index":1559,"title":{},"body":{"interfaces/CreateLeadRequest.html":{},"interfaces/Lead.html":{},"interfaces/LeadCustomer.html":{},"interfaces/LeadListItemProps.html":{},"interfaces/LeadResponse.html":{},"miscellaneous/typealiases.html":{}}}],["words",{"_index":900,"title":{},"body":{"interfaces/BaseComponentProps.html":{},"interfaces/ButtonProps.html":{},"interfaces/ComponentColors.html":{},"interfaces/ComponentSizes.html":{},"interfaces/ErrorMessageProps.html":{},"interfaces/LoadingOverlayContainerProps.html":{},"interfaces/LoadingSpinnerProps.html":{},"interfaces/SafeAreaContainerProps.html":{},"interfaces/TextInputProps.html":{}}}],["work",{"_index":4568,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":3463,"title":{},"body":{"interfaces/QuotationActionResponse.html":{},"interfaces/QuotesTabProps.html":{},"interfaces/UseKycUploadReturn.html":{},"index.html":{}}}],["workflows",{"_index":3472,"title":{},"body":{"interfaces/QuotationActionResponse.html":{}}}],["works",{"_index":3717,"title":{},"body":{"interfaces/ReopenTicketRequest.html":{}}}],["wouldexceedmaxitems",{"_index":1003,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["wouldexceedmaxitems(state.items",{"_index":1031,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ServicesCartState.html":{}}}],["wrappedcomponent",{"_index":3741,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["wrappedcomponent.displayname",{"_index":3742,"title":{},"body":{"interfaces/RoleBasedGuardProps.html":{}}}],["wrapper",{"_index":2213,"title":{},"body":{"interfaces/ExtendedRenderOptions.html":{},"interfaces/RoleBasedGuardProps.html":{},"interfaces/TestWrapperProps.html":{}}}],["wraps",{"_index":2347,"title":{},"body":{"interfaces/ExtendedTheme.html":{},"interfaces/ThemeProviderProps.html":{}}}],["write",{"_index":3808,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["write_error",{"_index":3814,"title":{},"body":{"classes/SecureStorageError.html":{}}}],["wrong",{"_index":2129,"title":{},"body":{"classes/ErrorBoundary.html":{},"interfaces/ErrorBoundaryProps.html":{},"interfaces/ErrorBoundaryState.html":{}}}],["x",{"_index":364,"title":{},"body":{"interfaces/ApiError.html":{},"interfaces/ApiResponse.html":{},"interfaces/PaginatedRequest.html":{},"interfaces/PaginatedResponse.html":{},"interfaces/RequestConfig.html":{}}}],["xcode",{"_index":4452,"title":{},"body":{"index.html":{}}}],["xhr",{"_index":4146,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.abort",{"_index":4173,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.addeventlistener('abort",{"_index":4169,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.addeventlistener('error",{"_index":4164,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.addeventlistener('load",{"_index":4159,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.addeventlistener('timeout",{"_index":4166,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.open('put",{"_index":4177,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.send",{"_index":4190,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.send(file",{"_index":4194,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.setrequestheader('content",{"_index":4180,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.setrequestheader('x",{"_index":4181,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.status",{"_index":4160,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.timeout",{"_index":4178,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xhr.upload.addeventlistener('progress",{"_index":4154,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xl",{"_index":1405,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["xmlhttprequest",{"_index":4143,"title":{},"body":{"classes/UploadMutex.html":{}}}],["xs",{"_index":1401,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["xxl",{"_index":1406,"title":{},"body":{"interfaces/ColorPalette.html":{},"interfaces/SpacingScale.html":{},"interfaces/Typography.html":{}}}],["yarn",{"_index":4423,"title":{},"body":{"index.html":{}}}],["yes",{"_index":1483,"title":{},"body":{"classes/CompressionError.html":{},"classes/SecureStorageError.html":{},"classes/ServiceFetchError.html":{},"classes/ValidationError.html":{}}}],["you'd",{"_index":1969,"title":{},"body":{"interfaces/DocumentPickerModalProps.html":{},"classes/UploadMutex.html":{}}}],["you're",{"_index":4555,"title":{},"body":{"index.html":{}}}],["you've",{"_index":4551,"title":{},"body":{"index.html":{}}}],["zero",{"_index":4529,"title":{},"body":{"index.html":{}}}],["zindex",{"_index":973,"title":{},"body":{"interfaces/CartBadgeProps.html":{},"interfaces/NotificationBellIconProps.html":{},"interfaces/ServiceItemProps.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AcceptRejectButtonsProps.html":{"url":"interfaces/AcceptRejectButtonsProps.html","title":"interface - AcceptRejectButtonsProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AcceptRejectButtonsProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/quotes/AcceptRejectButtons.tsx\n        \n\n\n            \n                Description\n            \n            \n                Props interface for AcceptRejectButtons component\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            acceptLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            onAccept\n                                        \n                                \n                                \n                                        \n                                            onReject\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rejectLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acceptLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        acceptLabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom label for Accept button (default: \"Accept\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether both buttons should be disabled\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether buttons should show loading state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onAccept\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onAccept:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback fired when Accept button is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onReject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onReject:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback fired when Reject button is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rejectLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rejectLabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom label for Reject button (default: \"Reject\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for the component container\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport {Button} from '../common';\n\n/**\n * Props interface for AcceptRejectButtons component\n */\nexport interface AcceptRejectButtonsProps {\n  /** Callback fired when Accept button is pressed */\n  onAccept: () => void;\n  /** Callback fired when Reject button is pressed */\n  onReject: () => void;\n  /** Whether both buttons should be disabled */\n  disabled?: boolean;\n  /** Whether buttons should show loading state */\n  loading?: boolean;\n  /** Custom label for Accept button (default: \"Accept\") */\n  acceptLabel?: string;\n  /** Custom label for Reject button (default: \"Reject\") */\n  rejectLabel?: string;\n  /** Test ID for the component container */\n  testID?: string;\n}\n\n/**\n * AcceptRejectButtons Component\n *\n * Renders Accept and Reject buttons with proper theming, accessibility,\n * and WCAG 2.1 AA compliance. Accept button uses green primary styling,\n * Reject button uses red secondary styling.\n *\n * @param props - Component props\n * @returns JSX element containing both action buttons\n */\nconst AcceptRejectButtons: React.FC = ({\n  onAccept,\n  onReject,\n  disabled = false,\n  loading = false,\n  acceptLabel = 'Accept',\n  rejectLabel = 'Reject',\n  testID = 'accept-reject-buttons',\n}) => {\n  return (\n    \n      \n      \n    \n  );\n};\n\n/**\n * Styles for AcceptRejectButtons component\n * Ensures proper spacing, colors, and minimum touch targets (44px)\n */\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    gap: 12,\n    paddingVertical: 8,\n    alignItems: 'center',\n  },\n  acceptButton: {\n    flex: 1,\n    backgroundColor: '#4CAF50', // Material Green 500 - WCAG AA compliant\n    minHeight: 44, // WCAG minimum touch target\n    borderRadius: 8,\n  },\n  rejectButton: {\n    flex: 1,\n    borderColor: '#F44336', // Material Red 500 - WCAG AA compliant\n    borderWidth: 1,\n    backgroundColor: 'transparent',\n    minHeight: 44, // WCAG minimum touch target\n    borderRadius: 8,\n  },\n  rejectButtonText: {\n    color: '#F44336', // Material Red 500 - matches border\n  },\n});\n\nexport default AcceptRejectButtons;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AddMessageRequest.html":{"url":"interfaces/AddMessageRequest.html","title":"interface - AddMessageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AddMessageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for adding a message to ticket\nBased on POST /api/v1/tickets/{id}/messages request structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message content\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiConfig.html":{"url":"interfaces/ApiConfig.html","title":"interface - ApiConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/environments.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableLogging\n                                        \n                                \n                                \n                                        \n                                            enableOfflineCache\n                                        \n                                \n                                \n                                        \n                                            retries\n                                        \n                                \n                                \n                                        \n                                            retryDelay\n                                        \n                                \n                                \n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableLogging\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableLogging:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableOfflineCache\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableOfflineCache:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retries:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retryDelay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type Environment = 'development' | 'staging' | 'production';\n\nexport interface ApiConfig {\n  timeout: number;\n  retries: number;\n  retryDelay: number;\n  enableLogging: boolean;\n  enableOfflineCache: boolean;\n}\n\nexport interface AppConfig {\n  BASE_API_URL: string;\n  APP_ENV: Environment;\n  API_TIMEOUT: number;\n  DEBUG_MODE: boolean;\n  // Add new API configuration\n  API_CONFIG: ApiConfig;\n}\n\n/**\n * Environment configurations\n * In a real app, these would come from build-time variables\n * For now, we'll determine environment based on __DEV__ flag\n */\nconst environments: Record = {\n  development: {\n    BASE_API_URL: 'https://truereach-production.up.railway.app',\n    APP_ENV: 'development',\n    API_TIMEOUT: 10000,\n    DEBUG_MODE: true,\n    API_CONFIG: {\n      timeout: 10000,\n      retries: 3,\n      retryDelay: 1000,\n      enableLogging: true,\n      enableOfflineCache: true,\n    },\n  },\n  staging: {\n    BASE_API_URL: 'https://truereach-production.up.railway.app',\n    APP_ENV: 'staging',\n    API_TIMEOUT: 10000,\n    DEBUG_MODE: true,\n    API_CONFIG: {\n      timeout: 10000,\n      retries: 3,\n      retryDelay: 1000,\n      enableLogging: true,\n      enableOfflineCache: true,\n    },\n  },\n  production: {\n    BASE_API_URL: 'https://truereach-production.up.railway.app',\n    APP_ENV: 'production',\n    API_TIMEOUT: 8000,\n    DEBUG_MODE: false,\n    API_CONFIG: {\n      timeout: 8000,\n      retries: 3,\n      retryDelay: 2000,\n      enableLogging: false,\n      enableOfflineCache: false,\n    },\n  },\n};\n\n/**\n * Determine current environment\n * Uses __DEV__ flag to determine if we're in development\n * In the future, this can be enhanced with build-time environment detection\n */\nconst getCurrentEnvironment = (): Environment => {\n  // For now, use __DEV__ to determine environment\n  // In production builds, __DEV__ will be false\n  if (__DEV__) {\n    return 'development';\n  }\n\n  // In a real deployment, you might check other indicators\n  // like bundle ID, build configuration, etc.\n  return 'production';\n};\n\n/**\n * Get current app configuration\n */\nexport const getAppConfig = (): AppConfig => {\n  const currentEnv = getCurrentEnvironment();\n  const config = environments[currentEnv];\n\n  // Log configuration for debugging (only in debug mode)\n  if (config.DEBUG_MODE) {\n    console.log(`[Environment] Current: ${currentEnv}`);\n    console.log('[Environment] Config:', config);\n  }\n\n  return config;\n};\n\n/**\n * Export the current configuration\n */\nexport const AppConfig = getAppConfig();\n\n/**\n * Utility function to check if we're in development\n */\nexport const isDevelopment = (): boolean => AppConfig.APP_ENV === 'development';\n\n/**\n * Utility function to check if we're in production\n */\nexport const isProduction = (): boolean => AppConfig.APP_ENV === 'production';\n\n/**\n * Utility function to get API base URL\n */\nexport const getApiBaseUrl = (): string => AppConfig.BASE_API_URL;\n\n/**\n * Get API configuration\n */\nexport const getApiConfig = (): ApiConfig => AppConfig.API_CONFIG;\n\n/**\n * Check if API logging is enabled\n */\nexport const isApiLoggingEnabled = (): boolean =>\n  AppConfig.API_CONFIG.enableLogging;\n\n/**\n * Check if offline cache is enabled\n */\nexport const isOfflineCacheEnabled = (): boolean =>\n  AppConfig.API_CONFIG.enableOfflineCache;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiError.html":{"url":"interfaces/ApiError.html","title":"interface - ApiError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/apiHelpers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {AppConfig} from '../config/environments';\n\n/**\n * API Response Types\n */\nexport interface ApiResponse {\n  success: boolean;\n  data: T | null;\n  error: ApiError | null;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: number;\n  message: string;\n  details?: any;\n}\n\n/**\n * API Request Types\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * HTTP Methods\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request configuration\n */\nexport interface RequestConfig {\n  method?: HttpMethod;\n  headers?: Record;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Build API URL with base URL\n */\nexport const buildApiUrl = (endpoint: string): string => {\n  const baseUrl = AppConfig.BASE_API_URL.replace(/\\/$/, ''); // Remove trailing slash\n  const cleanEndpoint = endpoint.replace(/^\\//, ''); // Remove leading slash\n  return `${baseUrl}/api/v1/${cleanEndpoint}`;\n};\n\n/**\n * Build query parameters string\n */\nexport const buildQueryParams = (params: Record): string => {\n  const cleanParams = Object.entries(params)\n    .filter(\n      ([_, value]) => value !== undefined && value !== null && value !== ''\n    )\n    .map(([key, value]) => [key, String(value)]);\n\n  if (cleanParams.length === 0) {\n    return '';\n  }\n\n  const searchParams = new URLSearchParams(cleanParams);\n  return `?${searchParams.toString()}`;\n};\n\n/**\n * Get request headers with common defaults\n */\nexport const getRequestHeaders = (\n  token?: string,\n  additionalHeaders?: Record\n): Record => {\n  const headers: Record = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'X-App-Version': '1.0.0',\n    'X-Platform': 'mobile',\n    ...additionalHeaders,\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n/**\n * Parse API error response\n */\nexport const parseApiError = (error: any): ApiError => {\n  // Handle different error formats\n  if (error?.data?.error) {\n    return {\n      code: error.status || 500,\n      message: error.data.error.message || 'An error occurred',\n      details: error.data.error.details,\n    };\n  }\n\n  if (error?.data?.message) {\n    return {\n      code: error.status || 500,\n      message: error.data.message,\n      details: error.data,\n    };\n  }\n\n  if (error?.message) {\n    return {\n      code: error.status || 500,\n      message: error.message,\n      details: error,\n    };\n  }\n\n  return {\n    code: error?.status || 500,\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if error is a network error\n */\nexport const isNetworkError = (error: any): boolean => {\n  return (\n    error?.name === 'NetworkError' ||\n    error?.code === 'NETWORK_ERROR' ||\n    error?.status === 0 ||\n    !navigator.onLine\n  );\n};\n\n/**\n * Check if error requires authentication\n */\nexport const isAuthError = (error: any): boolean => {\n  return error?.status === 401 || error?.status === 403;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isNetworkError(error)) {\n    return true;\n  }\n\n  const retryableStatuses = [408, 429, 500, 502, 503, 504];\n  return retryableStatuses.includes(error?.status);\n};\n\n/**\n * Calculate retry delay with exponential backoff\n */\nexport const calculateRetryDelay = (\n  attempt: number,\n  baseDelay: number = 1000\n): number => {\n  // Exponential backoff: baseDelay * 2^attempt + random jitter\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\n  const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n  return Math.min(exponentialDelay + jitter, 30000); // Cap at 30 seconds\n};\n\n/**\n * Format file size for uploads\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Validate file for upload\n */\nexport const validateFileUpload = (\n  file: {size: number; type: string; name: string},\n  options: {\n    maxSize?: number;\n    allowedTypes?: string[];\n    allowedExtensions?: string[];\n  } = {}\n): {valid: boolean; error?: string} => {\n  const {\n    maxSize = 10 * 1024 * 1024, // 10MB default\n    allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.pdf'],\n  } = options;\n\n  // Check file size\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: `File size must be less than ${formatFileSize(maxSize)}`,\n    };\n  }\n\n  // Check file type\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  // Check file extension\n  const extension = file.name\n    .toLowerCase()\n    .substring(file.name.lastIndexOf('.'));\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `File extension ${extension} is not allowed`,\n    };\n  }\n\n  return {valid: true};\n};\n\n/**\n * Debug API request/response\n */\nexport const debugApiCall = (\n  method: string,\n  url: string,\n  request?: any,\n  response?: any,\n  error?: any\n) => {\n  if (!__DEV__) {\n    return;\n  }\n\n  console.group(`[API] ${method} ${url}`);\n\n  if (request) {\n    console.log('Request:', request);\n  }\n\n  if (response) {\n    console.log('Response:', response);\n  }\n\n  if (error) {\n    console.error('Error:', error);\n  }\n\n  console.groupEnd();\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiErrorResponse.html":{"url":"interfaces/ApiErrorResponse.html","title":"interface - ApiErrorResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                API Error Response Structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiErrorResponse-1.html":{"url":"interfaces/ApiErrorResponse-1.html","title":"interface - ApiErrorResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiErrorResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/api-error.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic API Error Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValidationError {\n  status: 400;\n  message: string;\n  errors: Record; // field -> error messages\n}\n\n/**\n * Server Error (5xx) - Internal server errors\n */\nexport interface ServerError {\n  status: number;\n  message: string;\n  details?: string;\n}\n\n/**\n * Generic API Error Response\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: string;\n  details?: any;\n}\n\n/**\n * Type guards for error detection\n */\nexport const isValidationError = (error: any): error is ValidationError => {\n  return (\n    error &&\n    typeof error === 'object' &&\n    error.status === 400 &&\n    typeof error.message === 'string' &&\n    error.errors &&\n    typeof error.errors === 'object'\n  );\n};\n\nexport const isServerError = (error: any): error is ServerError => {\n  return (\n    error &&\n    typeof error === 'object' &&\n    typeof error.status === 'number' &&\n    error.status >= 500 &&\n    error.status  {\n  return (\n    error &&\n    typeof error === 'object' &&\n    error.success === false &&\n    typeof error.error === 'string'\n  );\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ApiResponse.html":{"url":"interfaces/ApiResponse.html","title":"interface - ApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/apiHelpers.ts\n        \n\n\n            \n                Description\n            \n            \n                API Response Types\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         ApiError | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ApiError | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {AppConfig} from '../config/environments';\n\n/**\n * API Response Types\n */\nexport interface ApiResponse {\n  success: boolean;\n  data: T | null;\n  error: ApiError | null;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: number;\n  message: string;\n  details?: any;\n}\n\n/**\n * API Request Types\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * HTTP Methods\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request configuration\n */\nexport interface RequestConfig {\n  method?: HttpMethod;\n  headers?: Record;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Build API URL with base URL\n */\nexport const buildApiUrl = (endpoint: string): string => {\n  const baseUrl = AppConfig.BASE_API_URL.replace(/\\/$/, ''); // Remove trailing slash\n  const cleanEndpoint = endpoint.replace(/^\\//, ''); // Remove leading slash\n  return `${baseUrl}/api/v1/${cleanEndpoint}`;\n};\n\n/**\n * Build query parameters string\n */\nexport const buildQueryParams = (params: Record): string => {\n  const cleanParams = Object.entries(params)\n    .filter(\n      ([_, value]) => value !== undefined && value !== null && value !== ''\n    )\n    .map(([key, value]) => [key, String(value)]);\n\n  if (cleanParams.length === 0) {\n    return '';\n  }\n\n  const searchParams = new URLSearchParams(cleanParams);\n  return `?${searchParams.toString()}`;\n};\n\n/**\n * Get request headers with common defaults\n */\nexport const getRequestHeaders = (\n  token?: string,\n  additionalHeaders?: Record\n): Record => {\n  const headers: Record = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'X-App-Version': '1.0.0',\n    'X-Platform': 'mobile',\n    ...additionalHeaders,\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n/**\n * Parse API error response\n */\nexport const parseApiError = (error: any): ApiError => {\n  // Handle different error formats\n  if (error?.data?.error) {\n    return {\n      code: error.status || 500,\n      message: error.data.error.message || 'An error occurred',\n      details: error.data.error.details,\n    };\n  }\n\n  if (error?.data?.message) {\n    return {\n      code: error.status || 500,\n      message: error.data.message,\n      details: error.data,\n    };\n  }\n\n  if (error?.message) {\n    return {\n      code: error.status || 500,\n      message: error.message,\n      details: error,\n    };\n  }\n\n  return {\n    code: error?.status || 500,\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if error is a network error\n */\nexport const isNetworkError = (error: any): boolean => {\n  return (\n    error?.name === 'NetworkError' ||\n    error?.code === 'NETWORK_ERROR' ||\n    error?.status === 0 ||\n    !navigator.onLine\n  );\n};\n\n/**\n * Check if error requires authentication\n */\nexport const isAuthError = (error: any): boolean => {\n  return error?.status === 401 || error?.status === 403;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isNetworkError(error)) {\n    return true;\n  }\n\n  const retryableStatuses = [408, 429, 500, 502, 503, 504];\n  return retryableStatuses.includes(error?.status);\n};\n\n/**\n * Calculate retry delay with exponential backoff\n */\nexport const calculateRetryDelay = (\n  attempt: number,\n  baseDelay: number = 1000\n): number => {\n  // Exponential backoff: baseDelay * 2^attempt + random jitter\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\n  const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n  return Math.min(exponentialDelay + jitter, 30000); // Cap at 30 seconds\n};\n\n/**\n * Format file size for uploads\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Validate file for upload\n */\nexport const validateFileUpload = (\n  file: {size: number; type: string; name: string},\n  options: {\n    maxSize?: number;\n    allowedTypes?: string[];\n    allowedExtensions?: string[];\n  } = {}\n): {valid: boolean; error?: string} => {\n  const {\n    maxSize = 10 * 1024 * 1024, // 10MB default\n    allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.pdf'],\n  } = options;\n\n  // Check file size\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: `File size must be less than ${formatFileSize(maxSize)}`,\n    };\n  }\n\n  // Check file type\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  // Check file extension\n  const extension = file.name\n    .toLowerCase()\n    .substring(file.name.lastIndexOf('.'));\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `File extension ${extension} is not allowed`,\n    };\n  }\n\n  return {valid: true};\n};\n\n/**\n * Debug API request/response\n */\nexport const debugApiCall = (\n  method: string,\n  url: string,\n  request?: any,\n  response?: any,\n  error?: any\n) => {\n  if (!__DEV__) {\n    return;\n  }\n\n  console.group(`[API] ${method} ${url}`);\n\n  if (request) {\n    console.log('Request:', request);\n  }\n\n  if (response) {\n    console.log('Response:', response);\n  }\n\n  if (error) {\n    console.error('Error:', error);\n  }\n\n  console.groupEnd();\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthAttemptState.html":{"url":"interfaces/AuthAttemptState.html","title":"interface - AuthAttemptState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthAttemptState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                Auth Attempt Tracking\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attemptsLeft\n                                        \n                                \n                                \n                                        \n                                            isLockedOut\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lockoutExpiresAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attemptsLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attemptsLeft:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLockedOut\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLockedOut:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lockoutExpiresAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lockoutExpiresAt:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthState.html":{"url":"interfaces/AuthState.html","title":"interface - AuthState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/authSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                        \n                                            isLoggedIn\n                                        \n                                \n                                \n                                        \n                                            isSendingOtp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastLoginTime\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            token\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoggedIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoggedIn:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSendingOtp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSendingOtp:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastLoginTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastLoginTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, createAsyncThunk, PayloadAction} from '@reduxjs/toolkit';\nimport {authApi} from '../api/endpoints/auth';\nimport {SecureStorageError} from '../errors/SecureStorageError';\nimport {saveJWT, clearJWT, getJWT} from '../storage/secureStorage';\nimport {setStorageItem, STORAGE_KEYS} from '../utils/storageHelpers';\n\n/**\n * User interface\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  address?: string;\n  state?: string;\n  pinCode?: string;\n  role?: string;\n}\n\n/**\n * Authentication State\n */\nexport interface AuthState {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  isSendingOtp: boolean;\n  token?: string;\n  refreshToken?: string;\n  user?: User;\n  lastLoginTime?: number;\n  error?: string;\n}\n\n/**\n * Initial state\n */\nconst initialState: AuthState = {\n  isLoggedIn: false,\n  isLoading: false,\n  isSendingOtp: false,\n  token: undefined,\n  refreshToken: undefined,\n  user: undefined,\n  lastLoginTime: undefined,\n  error: undefined,\n};\n\n// ===============================\n// ASYNC THUNKS\n// ===============================\n\n/**\n * Send OTP Async Thunk\n */\nexport const sendOtpThunk = createAsyncThunk(\n  'auth/sendOtp',\n  async (phone: string, {rejectWithValue}) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // In real app, this would call your OTP API\n      // const response = await otpService.sendOtp(phone);\n\n      // For demo, always succeed\n      console.log(`[Auth] OTP sent to ${phone}`);\n      return {phone};\n    } catch (error: any) {\n      console.error('[Auth] Send OTP error:', error);\n      return rejectWithValue(error.message || 'Failed to send OTP');\n    }\n  }\n);\n\n/**\n * Login with phone and OTP using secure storage\n */\nexport const loginWithOtp = createAsyncThunk(\n  'auth/loginWithOtp',\n  async (\n    {phone, otp}: {phone: string; otp: string},\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      // Simulate API call - replace with real API in later tasks\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Demo: Accept OTP 123456, reject others\n      if (otp !== '123456') {\n        throw new Error('Invalid OTP. Please try again.');\n      }\n\n      const user: User = {\n        id: `user_${Date.now()}`,\n        phone,\n        name: 'Demo User',\n        email: 'demo@solarium.com',\n      };\n\n      const token = `demo_token_${Date.now()}`;\n\n      // Store in secure storage\n      try {\n        await saveJWT(token);\n        console.log('[Auth] JWT token saved to secure storage');\n      } catch (storageError) {\n        console.error('[Auth] Failed to save JWT token:', storageError);\n\n        if (storageError instanceof SecureStorageError) {\n          // Dispatch logout to clear any partial state\n          dispatch(logout());\n          // Set user-visible error message\n          dispatch({\n            type: 'ui/setError',\n            payload: 'Unable to save login session. Please try again.',\n          });\n          return rejectWithValue('Secure storage unavailable');\n        }\n\n        // For other errors, continue but log warning\n        console.warn(\n          '[Auth] Non-critical storage error during login:',\n          storageError\n        );\n      }\n\n      return {token, user};\n    } catch (error: any) {\n      console.error('[Auth] Login failed:', error);\n      return rejectWithValue(error.message || 'Login failed');\n    }\n  }\n);\n\n/**\n * Logout and clear secure storage\n */\nexport const logoutUser = createAsyncThunk(\n  'auth/logout',\n  async (_, {dispatch}) => {\n    try {\n      // Clear secure storage\n      try {\n        await clearJWT();\n        console.log('[Auth] JWT cleared from secure storage');\n      } catch (storageError) {\n        console.error('[Auth] Failed to clear JWT token:', storageError);\n\n        if (storageError instanceof SecureStorageError) {\n          // Set user-visible warning but continue with logout\n          dispatch({\n            type: 'ui/setError',\n            payload:\n              'Session may not be fully cleared. Please restart the app.',\n          });\n        }\n\n        // Continue with logout even if storage clear fails\n      }\n\n      // In real app, call logout API to invalidate token\n      // await authService.logout();\n\n      console.log('[Auth] Logout successful');\n      return true;\n    } catch (error) {\n      console.error('[Auth] Logout error:', error);\n      // Still dispatch logout even if other operations fail\n      return true;\n    }\n  }\n);\n\n/**\n * Refresh Token Async Thunk\n */\nexport const refreshTokenThunk = createAsyncThunk(\n  'auth/refreshToken',\n  async (_, {getState, rejectWithValue}) => {\n    try {\n      const state = getState() as {auth: AuthState};\n      const {refreshToken} = state.auth;\n\n      if (!refreshToken) {\n        return rejectWithValue('No refresh token available');\n      }\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In real app, call refresh token API\n      // const response = await authService.refreshToken(refreshToken);\n\n      const newTokens = {\n        token: `refreshed_token_${Date.now()}`,\n        refreshToken: `refreshed_refresh_${Date.now()}`,\n      };\n\n      // Store new token\n      await setStorageItem(STORAGE_KEYS.AUTH_TOKEN, newTokens.token);\n\n      console.log('[Auth] Token refreshed successfully');\n      return newTokens;\n    } catch (error: any) {\n      console.error('[Auth] Token refresh error:', error);\n      return rejectWithValue(error.message || 'Token refresh failed');\n    }\n  }\n);\n\n/**\n * Enhanced login with RTK Query integration and secure storage\n */\nexport const loginWithOtpEnhanced = createAsyncThunk(\n  'auth/loginWithOtpEnhanced',\n  async (\n    {phone, otp}: {phone: string; otp: string},\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      // Use RTK Query mutation\n      const result = await dispatch(\n        authApi.endpoints.verifyOtp.initiate({phone, otp})\n      ).unwrap();\n\n      // Store token in secure storage\n      if (result.token) {\n        try {\n          await saveJWT(result.token);\n          console.log('[Auth] JWT token saved to secure storage (enhanced)');\n        } catch (storageError) {\n          console.error(\n            '[Auth] Failed to save JWT token (enhanced):',\n            storageError\n          );\n\n          if (storageError instanceof SecureStorageError) {\n            dispatch(logout());\n            dispatch({\n              type: 'ui/setError',\n              payload: 'Unable to save login session. Please try again.',\n            });\n            return rejectWithValue('Secure storage unavailable');\n          }\n        }\n      }\n\n      return result;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Login failed');\n    }\n  }\n);\n\n/**\n * Enhanced logout with API call and secure storage\n */\nexport const logoutUserEnhanced = createAsyncThunk(\n  'auth/logoutUserEnhanced',\n  async (_, {dispatch}) => {\n    try {\n      // Call logout API (optional - for server-side session cleanup)\n      try {\n        await dispatch(authApi.endpoints.logoutUser.initiate()).unwrap();\n      } catch (error) {\n        // Continue with logout even if API call fails\n        console.warn(\n          '[Auth] Logout API call failed, continuing with local logout:',\n          error\n        );\n      }\n\n      // Clear secure storage\n      try {\n        await clearJWT();\n        console.log('[Auth] JWT cleared from secure storage (enhanced)');\n      } catch (storageError) {\n        console.error(\n          '[Auth] Failed to clear JWT token (enhanced):',\n          storageError\n        );\n\n        if (storageError instanceof SecureStorageError) {\n          dispatch({\n            type: 'ui/setError',\n            payload:\n              'Session may not be fully cleared. Please restart the app.',\n          });\n        }\n      }\n\n      // Reset API cache\n      dispatch(authApi.util.resetApiState());\n\n      return true;\n    } catch (error) {\n      console.error('[Auth] Logout error (enhanced):', error);\n      // Still return success for local logout\n      return true;\n    }\n  }\n);\n\n/**\n * Restore authentication state on app startup\n * Validates Redux state against secure storage JWT token\n */\nexport const restoreAuthState = createAsyncThunk(\n  'auth/restoreAuthState',\n  async (_, {getState, dispatch, rejectWithValue}) => {\n    try {\n      console.log('[Auth] Starting auth state restoration...');\n\n      const state = getState() as {auth: AuthState};\n      const {isLoggedIn, user, token: reduxToken} = state.auth;\n      console.log('reduxToken', reduxToken);\n\n      // Check if JWT token exists in secure storage\n      let secureToken: string | undefined;\n      try {\n        secureToken = await getJWT();\n        console.log('[Auth] Secure storage check completed successfully');\n      } catch (error) {\n        console.error(\n          '[Auth] Failed to retrieve JWT from secure storage:',\n          error\n        );\n\n        // Log detailed error information for debugging\n        if (__DEV__) {\n          console.error('[Auth] Secure storage error details:', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n            stack: error instanceof Error ? error.stack : undefined,\n            isSecureStorageError: error instanceof SecureStorageError,\n            currentAuthState: {isLoggedIn, hasUser: !!user},\n          });\n        }\n\n        if (error instanceof SecureStorageError) {\n          // If secure storage is inaccessible and user appears logged in, logout for safety\n          if (isLoggedIn) {\n            console.warn(\n              '[Auth] Secure storage error - logging out for safety'\n            );\n            dispatch(logout());\n          }\n          return rejectWithValue({\n            type: 'SECURE_STORAGE_ERROR',\n            message: 'Secure storage unavailable',\n            originalError: error.message,\n          });\n        }\n\n        // For other errors, assume no token exists but continue restoration\n        console.warn(\n          '[Auth] Non-critical secure storage error - continuing with restoration'\n        );\n        secureToken = undefined;\n      }\n\n      console.log(\n        '[Auth] State check - Redux logged in:',\n        isLoggedIn,\n        'Secure token exists:',\n        !!secureToken\n      );\n\n      // Case 1: Redux says logged in but no secure token - logout\n      if (isLoggedIn && !secureToken) {\n        console.warn(\n          '[Auth] Logged in state but no secure token - logging out'\n        );\n        dispatch(logout());\n        return {\n          action: 'logout',\n          reason: 'No secure token found',\n        };\n      }\n\n      // Case 2: Redux says logged out but secure token exists - could restore but play it safe\n      if (!isLoggedIn && secureToken) {\n        console.warn(\n          '[Auth] Secure token exists but not logged in - clearing token for consistency'\n        );\n        try {\n          await clearJWT();\n        } catch (clearError) {\n          console.error('[Auth] Failed to clear orphaned token:', clearError);\n        }\n        return {\n          action: 'clear_orphaned_token',\n          reason: 'Token exists but user not logged in',\n        };\n      }\n\n      // Case 3: Both logged in and token exists - validate consistency\n      if (isLoggedIn && secureToken) {\n        console.log('[Auth] Auth state is consistent - user remains logged in');\n        return {\n          action: 'maintain',\n          reason: 'State is consistent',\n        };\n      }\n\n      // Case 4: Both logged out and no token - all good\n      console.log(\n        '[Auth] User is logged out and no token exists - state is consistent'\n      );\n      return {\n        action: 'maintain',\n        reason: 'User is properly logged out',\n      };\n    } catch (error) {\n      console.error('[Auth] Auth restoration failed:', error);\n\n      // Log detailed error information\n      if (__DEV__) {\n        console.error('[Auth] Restoration error details:', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n          stack: error instanceof Error ? error.stack : undefined,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      return rejectWithValue({\n        type: 'RESTORATION_ERROR',\n        message: 'Auth restoration failed',\n        originalError: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n);\n\n/**\n * Enhanced login success action that saves to secure storage\n * Use this instead of the direct loginSuccess action\n */\nexport const loginSuccessEnhanced = createAsyncThunk(\n  'auth/loginSuccessEnhanced',\n  async (\n    payload: {\n      token: string;\n      refreshToken?: string;\n      user: User;\n    },\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      console.log('[Auth] Processing enhanced login success...');\n\n      // First save JWT to secure storage\n      await saveJWT(payload.token);\n      console.log('[Auth] JWT saved to secure storage successfully');\n\n      // Then update Redux state\n      dispatch(loginSuccess(payload));\n\n      return payload;\n    } catch (error) {\n      console.error('[Auth] Failed to save JWT during login:', error);\n\n      if (error instanceof SecureStorageError) {\n        // If secure storage fails, still complete login but warn\n        console.warn('[Auth] Secure storage failed, completing login anyway');\n        dispatch(loginSuccess(payload));\n\n        // Set a UI warning about storage issues\n        dispatch({\n          type: 'ui/setError',\n          payload:\n            'Login successful but session may not persist. Please restart the app if you experience issues.',\n        });\n\n        return payload;\n      }\n\n      // For other errors, fail the login\n      return rejectWithValue('Failed to complete login process');\n    }\n  }\n);\n\n// ===============================\n// SLICE\n// ===============================\n\n/**\n * Auth slice\n */\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    // Manual loading control\n    setLoading: (state, action: PayloadAction) => {\n      state.isLoading = action.payload;\n    },\n\n    // Clear error\n    clearError: state => {\n      state.error = undefined;\n    },\n\n    // Update user profile\n    updateUserProfile: (state, action: PayloadAction>) => {\n      if (state.user) {\n        state.user = {...state.user, ...action.payload};\n      }\n    },\n\n    // Legacy actions for compatibility (keeping them for now)\n    loginRequest: state => {\n      state.isLoading = true;\n      state.error = undefined;\n    },\n    loginSuccess: (\n      state,\n      action: PayloadAction\n    ) => {\n      state.isLoggedIn = true;\n      state.isLoading = false;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken;\n      state.user = action.payload.user;\n      state.lastLoginTime = Date.now();\n      state.error = undefined;\n    },\n    loginFailure: (state, action: PayloadAction) => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.token = undefined;\n      state.refreshToken = undefined;\n      state.user = undefined;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.token = undefined;\n      state.refreshToken = undefined;\n      state.user = undefined;\n      state.lastLoginTime = undefined;\n      state.error = undefined;\n    },\n  },\n  extraReducers: builder => {\n    // Send OTP\n    builder\n      .addCase(sendOtpThunk.pending, state => {\n        state.isSendingOtp = true;\n        state.error = undefined;\n      })\n      .addCase(sendOtpThunk.fulfilled, state => {\n        state.isSendingOtp = false;\n        state.error = undefined;\n      })\n      .addCase(sendOtpThunk.rejected, (state, action) => {\n        state.isSendingOtp = false;\n        state.error = action.payload as string;\n      })\n\n      // Login\n      .addCase(loginWithOtp.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginWithOtp.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isLoggedIn = true;\n        state.token = action.payload.token;\n        // state.refreshToken = action.payload.refreshToken;\n        state.user = action.payload.user;\n        state.lastLoginTime = Date.now();\n        state.error = undefined;\n      })\n      .addCase(loginWithOtp.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.error = action.payload as string;\n      })\n\n      // Logout\n      .addCase(logoutUser.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(logoutUser.fulfilled, state => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.lastLoginTime = undefined;\n        state.error = undefined;\n      })\n      .addCase(logoutUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      })\n\n      // Refresh Token\n      .addCase(refreshTokenThunk.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(refreshTokenThunk.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.token = action.payload.token;\n        if (action.payload.refreshToken) {\n          state.refreshToken = action.payload.refreshToken;\n        }\n        state.error = undefined;\n      })\n      .addCase(refreshTokenThunk.rejected, (state, action) => {\n        state.isLoading = false;\n        // If refresh fails, consider logging out\n        if (action.payload === 'No refresh token available') {\n          state.isLoggedIn = false;\n          state.token = undefined;\n          state.refreshToken = undefined;\n          state.user = undefined;\n        }\n        state.error = action.payload as string;\n      })\n      .addCase(loginWithOtpEnhanced.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginWithOtpEnhanced.fulfilled, (state, action) => {\n        state.isLoggedIn = true;\n        state.isLoading = false;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.user = action.payload.user;\n        state.lastLoginTime = Date.now();\n        state.error = undefined;\n      })\n      .addCase(loginWithOtpEnhanced.rejected, (state, action) => {\n        state.isLoggedIn = false;\n        state.isLoading = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.error = action.payload as string;\n      })\n      .addCase(logoutUserEnhanced.fulfilled, state => {\n        state.isLoggedIn = false;\n        state.isLoading = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.lastLoginTime = undefined;\n        state.error = undefined;\n      })\n\n      // Restore Auth State\n      .addCase(restoreAuthState.pending, state => {\n        // Don't set loading state for restoration to avoid UI flicker\n        console.log('[Auth] Auth restoration pending: state - ', state);\n        console.log('[Auth] Auth restoration in progress...');\n      })\n      .addCase(restoreAuthState.fulfilled, (state, action) => {\n        // State changes are handled by the thunk itself via dispatch\n        console.log('[Auth] Auth restoration completed:', action.payload);\n      })\n      .addCase(restoreAuthState.rejected, (state, action) => {\n        console.error('[Auth] Auth restoration failed:', action.payload);\n        // Don't change auth state on restoration failure to be safe\n      })\n\n      // Enhanced Login Success\n      .addCase(loginSuccessEnhanced.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginSuccessEnhanced.fulfilled, (state, action) => {\n        // State is already updated by the dispatched loginSuccess action\n        state.isLoading = false;\n        console.log('[Auth] Enhanced login success: action - ', action);\n        console.log('[Auth] Enhanced login success completed');\n      })\n      .addCase(loginSuccessEnhanced.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        console.error('[Auth] Enhanced login success failed:', action.payload);\n      });\n  },\n});\n\nexport const {\n  setLoading,\n  clearError,\n  updateUserProfile,\n  // Legacy actions (for compatibility)\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  logout,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n\n// ===============================\n// SELECTORS\n// ===============================\n\nexport const selectIsLoggedIn = (state: {auth: AuthState}) =>\n  state.auth.isLoggedIn;\nexport const selectIsLoading = (state: {auth: AuthState}) =>\n  state.auth.isLoading;\nexport const selectIsSendingOtp = (state: {auth: AuthState}) =>\n  state.auth.isSendingOtp;\nexport const selectUser = (state: {auth: AuthState}) => state.auth.user;\nexport const selectToken = (state: {auth: AuthState}) => state.auth.token;\nexport const selectAuthError = (state: {auth: AuthState}) => state.auth.error;\nexport const selectCurrentUser = (state: {auth: AuthState}) => state.auth.user;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AzureBlobUploadParams.html":{"url":"interfaces/AzureBlobUploadParams.html","title":"interface - AzureBlobUploadParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AzureBlobUploadParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/AzureBlob.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload parameters for Azure Blob\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            abortSignal\n                                        \n                                \n                                \n                                        \n                                            expiresInSec\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getFreshSas\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onProgress\n                                        \n                                \n                                \n                                        \n                                            sasUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abortSignal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        abortSignal:     AbortSignal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AbortSignal\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSec:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:         RNFile\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RNFile\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getFreshSas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getFreshSas:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sasUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sasUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SasInfo {\n  sasUrl: string;\n  expiresInSec: number;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\n/**\n * Upload parameters for Azure Blob\n */\nexport interface AzureBlobUploadParams {\n  sasUrl: string;\n  file: RNFile;\n  expiresInSec: number;\n  onProgress?: (progress: UploadProgress) => void;\n  getFreshSas?: () => Promise;\n  abortSignal?: AbortSignal;\n}\n\n/**\n * Upload error types\n */\nexport type UploadErrorType =\n  | 'NETWORK_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'EXPIRED_TOKEN'\n  | 'CANCELLED'\n  | 'INVALID_RESPONSE'\n  | 'UPLOAD_EXPIRED';\n\n/**\n * Upload error with specific type\n */\nexport interface UploadError extends Error {\n  type: UploadErrorType;\n  statusCode?: number;\n  retryable: boolean;\n}\n\n// Import RNFile from existing types\nimport type {RNFile} from './File';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseComponentProps.html":{"url":"interfaces/BaseComponentProps.html","title":"interface - BaseComponentProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseComponentProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n            \n                Description\n            \n            \n                Common component props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessibilityHint\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            accessibilityLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessibilityHint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessibilityHint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        accessibilityLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessibilityLabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     ViewStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ButtonProps.html":{"url":"interfaces/ButtonProps.html","title":"interface - ButtonProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ButtonProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fullWidth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconPosition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            textStyle\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            variant\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fullWidth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fullWidth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconPosition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconPosition:     \"left\" | \"right\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"left\" | \"right\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         ButtonSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:     ViewStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ViewStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        textStyle:     TextStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TextStyle\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        variant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        variant:         ButtonVariant\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ButtonVariant\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CacheState.html":{"url":"interfaces/CacheState.html","title":"interface - CacheState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CacheState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/cacheSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                Cache State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cachedData\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastSyncTime\n                                        \n                                \n                                \n                                        \n                                            syncInProgress\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cachedData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cachedData:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastSyncTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastSyncTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        syncInProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        syncInProgress:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\n/**\n * Cache State\n */\nexport interface CacheState {\n  lastSyncTime?: number;\n  cachedData: Record;\n  syncInProgress: boolean;\n}\n\n/**\n * Initial state\n */\nconst initialState: CacheState = {\n  lastSyncTime: undefined,\n  cachedData: {},\n  syncInProgress: false,\n};\n\n/**\n * Cache slice\n */\nconst cacheSlice = createSlice({\n  name: 'cache',\n  initialState,\n  reducers: {\n    setCachedData: (state, action: PayloadAction) => {\n      state.cachedData[action.payload.key] = action.payload.data;\n    },\n    clearCache: state => {\n      state.cachedData = {};\n      state.lastSyncTime = undefined;\n    },\n    setSyncTime: (state, action: PayloadAction) => {\n      state.lastSyncTime = action.payload;\n    },\n    setSyncInProgress: (state, action: PayloadAction) => {\n      state.syncInProgress = action.payload;\n    },\n  },\n});\n\nexport const {setCachedData, clearCache, setSyncTime, setSyncInProgress} =\n  cacheSlice.actions;\n\nexport default cacheSlice.reducer;\n\n// Selectors\nexport const selectCachedData = (state: {cache: CacheState}) =>\n  state.cache.cachedData;\nexport const selectLastSyncTime = (state: {cache: CacheState}) =>\n  state.cache.lastSyncTime;\nexport const selectSyncInProgress = (state: {cache: CacheState}) =>\n  state.cache.syncInProgress;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartBadgeProps.html":{"url":"interfaces/CartBadgeProps.html","title":"interface - CartBadgeProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartBadgeProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/CartBadge/CartBadge.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport {Badge} from 'react-native-paper';\nimport {useCartActions} from '../../../hooks/useCartActions';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\nexport interface CartBadgeProps {\n  size?: number;\n  style?: any;\n}\n\nconst CartBadge: React.FC = ({size = 18, style}) => {\n  const theme = useAppTheme();\n  const {cartCount} = useCartActions();\n\n  if (cartCount === 0) {\n    return null;\n  }\n\n  return (\n    \n       0}\n      >\n        {cartCount > 99 ? '99+' : cartCount.toString()}\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n    zIndex: 1,\n  },\n  badge: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    minWidth: 18,\n    minHeight: 18,\n  },\n});\n\nexport default CartBadge;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartItem.html":{"url":"interfaces/CartItem.html","title":"interface - CartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/servicesCartSlice.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addedAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            qty\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        qty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        qty:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Service\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Service\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSelector, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport type {Service} from '../types/Service';\n\nexport interface CartItem {\n  id: string;\n  qty: number;\n  service: Service;\n  addedAt: string;\n}\n\nexport interface ServicesCartState {\n  items: Record;\n  totalItems: number;\n  lastUpdated: string | null;\n}\n\nconst initialState: ServicesCartState = {\n  items: {},\n  totalItems: 0,\n  lastUpdated: null,\n};\n\n/**\n * Validate cart state for persistence recovery\n */\nexport const validateCartState = (state: any): boolean => {\n  if (!state || typeof state !== 'object') {\n    return false;\n  }\n  if (!state.items || typeof state.items !== 'object') {\n    return false;\n  }\n  if (typeof state.totalItems !== 'number') {\n    return false;\n  }\n\n  // Validate each cart item\n  for (const [key, item] of Object.entries(state.items)) {\n    if (!item || typeof item !== 'object') {\n      return false;\n    }\n    const cartItem = item as any;\n    if (!cartItem.id || typeof cartItem.id !== 'string') {\n      return false;\n    }\n    if (typeof cartItem.qty !== 'number' || cartItem.qty ): number => {\n  return Object.values(items).reduce((total, item) => total + item.qty, 0);\n};\n\n/**\n * Check if adding item would exceed max limit\n */\nconst wouldExceedMaxItems = (\n  items: Record,\n  serviceId: string,\n  qtyToAdd: number\n): boolean => {\n  const currentTotal = calculateTotalItems(items);\n  const existingQty = items[serviceId]?.qty || 0;\n  const newTotal = currentTotal - existingQty + (existingQty + qtyToAdd);\n  return newTotal > 20;\n};\n\nexport const servicesCartSlice = createSlice({\n  name: 'servicesCart',\n  initialState,\n  reducers: {\n    /**\n     * Add service to cart or increase existing quantity\n     *\n     * Enforces 20-item total limit and validates input.\n     * If service exists, increases quantity. If new, creates cart item.\n     *\n     * @param action.payload.service - Complete service object to add\n     * @param action.payload.qty - Quantity to add (default: 1)\n     *\n     * @example\n     * ```typescript\n     * dispatch(addToCart({\n     *   service: { serviceId: 'solar-install', name: 'Installation', ... },\n     *   qty: 3\n     * }));\n     * ```\n     */\n    addToCart: (\n      state,\n      action: PayloadAction\n    ) => {\n      const {service, qty = 1} = action.payload;\n      const serviceId = service.serviceId;\n\n      // Check max items constraint\n      if (wouldExceedMaxItems(state.items, serviceId, qty)) {\n        console.warn(\n          `[Cart] Cannot add ${qty} of ${serviceId}. Would exceed 20 item limit.`\n        );\n        return; // Don't modify state if it would exceed limit\n      }\n\n      const timestamp = new Date().toISOString();\n\n      if (state.items[serviceId]) {\n        // Update existing item\n        state.items[serviceId].qty += qty;\n        state.items[serviceId].service = service; // Update service data\n      } else {\n        // Add new item\n        state.items[serviceId] = {\n          id: serviceId,\n          qty,\n          service,\n          addedAt: timestamp,\n        };\n      }\n\n      state.totalItems = calculateTotalItems(state.items);\n      state.lastUpdated = timestamp;\n    },\n\n    /**\n     * Remove service from cart or decrease quantity\n     *\n     * If quantity to remove >= current quantity, removes service completely.\n     * Otherwise, decreases quantity by specified amount.\n     *\n     * @param action.payload.serviceId - Service ID to remove from\n     * @param action.payload.qty - Quantity to remove (default: 1)\n     */\n    removeFromCart: (\n      state,\n      action: PayloadAction\n    ) => {\n      const {serviceId, qty = 1} = action.payload;\n      const existingItem = state.items[serviceId];\n\n      if (!existingItem) {\n        console.warn(`[Cart] Cannot remove ${serviceId}. Not in cart.`);\n        return;\n      }\n\n      const timestamp = new Date().toISOString();\n\n      if (existingItem.qty \n    ) => {\n      const {serviceId, qty} = action.payload;\n      const existingItem = state.items[serviceId];\n\n      if (!existingItem) {\n        console.warn(`[Cart] Cannot update ${serviceId}. Not in cart.`);\n        return;\n      }\n\n      if (qty  20) {\n          console.warn(\n            `[Cart] Cannot set ${serviceId} quantity to ${qty}. Would exceed 20 item limit.`\n          );\n          return;\n        }\n\n        state.items[serviceId].qty = qty;\n      }\n\n      state.totalItems = calculateTotalItems(state.items);\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    /**\n     * Clear entire cart\n     */\n    clearCart: state => {\n      state.items = {};\n      state.totalItems = 0;\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    /**\n     * Remove specific service completely\n     */\n    removeService: (state, action: PayloadAction) => {\n      const {serviceId} = action.payload;\n\n      if (state.items[serviceId]) {\n        delete state.items[serviceId];\n        state.totalItems = calculateTotalItems(state.items);\n        state.lastUpdated = new Date().toISOString();\n      }\n    },\n\n    /**\n     * Reset cart state (for testing/corruption recovery)\n     */\n    resetCartState: () => initialState,\n  },\n});\n\n// Export actions\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  removeService,\n  resetCartState,\n} = servicesCartSlice.actions;\n\n// Selectors\nexport const selectCartItems = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.items ?? {};\n\nexport const selectCartItemsArray = createSelector([selectCartItems], items =>\n  Object.values(items)\n);\n\nexport const selectCartCount = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.totalItems ?? 0;\n\nexport const selectCartItemById =\n  (serviceId: string) =>\n  (state: {servicesCart: ServicesCartState | undefined}) =>\n    state.servicesCart?.items[serviceId] || null;\n\nexport const selectCartIsEmpty = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => (state.servicesCart?.totalItems ?? 0) === 0;\n\nexport const selectCartLastUpdated = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.lastUpdated ?? null;\n\nexport const selectUniqueItemsCount = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => Object.keys(state.servicesCart?.items ?? {}).length;\n\nexport const selectIsCartFull = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => (state.servicesCart?.totalItems ?? 0) >= 20;\n\n// Export reducer\nexport default servicesCartSlice.reducer;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartItemRowProps.html":{"url":"interfaces/CartItemRowProps.html","title":"interface - CartItemRowProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartItemRowProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/cart/CartItemRow/CartItemRow.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cartItem\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            readonly\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cartItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItem:         CartItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CartItem\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Cart item to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        readonly\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        readonly:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show quantity controls (disabled for checkout)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport type {CartItem} from '../../../store/servicesCartSlice';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\nexport interface CartItemRowProps {\n  /** Cart item to display */\n  cartItem: CartItem;\n  /** Whether to show quantity controls (disabled for checkout) */\n  readonly?: boolean;\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * CartItemRow Component\n */\nconst CartItemRow: React.FC = ({\n  cartItem,\n  readonly = true,\n  testID,\n}) => {\n  const theme = useAppTheme();\n  const {service, qty} = cartItem;\n\n  return (\n    \n      {/* Service Header */}\n      \n        \n        \n          \n            {service.name}\n          \n          \n            {service.type}\n          \n        \n        \n          \n            Qty:\n          \n          \n            {qty}\n          \n        \n      \n\n      {/* Service Description */}\n      \n        {service.description}\n      \n\n      {/* Footer with pricing info */}\n      \n        {service.priceRange && (\n          \n            \n            \n              Contact for pricing\n            \n          \n        )}\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 12,\n    marginBottom: 8,\n    borderRadius: 8,\n    elevation: 1,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 6,\n  },\n  icon: {\n    marginRight: 8,\n  },\n  serviceInfo: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginBottom: 2,\n  },\n  serviceType: {\n    fontSize: 12,\n    fontWeight: '400',\n  },\n  quantityContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n    borderRadius: 4,\n  },\n  quantityLabel: {\n    fontSize: 12,\n    marginRight: 4,\n  },\n  quantityValue: {\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  description: {\n    fontSize: 12,\n    lineHeight: 16,\n    marginBottom: 6,\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n  },\n  priceContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  priceText: {\n    fontSize: 12,\n    fontWeight: '500',\n    marginLeft: 2,\n  },\n});\n\nexport default CartItemRow;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CheckoutFormData.html":{"url":"interfaces/CheckoutFormData.html","title":"interface - CheckoutFormData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CheckoutFormData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/CartCheckoutScreen.tsx\n        \n\n\n            \n                Description\n            \n            \n                Form data interface (simplified to match API)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useFocusEffect, useNavigation} from '@react-navigation/native';\nimport {StackNavigationProp} from '@react-navigation/stack';\nimport React, {useCallback, useState} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  StyleSheet,\n  Alert,\n  ScrollView,\n} from 'react-native';\nimport {Snackbar} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useCreateLeadMutation} from '../../api/endpoints/leads';\nimport {\n  SafeAreaContainer,\n  Button,\n  TextInput,\n  FormProviderWrapper,\n  CartItemRow,\n  Controller,\n  LoadingOverlayContainer,\n} from '../../components';\nimport {ServiceFetchError} from '../../errors';\nimport {useAppSelector, useAppDispatch} from '../../hooks/useTypedRedux';\nimport {useNewAuth} from '../../hooks/useNewAuth';\nimport type {RootStackParamList} from '../../navigation/types';\nimport {\n  selectCartItemsArray,\n  selectCartCount,\n  selectCartIsEmpty,\n  type CartItem,\n  clearCart,\n} from '../../store/servicesCartSlice';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {CreateLeadRequest} from '../../types/Lead';\n\ntype CartCheckoutScreenNavigationProp = StackNavigationProp;\n\n/**\n * Form data interface (simplified to match API)\n */\ninterface CheckoutFormData {\n  address: string;\n}\n\n/**\n * Cart Checkout Screen Component\n */\nconst CartCheckoutScreen: React.FC = () => {\n  const theme = useAppTheme();\n  const navigation = useNavigation();\n  const dispatch = useAppDispatch();\n\n  // API mutation hook\n  const [createLead, {isLoading: isCreatingLead}] = useCreateLeadMutation();\n\n  // Auth state from new auth system\n  const {user: currentUser} = useNewAuth();\n\n  // Local state\n  const [snackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // Cart selectors\n  const cartItems = useAppSelector(selectCartItemsArray);\n  const cartCount = useAppSelector(selectCartCount);\n  const isCartEmpty = useAppSelector(selectCartIsEmpty);\n\n  // Form default values\n  const defaultValues: CheckoutFormData = {\n    address: '',\n  };\n\n  /**\n   * Handle empty cart redirect\n   */\n  const handleEmptyCartRedirect = useCallback(() => {\n    if (isCartEmpty) {\n      Alert.alert(\n        'Empty Cart',\n        'Your cart is empty. Please add services before checkout.',\n        [\n          {\n            text: 'OK',\n            onPress: () => navigation.goBack(),\n          },\n        ]\n      );\n    }\n  }, [isCartEmpty, navigation]);\n\n  /**\n   * Check for empty cart on screen focus\n   */\n  useFocusEffect(\n    useCallback(() => {\n      handleEmptyCartRedirect();\n    }, [handleEmptyCartRedirect])\n  );\n\n  /**\n   * Reset error state on screen focus\n   */\n  useFocusEffect(\n    useCallback(() => {\n      if (snackbarVisible) {\n        setSnackbarVisible(false);\n        setSnackbarMessage('');\n      }\n    }, [snackbarVisible])\n  );\n\n  /**\n   * Show error snackbar\n   */\n  const showError = useCallback((message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarVisible(true);\n  }, []);\n\n  /**\n   * Show success snackbar\n   */\n  const showSuccess = useCallback((message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarVisible(true);\n  }, []);\n\n  /**\n   * Handle form submission with real API call\n   */\n  const handleSubmit = useCallback(\n    async (data: CheckoutFormData) => {\n      // Early guard - prevent double submissions\n      if (isCreatingLead) {\n        console.log('[CartCheckout] Submission already in progress, ignoring');\n        return;\n      }\n\n      // Show confirmation alert before submitting\n      Alert.alert(\n        'Submit Service Request',\n        `Are you sure you want to submit this service request?\\n\\nCustomer: ${\n          currentUser?.name || 'Customer'\n        }\\nPhone: ${currentUser?.phone || 'N/A'}\\nAddress: ${\n          data.address\n        }\\nServices: ${cartCount} items\\n\\nThis will create a lead for our team to contact you.`,\n        [\n          {\n            text: 'Cancel',\n            style: 'cancel',\n          },\n          {\n            text: 'Submit Request',\n            style: 'default',\n            onPress: async () => {\n              try {\n                console.log('[CartCheckout] Starting lead creation...', {\n                  customerName: currentUser?.name || 'Customer',\n                  phone: currentUser?.phone || 'N/A',\n                  cartItems: cartItems.length,\n                  totalItems: cartCount,\n                });\n\n                // Prepare API payload (matches swagger spec exactly)\n                const serviceIds = cartItems.map(\n                  item => item.service.serviceId\n                );\n                const createLeadPayload: CreateLeadRequest = {\n                  customerName: currentUser?.name || `Customer_${Date.now()}`,\n                  phone: currentUser?.phone || '0000000000', // Use actual phone or fallback\n                  address: data.address.trim(),\n                  services: serviceIds,\n                };\n\n                console.log(\n                  '[CartCheckout] API payload (swagger compliant):',\n                  createLeadPayload\n                );\n\n                // Call the API\n                const result = await createLead(createLeadPayload).unwrap();\n\n                // Handle the actual API response structure\n                const leadId =\n                  result.leadId || result.data?.leadId || 'Unknown';\n\n                console.log('[CartCheckout] Lead created successfully:', {\n                  leadId,\n                  fullResponse: result,\n                });\n\n                // Clear cart immediately\n                dispatch(clearCart());\n\n                // Navigate to Services screen with success message\n                navigation.navigate('Main', {\n                  screen: 'Services',\n                  params: {\n                    showSuccessMessage: true,\n                    successMessage: `Service request submitted successfully! Lead ID: ${leadId}`,\n                    leadId,\n                  },\n                });\n              } catch (error) {\n                console.error('[CartCheckout] Lead creation failed:', error);\n\n                // Handle different error types\n                let errorMessage =\n                  'Failed to submit service request. Please try again.';\n\n                if (error instanceof ServiceFetchError) {\n                  errorMessage = error.message;\n                } else if (\n                  error &&\n                  typeof error === 'object' &&\n                  'message' in error\n                ) {\n                  errorMessage = (error as any).message;\n                } else if (\n                  error &&\n                  typeof error === 'object' &&\n                  'data' in error\n                ) {\n                  const errorData = (error as any).data;\n                  if (errorData && typeof errorData.message === 'string') {\n                    errorMessage = errorData.message;\n                  }\n                }\n\n                showError(errorMessage);\n              }\n            },\n          },\n        ]\n      );\n    },\n    [\n      cartItems,\n      cartCount,\n      currentUser,\n      isCreatingLead,\n      createLead,\n      dispatch,\n      navigation,\n      showSuccess,\n      showError,\n    ]\n  );\n\n  /**\n   * Calculate cart summary\n   */\n  const cartSummary = {\n    totalItems: cartCount,\n    uniqueServices: cartItems.length,\n  };\n\n  /**\n   * Handle clear cart with confirmation\n   */\n  const handleClearCart = useCallback(() => {\n    Alert.alert(\n      'Clear Cart',\n      'Are you sure you want to remove all items from your cart? This action cannot be undone.',\n      [\n        {\n          text: 'Cancel',\n          style: 'cancel',\n        },\n        {\n          text: 'Clear Cart',\n          style: 'destructive',\n          onPress: () => {\n            dispatch(clearCart());\n            navigation.navigate('Main', {screen: 'Services'});\n          },\n        },\n      ]\n    );\n  }, [dispatch, navigation]);\n\n  /**\n   * Render cart item\n   */\n  const renderCartItem = useCallback(\n    ({item, index}: {item: CartItem; index: number}) => (\n      \n    ),\n    []\n  );\n\n  /**\n   * Render cart summary header\n   */\n  const renderCartSummary = () => (\n    \n      \n        \n        \n          Cart Summary\n        \n      \n      \n        \n          {cartSummary.uniqueServices} Service\n          {cartSummary.uniqueServices !== 1 ? 's' : ''} •{' '}\n          {cartSummary.totalItems} Item{cartSummary.totalItems !== 1 ? 's' : ''}\n        \n      \n    \n  );\n\n  /**\n   * Render customer info\n   */\n  const renderCustomerInfo = () => (\n    \n      \n        \n        \n          Customer Information\n        \n      \n      \n        Name: {currentUser?.name || 'Customer'}\n      \n      \n        Phone: {currentUser?.phone || 'N/A'}\n      \n      {currentUser?.email && (\n        \n          Email: {currentUser.email}\n        \n      )}\n    \n  );\n\n  /**\n   * Render pricing footer\n   */\n  const renderPricingFooter = () => (\n    \n      \n        \n        \n          Contact us for detailed quotation based on your requirements\n        \n      \n    \n  );\n\n  /**\n   * Render form section (simplified - only address needed)\n   */\n  const renderFormSection = () => (\n    \n      {methods => (\n        \n          \n            Service Details\n          \n\n          {/* Address Field - Only field needed */}\n           {\n                const trimmed = value?.trim();\n                if (!trimmed) {\n                  return 'Address is required';\n                }\n                if (trimmed.length  (\n               field.onChange(text)}\n                errorMessage={fieldState.error?.message}\n                hasError={!!fieldState.error}\n                multiline\n                numberOfLines={4}\n                maxLength={300}\n                testID=\"address-input\"\n                accessibilityLabel=\"Service address input field\"\n                accessibilityHint=\"Enter the complete address where solar service is required\"\n              />\n            )}\n          />\n\n          {/* Info Text */}\n          \n            Please provide a complete address including area, city, and any\n            landmarks for easy location.\n          \n\n          {/* Submit Button */}\n          \n        \n      )}\n    \n  );\n\n  // Early return for empty cart (backup check)\n  if (isCartEmpty) {\n    return (\n      \n        \n          \n          \n            Your cart is empty\n          \n          \n            Add some services to continue with checkout\n          \n        \n      \n    );\n  }\n\n  return (\n    \n      {/* Loading Overlay */}\n      {isCreatingLead && (\n        \n      )}\n\n      \n        {/* Customer Info */}\n        {renderCustomerInfo()}\n\n        {/* Cart Summary */}\n        {renderCartSummary()}\n\n        {/* Cart Items List */}\n        \n           item.id}\n            renderItem={renderCartItem}\n            scrollEnabled={false}\n            showsVerticalScrollIndicator={false}\n          />\n        \n\n        {/* Pricing Footer */}\n        {renderPricingFooter()}\n\n        {/* Clear Cart Button */}\n        \n          \n        \n\n        {/* Form Section */}\n        {renderFormSection()}\n      \n\n      {/* Snackbar for success/error messages */}\n       {\n          setSnackbarVisible(false);\n          setSnackbarMessage('');\n        }}\n        duration={4000}\n        action={{\n          label: 'Dismiss',\n          onPress: () => {\n            setSnackbarVisible(false);\n            setSnackbarMessage('');\n          },\n        }}\n        style={styles.snackbar}\n      >\n        {snackbarMessage}\n      \n    \n  );\n};\n\n/**\n * Styles\n */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n    padding: 16,\n  },\n  // Customer Info\n  customerContainer: {\n    marginBottom: 16,\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: '#E0E0E0',\n  },\n  customerHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  customerTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  customerText: {\n    fontSize: 14,\n    marginBottom: 4,\n  },\n  // Cart Summary\n  summaryContainer: {\n    marginBottom: 16,\n  },\n  summaryHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  summaryTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginLeft: 8,\n  },\n  summaryStats: {\n    paddingLeft: 28,\n  },\n  summaryText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  // Cart Items\n  cartItemsContainer: {\n    marginBottom: 16,\n  },\n  // Pricing Footer\n  pricingFooter: {\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 24,\n  },\n  pricingRow: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  pricingText: {\n    fontSize: 12,\n    fontWeight: '500',\n    marginLeft: 8,\n    flex: 1,\n  },\n  // Form Section\n  formContainer: {\n    flex: 1,\n  },\n  sectionTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  infoText: {\n    fontSize: 12,\n    fontStyle: 'italic',\n    marginTop: 8,\n    marginBottom: 16,\n  },\n  submitButton: {\n    marginTop: 24,\n  },\n  // Empty State\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 32,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyMessage: {\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  clearCartContainer: {marginBottom: 16},\n  clearCartButton: {\n    borderColor: 'green',\n    borderWidth: 2,\n  },\n  clearCartButtonText: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: 'red',\n  },\n  // Snackbar\n  snackbar: {\n    marginBottom: 16,\n  },\n});\n\nexport default CartCheckoutScreen;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CheckoutState.html":{"url":"interfaces/CheckoutState.html","title":"interface - CheckoutState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CheckoutState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/checkoutSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                Checkout state interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            draft\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            isSubmitting\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastSubmittedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        draft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        draft:         DraftLead\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DraftLead\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isSubmitting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isSubmitting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastSubmittedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastSubmittedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport type {CartItem} from './servicesCartSlice';\n\n/**\n * Draft lead payload structure\n */\nexport interface DraftLead {\n  address: string;\n  instructions?: string;\n  cartSnapshot: CartItem[];\n}\n\n/**\n * Checkout state interface\n */\nexport interface CheckoutState {\n  draft?: DraftLead;\n  isSubmitting: boolean;\n  lastSubmittedAt?: string;\n  error?: string;\n}\n\n/**\n * Initial state\n */\nconst initialState: CheckoutState = {\n  isSubmitting: false,\n};\n\n/**\n * Checkout slice\n */\nexport const checkoutSlice = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    /**\n     * Submit draft lead (NO-OP stub for now)\n     *\n     * Simply logs and persists the draft lead data to Redux state.\n     * This will be replaced with actual API call in S3-TASK-01B.\n     *\n     * @param action.payload - Draft lead data with address, instructions, and cart snapshot\n     */\n    submitDraftLead: (state, action: PayloadAction) => {\n      const timestamp = new Date().toISOString();\n\n      // Log for debugging (will be removed in production)\n      console.log('[Checkout] Draft lead submitted:', {\n        timestamp,\n        address: action.payload.address,\n        instructionsLength: action.payload.instructions?.length || 0,\n        servicesCount: action.payload.cartSnapshot.length,\n        totalItems: action.payload.cartSnapshot.reduce(\n          (sum, item) => sum + item.qty,\n          0\n        ),\n      });\n\n      // Store draft in Redux (ephemeral - never persisted)\n      state.draft = action.payload;\n      state.lastSubmittedAt = timestamp;\n      state.error = undefined;\n\n      // TODO: Replace with actual API call in S3-TASK-01B\n      // This will become: await leadsAPI.createLead(action.payload)\n    },\n\n    /**\n     * Set submission loading state\n     */\n    setSubmitting: (state, action: PayloadAction) => {\n      state.isSubmitting = action.payload;\n    },\n\n    /**\n     * Set submission error\n     */\n    setSubmissionError: (state, action: PayloadAction) => {\n      state.error = action.payload;\n      state.isSubmitting = false;\n    },\n\n    /**\n     * Clear draft lead data\n     */\n    clearDraft: state => {\n      state.draft = undefined;\n      state.error = undefined;\n      state.isSubmitting = false;\n    },\n\n    /**\n     * Reset entire checkout state\n     */\n    resetCheckoutState: () => initialState,\n  },\n});\n\n// Export actions\nexport const {\n  submitDraftLead,\n  setSubmitting,\n  setSubmissionError,\n  clearDraft,\n  resetCheckoutState,\n} = checkoutSlice.actions;\n\n// Selectors\nexport const selectCheckoutDraft = (state: {checkout: CheckoutState}) =>\n  state.checkout.draft;\n\nexport const selectIsSubmitting = (state: {checkout: CheckoutState}) =>\n  state.checkout.isSubmitting;\n\nexport const selectSubmissionError = (state: {checkout: CheckoutState}) =>\n  state.checkout.error;\n\nexport const selectLastSubmittedAt = (state: {checkout: CheckoutState}) =>\n  state.checkout.lastSubmittedAt;\n\nexport const selectHasDraft = (state: {checkout: CheckoutState}) =>\n  !!state.checkout.draft;\n\n// Export reducer\nexport default checkoutSlice.reducer;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ColorPalette.html":{"url":"interfaces/ColorPalette.html","title":"interface - ColorPalette","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ColorPalette\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/theme/palette.ts\n        \n\n\n            \n                Description\n            \n            \n                Theme Palette\nDefines color scheme, spacing, and design tokens for the app\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            background\n                                        \n                                \n                                \n                                        \n                                            border\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            info\n                                        \n                                \n                                \n                                        \n                                            overlay\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                        \n                                            primaryDark\n                                        \n                                \n                                \n                                        \n                                            primaryLight\n                                        \n                                \n                                \n                                        \n                                            quoted\n                                        \n                                \n                                \n                                        \n                                            secondary\n                                        \n                                \n                                \n                                        \n                                            secondaryDark\n                                        \n                                \n                                \n                                        \n                                            secondaryLight\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                                \n                                        \n                                            surface\n                                        \n                                \n                                \n                                        \n                                            text\n                                        \n                                \n                                \n                                        \n                                            warning\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        background\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        background:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        border\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        border:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        info:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overlay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        overlay:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primaryDark\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primaryDark:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primaryLight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primaryLight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quoted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quoted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondary:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondaryDark\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondaryDark:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondaryLight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondaryLight:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        surface\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        surface:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warning\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warning:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ColorPalette {\n  primary: string;\n  primaryDark: string;\n  primaryLight: string;\n  secondary: string;\n  secondaryDark: string;\n  secondaryLight: string;\n  background: string;\n  surface: string;\n  error: string;\n  warning: string;\n  success: string;\n  info: string;\n  quoted: string;\n  text: {\n    primary: string;\n    secondary: string;\n    disabled: string;\n    placeholder: string;\n  };\n  border: {\n    default: string;\n    light: string;\n    focus: string;\n  };\n  overlay: {\n    light: string;\n    medium: string;\n    dark: string;\n  };\n}\n\nexport interface SpacingScale {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  xxl: number;\n}\n\nexport interface Typography {\n  fontFamily: {\n    regular: string;\n    medium: string;\n    bold: string;\n    light: string;\n  };\n  fontSize: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n  };\n  lineHeight: {\n    tight: number;\n    normal: number;\n    relaxed: number;\n  };\n}\n\n/**\n * Solarium Green Energy Color Palette\n */\nexport const colors: ColorPalette = {\n  // Primary colors - Green theme for solar energy\n  primary: '#2E7D32', // Dark green\n  primaryDark: '#1B5E20', // Darker green\n  primaryLight: '#4CAF50', // Light green\n\n  // Secondary colors - Complementary blue\n  secondary: '#1976D2', // Blue\n  secondaryDark: '#0D47A1', // Dark blue\n  secondaryLight: '#42A5F5', // Light blue\n\n  // Background colors\n  background: '#FFFFFF',\n  surface: '#F8F9FA',\n\n  // Status colors\n  error: '#F44336',\n  warning: '#FF9800',\n  success: '#4CAF50',\n  info: '#2196F3',\n  // Lead status colors\n  quoted: '#673AB7', // Purple for quoted/discussion status\n\n  // Text colors\n  text: {\n    primary: '#212121',\n    secondary: '#757575',\n    disabled: '#BDBDBD',\n    placeholder: '#9E9E9E',\n  },\n\n  // Border colors\n  border: {\n    default: '#E0E0E0',\n    light: '#F5F5F5',\n    focus: '#2E7D32',\n  },\n\n  // Overlay colors\n  overlay: {\n    light: 'rgba(0, 0, 0, 0.1)',\n    medium: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.8)',\n  },\n};\n\n/**\n * Spacing scale based on 8px grid\n */\nexport const spacing: SpacingScale = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  xxl: 48,\n};\n\n/**\n * Typography definitions\n */\nexport const typography: Typography = {\n  fontFamily: {\n    regular: 'System',\n    medium: 'System',\n    bold: 'System',\n    light: 'System',\n  },\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    md: 16,\n    lg: 18,\n    xl: 24,\n    xxl: 32,\n  },\n  lineHeight: {\n    tight: 1.2,\n    normal: 1.4,\n    relaxed: 1.6,\n  },\n};\n\n/**\n * Shadow definitions for elevation\n */\nexport const shadows = {\n  small: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  medium: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  large: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n};\n\n/**\n * Border radius definitions\n */\nexport const borderRadius = {\n  small: 4,\n  medium: 8,\n  large: 12,\n  xl: 16,\n  round: 50,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComingSoonProps.html":{"url":"interfaces/ComingSoonProps.html","title":"interface - ComingSoonProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComingSoonProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/LeadDetail/ComingSoon.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            featureName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        featureName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        featureName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Feature name to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Icon to display\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, Text, StyleSheet} from 'react-native';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {SafeAreaContainer} from '../../../components';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\ninterface ComingSoonProps {\n  /** Feature name to display */\n  featureName: string;\n  /** Optional description */\n  description?: string;\n  /** Icon to display */\n  icon?: string;\n}\n\n/**\n * ComingSoon Component\n * Shows a friendly message for features under development\n */\nconst ComingSoon: React.FC = ({\n  featureName,\n  description,\n  icon = 'construction',\n}) => {\n  const theme = useAppTheme();\n\n  return (\n    \n      \n        \n          \n          \n            {featureName} Coming Soon\n          \n          \n            {description ||\n              `The ${featureName} feature is under development and will be available in a future update.`}\n          \n        \n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  icon: {\n    marginBottom: 24,\n    opacity: 0.6,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  description: {\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n    maxWidth: 280,\n  },\n});\n\nexport default ComingSoon;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentColors.html":{"url":"interfaces/ComponentColors.html","title":"interface - ComponentColors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentColors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n            \n                Description\n            \n            \n                Common style types\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dark\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            info\n                                        \n                                \n                                \n                                        \n                                            light\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                        \n                                            secondary\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                                \n                                        \n                                            transparent\n                                        \n                                \n                                \n                                        \n                                            warning\n                                        \n                                \n                                \n                                        \n                                            white\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dark\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dark:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        info:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        light\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        light:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondary:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transparent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transparent:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warning\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warning:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        white\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        white:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ComponentSizes.html":{"url":"interfaces/ComponentSizes.html","title":"interface - ComponentSizes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ComponentSizes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            large\n                                        \n                                \n                                \n                                        \n                                            medium\n                                        \n                                \n                                \n                                        \n                                            small\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        large\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        large:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        medium\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        medium:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        small\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        small:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CompressionError.html":{"url":"classes/CompressionError.html","title":"class - CompressionError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CompressionError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/CompressionError.ts\n        \n\n\n            \n                Description\n            \n            \n                Compression Error\nCustom error for image compression failures\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                maxAllowedSize\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                originalSize\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: string, originalSize?: number, maxAllowedSize?: number)\n                    \n                \n                        \n                            \n                                Defined in src/errors/CompressionError.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        originalSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        maxAllowedSize\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/CompressionError.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        maxAllowedSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/CompressionError.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        originalSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/CompressionError.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CompressionError extends Error {\n  public readonly code: string;\n  public readonly originalSize?: number;\n  public readonly maxAllowedSize?: number;\n\n  constructor(\n    message: string,\n    code: string = 'COMPRESSION_FAILED',\n    originalSize?: number,\n    maxAllowedSize?: number\n  ) {\n    super(message);\n    this.name = 'CompressionError';\n    this.code = code;\n    this.originalSize = originalSize;\n    this.maxAllowedSize = maxAllowedSize;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CompressionError);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CompressionOptions.html":{"url":"interfaces/CompressionOptions.html","title":"interface - CompressionOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CompressionOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/File.ts\n        \n\n\n            \n                Description\n            \n            \n                Image compression options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            keepExif\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxHeightPx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxSizeMB\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxWidthPx\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            quality\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        keepExif\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keepExif:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxHeightPx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxHeightPx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxSizeMB\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxSizeMB:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxWidthPx\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxWidthPx:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quality\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quality:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RNFile {\n  uri: string;\n  name: string;\n  type: string;\n  size: number;\n}\n\n/**\n * Image compression options\n */\nexport interface CompressionOptions {\n  maxSizeMB?: number;\n  maxWidthPx?: number;\n  maxHeightPx?: number;\n  quality?: number;\n  keepExif?: boolean;\n}\n\n/**\n * Compression result with metadata\n */\nexport interface CompressionResult extends RNFile {\n  originalSize: number;\n  compressionRatio: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CompressionResult.html":{"url":"interfaces/CompressionResult.html","title":"interface - CompressionResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CompressionResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/File.ts\n        \n\n\n            \n                Description\n            \n            \n                Compression result with metadata\n\n            \n\n            \n                Extends\n            \n            \n                            RNFile\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            compressionRatio\n                                        \n                                \n                                \n                                        \n                                            originalSize\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        compressionRatio\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        compressionRatio:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        originalSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        originalSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RNFile {\n  uri: string;\n  name: string;\n  type: string;\n  size: number;\n}\n\n/**\n * Image compression options\n */\nexport interface CompressionOptions {\n  maxSizeMB?: number;\n  maxWidthPx?: number;\n  maxHeightPx?: number;\n  quality?: number;\n  keepExif?: boolean;\n}\n\n/**\n * Compression result with metadata\n */\nexport interface CompressionResult extends RNFile {\n  originalSize: number;\n  compressionRatio: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ConfirmDialogOptions.html":{"url":"interfaces/ConfirmDialogOptions.html","title":"interface - ConfirmDialogOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ConfirmDialogOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/openConfirmDialog.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for confirmation dialog\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cancelText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            confirmText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            destructive\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancelText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancelText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Cancel button text (default: \"Cancel\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirmText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        confirmText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Confirm button text (default: \"Confirm\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destructive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destructive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the action is destructive (affects button styling)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dialog message/description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dialog title\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Alert} from 'react-native';\n\n/**\n * Options for confirmation dialog\n */\nexport interface ConfirmDialogOptions {\n  /** Dialog title */\n  title: string;\n  /** Dialog message/description */\n  message: string;\n  /** Confirm button text (default: \"Confirm\") */\n  confirmText?: string;\n  /** Cancel button text (default: \"Cancel\") */\n  cancelText?: string;\n  /** Whether the action is destructive (affects button styling) */\n  destructive?: boolean;\n}\n\n/**\n * Open a confirmation dialog and return a Promise\n *\n * @param options - Configuration options for the dialog\n * @returns Promise that resolves to true if confirmed, false if cancelled\n *\n * @example\n * ```typescript\n * const confirmed = await openConfirmDialog({\n *   title: 'Accept Quotation',\n *   message: 'Are you sure you want to accept this quotation?',\n *   confirmText: 'Accept',\n *   cancelText: 'Cancel'\n * });\n *\n * if (confirmed) {\n *   // User confirmed\n * }\n * ```\n */\nexport const openConfirmDialog = (\n  options: ConfirmDialogOptions\n): Promise => {\n  const {\n    title,\n    message,\n    confirmText = 'Confirm',\n    cancelText = 'Cancel',\n    destructive = false,\n  } = options;\n\n  return new Promise(resolve => {\n    Alert.alert(\n      title,\n      message,\n      [\n        {\n          text: cancelText,\n          style: 'cancel',\n          onPress: () => resolve(false),\n        },\n        {\n          text: confirmText,\n          style: destructive ? 'destructive' : 'default',\n          onPress: () => resolve(true),\n        },\n      ],\n      {\n        cancelable: true,\n        onDismiss: () => resolve(false),\n      }\n    );\n  });\n};\n\nexport default openConfirmDialog;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CountdownTimerState.html":{"url":"interfaces/CountdownTimerState.html","title":"interface - CountdownTimerState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CountdownTimerState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Timer.ts\n        \n\n\n            \n                Description\n            \n            \n                Countdown Timer State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isActive\n                                        \n                                \n                                \n                                        \n                                            pause\n                                        \n                                \n                                \n                                        \n                                            restart\n                                        \n                                \n                                \n                                        \n                                            resume\n                                        \n                                \n                                \n                                        \n                                            secondsLeft\n                                        \n                                \n                                \n                                        \n                                            stop\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isActive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isActive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pause\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pause:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        restart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        restart:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        resume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        resume:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secondsLeft\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secondsLeft:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stop\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stop:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CountdownTimerState {\n  secondsLeft: number;\n  isActive: boolean;\n  restart: (newDuration?: number) => void;\n  stop: () => void;\n  pause: () => void;\n  resume: () => void;\n}\n\n/**\n * Timer Configuration Options\n */\nexport interface TimerOptions {\n  defaultDuration?: number;\n  autoStart?: boolean;\n  onComplete?: () => void;\n  onTick?: (secondsLeft: number) => void;\n}\n\n/**\n * Timer Constants\n */\nexport const TIMER_CONSTANTS = {\n  RESEND_DURATION: 60, // 60 seconds for resend timer\n  LOCKOUT_DURATION: 900, // 15 minutes (900 seconds) for lockout timer\n  TICK_INTERVAL: 1000, // 1 second intervals\n} as const;\n\n/**\n * Timer Types for different use cases\n */\nexport type TimerType = 'resend' | 'lockout' | 'custom';\n\n/**\n * Timer Status\n */\nexport type TimerStatus = 'idle' | 'active' | 'paused' | 'completed';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateLeadRequest.html":{"url":"interfaces/CreateLeadRequest.html","title":"interface - CreateLeadRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateLeadRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Lead.ts\n        \n\n\n            \n                Description\n            \n            \n                Create Lead Request payload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            customerName\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            services\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customerName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type LeadStatus =\n  | 'New Lead'\n  | 'In Discussion'\n  | 'Physical Meeting Assigned'\n  | 'Customer Accepted'\n  | 'Won'\n  | 'Pending at Solarium'\n  | 'Under Execution'\n  | 'Executed'\n  | 'Not Responding'\n  | 'Not Interested'\n  | 'Other Territory';\n\n/**\n * Lead Customer info\n */\nexport interface LeadCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n}\n\n/**\n * Lead interface\n */\nexport interface Lead {\n  id: string;\n  customerId: string;\n  services: string[]; // Service IDs\n  status: LeadStatus;\n  priority: 'Low' | 'Medium' | 'High';\n  source: 'App' | 'Website' | 'Referral' | 'Direct';\n  description?: string;\n  address: string;\n  state: string;\n  pinCode: string;\n  followUpDate?: string;\n  assignedTo?: string;\n  remarks?: string;\n  tokenNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n  customer: LeadCustomer;\n  quotations?: any[]; // Will be typed separately if needed\n  documents?: any[]; // Will be typed separately if needed\n}\n\n/**\n * Create Lead Request payload\n */\nexport interface CreateLeadRequest {\n  customerName: string;\n  phone: string;\n  address: string;\n  services: string[];\n}\n\n/**\n * Lead API Response\n */\nexport interface LeadResponse {\n  success: true;\n  data: Lead;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateTicketModalProps.html":{"url":"interfaces/CreateTicketModalProps.html","title":"interface - CreateTicketModalProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateTicketModalProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/modals/CreateTicketModal.tsx\n        \n\n\n            \n                Description\n            \n            \n                Create Ticket Modal Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            onClose\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onSuccess\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefilledLeadId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onSuccess\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onSuccess:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefilledLeadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefilledLeadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useState, useCallback, useMemo, useEffect} from 'react';\nimport {View, StyleSheet, ScrollView} from 'react-native';\nimport {\n  Modal,\n  Portal,\n  Card,\n  Text,\n  Button,\n  TextInput,\n  Divider,\n} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useGetLeadsQuery} from '../../api/endpoints/leads';\nimport {useCreateTicketMutation} from '../../api/endpoints/tickets';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport {ErrorMessage} from '../common';\nimport {Dropdown, type DropdownOption} from '../common';\n\n/**\n * Create Ticket Modal Props\n */\nexport interface CreateTicketModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onSuccess?: (ticketId: string) => void;\n  prefilledLeadId?: string; // For LeadDetail screen usage\n  testID?: string;\n}\n\n/**\n * Create Ticket Modal Component\n */\nconst CreateTicketModal: React.FC = ({\n  visible,\n  onClose,\n  onSuccess,\n  prefilledLeadId,\n  testID = 'create-ticket-modal',\n}) => {\n  const theme = useAppTheme();\n\n  // Form state\n  const [selectedLeadId, setSelectedLeadId] = useState('');\n  const [subject, setSubject] = useState('');\n  const [description, setDescription] = useState('');\n  const [error, setError] = useState(null);\n\n  // Form validation errors\n  const [fieldErrors, setFieldErrors] = useState({});\n\n  // API hooks\n  const {\n    data: leadsResponse,\n    isLoading: isLoadingLeads,\n    error: leadsError,\n  } = useGetLeadsQuery({\n    status: 'Executed',\n    limit: 100,\n  });\n\n  const [createTicket, {isLoading: isCreatingTicket}] =\n    useCreateTicketMutation();\n\n  // Reset form when modal visibility changes\n  useEffect(() => {\n    if (visible) {\n      setError(null);\n      setFieldErrors({});\n      if (prefilledLeadId) {\n        setSelectedLeadId(prefilledLeadId);\n      } else {\n        setSelectedLeadId('');\n      }\n      setSubject('');\n      setDescription('');\n    }\n  }, [visible, prefilledLeadId]);\n\n  /**\n   * Convert leads to dropdown options\n   */\n  const leadOptions: DropdownOption[] = useMemo(() => {\n    // Filter for executed leads on client-side\n    const executedLeads = leadsResponse?.data || [];\n\n    return executedLeads.map((lead: any) => ({\n      value: lead.leadId,\n      label: lead.leadId,\n      sublabel: `Services:\\n ${lead.services.join(',\\n ')}`,\n    }));\n  }, [leadsResponse]);\n\n  /**\n   * Validate form fields\n   */\n  const validateForm = useCallback((): boolean => {\n    const errors: typeof fieldErrors = {};\n\n    // Validate leadId\n    if (!selectedLeadId.trim()) {\n      errors.leadId = 'Please select a lead';\n    }\n\n    // Validate subject\n    if (!subject.trim()) {\n      errors.subject = 'Subject is required';\n    } else if (subject.length > 200) {\n      errors.subject = 'Subject must be less than 200 characters';\n    }\n\n    // Validate description\n    if (!description.trim()) {\n      errors.description = 'Description is required';\n    } else if (description.length > 2000) {\n      errors.description = 'Description must be less than 2000 characters';\n    }\n\n    setFieldErrors(errors);\n    return Object.keys(errors).length === 0;\n  }, [selectedLeadId, subject, description]);\n\n  /**\n   * Handle form submission\n   */\n  const handleSubmit = useCallback(async () => {\n    setError(null);\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      const leadIdToUse = prefilledLeadId || selectedLeadId;\n      console.log('[CreateTicketModal] Creating ticket:', {\n        leadId: leadIdToUse,\n        subject: subject.trim(),\n        descriptionLength: description.trim().length,\n      });\n\n      const result = await createTicket({\n        leadId: leadIdToUse,\n        subject: subject.trim(),\n        description: description.trim(),\n      }).unwrap();\n\n      console.log('[CreateTicketModal] Ticket created successfully:', result);\n\n      // Call success callback with ticket ID\n      if (onSuccess && result.ticketId) {\n        onSuccess(result.ticketId);\n      }\n\n      // Close modal\n      onClose();\n    } catch (createError: any) {\n      console.error('[CreateTicketModal] Create ticket error:', createError);\n\n      let errorMessage = 'Failed to create ticket. Please try again.';\n\n      if (createError?.data?.error) {\n        errorMessage = createError.data.error;\n      } else if (createError?.message) {\n        errorMessage = createError.message;\n      }\n\n      setError(errorMessage);\n    }\n  }, [\n    selectedLeadId,\n    subject,\n    description,\n    createTicket,\n    onSuccess,\n    onClose,\n    validateForm,\n    prefilledLeadId,\n  ]);\n\n  /**\n   * Handle lead selection\n   */\n  const handleLeadSelect = useCallback(\n    (leadId: string) => {\n      setSelectedLeadId(leadId);\n      if (fieldErrors.leadId) {\n        setFieldErrors(prev => ({...prev, leadId: undefined}));\n      }\n    },\n    [fieldErrors.leadId]\n  );\n\n  /**\n   * Handle subject change\n   */\n  const handleSubjectChange = useCallback(\n    (text: string) => {\n      setSubject(text);\n      if (fieldErrors.subject) {\n        setFieldErrors(prev => ({...prev, subject: undefined}));\n      }\n    },\n    [fieldErrors.subject]\n  );\n\n  /**\n   * Handle description change\n   */\n  const handleDescriptionChange = useCallback(\n    (text: string) => {\n      setDescription(text);\n      if (fieldErrors.description) {\n        setFieldErrors(prev => ({...prev, description: undefined}));\n      }\n    },\n    [fieldErrors.description]\n  );\n\n  /**\n   * Clear error message\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return (\n    \n      \n        \n          \n            \n              \n                Create Support Ticket\n              \n\n              \n                Create a new support ticket for your executed lead\n              \n\n              {error && (\n                \n              )}\n\n              \n                {/* Lead Selection */}\n                {prefilledLeadId ? (\n                  \n                    \n                      Lead ID\n                    \n                    \n                      {prefilledLeadId}\n                    \n                  \n                ) : (\n                  \n                )}\n\n                {(leadsError ||\n                  (leadOptions.length === 0 && !isLoadingLeads)) && (\n                  \n                    {leadsError\n                      ? 'Failed to load leads. Please try again.'\n                      : 'No executed leads found. Please ensure you have leads with \"Executed\" status.'}\n                  \n                )}\n\n                {/* Subject Field */}\n                \n                {fieldErrors.subject && (\n                  \n                    {fieldErrors.subject}\n                  \n                )}\n                \n                  {subject.length}/200 characters\n                \n\n                {/* Description Field */}\n                \n                {fieldErrors.description && (\n                  \n                    {fieldErrors.description}\n                  \n                )}\n                \n                  {description.length}/2000 characters\n                \n              \n\n              \n\n              \n                * All fields are required{'\\n'}\n                Once created, you can track and communicate through the ticket\n                thread.\n              \n            \n\n            \n              \n                Cancel\n              \n\n               (\n                  \n                )}\n                accessibilityLabel={\n                  isCreatingTicket ? 'Creating ticket' : 'Create ticket'\n                }\n                accessibilityRole=\"button\"\n                testID=\"create-button\"\n              >\n                {isCreatingTicket ? 'Creating...' : 'Create Ticket'}\n              \n            \n          \n        \n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  modalContainer: {\n    margin: 20,\n    maxHeight: '90%',\n  },\n  card: {\n    borderRadius: 12,\n    elevation: 8,\n  },\n  title: {\n    textAlign: 'center',\n    marginBottom: 8,\n    fontWeight: 'bold',\n  },\n  subtitle: {\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  errorMessage: {\n    marginBottom: 16,\n  },\n  formContainer: {\n    marginBottom: 16,\n  },\n  textInput: {\n    marginBottom: 4,\n    backgroundColor: 'transparent',\n  },\n  descriptionInput: {\n    minHeight: 100,\n  },\n  fieldErrorText: {\n    marginLeft: 16,\n    marginTop: 4,\n    marginBottom: 4,\n  },\n  charCountText: {\n    textAlign: 'right',\n    marginBottom: 16,\n    marginRight: 16,\n  },\n  helperText: {\n    marginLeft: 16,\n    marginBottom: 16,\n  },\n  divider: {\n    marginVertical: 16,\n  },\n  helpText: {\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n  actions: {\n    justifyContent: 'space-between',\n    paddingTop: 8,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default CreateTicketModal;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateTicketRequest.html":{"url":"interfaces/CreateTicketRequest.html","title":"interface - CreateTicketRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateTicketRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Request payload for creating a new ticket\nBased on POST /api/v1/tickets request structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Initial ticket description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lead ID (must be status=Executed)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket subject\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateTicketResponse.html":{"url":"interfaces/CreateTicketResponse.html","title":"interface - CreateTicketResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateTicketResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Response for ticket creation\nBased on POST /api/v1/tickets response structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ticketId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ticketId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ticketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Newly created ticket ID\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocsTabProps.html":{"url":"interfaces/DocsTabProps.html","title":"interface - DocsTabProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocsTabProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/LeadDetail/DocsTab.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lead ID to fetch documents for\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React, {useState, useCallback, useEffect} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  ActivityIndicator,\n  RefreshControl,\n  Pressable,\n} from 'react-native';\nimport {StyleSheet} from 'react-native';\nimport {Button, ProgressBar, Chip} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {SafeAreaContainer} from '../../../components';\nimport {DocumentPickerModal} from '../../../components/forms';\nimport {useKycDocuments} from '../../../hooks/useKycDocuments';\nimport type {KycDocView} from '../../../hooks/useKycDocuments';\nimport {useKycUpload} from '../../../hooks/useKycUpload';\nimport {useRefreshControl} from '../../../hooks/useRefreshControl';\nimport {useAppDispatch} from '../../../hooks/useTypedRedux';\nimport {setError as setUIError} from '../../../store/uiSlice';\nimport {spacing} from '../../../theme/palette';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport type {RNFile} from '../../../types/File';\nimport type {\n  KycDocumentStatus,\n  KycDocumentType,\n} from '../../../types/KycDocument';\n\ninterface DocsTabProps {\n  /** Lead ID to fetch documents for */\n  leadId: string;\n}\n\n/**\n * Get status badge color configuration\n */\nconst getStatusConfig = (status: KycDocumentStatus | 'Missing') => {\n  const configs = {\n    Approved: {backgroundColor: '#4CAF50', textColor: '#FFFFFF'},\n    Pending: {backgroundColor: '#FF9800', textColor: '#FFFFFF'},\n    Rejected: {backgroundColor: '#F44336', textColor: '#FFFFFF'},\n    Missing: {backgroundColor: '#9E9E9E', textColor: '#FFFFFF'},\n  };\n  return configs[status] || configs.Missing;\n};\n\n/**\n * Get document type icon\n */\nconst getDocumentIcon = (docType: KycDocumentType): string => {\n  const iconMap = {\n    IncomeProof: 'account-balance-wallet',\n    LightBill: 'electrical-services',\n    CancelledCheque: 'account-balance',\n    Aadhaar: 'badge',\n    PAN: 'credit-card',\n    PassportPhoto: 'person',\n    Other: 'insert-drive-file',\n  };\n  return iconMap[docType] || 'insert-drive-file';\n};\n\n/**\n * Document List Item Component\n */\nconst DocumentListItem: React.FC void;\n  onUploadError: (error: Error) => void;\n}> = ({document, leadId, onUploadSuccess, onUploadError}) => {\n  const theme = useAppTheme();\n  const [showPicker, setShowPicker] = useState(false);\n\n  // Upload hook\n  const {\n    startUpload,\n    progress,\n    status: uploadStatus,\n    error,\n    cancel,\n  } = useKycUpload();\n  const statusConfig = getStatusConfig(document.status);\n  const documentIcon = getDocumentIcon(document.docType);\n\n  /**\n   * Handle file selection from picker\n   */\n  const handleFilePicked = useCallback(\n    (file: RNFile) => {\n      console.log(`[DocsTab] File picked for ${document.docType}:`, file);\n      // For lead-specific uploads, we need to pass both customerId and leadId\n      // The useKycUpload hook handles customerId, but we need leadId context\n      startUpload(document.docType, file, leadId);\n    },\n    [document.docType, startUpload, leadId]\n  );\n\n  /**\n   * Handle upload button press\n   */\n  const handleUploadPress = useCallback(() => {\n    if (!document.canUpload) {\n      console.warn(`[DocsTab] Upload not allowed for ${document.docType}`);\n      return;\n    }\n    setShowPicker(true);\n  }, [document.canUpload, document.docType]);\n\n  /**\n   * Handle upload success\n   */\n  useEffect(() => {\n    if (uploadStatus === 'success') {\n      console.log(`[DocsTab] Upload successful for ${document.docType}`);\n      onUploadSuccess();\n    }\n  }, [uploadStatus, document.docType, onUploadSuccess]);\n\n  /**\n   * Handle upload error\n   */\n  useEffect(() => {\n    if (uploadStatus === 'error' && error) {\n      console.error(`[DocsTab] Upload failed for ${document.docType}:`, error);\n      onUploadError(error);\n    }\n  }, [uploadStatus, error, document.docType, onUploadError]);\n\n  const isUploading = uploadStatus === 'running';\n  const showUploadButton = document.canUpload && !isUploading;\n\n  return (\n    \n      {/* Document Header */}\n      \n        {/* Document Icon */}\n        \n\n        {/* Document Content */}\n        \n          \n            {document.displayName}\n          \n\n          {/* Upload Date */}\n          {document.latestDoc && (\n            \n              Uploaded:{' '}\n              {new Date(document.latestDoc.uploadedAt).toLocaleDateString()}\n            \n          )}\n        \n\n        {/* Status Badge */}\n        \n          {document.status}\n        \n      \n\n      {/* Action Section */}\n      \n        {/* Progress Bar (during upload) */}\n        {isUploading && progress !== null && (\n          \n            \n            \n              \n                {progress}%\n              \n              \n                Cancel\n              \n            \n          \n        )}\n\n        {/* Upload Button */}\n        {showUploadButton && (\n           (\n              \n            )}\n            style={styles.uploadButton}\n            contentStyle={styles.uploadButtonContent}\n            labelStyle={styles.uploadButtonLabel}\n            testID={`doc-upload-${document.docType}`}\n          >\n            Upload\n          \n        )}\n\n        {/* Status Message for Non-Uploadable Documents */}\n        {!document.canUpload && !isUploading && (\n          \n            {document.status === 'Approved'\n              ? 'Document approved'\n              : 'Upload not available'}\n          \n        )}\n      \n\n      {/* Document Picker Modal */}\n       setShowPicker(false)}\n        onFilePicked={handleFilePicked}\n        testID={`doc-picker-${document.docType}`}\n      />\n    \n  );\n};\n\n/**\n * Empty State Component\n */\nconst EmptyDocsState: React.FC = () => {\n  const theme = useAppTheme();\n\n  return (\n    \n      \n      \n        No Documents Found\n      \n      \n        KYC documents for this lead will appear here once uploaded.\n      \n    \n  );\n};\n\n/**\n * DocsTab Component\n * Shows KYC documents for a specific lead with upload functionality\n */\nconst DocsTab: React.FC = ({leadId}) => {\n  const theme = useAppTheme();\n  const dispatch = useAppDispatch();\n\n  // Fetch lead-specific KYC documents\n  const {docs, isLoading, refetch} = useKycDocuments(undefined, leadId);\n\n  // Enhanced refresh control\n  const {refreshKyc, canRefreshKyc} = useRefreshControl();\n\n  /**\n   * Handle pull-to-refresh\n   */\n  const handleRefresh = useCallback(async () => {\n    console.log('[DocsTab] Refreshing KYC documents for lead:', leadId);\n    try {\n      await refreshKyc();\n      refetch(); // Also trigger local refetch\n    } catch (error) {\n      console.error('[DocsTab] Refresh error:', error);\n    }\n  }, [refreshKyc, refetch, leadId]);\n\n  /**\n   * Handle upload success - refresh data\n   */\n  const handleUploadSuccess = useCallback(() => {\n    console.log('[DocsTab] Upload successful, refreshing data...');\n    refetch(); // Refresh local data\n  }, [refetch]);\n\n  /**\n   * Handle upload error - show global error\n   */\n  const handleUploadError = useCallback(\n    (error: Error) => {\n      console.error('[DocsTab] Upload error:', error);\n      dispatch(setUIError(error.message));\n    },\n    [dispatch]\n  );\n\n  /**\n   * Render individual document item\n   */\n  const renderDocumentItem = useCallback(\n    ({item}: {item: KycDocView}) => (\n      \n    ),\n    [leadId, handleUploadSuccess, handleUploadError]\n  );\n\n  /**\n   * Get key extractor for FlatList\n   */\n  const keyExtractor = useCallback((item: KycDocView) => item.docType, []);\n\n  // Loading state\n  if (isLoading && !docs) {\n    return (\n      \n        \n          \n          \n            Loading documents...\n          \n        \n      \n    );\n  }\n\n  // Content state\n  return (\n    \n      \n        }\n          contentContainerStyle={styles.listContent}\n          showsVerticalScrollIndicator={false}\n          refreshControl={\n            \n          }\n          // Performance optimizations\n          removeClippedSubviews={true}\n          maxToRenderPerBatch={7} // We have 7 KYC document types\n          windowSize={10}\n          initialNumToRender={7}\n          getItemLayout={(data, index) => ({\n            length: 120, // Approximate item height\n            offset: 120 * index,\n            index,\n          })}\n          testID=\"docs-list\"\n        />\n      \n    \n  );\n};\n\n/**\n * DocsTab Styles\n * Stylesheet for DocsTab component with consistent theming\n */\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  listContent: {\n    padding: spacing.md,\n    paddingBottom: spacing.xl,\n  },\n  documentItem: {\n    padding: spacing.md,\n    marginVertical: spacing.xs,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  },\n  documentHeader: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    marginBottom: spacing.sm,\n  },\n  documentIcon: {\n    marginRight: spacing.sm,\n    marginTop: 2,\n  },\n  documentContent: {\n    flex: 1,\n    marginRight: spacing.sm,\n  },\n  documentName: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: spacing.xs,\n  },\n  uploadDate: {\n    fontSize: 12,\n    fontStyle: 'italic',\n    marginTop: spacing.xs,\n  },\n  statusChip: {\n    alignSelf: 'flex-start',\n  },\n  statusText: {\n    fontSize: 11,\n    fontWeight: '600',\n  },\n  actionSection: {\n    marginTop: spacing.sm,\n    alignItems: 'flex-end',\n  },\n  progressSection: {\n    width: '100%',\n    marginBottom: spacing.sm,\n  },\n  progressBar: {\n    height: 4,\n    borderRadius: 2,\n    marginBottom: spacing.xs,\n  },\n  progressActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  progressText: {\n    fontWeight: '500',\n  },\n  uploadButton: {\n    borderRadius: 6,\n  },\n  uploadButtonContent: {\n    paddingHorizontal: spacing.sm,\n  },\n  uploadButtonLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  statusMessage: {\n    fontStyle: 'italic',\n    textAlign: 'right',\n    fontSize: 12,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n    paddingVertical: 64,\n  },\n  emptyIcon: {\n    opacity: 0.5,\n  },\n  emptyTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  emptySubtitle: {\n    fontSize: 14,\n    marginTop: 8,\n    textAlign: 'center',\n    lineHeight: 20,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  loadingText: {\n    fontSize: 16,\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  errorTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  errorSubtitle: {\n    fontSize: 16,\n    marginTop: 8,\n    textAlign: 'center',\n  },\n});\n\nexport default DocsTab;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentPickerModalProps.html":{"url":"interfaces/DocumentPickerModalProps.html","title":"interface - DocumentPickerModalProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentPickerModalProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/forms/DocumentPickerModal.tsx\n        \n\n\n            \n                Description\n            \n            \n                Document Picker Modal Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            onClose\n                                        \n                                \n                                \n                                        \n                                            onFilePicked\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        onClose\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onClose:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onFilePicked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onFilePicked:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as DocumentPicker from '@react-native-documents/picker';\nimport React, {useState, useCallback} from 'react';\nimport {\n  View,\n  StyleSheet,\n  Alert,\n  Platform,\n  PermissionsAndroid,\n} from 'react-native';\nimport {\n  ImagePickerResponse,\n  launchImageLibrary,\n  launchCamera,\n  MediaType,\n  ImageLibraryOptions,\n  CameraOptions,\n} from 'react-native-image-picker';\nimport {Modal, Portal, Card, Text, Button, Divider} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {ValidationError} from '../../errors/ValidationError';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {RNFile} from '../../types/File';\nimport {validateMimeType} from '../../utils/kycValidation';\nimport {ErrorMessage} from '../common';\n\n/**\n * Document Picker Modal Props\n */\nexport interface DocumentPickerModalProps {\n  visible: boolean;\n  onClose: () => void;\n  onFilePicked: (file: RNFile) => void;\n  testID?: string;\n}\n\n/**\n * Allowed MIME types for validation\n */\nconst ALLOWED_MIME_TYPES = ['image/jpeg', 'image/png', 'application/pdf'];\n\n/**\n * Maximum file size (10MB in bytes)\n */\nconst MAX_FILE_SIZE = 10 * 1024 * 1024;\n\n/**\n * Document Picker Modal Component\n * Provides options to select files from gallery, camera, or file browser\n */\nconst DocumentPickerModal: React.FC = ({\n  visible,\n  onClose,\n  onFilePicked,\n  testID = 'document-picker-modal',\n}) => {\n  const theme = useAppTheme();\n  const [error, setError] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  /**\n   * Clear error when modal visibility changes\n   */\n  React.useEffect(() => {\n    if (visible) {\n      setError(null);\n    }\n  }, [visible]);\n\n  /**\n   * Validate selected file\n   */\n  const validateFile = useCallback((file: RNFile): boolean => {\n    try {\n      // Validate MIME type\n      validateMimeType(file.type);\n\n      // Validate file size\n      if (file.size > MAX_FILE_SIZE) {\n        throw new ValidationError(\n          'File size must be less than 10MB',\n          'FILE_SIZE_EXCEEDED',\n          'fileSize',\n          file.size\n        );\n      }\n\n      return true;\n    } catch (validationError) {\n      if (validationError instanceof ValidationError) {\n        setError(validationError.message);\n      } else {\n        setError('File validation failed. Please try another file.');\n      }\n      return false;\n    }\n  }, []);\n\n  /**\n   * Process selected file and validate\n   */\n  const processSelectedFile = useCallback(\n    (file: RNFile) => {\n      setIsProcessing(true);\n\n      try {\n        if (validateFile(file)) {\n          console.log('[DocumentPickerModal] File validated successfully:', {\n            name: file.name,\n            type: file.type,\n            size: file.size,\n          });\n\n          onFilePicked(file);\n          onClose();\n        }\n      } catch (error) {\n        console.error('[DocumentPickerModal] File processing error:', error);\n        setError('Failed to process selected file. Please try again.');\n      } finally {\n        setIsProcessing(false);\n      }\n    },\n    [validateFile, onFilePicked, onClose]\n  );\n\n  /**\n   * Handle gallery selection\n   */\n  const handleGalleryPick = useCallback(() => {\n    setError(null);\n\n    const options: ImageLibraryOptions = {\n      mediaType: 'photo' as MediaType,\n      quality: 1,\n      includeBase64: false,\n    };\n\n    console.log('[DocumentPickerModal] Opening gallery...');\n\n    launchImageLibrary(options, (response: ImagePickerResponse) => {\n      console.log('[DocumentPickerModal] Gallery response:', response);\n\n      if (response.didCancel) {\n        console.log('[DocumentPickerModal] Gallery selection cancelled');\n        return;\n      }\n\n      if (response.errorMessage) {\n        console.error(\n          '[DocumentPickerModal] Gallery error:',\n          response.errorMessage\n        );\n        setError('Failed to select image from gallery. Please try again.');\n        return;\n      }\n\n      const asset = response.assets?.[0];\n      if (!asset || !asset.uri) {\n        console.error('[DocumentPickerModal] No asset or URI found');\n        setError('Failed to get image from gallery. Please try again.');\n        return;\n      }\n\n      console.log('[DocumentPickerModal] Gallery asset:', asset);\n\n      const file: RNFile = {\n        uri: asset.uri,\n        name: asset.fileName || `image_${Date.now()}.jpg`,\n        type: asset.type || 'image/jpeg',\n        size: asset.fileSize || 0,\n      };\n\n      processSelectedFile(file);\n    });\n  }, [processSelectedFile]);\n\n  /**\n   * Handle camera capture\n   */\n  const handleCameraCapture = useCallback(async () => {\n    setError(null);\n\n    console.log('[DocumentPickerModal] Opening camera...');\n\n    // Request camera permission on Android\n    if (Platform.OS === 'android') {\n      try {\n        // Check if permission is already granted\n        const hasPermission = await PermissionsAndroid.check(\n          PermissionsAndroid.PERMISSIONS.CAMERA\n        );\n\n        if (!hasPermission) {\n          console.log('[DocumentPickerModal] Requesting camera permission...');\n          const granted = await PermissionsAndroid.request(\n            PermissionsAndroid.PERMISSIONS.CAMERA,\n            {\n              title: 'Camera Permission',\n              message:\n                'This app needs access to camera to take photos for KYC documents.',\n              buttonNeutral: 'Ask Me Later',\n              buttonNegative: 'Cancel',\n              buttonPositive: 'OK',\n            }\n          );\n\n          console.log('[DocumentPickerModal] Permission result:', granted);\n\n          if (granted !== PermissionsAndroid.RESULTS.GRANTED) {\n            setError('Camera permission is required to take photos.');\n            return;\n          }\n        }\n      } catch (error) {\n        console.error('[DocumentPickerModal] Camera permission error:', error);\n        setError('Failed to request camera permission.');\n        return;\n      }\n    }\n\n    const options: CameraOptions = {\n      mediaType: 'photo' as MediaType,\n      quality: 1,\n      includeBase64: false,\n    };\n\n    launchCamera(options, (response: ImagePickerResponse) => {\n      console.log('[DocumentPickerModal] Camera response:', response);\n\n      if (response.didCancel) {\n        console.log('[DocumentPickerModal] Camera capture cancelled');\n        return;\n      }\n\n      if (response.errorMessage) {\n        console.error(\n          '[DocumentPickerModal] Camera error:',\n          response.errorMessage\n        );\n        setError('Failed to capture photo. Please try again.');\n        return;\n      }\n\n      const asset = response.assets?.[0];\n      if (!asset || !asset.uri) {\n        console.error('[DocumentPickerModal] No asset or URI found');\n        setError('Failed to capture photo. Please try again.');\n        return;\n      }\n\n      console.log('[DocumentPickerModal] Camera asset:', asset);\n\n      const file: RNFile = {\n        uri: asset.uri,\n        name: asset.fileName || `photo_${Date.now()}.jpg`,\n        type: asset.type || 'image/jpeg',\n        size: asset.fileSize || 0,\n      };\n\n      processSelectedFile(file);\n    });\n  }, [processSelectedFile]);\n\n  /**\n   * Handle file browser selection\n   */\n  const handleFileBrowse = useCallback(async () => {\n    setError(null);\n\n    try {\n      console.log('[DocumentPickerModal] Opening file browser...');\n\n      // Add more detailed logging\n      console.log(\n        '[DocumentPickerModal] DocumentPicker object:',\n        DocumentPicker\n      );\n      console.log(\n        '[DocumentPickerModal] Attempting to pick file with options:',\n        {\n          type: ['image/*', 'application/pdf'],\n          allowMultiSelection: false,\n        }\n      );\n\n      const results = await DocumentPicker.pick({\n        type: ['image/*', 'application/pdf'],\n        allowMultiSelection: false,\n      }).catch(e => {\n        // Add catch block to the promise itself\n        console.error('[DocumentPickerModal] Pick promise rejected:', e);\n        throw e;\n      });\n\n      console.log('[DocumentPickerModal] Pick succeeded, results:', results);\n\n      const result = results[0];\n      console.log('[DocumentPickerModal] First result:', result);\n\n      const file: RNFile = {\n        uri: result.uri,\n        name: result.name || 'document',\n        type: result.type || 'application/octet-stream',\n        size: result.size || 0,\n      };\n\n      processSelectedFile(file);\n    } catch (err) {\n      // Type the error properly\n      const error = err as {code?: string; message?: string};\n\n      console.error('[DocumentPickerModal] Detailed error:', {\n        error,\n        code: error.code,\n        message: error.message,\n        stack: (error as Error).stack,\n      });\n\n      if (error.code === 'DOCUMENT_PICKER_CANCELED') {\n        console.log('[DocumentPickerModal] File selection cancelled');\n        return;\n      }\n\n      console.error('[DocumentPickerModal] File browser error:', error);\n      setError('Failed to select file. Please try again.');\n    }\n  }, [processSelectedFile]);\n\n  /**\n   * Clear error message\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return (\n    \n      \n        \n          \n            \n              Select Document\n            \n\n            \n              Choose how you'd like to add your document\n            \n\n            {error && (\n              \n            )}\n\n            \n               (\n                  \n                )}\n                accessibilityLabel=\"Select image from gallery\"\n                accessibilityRole=\"button\"\n                accessibilityHint=\"Opens your photo gallery to select an image\"\n                testID=\"gallery-button\"\n              >\n                Gallery\n              \n\n               (\n                  \n                )}\n                accessibilityLabel=\"Take photo with camera\"\n                accessibilityRole=\"button\"\n                accessibilityHint=\"Opens camera to take a new photo\"\n                testID=\"camera-button\"\n              >\n                Camera\n              \n\n               (\n                  \n                )}\n                accessibilityLabel=\"Browse files\"\n                accessibilityRole=\"button\"\n                accessibilityHint=\"Opens file browser to select a document\"\n                testID=\"browse-button\"\n              >\n                Browse Files\n              \n            \n\n            \n\n            \n              Supported formats: JPG, PNG, PDF{'\\n'}\n              Maximum file size: 10MB\n            \n          \n\n          \n            \n              Cancel\n            \n          \n        \n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  modalContainer: {\n    margin: 20,\n    justifyContent: 'center',\n  },\n  card: {\n    borderRadius: 12,\n    elevation: 8,\n  },\n  title: {\n    textAlign: 'center',\n    marginBottom: 8,\n    fontWeight: 'bold',\n  },\n  subtitle: {\n    textAlign: 'center',\n    marginBottom: 24,\n  },\n  errorMessage: {\n    marginBottom: 16,\n  },\n  optionsContainer: {\n    gap: 12,\n    marginBottom: 16,\n  },\n  optionButton: {\n    borderRadius: 8,\n    borderWidth: 1.5,\n  },\n  buttonContent: {\n    paddingVertical: 8,\n  },\n  buttonLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  divider: {\n    marginVertical: 16,\n  },\n  helpText: {\n    textAlign: 'center',\n    lineHeight: 18,\n  },\n  actions: {\n    justifyContent: 'center',\n    paddingTop: 8,\n  },\n});\n\nexport default DocumentPickerModal;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DocumentRowProps.html":{"url":"interfaces/DocumentRowProps.html","title":"interface - DocumentRowProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DocumentRowProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/kyc/DocumentRow.tsx\n        \n\n\n            \n                Description\n            \n            \n                Document Row Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            document\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onUploadError\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onUploadSuccess\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        document\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        document:         KycDocView\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocView\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onUploadError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onUploadError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onUploadSuccess\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onUploadSuccess:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useState, useCallback} from 'react';\nimport {View, StyleSheet} from 'react-native';\nimport {Text, Button, ProgressBar, Chip} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport type {KycDocView} from '../../hooks/useKycDocuments';\nimport {useKycUpload} from '../../hooks/useKycUpload';\nimport {spacing, colors} from '../../theme/palette';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {RNFile} from '../../types/File';\nimport type {KycDocumentStatus} from '../../types/KycDocument';\nimport {DocumentPickerModal} from '../forms';\n\n/**\n * Document Row Props\n */\nexport interface DocumentRowProps {\n  document: KycDocView;\n  onUploadSuccess?: () => void;\n  onUploadError?: (error: Error) => void;\n  testID?: string;\n}\n\n/**\n * Get status badge color based on document status\n */\nconst getStatusColor = (status: KycDocumentStatus | 'Missing') => {\n  switch (status) {\n    case 'Approved':\n      return colors.success; // Green\n    case 'Pending':\n      return colors.text.secondary; // Grey\n    case 'Rejected':\n      return colors.error; // Red\n    case 'Missing':\n    default:\n      return colors.text.disabled; // Light grey\n  }\n};\n\n/**\n * Get status text color for better contrast\n */\nconst getStatusTextColor = (status: KycDocumentStatus | 'Missing') => {\n  switch (status) {\n    case 'Approved':\n    case 'Rejected':\n      return '#FFFFFF'; // White text on colored background\n    case 'Pending':\n      return colors.text.primary; // Dark text\n    case 'Missing':\n    default:\n      return colors.text.secondary; // Medium text\n  }\n};\n\n/**\n * Get status icon\n */\nconst getStatusIcon = (status: KycDocumentStatus | 'Missing') => {\n  switch (status) {\n    case 'Approved':\n      return 'check-circle';\n    case 'Pending':\n      return 'schedule';\n    case 'Rejected':\n      return 'cancel';\n    case 'Missing':\n    default:\n      return 'radio-button-unchecked';\n  }\n};\n\n/**\n * Document Row Component\n * Displays individual KYC document with status and upload functionality\n */\nconst DocumentRow: React.FC = ({\n  document,\n  onUploadSuccess,\n  onUploadError,\n  testID = 'document-row',\n}) => {\n  const theme = useAppTheme();\n  const [showPicker, setShowPicker] = useState(false);\n\n  // Upload hook\n  const {\n    startUpload,\n    progress,\n    status: uploadStatus,\n    error,\n    cancel,\n  } = useKycUpload();\n\n  /**\n   * Handle file selection from picker\n   */\n  const handleFilePicked = useCallback(\n    (file: RNFile) => {\n      console.log(`[DocumentRow] File picked for ${document.docType}:`, file);\n      startUpload(document.docType, file);\n    },\n    [document.docType, startUpload]\n  );\n\n  /**\n   * Handle upload button press\n   */\n  const handleUploadPress = useCallback(() => {\n    if (!document.canUpload) {\n      console.warn(`[DocumentRow] Upload not allowed for ${document.docType}`);\n      return;\n    }\n    setShowPicker(true);\n  }, [document.canUpload, document.docType]);\n\n  /**\n   * Handle upload success\n   */\n  React.useEffect(() => {\n    if (uploadStatus === 'success') {\n      console.log(`[DocumentRow] Upload successful for ${document.docType}`);\n      onUploadSuccess?.();\n    }\n  }, [uploadStatus, document.docType, onUploadSuccess]);\n\n  /**\n   * Handle upload error\n   */\n  React.useEffect(() => {\n    if (uploadStatus === 'error' && error) {\n      console.error(\n        `[DocumentRow] Upload failed for ${document.docType}:`,\n        error\n      );\n      onUploadError?.(error);\n    }\n  }, [uploadStatus, error, document.docType, onUploadError]);\n\n  const isUploading = uploadStatus === 'running';\n  const showUploadButton = document.canUpload && !isUploading;\n  const statusColor = getStatusColor(document.status);\n  const statusTextColor = getStatusTextColor(document.status);\n  const statusIcon = getStatusIcon(document.status);\n\n  return (\n    \n      {/* Document Info Section */}\n      \n        \n          \n            {document.displayName}\n          \n\n          {/* Status Badge */}\n           (\n              \n            )}\n            style={[styles.statusChip, {backgroundColor: statusColor}]}\n            textStyle={[styles.statusText, {color: statusTextColor}]}\n            compact\n            testID={`${testID}-status`}\n            accessibilityLabel={`Status: ${document.status}`}\n          >\n            {document.status}\n          \n        \n\n        {/* Upload Date (if document exists) */}\n        {document.latestDoc && (\n          \n            Uploaded:{' '}\n            {new Date(document.latestDoc.uploadedAt).toLocaleDateString()}\n          \n        )}\n      \n\n      {/* Action Section */}\n      \n        {/* Progress Bar (during upload) */}\n        {isUploading && progress !== null && (\n          \n            \n            \n              \n                {progress}%\n              \n              \n                Cancel\n              \n            \n          \n        )}\n\n        {/* Upload Button */}\n        {showUploadButton && (\n           (\n              \n            )}\n            style={styles.uploadButton}\n            contentStyle={styles.uploadButtonContent}\n            labelStyle={styles.uploadButtonLabel}\n            testID={`${testID}-upload`}\n            accessibilityRole=\"button\"\n            accessibilityLabel={`Upload ${document.displayName}`}\n            accessibilityHint={`Opens file picker to upload ${document.displayName} document`}\n          >\n            Upload\n          \n        )}\n\n        {/* Status Message for Non-Uploadable Documents */}\n        {!document.canUpload && !isUploading && (\n          \n            {document.status === 'Approved'\n              ? 'Document approved'\n              : 'Upload not available'}\n          \n        )}\n      \n\n      {/* Document Picker Modal */}\n       setShowPicker(false)}\n        onFilePicked={handleFilePicked}\n        testID={`${testID}-picker`}\n      />\n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: spacing.md,\n    marginVertical: spacing.xs,\n    borderRadius: 8,\n    borderWidth: 1,\n    borderColor: colors.border.light,\n  },\n  infoSection: {\n    flex: 1,\n    marginBottom: spacing.sm,\n  },\n  nameSection: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: spacing.xs,\n  },\n  documentName: {\n    flex: 1,\n    fontWeight: '500',\n  },\n  statusChip: {\n    marginLeft: spacing.sm,\n  },\n  statusText: {\n    fontSize: 12,\n    fontWeight: '500',\n  },\n  uploadDate: {\n    marginTop: spacing.xs,\n  },\n  actionSection: {\n    alignItems: 'flex-end',\n  },\n  progressSection: {\n    width: '100%',\n    marginBottom: spacing.sm,\n  },\n  progressBar: {\n    height: 4,\n    borderRadius: 2,\n    marginBottom: spacing.xs,\n  },\n  progressActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  progressText: {\n    fontWeight: '500',\n  },\n  uploadButton: {\n    borderRadius: 6,\n  },\n  uploadButtonContent: {\n    paddingHorizontal: spacing.sm,\n  },\n  uploadButtonLabel: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  statusMessage: {\n    fontStyle: 'italic',\n    textAlign: 'right',\n  },\n});\n\nexport default DocumentRow;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DraftLead.html":{"url":"interfaces/DraftLead.html","title":"interface - DraftLead","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DraftLead\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/checkoutSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                Draft lead payload structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            cartSnapshot\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            instructions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cartSnapshot\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartSnapshot:         CartItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CartItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instructions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instructions:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport type {CartItem} from './servicesCartSlice';\n\n/**\n * Draft lead payload structure\n */\nexport interface DraftLead {\n  address: string;\n  instructions?: string;\n  cartSnapshot: CartItem[];\n}\n\n/**\n * Checkout state interface\n */\nexport interface CheckoutState {\n  draft?: DraftLead;\n  isSubmitting: boolean;\n  lastSubmittedAt?: string;\n  error?: string;\n}\n\n/**\n * Initial state\n */\nconst initialState: CheckoutState = {\n  isSubmitting: false,\n};\n\n/**\n * Checkout slice\n */\nexport const checkoutSlice = createSlice({\n  name: 'checkout',\n  initialState,\n  reducers: {\n    /**\n     * Submit draft lead (NO-OP stub for now)\n     *\n     * Simply logs and persists the draft lead data to Redux state.\n     * This will be replaced with actual API call in S3-TASK-01B.\n     *\n     * @param action.payload - Draft lead data with address, instructions, and cart snapshot\n     */\n    submitDraftLead: (state, action: PayloadAction) => {\n      const timestamp = new Date().toISOString();\n\n      // Log for debugging (will be removed in production)\n      console.log('[Checkout] Draft lead submitted:', {\n        timestamp,\n        address: action.payload.address,\n        instructionsLength: action.payload.instructions?.length || 0,\n        servicesCount: action.payload.cartSnapshot.length,\n        totalItems: action.payload.cartSnapshot.reduce(\n          (sum, item) => sum + item.qty,\n          0\n        ),\n      });\n\n      // Store draft in Redux (ephemeral - never persisted)\n      state.draft = action.payload;\n      state.lastSubmittedAt = timestamp;\n      state.error = undefined;\n\n      // TODO: Replace with actual API call in S3-TASK-01B\n      // This will become: await leadsAPI.createLead(action.payload)\n    },\n\n    /**\n     * Set submission loading state\n     */\n    setSubmitting: (state, action: PayloadAction) => {\n      state.isSubmitting = action.payload;\n    },\n\n    /**\n     * Set submission error\n     */\n    setSubmissionError: (state, action: PayloadAction) => {\n      state.error = action.payload;\n      state.isSubmitting = false;\n    },\n\n    /**\n     * Clear draft lead data\n     */\n    clearDraft: state => {\n      state.draft = undefined;\n      state.error = undefined;\n      state.isSubmitting = false;\n    },\n\n    /**\n     * Reset entire checkout state\n     */\n    resetCheckoutState: () => initialState,\n  },\n});\n\n// Export actions\nexport const {\n  submitDraftLead,\n  setSubmitting,\n  setSubmissionError,\n  clearDraft,\n  resetCheckoutState,\n} = checkoutSlice.actions;\n\n// Selectors\nexport const selectCheckoutDraft = (state: {checkout: CheckoutState}) =>\n  state.checkout.draft;\n\nexport const selectIsSubmitting = (state: {checkout: CheckoutState}) =>\n  state.checkout.isSubmitting;\n\nexport const selectSubmissionError = (state: {checkout: CheckoutState}) =>\n  state.checkout.error;\n\nexport const selectLastSubmittedAt = (state: {checkout: CheckoutState}) =>\n  state.checkout.lastSubmittedAt;\n\nexport const selectHasDraft = (state: {checkout: CheckoutState}) =>\n  !!state.checkout.draft;\n\n// Export reducer\nexport default checkoutSlice.reducer;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownOption.html":{"url":"interfaces/DropdownOption.html","title":"interface - DropdownOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/Dropdown/Dropdown.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sublabel\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sublabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sublabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useState, useCallback} from 'react';\nimport {View, StyleSheet, FlatList} from 'react-native';\nimport {\n  TextInput,\n  Menu,\n  Divider,\n  Text,\n  TouchableRipple,\n} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\nexport interface DropdownOption {\n  label: string;\n  value: string;\n  sublabel?: string;\n}\n\nexport interface DropdownProps {\n  label: string;\n  placeholder?: string;\n  value?: string;\n  options: DropdownOption[];\n  onSelect: (value: string) => void;\n  error?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  testID?: string;\n}\n\n/**\n * Dropdown Component\n */\nconst Dropdown: React.FC = ({\n  label,\n  placeholder = 'Select an option...',\n  value,\n  options,\n  onSelect,\n  error,\n  disabled = false,\n  loading = false,\n  testID,\n}) => {\n  const theme = useAppTheme();\n  const [visible, setVisible] = useState(false);\n\n  const selectedOption = options.find(option => option.value === value);\n\n  const openMenu = useCallback(() => {\n    if (!disabled && !loading) {\n      setVisible(true);\n    }\n  }, [disabled, loading]);\n\n  const closeMenu = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const handleSelect = useCallback(\n    (selectedValue: string) => {\n      onSelect(selectedValue);\n      closeMenu();\n    },\n    [onSelect, closeMenu]\n  );\n\n  const renderOption = useCallback(\n    ({item}: {item: DropdownOption}) => (\n       handleSelect(item.value)}\n        style={styles.menuItem}\n        testID={`${testID}-option-${item.value}`}\n      >\n        \n          \n            {item.label}\n          \n          {item.sublabel && (\n            \n              {item.sublabel}\n            \n          )}\n        \n      \n    ),\n    [handleSelect, theme, testID]\n  );\n\n  const keyExtractor = useCallback((item: DropdownOption) => item.value, []);\n\n  return (\n    \n       {}} // Controlled by dropdown\n            onTouchStart={openMenu}\n            editable={false}\n            error={!!error}\n            disabled={disabled}\n            right={\n               (\n                  \n                )}\n                onPress={openMenu}\n                disabled={disabled || loading}\n              />\n            }\n            style={[\n              styles.textInput,\n              disabled && {backgroundColor: theme.colors.surfaceDisabled},\n            ]}\n            testID={testID}\n            accessibilityLabel={label}\n            accessibilityHint=\"Tap to open dropdown menu\"\n          />\n        }\n        anchorPosition=\"bottom\"\n      >\n        {loading ? (\n          \n            \n              Loading options...\n            \n          \n        ) : options.length === 0 ? (\n          \n            \n              No options available\n            \n          \n        ) : (\n           }\n            style={styles.optionsList}\n            nestedScrollEnabled={true}\n          />\n        )}\n      \n\n      {error && (\n        \n          {error}\n        \n      )}\n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 16,\n  },\n  textInput: {\n    backgroundColor: 'transparent',\n  },\n  menuContent: {\n    borderRadius: 8,\n    elevation: 8,\n    maxHeight: 200,\n  },\n  optionsList: {\n    maxHeight: 180,\n  },\n  menuItem: {\n    padding: 12,\n    minHeight: 48,\n    justifyContent: 'center',\n  },\n  loadingContainer: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  emptyContainer: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  errorText: {\n    marginTop: 4,\n    marginLeft: 16,\n  },\n});\n\nexport default Dropdown;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DropdownProps.html":{"url":"interfaces/DropdownProps.html","title":"interface - DropdownProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DropdownProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/Dropdown/Dropdown.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loading\n                                        \n                                \n                                \n                                        \n                                            onSelect\n                                        \n                                \n                                \n                                        \n                                            options\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            placeholder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onSelect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onSelect:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:         DropdownOption[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DropdownOption[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placeholder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placeholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useState, useCallback} from 'react';\nimport {View, StyleSheet, FlatList} from 'react-native';\nimport {\n  TextInput,\n  Menu,\n  Divider,\n  Text,\n  TouchableRipple,\n} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\nexport interface DropdownOption {\n  label: string;\n  value: string;\n  sublabel?: string;\n}\n\nexport interface DropdownProps {\n  label: string;\n  placeholder?: string;\n  value?: string;\n  options: DropdownOption[];\n  onSelect: (value: string) => void;\n  error?: string;\n  disabled?: boolean;\n  loading?: boolean;\n  testID?: string;\n}\n\n/**\n * Dropdown Component\n */\nconst Dropdown: React.FC = ({\n  label,\n  placeholder = 'Select an option...',\n  value,\n  options,\n  onSelect,\n  error,\n  disabled = false,\n  loading = false,\n  testID,\n}) => {\n  const theme = useAppTheme();\n  const [visible, setVisible] = useState(false);\n\n  const selectedOption = options.find(option => option.value === value);\n\n  const openMenu = useCallback(() => {\n    if (!disabled && !loading) {\n      setVisible(true);\n    }\n  }, [disabled, loading]);\n\n  const closeMenu = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const handleSelect = useCallback(\n    (selectedValue: string) => {\n      onSelect(selectedValue);\n      closeMenu();\n    },\n    [onSelect, closeMenu]\n  );\n\n  const renderOption = useCallback(\n    ({item}: {item: DropdownOption}) => (\n       handleSelect(item.value)}\n        style={styles.menuItem}\n        testID={`${testID}-option-${item.value}`}\n      >\n        \n          \n            {item.label}\n          \n          {item.sublabel && (\n            \n              {item.sublabel}\n            \n          )}\n        \n      \n    ),\n    [handleSelect, theme, testID]\n  );\n\n  const keyExtractor = useCallback((item: DropdownOption) => item.value, []);\n\n  return (\n    \n       {}} // Controlled by dropdown\n            onTouchStart={openMenu}\n            editable={false}\n            error={!!error}\n            disabled={disabled}\n            right={\n               (\n                  \n                )}\n                onPress={openMenu}\n                disabled={disabled || loading}\n              />\n            }\n            style={[\n              styles.textInput,\n              disabled && {backgroundColor: theme.colors.surfaceDisabled},\n            ]}\n            testID={testID}\n            accessibilityLabel={label}\n            accessibilityHint=\"Tap to open dropdown menu\"\n          />\n        }\n        anchorPosition=\"bottom\"\n      >\n        {loading ? (\n          \n            \n              Loading options...\n            \n          \n        ) : options.length === 0 ? (\n          \n            \n              No options available\n            \n          \n        ) : (\n           }\n            style={styles.optionsList}\n            nestedScrollEnabled={true}\n          />\n        )}\n      \n\n      {error && (\n        \n          {error}\n        \n      )}\n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginBottom: 16,\n  },\n  textInput: {\n    backgroundColor: 'transparent',\n  },\n  menuContent: {\n    borderRadius: 8,\n    elevation: 8,\n    maxHeight: 200,\n  },\n  optionsList: {\n    maxHeight: 180,\n  },\n  menuItem: {\n    padding: 12,\n    minHeight: 48,\n    justifyContent: 'center',\n  },\n  loadingContainer: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  emptyContainer: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  errorText: {\n    marginTop: 4,\n    marginLeft: 16,\n  },\n});\n\nexport default Dropdown;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBoundary.html":{"url":"classes/ErrorBoundary.html","title":"class - ErrorBoundary","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBoundary\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/feedback/ErrorBoundary.tsx\n        \n\n\n            \n                Description\n            \n            \n                Error Boundary Component\nProvides graceful error handling for the entire app\n\n            \n\n            \n                Extends\n            \n            \n                        Component\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                reloadApp\n                            \n                            \n                                resetError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                componentDidCatch\n                            \n                            \n                                    Static\n                                getDerivedStateFromError\n                            \n                            \n                                render\n                            \n                            \n                                renderDefaultFallback\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(props: ErrorBoundaryProps)\n                    \n                \n                        \n                            \n                                Defined in src/components/feedback/ErrorBoundary.tsx:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        props\n                                                  \n                                                        \n                                                                        ErrorBoundaryProps\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        reloadApp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/components/feedback/ErrorBoundary.tsx:94\n                        \n                    \n\n            \n                \n                    Reload the app (alternative reset method)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetError\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/components/feedback/ErrorBoundary.tsx:75\n                        \n                    \n\n            \n                \n                    Reset error boundary state\nHandles its own reset and notifies parent\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        componentDidCatch\n                        \n                    \n                \n            \n            \n                \ncomponentDidCatch(error: Error, errorInfo: ErrorInfo)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/feedback/ErrorBoundary.tsx:52\n                        \n                    \n\n\n            \n                \n                        Lifecycle method called when an error occurs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                errorInfo\n                                            \n                                                        ErrorInfo\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getDerivedStateFromError\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDerivedStateFromError(error: Error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/feedback/ErrorBoundary.tsx:42\n                        \n                    \n\n\n            \n                \n                        Static method to update state when an error occurs\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ErrorBoundaryState\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        render\n                        \n                    \n                \n            \n            \n                \nrender()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/feedback/ErrorBoundary.tsx:165\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderDefaultFallback\n                        \n                    \n                \n            \n            \n                \nrenderDefaultFallback()\n                \n            \n\n\n                    \n                        \n                            Defined in src/components/feedback/ErrorBoundary.tsx:103\n                        \n                    \n\n\n            \n                \n                        Enhanced fallback UI with better design\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import React, {Component, ErrorInfo, ReactNode} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {colors, spacing, typography} from '../../theme/palette';\n\n/**\n * Error Boundary Props\n */\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void; // Optional callback for logging/analytics\n}\n\n/**\n * Error Boundary State\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Error Boundary Component\n * Provides graceful error handling for the entire app\n */\nclass ErrorBoundary extends Component {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {hasError: false};\n  }\n\n  /**\n   * Static method to update state when an error occurs\n   */\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  /**\n   * Lifecycle method called when an error occurs\n   */\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log error for debugging\n    console.error('[ErrorBoundary] Caught an error:', error);\n    console.error('[ErrorBoundary] Error info:', errorInfo);\n\n    // Update state with error info\n    this.setState({\n      errorInfo,\n    });\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // In production, you might want to send this to a crash reporting service\n    // Example: Crashlytics.recordError(error);\n  }\n\n  /**\n   * Reset error boundary state\n   * Handles its own reset and notifies parent\n   */\n  resetError = () => {\n    console.log('[ErrorBoundary] Resetting error state');\n\n    // Reset internal state\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n    });\n\n    // Notify parent for logging/analytics (optional)\n    if (this.props.onReset) {\n      this.props.onReset();\n    }\n  };\n\n  /**\n   * Reload the app (alternative reset method)\n   */\n  reloadApp = () => {\n    console.log('[ErrorBoundary] Reloading app requested');\n    // In a real app, you might use RNRestart or similar\n    this.resetError();\n  };\n\n  /**\n   * Enhanced fallback UI with better design\n   */\n  renderDefaultFallback() {\n    const {error, errorInfo} = this.state;\n\n    return (\n      \n        \n          {/* Modern Error Icon */}\n          \n            😔\n          \n\n          {/* Main Error Message */}\n          Something went wrong\n          \n            We apologize for the inconvenience. The app encountered an\n            unexpected issue and needs to recover.\n          \n\n          {/* Error Details (development only) */}\n          {__DEV__ && error && (\n            \n              Debug Information:\n              {error.message}\n              {errorInfo && (\n                \n                  {errorInfo.componentStack.split('\\n').slice(0, 3).join('\\n')}\n                \n              )}\n            \n          )}\n\n          {/* Action Buttons */}\n          \n            \n              🔄 Try Again\n            \n\n            \n              ↻ Reload App\n            \n          \n\n          {/* Support Information */}\n          \n            \n              If this problem continues, please contact our support team.\n            \n            support@solarium.in\n          \n        \n      \n    );\n  }\n\n  render() {\n    const {hasError} = this.state;\n    const {children, fallback} = this.props;\n\n    if (hasError) {\n      // Use custom fallback if provided, otherwise use enhanced default\n      return fallback || this.renderDefaultFallback();\n    }\n\n    return children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing.lg,\n  },\n  content: {\n    alignItems: 'center',\n    maxWidth: 340,\n    width: '100%',\n  },\n  iconContainer: {\n    marginBottom: spacing.xl,\n    padding: spacing.md,\n    borderRadius: 50,\n    backgroundColor: colors.surface,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  icon: {\n    fontSize: 48,\n  },\n  title: {\n    fontSize: typography.fontSize.xxl,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.text.primary,\n    textAlign: 'center',\n    marginBottom: spacing.md,\n  },\n  description: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: typography.fontSize.md * typography.lineHeight.relaxed,\n    marginBottom: spacing.xl,\n    paddingHorizontal: spacing.sm,\n  },\n  errorDetails: {\n    backgroundColor: colors.surface,\n    padding: spacing.md,\n    borderRadius: 12,\n    marginBottom: spacing.lg,\n    width: '100%',\n    borderLeftWidth: 4,\n    borderLeftColor: colors.error,\n  },\n  errorTitle: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.error,\n    marginBottom: spacing.xs,\n  },\n  errorMessage: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n    marginBottom: spacing.xs,\n    backgroundColor: '#f5f5f5',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  errorStack: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: 'monospace',\n    color: colors.text.secondary,\n    backgroundColor: '#f8f8f8',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  buttonContainer: {\n    width: '100%',\n    gap: spacing.md,\n    marginBottom: spacing.lg,\n  },\n  primaryButton: {\n    backgroundColor: colors.primary,\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  primaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.bold,\n    color: '#FFFFFF',\n  },\n  secondaryButton: {\n    backgroundColor: 'transparent',\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: colors.border.default,\n    alignItems: 'center',\n  },\n  secondaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n  },\n  supportContainer: {\n    alignItems: 'center',\n    paddingTop: spacing.md,\n    borderTopWidth: 1,\n    borderTopColor: colors.border.light,\n    width: '100%',\n  },\n  supportText: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: spacing.xs,\n  },\n  supportEmail: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.primary,\n    textAlign: 'center',\n  },\n});\n\nexport default ErrorBoundary;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorBoundaryProps.html":{"url":"interfaces/ErrorBoundaryProps.html","title":"interface - ErrorBoundaryProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorBoundaryProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/feedback/ErrorBoundary.tsx\n        \n\n\n            \n                Description\n            \n            \n                Error Boundary Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fallback\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onError\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onReset\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fallback\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fallback:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onReset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onReset:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {Component, ErrorInfo, ReactNode} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {colors, spacing, typography} from '../../theme/palette';\n\n/**\n * Error Boundary Props\n */\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void; // Optional callback for logging/analytics\n}\n\n/**\n * Error Boundary State\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Error Boundary Component\n * Provides graceful error handling for the entire app\n */\nclass ErrorBoundary extends Component {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {hasError: false};\n  }\n\n  /**\n   * Static method to update state when an error occurs\n   */\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  /**\n   * Lifecycle method called when an error occurs\n   */\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log error for debugging\n    console.error('[ErrorBoundary] Caught an error:', error);\n    console.error('[ErrorBoundary] Error info:', errorInfo);\n\n    // Update state with error info\n    this.setState({\n      errorInfo,\n    });\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // In production, you might want to send this to a crash reporting service\n    // Example: Crashlytics.recordError(error);\n  }\n\n  /**\n   * Reset error boundary state\n   * Handles its own reset and notifies parent\n   */\n  resetError = () => {\n    console.log('[ErrorBoundary] Resetting error state');\n\n    // Reset internal state\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n    });\n\n    // Notify parent for logging/analytics (optional)\n    if (this.props.onReset) {\n      this.props.onReset();\n    }\n  };\n\n  /**\n   * Reload the app (alternative reset method)\n   */\n  reloadApp = () => {\n    console.log('[ErrorBoundary] Reloading app requested');\n    // In a real app, you might use RNRestart or similar\n    this.resetError();\n  };\n\n  /**\n   * Enhanced fallback UI with better design\n   */\n  renderDefaultFallback() {\n    const {error, errorInfo} = this.state;\n\n    return (\n      \n        \n          {/* Modern Error Icon */}\n          \n            😔\n          \n\n          {/* Main Error Message */}\n          Something went wrong\n          \n            We apologize for the inconvenience. The app encountered an\n            unexpected issue and needs to recover.\n          \n\n          {/* Error Details (development only) */}\n          {__DEV__ && error && (\n            \n              Debug Information:\n              {error.message}\n              {errorInfo && (\n                \n                  {errorInfo.componentStack.split('\\n').slice(0, 3).join('\\n')}\n                \n              )}\n            \n          )}\n\n          {/* Action Buttons */}\n          \n            \n              🔄 Try Again\n            \n\n            \n              ↻ Reload App\n            \n          \n\n          {/* Support Information */}\n          \n            \n              If this problem continues, please contact our support team.\n            \n            support@solarium.in\n          \n        \n      \n    );\n  }\n\n  render() {\n    const {hasError} = this.state;\n    const {children, fallback} = this.props;\n\n    if (hasError) {\n      // Use custom fallback if provided, otherwise use enhanced default\n      return fallback || this.renderDefaultFallback();\n    }\n\n    return children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing.lg,\n  },\n  content: {\n    alignItems: 'center',\n    maxWidth: 340,\n    width: '100%',\n  },\n  iconContainer: {\n    marginBottom: spacing.xl,\n    padding: spacing.md,\n    borderRadius: 50,\n    backgroundColor: colors.surface,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  icon: {\n    fontSize: 48,\n  },\n  title: {\n    fontSize: typography.fontSize.xxl,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.text.primary,\n    textAlign: 'center',\n    marginBottom: spacing.md,\n  },\n  description: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: typography.fontSize.md * typography.lineHeight.relaxed,\n    marginBottom: spacing.xl,\n    paddingHorizontal: spacing.sm,\n  },\n  errorDetails: {\n    backgroundColor: colors.surface,\n    padding: spacing.md,\n    borderRadius: 12,\n    marginBottom: spacing.lg,\n    width: '100%',\n    borderLeftWidth: 4,\n    borderLeftColor: colors.error,\n  },\n  errorTitle: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.error,\n    marginBottom: spacing.xs,\n  },\n  errorMessage: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n    marginBottom: spacing.xs,\n    backgroundColor: '#f5f5f5',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  errorStack: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: 'monospace',\n    color: colors.text.secondary,\n    backgroundColor: '#f8f8f8',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  buttonContainer: {\n    width: '100%',\n    gap: spacing.md,\n    marginBottom: spacing.lg,\n  },\n  primaryButton: {\n    backgroundColor: colors.primary,\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  primaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.bold,\n    color: '#FFFFFF',\n  },\n  secondaryButton: {\n    backgroundColor: 'transparent',\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: colors.border.default,\n    alignItems: 'center',\n  },\n  secondaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n  },\n  supportContainer: {\n    alignItems: 'center',\n    paddingTop: spacing.md,\n    borderTopWidth: 1,\n    borderTopColor: colors.border.light,\n    width: '100%',\n  },\n  supportText: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: spacing.xs,\n  },\n  supportEmail: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.primary,\n    textAlign: 'center',\n  },\n});\n\nexport default ErrorBoundary;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorBoundaryState.html":{"url":"interfaces/ErrorBoundaryState.html","title":"interface - ErrorBoundaryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorBoundaryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/feedback/ErrorBoundary.tsx\n        \n\n\n            \n                Description\n            \n            \n                Error Boundary State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorInfo\n                                        \n                                \n                                \n                                        \n                                            hasError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     Error\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Error\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorInfo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorInfo:     ErrorInfo\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ErrorInfo\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {Component, ErrorInfo, ReactNode} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {colors, spacing, typography} from '../../theme/palette';\n\n/**\n * Error Boundary Props\n */\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  onReset?: () => void; // Optional callback for logging/analytics\n}\n\n/**\n * Error Boundary State\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\n/**\n * Error Boundary Component\n * Provides graceful error handling for the entire app\n */\nclass ErrorBoundary extends Component {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {hasError: false};\n  }\n\n  /**\n   * Static method to update state when an error occurs\n   */\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  /**\n   * Lifecycle method called when an error occurs\n   */\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log error for debugging\n    console.error('[ErrorBoundary] Caught an error:', error);\n    console.error('[ErrorBoundary] Error info:', errorInfo);\n\n    // Update state with error info\n    this.setState({\n      errorInfo,\n    });\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // In production, you might want to send this to a crash reporting service\n    // Example: Crashlytics.recordError(error);\n  }\n\n  /**\n   * Reset error boundary state\n   * Handles its own reset and notifies parent\n   */\n  resetError = () => {\n    console.log('[ErrorBoundary] Resetting error state');\n\n    // Reset internal state\n    this.setState({\n      hasError: false,\n      error: undefined,\n      errorInfo: undefined,\n    });\n\n    // Notify parent for logging/analytics (optional)\n    if (this.props.onReset) {\n      this.props.onReset();\n    }\n  };\n\n  /**\n   * Reload the app (alternative reset method)\n   */\n  reloadApp = () => {\n    console.log('[ErrorBoundary] Reloading app requested');\n    // In a real app, you might use RNRestart or similar\n    this.resetError();\n  };\n\n  /**\n   * Enhanced fallback UI with better design\n   */\n  renderDefaultFallback() {\n    const {error, errorInfo} = this.state;\n\n    return (\n      \n        \n          {/* Modern Error Icon */}\n          \n            😔\n          \n\n          {/* Main Error Message */}\n          Something went wrong\n          \n            We apologize for the inconvenience. The app encountered an\n            unexpected issue and needs to recover.\n          \n\n          {/* Error Details (development only) */}\n          {__DEV__ && error && (\n            \n              Debug Information:\n              {error.message}\n              {errorInfo && (\n                \n                  {errorInfo.componentStack.split('\\n').slice(0, 3).join('\\n')}\n                \n              )}\n            \n          )}\n\n          {/* Action Buttons */}\n          \n            \n              🔄 Try Again\n            \n\n            \n              ↻ Reload App\n            \n          \n\n          {/* Support Information */}\n          \n            \n              If this problem continues, please contact our support team.\n            \n            support@solarium.in\n          \n        \n      \n    );\n  }\n\n  render() {\n    const {hasError} = this.state;\n    const {children, fallback} = this.props;\n\n    if (hasError) {\n      // Use custom fallback if provided, otherwise use enhanced default\n      return fallback || this.renderDefaultFallback();\n    }\n\n    return children;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: spacing.lg,\n  },\n  content: {\n    alignItems: 'center',\n    maxWidth: 340,\n    width: '100%',\n  },\n  iconContainer: {\n    marginBottom: spacing.xl,\n    padding: spacing.md,\n    borderRadius: 50,\n    backgroundColor: colors.surface,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  icon: {\n    fontSize: 48,\n  },\n  title: {\n    fontSize: typography.fontSize.xxl,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.text.primary,\n    textAlign: 'center',\n    marginBottom: spacing.md,\n  },\n  description: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    lineHeight: typography.fontSize.md * typography.lineHeight.relaxed,\n    marginBottom: spacing.xl,\n    paddingHorizontal: spacing.sm,\n  },\n  errorDetails: {\n    backgroundColor: colors.surface,\n    padding: spacing.md,\n    borderRadius: 12,\n    marginBottom: spacing.lg,\n    width: '100%',\n    borderLeftWidth: 4,\n    borderLeftColor: colors.error,\n  },\n  errorTitle: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.bold,\n    color: colors.error,\n    marginBottom: spacing.xs,\n  },\n  errorMessage: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n    marginBottom: spacing.xs,\n    backgroundColor: '#f5f5f5',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  errorStack: {\n    fontSize: typography.fontSize.xs,\n    fontFamily: 'monospace',\n    color: colors.text.secondary,\n    backgroundColor: '#f8f8f8',\n    padding: spacing.xs,\n    borderRadius: 4,\n  },\n  buttonContainer: {\n    width: '100%',\n    gap: spacing.md,\n    marginBottom: spacing.lg,\n  },\n  primaryButton: {\n    backgroundColor: colors.primary,\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    alignItems: 'center',\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n  },\n  primaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.bold,\n    color: '#FFFFFF',\n  },\n  secondaryButton: {\n    backgroundColor: 'transparent',\n    paddingVertical: spacing.md,\n    paddingHorizontal: spacing.xl,\n    borderRadius: 12,\n    borderWidth: 2,\n    borderColor: colors.border.default,\n    alignItems: 'center',\n  },\n  secondaryButtonText: {\n    fontSize: typography.fontSize.md,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.text.primary,\n  },\n  supportContainer: {\n    alignItems: 'center',\n    paddingTop: spacing.md,\n    borderTopWidth: 1,\n    borderTopColor: colors.border.light,\n    width: '100%',\n  },\n  supportText: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.regular,\n    color: colors.text.secondary,\n    textAlign: 'center',\n    marginBottom: spacing.xs,\n  },\n  supportEmail: {\n    fontSize: typography.fontSize.sm,\n    fontFamily: typography.fontFamily.medium,\n    color: colors.primary,\n    textAlign: 'center',\n  },\n});\n\nexport default ErrorBoundary;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ErrorMessageProps.html":{"url":"interfaces/ErrorMessageProps.html","title":"interface - ErrorMessageProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ErrorMessageProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dismissible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onDismiss\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dismissible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dismissible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onDismiss\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onDismiss:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         ErrorMessageType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ErrorMessageType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtendedRenderOptions.html":{"url":"interfaces/ExtendedRenderOptions.html","title":"interface - ExtendedRenderOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExtendedRenderOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/testUtils.tsx\n        \n\n\n            \n                Description\n            \n            \n                Test store configuration\n\n            \n\n            \n                Extends\n            \n            \n                        Omit\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            preloadedState\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            store\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withNavigation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            withPersistence\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        preloadedState\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preloadedState:         Partial\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Partial\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        store\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        store:     ReturnType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReturnType<>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withPersistence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withPersistence:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {NavigationContainer} from '@react-navigation/native';\nimport {configureStore} from '@reduxjs/toolkit';\nimport {render, RenderOptions} from '@testing-library/react-native';\nimport React, {ReactElement} from 'react';\nimport {Provider} from 'react-redux';\nimport {persistStore} from 'redux-persist';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport {authApi, servicesApi, leadsApi} from '../api';\nimport {LoadingOverlay} from '../components';\nimport type {RootState} from '../store';\nimport authReducer from '../store/authSlice';\nimport cacheReducer from '../store/cacheSlice';\nimport uiReducer from '../store/uiSlice';\nimport ThemeProvider from '../theme/ThemeProvider';\n\n/**\n * Test store configuration\n */\ninterface ExtendedRenderOptions extends Omit {\n  preloadedState?: Partial;\n  store?: ReturnType;\n  withNavigation?: boolean;\n  withPersistence?: boolean;\n}\n\n/**\n * Create test store\n */\nexport const setupTestStore = (preloadedState?: Partial) => {\n  return configureStore({\n    reducer: {\n      auth: authReducer,\n      ui: uiReducer,\n      cache: cacheReducer,\n      [authApi.reducerPath]: authApi.reducer,\n      [servicesApi.reducerPath]: servicesApi.reducer,\n      [leadsApi.reducerPath]: leadsApi.reducer,\n    },\n    middleware: getDefaultMiddleware =>\n      getDefaultMiddleware({\n        serializableCheck: false, // Disable for testing\n      })\n        .concat(authApi.middleware)\n        .concat(servicesApi.middleware)\n        .concat(leadsApi.middleware),\n    preloadedState,\n  });\n};\n\n/**\n * Test wrapper component\n */\ninterface TestWrapperProps {\n  children: React.ReactNode;\n  store: ReturnType;\n  withNavigation: boolean;\n  withPersistence: boolean;\n}\n\nconst TestWrapper: React.FC = ({\n  children,\n  store,\n  withNavigation,\n  withPersistence,\n}) => {\n  const persistor = withPersistence ? persistStore(store) : null;\n\n  const content = withNavigation ? (\n    {children}\n  ) : (\n    children\n  );\n\n  return (\n    \n      {withPersistence && persistor ? (\n        }\n          persistor={persistor}\n        >\n          {content}\n        \n      ) : (\n        {content}\n      )}\n    \n  );\n};\n\n/**\n * Custom render function with providers\n */\nexport const renderWithProviders = (\n  ui: ReactElement,\n  {\n    preloadedState,\n    store = setupTestStore(preloadedState),\n    withNavigation = false,\n    withPersistence = false,\n    ...renderOptions\n  }: ExtendedRenderOptions = {}\n) => {\n  const Wrapper = ({children}: {children: React.ReactNode}) => (\n    \n      {children}\n    \n  );\n\n  return {\n    store,\n    ...render(ui, {wrapper: Wrapper, ...renderOptions}),\n  };\n};\n\n/**\n * Create mock user state\n */\nexport const createMockUser = () => ({\n  id: 'test-user-1',\n  phone: '1234567890',\n  name: 'Test User',\n  email: 'test@example.com',\n});\n\n/**\n * Create mock auth state\n */\nexport const createMockAuthState = (overrides = {}) => ({\n  isLoggedIn: true,\n  isLoading: false,\n  isSendingOtp: false,\n  token: 'mock-token-123',\n  refreshToken: 'mock-refresh-token-123',\n  user: createMockUser(),\n  lastLoginTime: Date.now(),\n  error: undefined,\n  ...overrides,\n});\n\n/**\n * Create mock lead\n */\nexport const createMockLead = (overrides = {}) => ({\n  id: 'lead-123',\n  customerId: 'test-user-1',\n  services: ['service-1'],\n  status: 'New Lead' as const,\n  priority: 'Medium' as const,\n  source: 'App' as const,\n  address: '123 Test Street',\n  state: 'Test State',\n  pinCode: '123456',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  customer: {\n    id: 'test-user-1',\n    name: 'Test User',\n    phone: '1234567890',\n  },\n  ...overrides,\n});\n\n/**\n * Create mock service\n */\nexport const createMockService = (overrides = {}) => ({\n  id: 'service-1',\n  name: 'Test Solar Installation',\n  description: 'Test service description',\n  category: 'Installation',\n  price: {min: 50000, max: 100000, currency: 'INR'},\n  image: 'https://example.com/image.jpg',\n  features: ['Feature 1', 'Feature 2'],\n  isActive: true,\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  ...overrides,\n});\n\n/**\n * Mock API responses\n */\nexport const mockApiResponse = (\n  data: T,\n  success = true\n) => ({\n  success,\n  data: success ? data : null,\n  error: success ? null : {code: 400, message: 'Test error'},\n});\n\n/**\n * Wait for async operations\n */\nexport const waitForAsync = () =>\n  new Promise(resolve => setTimeout(resolve, 0));\n\n/**\n * Mock navigation object\n */\nexport const createMockNavigation = () => ({\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  reset: jest.fn(),\n  setParams: jest.fn(),\n  dispatch: jest.fn(),\n  setOptions: jest.fn(),\n  isFocused: jest.fn(() => true),\n  addListener: jest.fn(() => jest.fn()),\n});\n\n/**\n * Mock route object\n */\nexport const createMockRoute = (params = {}) => ({\n  params,\n  key: 'test-route',\n  name: 'TestScreen',\n});\n\n/**\n * Async test helper\n */\nexport const asyncTest = (testFn: () => Promise) => {\n  return async () => {\n    await testFn();\n    await waitForAsync();\n  };\n};\n\n/**\n * Fire event and wait\n */\nexport const fireEventAndWait = async (\n  element: any,\n  event: string,\n  ...args: any[]\n) => {\n  const {fireEvent} = await import('@testing-library/react-native');\n  fireEvent[event](element, ...args);\n  await waitForAsync();\n};\n\n/**\n * Assert loading state\n */\nexport const expectLoadingState = (\n  getByTestId: any,\n  testId: string,\n  isLoading: boolean\n) => {\n  if (isLoading) {\n    expect(getByTestId(testId)).toBeTruthy();\n  } else {\n    expect(() => getByTestId(testId)).toThrow();\n  }\n};\n\n/**\n * Assert error state\n */\nexport const expectErrorState = (getByText: any, errorMessage: string) => {\n  expect(getByText(errorMessage)).toBeTruthy();\n};\n\n/**\n * Create test IDs\n */\nexport const testIds = {\n  loading: 'loading-indicator',\n  error: 'error-message',\n  success: 'success-message',\n  loginForm: 'login-form',\n  phoneInput: 'phone-input',\n  otpInput: 'otp-input',\n  submitButton: 'submit-button',\n  backButton: 'back-button',\n  logoutButton: 'logout-button',\n};\n\n/**\n * Performance testing helper\n */\nexport const measurePerformance = async (testFn: () => Promise) => {\n  const start = performance.now();\n  await testFn();\n  const end = performance.now();\n  return end - start;\n};\n\n/**\n * Accessibility testing helper\n */\nexport const testAccessibility = async (component: ReactElement) => {\n  const {queryByRole} = renderWithProviders(component);\n\n  // Test basic accessibility\n  expect(queryByRole).toBeDefined();\n\n  // Add more accessibility tests as needed\n  return true;\n};\n\n// Re-export testing library utilities\nexport * from '@testing-library/react-native';\nexport {renderWithProviders as render};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtendedTheme.html":{"url":"interfaces/ExtendedTheme.html","title":"interface - ExtendedTheme","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExtendedTheme\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/theme/ThemeProvider.tsx\n        \n\n\n\n            \n                Extends\n            \n            \n                        MD3Theme\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            borderRadius\n                                        \n                                \n                                \n                                        \n                                            shadows\n                                        \n                                \n                                \n                                        \n                                            spacing\n                                        \n                                \n                                \n                                        \n                                            typography\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        borderRadius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        borderRadius:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shadows\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        shadows:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spacing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spacing:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        typography\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        typography:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {createContext, useContext} from 'react';\nimport {MD3LightTheme, PaperProvider, configureFonts} from 'react-native-paper';\nimport type {MD3Theme} from 'react-native-paper';\nimport {colors, spacing, typography, shadows, borderRadius} from './palette';\n\n// Extend the MD3Theme with our custom properties\nexport interface ExtendedTheme extends MD3Theme {\n  spacing: typeof spacing;\n  typography: typeof typography;\n  shadows: typeof shadows;\n  borderRadius: typeof borderRadius;\n}\n\n/**\n * Configure fonts for react-native-paper\n */\nconst fontConfig = configureFonts({\n  config: {\n    displayLarge: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.xxl,\n      lineHeight: typography.fontSize.xxl * typography.lineHeight.tight,\n    },\n    displayMedium: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.xl,\n      lineHeight: typography.fontSize.xl * typography.lineHeight.tight,\n    },\n    displaySmall: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    headlineLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xl,\n      lineHeight: typography.fontSize.xl * typography.lineHeight.normal,\n    },\n    headlineMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    headlineSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.normal,\n    },\n    titleLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    titleMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.normal,\n    },\n    titleSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.normal,\n    },\n    bodyLarge: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.relaxed,\n    },\n    bodyMedium: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.relaxed,\n    },\n    bodySmall: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.relaxed,\n    },\n    labelLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.normal,\n    },\n    labelMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.normal,\n    },\n    labelSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.normal,\n    },\n  },\n});\n\n/**\n * Custom theme based on Material Design 3\n */\nconst customTheme: ExtendedTheme = {\n  ...MD3LightTheme,\n  fonts: fontConfig,\n  colors: {\n    ...MD3LightTheme.colors,\n    primary: colors.primary,\n    primaryContainer: colors.primaryLight,\n    secondary: colors.secondary,\n    secondaryContainer: colors.secondaryLight,\n    background: colors.background,\n    surface: colors.surface,\n    error: colors.error,\n    onPrimary: '#FFFFFF',\n    onSecondary: '#FFFFFF',\n    onBackground: colors.text.primary,\n    onSurface: colors.text.primary,\n    onError: '#FFFFFF',\n    outline: colors.border.default,\n    outlineVariant: colors.border.light,\n  },\n  // Add our custom properties\n  spacing,\n  typography,\n  shadows,\n  borderRadius,\n};\n\n/**\n * Theme context for accessing theme outside of Paper components\n */\nconst ThemeContext = createContext(customTheme);\n\n/**\n * Hook to access theme in components\n */\nexport const useAppTheme = (): ExtendedTheme => {\n  const theme = useContext(ThemeContext);\n  if (!theme) {\n    throw new Error('useAppTheme must be used within ThemeProvider');\n  }\n  return theme;\n};\n\n/**\n * Theme Provider Props\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Theme Provider Component\n * Wraps the app with Material Design theme and custom theme context\n */\nconst ThemeProvider: React.FC = ({children}) => {\n  return (\n    \n      \n        {children}\n      \n    \n  );\n};\n\nexport default ThemeProvider;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FormProviderWrapperProps.html":{"url":"interfaces/FormProviderWrapperProps.html","title":"interface - FormProviderWrapperProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FormProviderWrapperProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/forms/FormProviderWrapper.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                        \n                                            defaultValues\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            formOptions\n                                        \n                                \n                                \n                                        \n                                            onSubmit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     ReactNode | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Child components that will have access to form context\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultValues\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultValues:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Default values for form fields\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formOptions:     Omit | defaultValues>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Omit | defaultValues>\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional useForm configuration options\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onSubmit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onSubmit:     SubmitHandler\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SubmitHandler\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback function called when form is submitted with valid data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing purposes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React, {useCallback, ReactNode} from 'react';\nimport {\n  useForm,\n  FormProvider,\n  UseFormProps,\n  FieldValues,\n  SubmitHandler,\n  UseFormReturn,\n} from 'react-hook-form';\n\nexport interface FormProviderWrapperProps {\n  /** Default values for form fields */\n  defaultValues: T;\n  /** Child components that will have access to form context */\n  children: ReactNode | ((methods: UseFormReturn) => ReactNode);\n  /** Callback function called when form is submitted with valid data */\n  onSubmit: SubmitHandler;\n  /** Additional useForm configuration options */\n  formOptions?: Omit, 'defaultValues'>;\n  /** Test ID for testing purposes */\n  testID?: string;\n}\n\n/**\n * FormProviderWrapper Component\n *\n * Provides react-hook-form context to child components with optimized re-renders\n * and consistent error handling patterns.\n */\nfunction FormProviderWrapper({\n  defaultValues,\n  children,\n  onSubmit,\n  formOptions = {},\n  testID,\n}: FormProviderWrapperProps): JSX.Element {\n  // Initialize form with default values and options\n  const methods = useForm({\n    defaultValues,\n    mode: 'onChange', // Validate on change for better UX\n    ...formOptions,\n  });\n\n  /**\n   * Memoized submit handler to prevent unnecessary re-renders\n   * Only recreates when onSubmit prop changes\n   */\n  const handleSubmit = useCallback(\n    (data: T) => {\n      try {\n        onSubmit(data);\n      } catch (error) {\n        console.error('[FormProviderWrapper] Submit error:', error);\n        // Form errors should be handled by the parent component\n        // We just log the error here and let it bubble up\n        throw error;\n      }\n    },\n    [onSubmit]\n  );\n\n  /**\n   * Memoized form submit handler with validation\n   */\n  const onFormSubmit = useCallback(methods.handleSubmit(handleSubmit), [\n    methods.handleSubmit,\n    handleSubmit,\n  ]);\n\n  // Attach submit handler to methods for easy access by children\n  const enhancedMethods = {\n    ...methods,\n    onSubmit: onFormSubmit,\n  };\n\n  return (\n    \n      {typeof children === 'function' ? children(enhancedMethods) : children}\n    \n  );\n}\n\nexport default FormProviderWrapper;\n\n/**\n * Type exports for easier importing\n */\nexport type {UseFormReturn, SubmitHandler, FieldValues} from 'react-hook-form';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetDocumentSasRequest.html":{"url":"interfaces/GetDocumentSasRequest.html","title":"interface - GetDocumentSasRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetDocumentSasRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                Document download SAS request\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            docId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetDocumentSasResponse.html":{"url":"interfaces/GetDocumentSasResponse.html","title":"interface - GetDocumentSasResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetDocumentSasResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                Document download SAS response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sasUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sasUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sasUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetLeadsRequest.html":{"url":"interfaces/GetLeadsRequest.html","title":"interface - GetLeadsRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetLeadsRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/leads.ts\n        \n\n\n            \n                Description\n            \n            \n                Request Types\n\n            \n\n            \n                Extends\n            \n            \n                            PaginatedRequest\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customerId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fromDate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            priority\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            source\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            toDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fromDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fromDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"Low\" | \"Medium\" | \"High\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Low\" | \"Medium\" | \"High\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         \"App\" | \"Website\" | \"Referral\" | \"Direct\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         \"App\" | \"Website\" | \"Referral\" | \"Direct\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         LeadStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LeadStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        toDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        toDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport {ServiceFetchError} from '../../errors';\nimport type {\n  ValidationError,\n  Lead,\n  CreateLeadRequest,\n  LeadResponse,\n  LeadStatus,\n} from '../../types';\nimport {\n  isValidationError,\n  isServerError,\n  isApiErrorResponse,\n} from '../../types';\nimport type {PaginatedRequest, PaginatedResponse} from '../../utils';\nimport {calculatePayloadSize, isPayloadTooLarge} from '../../utils';\nimport {\n  baseQuery,\n  transformResponse,\n  transformError,\n  provideTags,\n} from '../baseQuery';\n\n/**\n * Request Types\n */\nexport interface GetLeadsRequest extends PaginatedRequest {\n  status?: LeadStatus;\n  priority?: 'Low' | 'Medium' | 'High';\n  source?: 'App' | 'Website' | 'Referral' | 'Direct';\n  customerId?: string;\n  fromDate?: string;\n  toDate?: string;\n}\n\n/**\n * Enhanced error transformation for leads API\n */\nconst transformLeadError = (error: any): ServiceFetchError => {\n  // Check for validation errors\n  if (isValidationError(error)) {\n    const fieldErrors = Object.entries(error.errors)\n      .map(([field, messages]) => `${field}: ${messages.join(', ')}`)\n      .join('; ');\n\n    return new ServiceFetchError(\n      `Validation failed: ${fieldErrors}`,\n      'LEAD_VALIDATION',\n      'VALIDATION_ERROR',\n      {httpStatus: error.status}\n    );\n  }\n\n  // Check for server errors\n  if (isServerError(error)) {\n    return new ServiceFetchError(\n      error.message,\n      'LEAD_SERVER_ERROR',\n      'SERVER_ERROR',\n      {httpStatus: error.status}\n    );\n  }\n\n  // Check for API error responses\n  if (isApiErrorResponse(error)) {\n    return new ServiceFetchError(error.error, 'LEAD_API_ERROR', 'API_ERROR', {\n      httpStatus: 500,\n    });\n  }\n\n  // Fallback to standard error transformation\n  const baseError = transformError(error);\n  return new ServiceFetchError(\n    baseError.message,\n    'LEAD_UNKNOWN_ERROR',\n    'UNKNOWN_ERROR',\n    {httpStatus: baseError.code}\n  );\n};\n\n/**\n * Leads API Definition\n */\nexport const leadsApi = createApi({\n  reducerPath: 'leadsApi',\n  baseQuery,\n  tagTypes: ['Lead', 'LeadsList'],\n  endpoints: builder => ({\n    /**\n     * Get leads with filters\n     */\n    getLeads: builder.query, GetLeadsRequest>({\n      query: (params = {}) => {\n        const {page = 1, limit = 20, ...filters} = params;\n        return {\n          url: 'leads',\n          params: {page, limit, ...filters},\n        };\n      },\n      // ✅ Custom transformResponse that maps API structure to PaginatedResponse\n      transformResponse: (response: any): PaginatedResponse => {\n        // Handle the standard {success, data} structure first\n        let apiData;\n        if (response.success && response.data) {\n          apiData = response.data;\n        } else {\n          throw new Error('Invalid leads response format');\n        }\n\n        // Transform to match PaginatedResponse interface\n        return {\n          data: apiData.items || [], // Extract items array\n          pagination: {\n            page: Math.floor(apiData.offset / apiData.limit) + 1,\n            limit: apiData.limit,\n            total: apiData.total,\n            totalPages: Math.ceil(apiData.total / apiData.limit),\n            hasNext: apiData.offset + apiData.limit  0,\n          },\n        };\n      },\n      transformErrorResponse: transformLeadError,\n      providesTags: result => [\n        ...provideTags('Lead', result?.data),\n        {type: 'LeadsList' as const, id: 'LIST'},\n      ],\n    }),\n\n    /**\n     * Get leads for the current customer\n     * Returns up to 100 leads for the authenticated customer\n     */\n    getCustomerLeads: builder.query({\n      query: () => {\n        const params = {\n          limit: 100,\n          sortBy: 'updatedAt',\n          sortOrder: 'desc',\n        };\n\n        // Validate payload size (should be small for query params)\n        if (isPayloadTooLarge(params, 1)) {\n          // 1KB limit for query params\n          throw new Error('Query parameters too large');\n        }\n\n        return {\n          url: 'leads',\n          params,\n        };\n      },\n      transformResponse: (response: any) => {\n        // Handle the actual API response structure\n        let leads: Lead[] = [];\n\n        if (response.success && response.data && response.data.items) {\n          // API returns: { success: true, data: { items: [...], total, offset, limit } }\n          leads = response.data.items;\n        } else if (response.data && Array.isArray(response.data)) {\n          // Fallback: direct array response\n          leads = response.data;\n        } else if (Array.isArray(response)) {\n          // Fallback: direct array\n          leads = response;\n        }\n\n        // Transform API response to match our Lead interface\n        const transformedLeads = leads.map((lead: any) => ({\n          ...lead,\n          id: lead.leadId || lead.id, // Map leadId to id\n          customerId: lead.customerId || `CUST-${lead.phone?.slice(-4)}`, // Generate if missing\n          customer: lead.customer || {\n            id: lead.customerId || `CUST-${lead.phone?.slice(-4)}`,\n            name: lead.customerName,\n            phone: lead.phone,\n          },\n        }));\n\n        // Client-side enforcement of 100 item limit\n        return transformedLeads.slice(0, 100);\n      },\n      transformErrorResponse: transformLeadError,\n      providesTags: result => [\n        ...provideTags('Lead', result),\n        {type: 'LeadsList' as const, id: 'CUSTOMER'},\n      ],\n    }),\n\n    /**\n     * Get lead by ID\n     */\n    getLeadById: builder.query({\n      query: leadId => `leads/${leadId}`,\n      transformResponse: transformResponse,\n      transformErrorResponse: transformLeadError,\n      providesTags: (result, error, leadId) => [\n        {type: 'Lead' as const, id: leadId},\n      ],\n    }),\n\n    /**\n     * Create new lead - Real API implementation\n     */\n    createLead: builder.mutation({\n      query: data => ({\n        url: 'leads',\n        method: 'POST',\n        body: data,\n      }),\n      transformResponse: (response: LeadResponse) => {\n        // Handle backend response format\n        if (response.success && response.data) {\n          return response.data;\n        }\n        // Direct Lead object response\n        return response.data as Lead;\n      },\n      transformErrorResponse: transformLeadError,\n      invalidatesTags: [\n        {type: 'LeadsList' as const, id: 'LIST'},\n        {type: 'LeadsList' as const, id: 'CUSTOMER'},\n      ],\n      onQueryStarted: async (payload, {queryFulfilled}) => {\n        try {\n          // Client-side payload size validation\n          if (isPayloadTooLarge(payload, 100)) {\n            const actualSize = calculatePayloadSize(payload);\n            const validationError: ValidationError = {\n              status: 400,\n              message: 'Request payload too large',\n              errors: {\n                payload: [\n                  `Payload size ${Math.round(\n                    actualSize / 1024\n                  )}KB exceeds 100KB limit`,\n                ],\n              },\n            };\n            console.warn('[CreateLead] Payload too large:', {\n              size: `${Math.round(actualSize / 1024)}KB`,\n              limit: '100KB',\n              payload: `${JSON.stringify(payload).substring(0, 200)}...`,\n            });\n\n            throw new ServiceFetchError(\n              validationError.message,\n              'CREATE_LEAD',\n              'PAYLOAD_TOO_LARGE',\n              {httpStatus: 400}\n            );\n          }\n\n          // Wait for the query to complete\n          await queryFulfilled;\n        } catch (error) {\n          // Error handling is done by transformErrorResponse\n          console.error('[CreateLead] Mutation failed:', error);\n        }\n      },\n    }),\n  }),\n});\n\n// Export hooks\nexport const {\n  useGetLeadsQuery,\n  useGetCustomerLeadsQuery,\n  useGetLeadByIdQuery,\n  useCreateLeadMutation,\n} = leadsApi;\n\n// Re-export types for backward compatibility\nexport type {Lead, CreateLeadRequest, LeadStatus} from '../../types/Lead';\n\nexport default leadsApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetProfileResponse.html":{"url":"interfaces/GetProfileResponse.html","title":"interface - GetProfileResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetProfileResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile API response envelope for GET requests\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         ProfileData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ProfileData\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Profile data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Success status\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetQuotationsRequest.html":{"url":"interfaces/GetQuotationsRequest.html","title":"interface - GetQuotationsRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetQuotationsRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Get Quotations Request Parameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            leadId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            owner\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        owner:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         QuotationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuotationStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetServicesRequest.html":{"url":"interfaces/GetServicesRequest.html","title":"interface - GetServicesRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetServicesRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            priceRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priceRange:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Service {\n  serviceId: string;\n  name: string;\n  description: string;\n  type: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n  };\n  active: boolean;\n  category?: string;\n  features?: string[];\n  estimatedDuration?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface GetServicesRequest {\n  type?: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n  };\n  active?: boolean;\n  category?: string;\n}\n\nexport interface ServiceResponse {\n  success: boolean;\n  data: {\n    items: Service[];\n    total?: number;\n    page?: number;\n    limit?: number;\n  };\n  error?: string;\n}\n\nexport interface SingleServiceResponse {\n  success: boolean;\n  data: Service;\n  error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetTicketByIdResponse.html":{"url":"interfaces/GetTicketByIdResponse.html","title":"interface - GetTicketByIdResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetTicketByIdResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Complete ticket with full details and message thread\nBased on GET /api/v1/tickets/{id} response structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            closedAt\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            messages\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            ticketId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closedAt:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when ticket was closed (null if open)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when ticket was created\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Initial ticket description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated executed lead identifier\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messages:     TicketMessage[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TicketMessage[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All messages in chronological order\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TicketStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current ticket status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket subject line\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ticketId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ticketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique ticket identifier\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetTicketsResponse.html":{"url":"interfaces/GetTicketsResponse.html","title":"interface - GetTicketsResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetTicketsResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Paginated response for ticket list\nBased on GET /api/v1/tickets response structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     TicketListItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TicketListItem[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of tickets\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current limit for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current offset for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Total number of tickets available\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InfoTabProps.html":{"url":"interfaces/InfoTabProps.html","title":"interface - InfoTabProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InfoTabProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/LeadDetail/InfoTab.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lead ID to fetch and display\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {\n  View,\n  Text,\n  ScrollView,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useGetLeadByIdQuery} from '../../../api/endpoints/leads';\nimport {useGetServiceByIdQuery} from '../../../api/endpoints/services';\nimport {SafeAreaContainer} from '../../../components';\nimport {useRefreshControl} from '../../../hooks/useRefreshControl';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport {formatDisplayDate} from '../../../utils/dateHelpers';\nimport styles from './InfoTab.styles';\n\ninterface InfoTabProps {\n  /** Lead ID to fetch and display */\n  leadId: string;\n}\n\n/**\n * Service Name Component\n * Fetches and displays individual service name\n */\nconst ServiceName: React.FC = ({serviceId}) => {\n  const {data: service, isLoading} = useGetServiceByIdQuery(serviceId);\n\n  if (isLoading) {\n    return Loading...;\n  }\n\n  return {service?.name || serviceId};\n};\n\n/**\n * Services List Component\n * Renders comma-separated list of service names\n */\nconst ServicesList: React.FC = ({serviceIds}) => {\n  const theme = useAppTheme();\n\n  return (\n    \n      {serviceIds.map((serviceId, index) => (\n        \n          \n          {index \n              ,{' '}\n            \n          )}\n        \n      ))}\n    \n  );\n};\n\n/**\n * Detail Row Component\n * Renders a single detail row with label and value\n */\nconst DetailRow: React.FC = ({label, value, icon}) => {\n  const theme = useAppTheme();\n\n  return (\n    \n      \n        {icon && (\n          \n        )}\n        \n          {label}:\n        \n      \n      \n        {typeof value === 'string' ? (\n          \n            {value}\n          \n        ) : (\n          value\n        )}\n      \n    \n  );\n};\n\n/**\n * InfoTab Component\n * Shows essential lead information in a clean, organized layout\n */\nconst InfoTab: React.FC = ({leadId}) => {\n  const theme = useAppTheme();\n\n  // Fetch lead details\n  const {\n    data: lead,\n    isLoading,\n    isError,\n    isFetching,\n  } = useGetLeadByIdQuery(leadId, {\n    selectFromResult: result => ({\n      ...result,\n      // Extract the lead data from the success response format\n      data: result.data?.success ? result.data.data : result.data,\n    }),\n  });\n\n  // Enhanced refresh control with 60s debounce for detail screen\n  const {refreshSingleLead, canRefreshSingleLead} = useRefreshControl();\n\n  /**\n   * Handle pull-to-refresh\n   */\n  const handleRefresh = React.useCallback(async () => {\n    console.log('[InfoTab] Refreshing lead data for:', leadId);\n    try {\n      // Use the new single lead refresh method\n      await refreshSingleLead(leadId);\n    } catch (error) {\n      console.error('[InfoTab] Refresh error:', error);\n    }\n  }, [refreshSingleLead, leadId]);\n\n  // Loading state\n  if (isLoading && !lead) {\n    return (\n      \n        \n          \n          \n            Loading Lead Info...\n          \n        \n      \n    );\n  }\n\n  // Error state\n  if (isError || !lead) {\n    return (\n      \n        \n          \n          \n            Failed to Load Service Request\n          \n          \n            Please pull down to refresh and try again.\n          \n        \n      \n    );\n  }\n\n  return (\n    \n      \n        }\n        showsVerticalScrollIndicator={false}\n      >\n        {/* Details Section */}\n        \n          }\n            icon=\"build\"\n          />\n\n          \n\n          \n\n          {lead.followUpDate && (\n            \n          )}\n\n          \n\n          {lead.assignedTo && (\n            \n          )}\n        \n      \n    \n  );\n};\n\nexport default InfoTab;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KycDocUploadParams.html":{"url":"interfaces/KycDocUploadParams.html","title":"interface - KycDocUploadParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KycDocUploadParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/kycUploader.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload parameters for KYC document upload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            abortSignal\n                                        \n                                \n                                \n                                        \n                                            customerId\n                                        \n                                \n                                \n                                        \n                                            docType\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            leadId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onInvalidate\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onProgress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            store\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abortSignal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        abortSignal:     AbortSignal\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AbortSignal\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docType:         KycDocumentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:         RNFile\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RNFile\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onInvalidate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onInvalidate:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onProgress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        store\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        store:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {kycApi} from '../api/endpoints/kyc';\nimport {requestKycSasToken} from '../api/kycService';\nimport type {RootState} from '../store';\nimport {selectNewAuth} from '../store/newAuthSlice';\nimport type {SasInfo} from '../types/AzureBlob';\nimport type {RNFile} from '../types/File';\nimport type {\n  KycDocumentType,\n  RequestSasTokenRequest,\n} from '../types/KycDocument';\nimport {uploadFileToSas, estimateUploadTime} from '../utils/azureBlobUploader';\nimport {compressImage, isCompressibleImage} from '../utils/imageCompression';\nimport {validateKycDocument} from '../utils/kycValidation';\n\n/**\n * Upload parameters for KYC document upload\n */\nexport interface KycDocUploadParams {\n  leadId?: string; // made optional for backward compatibility\n  customerId: string;\n  docType: KycDocumentType;\n  file: RNFile;\n  onProgress?: (percentage: number) => void;\n  store?: {\n    getState: () => RootState;\n    dispatch: any;\n  };\n  onInvalidate?: (leadId: string) => void;\n  abortSignal?: AbortSignal; // New parameter for cancellation\n}\n\n/**\n * Upload result containing blob information\n */\nexport interface UploadResult {\n  blobName: string;\n  url: string;\n}\n\n/**\n * Upload error with step information\n */\nexport class KycUploadError extends Error {\n  public readonly step: string;\n  public readonly originalError: Error;\n\n  constructor(step: string, originalError: Error) {\n    super(`KYC upload failed at ${step}: ${originalError.message}`);\n    this.name = 'KycUploadError';\n    this.step = step;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Mutex for SAS token refresh to prevent concurrent requests\n */\nclass SasTokenMutex {\n  private readonly locks = new Map>();\n\n  async executeWithLock(\n    key: string,\n    operation: () => Promise\n  ): Promise {\n    // If there's already a pending operation for this key, wait for it\n    if (this.locks.has(key)) {\n      return this.locks.get(key)!;\n    }\n\n    // Create and store the operation promise\n    const promise = operation();\n    this.locks.set(key, promise);\n\n    try {\n      const result = await promise;\n      return result;\n    } finally {\n      // Always clean up the lock\n      this.locks.delete(key);\n    }\n  }\n}\n\n// Global mutex instance\nconst sasTokenMutex = new SasTokenMutex();\n\n/**\n * Extract blob name from SAS URL\n * Format: https://storage.blob.core.windows.net/container/path/filename.ext?sas=token\n */\nfunction extractBlobName(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    const pathParts = url.pathname.split('/');\n\n    // Remove empty first element and container name\n    const pathWithoutContainer = pathParts.slice(2);\n\n    // Join remaining parts to get blob name\n    return pathWithoutContainer.join('/');\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract blob name from SAS URL:',\n      error\n    );\n    // Fallback: use timestamp-based name\n    return `unknown-${Date.now()}`;\n  }\n}\n\n/**\n * Extract base URL (without query parameters) from SAS URL\n */\nfunction extractBaseUrl(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    return `${url.origin}${url.pathname}`;\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract base URL from SAS URL:',\n      error\n    );\n    return sasUrl.split('?')[0];\n  }\n}\n\n/**\n * Get current user ID from auth state\n */\nfunction getCurrentUserId(store?: {getState: () => RootState}): string {\n  if (!store) {\n    throw new Error('Store is required to get current user ID');\n  }\n\n  const state = store.getState();\n\n  // Get user from new auth system\n  const newAuth = selectNewAuth(state);\n  const user = newAuth?.user;\n\n  if (!user || !user.id) {\n    throw new Error('User not authenticated or missing user ID');\n  }\n\n  return user.id;\n}\n\n/**\n * Check if SAS token needs refresh based on remaining validity and estimated upload time\n */\nfunction needsSasTokenRefresh(\n  sasInfo: SasInfo,\n  file: RNFile,\n  bufferTimeSeconds: number = 60\n): boolean {\n  // Calculate estimated upload time (rough estimate: 1MB/s)\n  const estimatedUploadTimeSeconds = estimateUploadTime(file.size);\n\n  // Check if remaining validity is less than estimated upload time + buffer\n  const requiredTimeSeconds = estimatedUploadTimeSeconds + bufferTimeSeconds;\n\n  const needsRefresh = sasInfo.expiresInSec  2MB\n * 3. Get SAS token with smart expiry checking\n * 4. Upload to Azure Blob with progress tracking\n * 5. Invalidate cache tags\n * 6. Return blob information\n *\n * @param params - Upload parameters\n * @returns Promise resolving to blob information\n */\nexport async function uploadKycDocument(\n  params: KycDocUploadParams\n): Promise {\n  const {\n    leadId,\n    customerId,\n    docType,\n    file,\n    onProgress,\n    store,\n    onInvalidate,\n    abortSignal,\n  } = params;\n\n  console.log(`[KycUploader] Starting KYC document upload for ${file.name}`);\n\n  let processedFile = file;\n  let sasInfo: SasInfo;\n\n  // Step 0: Validate customer ID\n  try {\n    console.log('[KycUploader] Step 3: Validating customer ID...');\n    if (!customerId) {\n      throw new Error('Customer ID is required');\n    }\n    console.log(`[KycUploader] Using customer ID: ${customerId}`);\n  } catch (error) {\n    console.error('[KycUploader] Customer ID validation failed:', error);\n    throw new KycUploadError('authentication', error as Error);\n  }\n\n  // Step 1: Validate document\n  try {\n    console.log('[KycUploader] Step 1: Validating document...');\n    await validateKycDocument(file, customerId, leadId);\n    console.log('[KycUploader] Document validation passed');\n  } catch (error) {\n    console.error('[KycUploader] Document validation failed:', error);\n    throw new KycUploadError('validation', error as Error);\n  }\n\n  // Step 2: Compress if needed\n  try {\n    console.log('[KycUploader] Step 2: Checking compression needs...');\n\n    const isImage = isCompressibleImage(file);\n    const sizeMB = file.size / (1024 * 1024);\n\n    if (isImage && sizeMB > 2) {\n      console.log(\n        `[KycUploader] Compressing ${file.name} (${sizeMB.toFixed(2)} MB)`\n      );\n      // Update progress for compression\n      if (onProgress) {\n        onProgress(10); // 10% for compression start\n      }\n\n      const compressionResult = await compressImage(file);\n      processedFile = compressionResult;\n\n      console.log(\n        `[KycUploader] Compression completed: ${file.size} → ${compressionResult.size} bytes`\n      );\n      if (onProgress) {\n        onProgress(20); // 20% for compression complete\n      }\n    } else {\n      console.log('[KycUploader] No compression needed');\n      if (onProgress) {\n        onProgress(20); // Skip compression, move to 20%\n      }\n    }\n  } catch (error) {\n    console.error('[KycUploader] Compression failed:', error);\n    throw new KycUploadError('compression', error as Error);\n  }\n\n  // Step 3: Get SAS token with smart expiry checking\n  try {\n    console.log('[KycUploader] Step 3: Requesting SAS token...');\n\n    if (onProgress) {\n      onProgress(30); // 30% for SAS token request\n    }\n\n    let requestKycSasParams: RequestSasTokenRequest;\n    if (leadId) {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId,\n      };\n    } else {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId: 'LEAD-1014',\n      };\n    }\n    sasInfo = await requestKycSasToken(requestKycSasParams, store);\n\n    console.log(\n      `[KycUploader] SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n    );\n\n    // Check if we need to refresh token immediately\n    if (needsSasTokenRefresh(sasInfo, processedFile)) {\n      console.log(\n        '[KycUploader] SAS token needs immediate refresh due to insufficient validity'\n      );\n      sasInfo = await requestKycSasToken(requestKycSasParams, store);\n      console.log(\n        `[KycUploader] Fresh SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n      );\n    }\n\n    if (onProgress) {\n      onProgress(40); // 40% for SAS token ready\n    }\n  } catch (error) {\n    console.error('[KycUploader] SAS token acquisition failed:', error);\n    throw new KycUploadError('sas_token', error as Error);\n  }\n\n  // Step 4: Upload to Azure Blob\n  try {\n    console.log('[KycUploader] Step 4: Uploading to Azure Blob...');\n\n    const getFreshSas = async (): Promise => {\n      console.log('[KycUploader] Refreshing SAS token during upload...');\n\n      let requestKycSasParams: RequestSasTokenRequest;\n      if (leadId) {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId,\n        };\n      } else {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId: 'LEAD-1013',\n        };\n      }\n      return sasTokenMutex.executeWithLock(\n        `${leadId}-${docType}-${customerId}`,\n        async () => {\n          const freshSas = await requestKycSasToken(requestKycSasParams, store);\n          console.log(\n            `[KycUploader] Fresh SAS token acquired during upload, expires in ${freshSas.expiresInSec}s`\n          );\n          return freshSas;\n        }\n      );\n    };\n\n    await uploadFileToSas({\n      // This function now expects AzureBlobUploadParams\n      sasUrl: sasInfo.sasUrl,\n      file: processedFile,\n      expiresInSec: sasInfo.expiresInSec,\n      onProgress: progress => {\n        // Map upload progress to 40-90% range\n        const mappedProgress = 40 + progress.percentage * 0.5;\n        if (onProgress) {\n          onProgress(Math.round(mappedProgress));\n        }\n      },\n      getFreshSas,\n      abortSignal, // New parameter abortSignal for cancellation\n    });\n\n    console.log('[KycUploader] Upload to Azure Blob completed');\n\n    if (onProgress) {\n      onProgress(90); // 90% for upload complete\n    }\n  } catch (error) {\n    console.error('[KycUploader] Upload to Azure Blob failed:', error);\n    throw new KycUploadError('upload', error as Error);\n  }\n\n  // Step 5: Invalidate cache tags\n  try {\n    console.log('[KycUploader] Step 5: Invalidating cache tags...');\n\n    if (store) {\n      // Prefer store-based invalidation\n      console.log('[KycUploader] Using store-based cache invalidation');\n      store.dispatch(\n        kycApi.util.invalidateTags([\n          {type: 'KycDoc', id: leadId},\n          {type: 'KycDoc', id: customerId},\n          {type: 'KycDoc', id: 'LIST'},\n        ])\n      );\n    } else if (onInvalidate) {\n      // Fallback to callback-based invalidation\n      console.log('[KycUploader] Using callback-based cache invalidation');\n      onInvalidate(leadId);\n    } else {\n      console.warn(\n        '[KycUploader] No invalidation method provided - cache may be stale'\n      );\n    }\n\n    if (onProgress) {\n      onProgress(95); // 95% for cache invalidation\n    }\n  } catch (error) {\n    console.error('[KycUploader] Cache invalidation failed:', error);\n    // Don't throw here - upload succeeded, cache invalidation is nice-to-have\n  }\n\n  // Step 6: Return result\n  try {\n    console.log('[KycUploader] Step 6: Preparing result...');\n\n    const blobName = extractBlobName(sasInfo.sasUrl);\n    const url = extractBaseUrl(sasInfo.sasUrl);\n\n    const result: UploadResult = {\n      blobName,\n      url,\n    };\n\n    console.log(\n      '[KycUploader] KYC document upload completed successfully:',\n      result\n    );\n    if (onProgress) {\n      onProgress(100); // 100% complete\n    }\n\n    return result;\n  } catch (error) {\n    console.error('[KycUploader] Failed to prepare result:', error);\n    throw new KycUploadError('result_preparation', error as Error);\n  }\n}\n\n/**\n * Utility function to check if a file needs compression\n */\nexport function shouldCompressFile(file: RNFile): boolean {\n  const isImage = isCompressibleImage(file);\n  const sizeMB = file.size / (1024 * 1024);\n  return isImage && sizeMB > 2;\n}\n\n/**\n * Utility function to estimate total upload time including all steps\n */\nexport function estimateKycUploadTime(file: RNFile): number {\n  let totalSeconds = 0;\n\n  // Validation: ~1 second (includes API call for doc count)\n  totalSeconds += 1;\n\n  // Compression: ~2 seconds for 10MB image\n  if (shouldCompressFile(file)) {\n    totalSeconds += 2;\n  }\n\n  // SAS token: ~0.5 seconds\n  totalSeconds += 0.5;\n\n  // Upload: file size dependent\n  totalSeconds += estimateUploadTime(file.size);\n\n  // Cache invalidation: ~0.1 seconds\n  totalSeconds += 0.1;\n\n  return Math.ceil(totalSeconds);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KycDocView.html":{"url":"interfaces/KycDocView.html","title":"interface - KycDocView","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KycDocView\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useKycDocuments.ts\n        \n\n\n            \n                Description\n            \n            \n                KYC Document View with computed properties\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            canUpload\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            docType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            latestDoc\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canUpload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canUpload:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docType:         KycDocumentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        latestDoc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        latestDoc:         KycDocument\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocument\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         KycDocumentStatus | \"Missing\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentStatus | \"Missing\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useMemo} from 'react';\nimport {useListKycDocumentsQuery} from '../api/endpoints/kyc';\nimport type {\n  KycDocument,\n  KycDocumentType,\n  KycDocumentStatus,\n} from '../types/KycDocument';\nimport {useNewAuth} from './useNewAuth';\n\n/**\n * KYC Document View with computed properties\n */\nexport interface KycDocView {\n  docType: KycDocumentType;\n  status: KycDocumentStatus | 'Missing';\n  canUpload: boolean; // true if status ∈ {Missing, Rejected}\n  latestDoc?: KycDocument; // undefined when Missing\n  displayName: string; // Human-readable name for UI\n}\n\n/**\n * Hook return type\n */\nexport interface UseKycDocsResult {\n  docs: KycDocView[];\n  isLoading: boolean;\n  refetch: () => void;\n}\n\n/**\n * Fixed checklist of all 7 KYC document types\n */\nconst KYC_DOCUMENT_CHECKLIST: readonly KycDocumentType[] = [\n  'IncomeProof',\n  'LightBill',\n  'CancelledCheque',\n  'Aadhaar',\n  'PAN',\n  'PassportPhoto',\n  'Other',\n] as const;\n\n/**\n * Display names for KYC document types\n */\nconst KYC_DOCUMENT_DISPLAY_NAMES: Record = {\n  IncomeProof: 'Income Proof',\n  LightBill: 'Light Bill (Latest)',\n  CancelledCheque: 'Cancelled Cheque (Latest)',\n  Aadhaar: 'Aadhaar Card',\n  PAN: 'PAN Card',\n  PassportPhoto: 'Passport-size Photograph',\n  Other: 'Other Documents',\n};\n\n/**\n * Check if a document status allows upload\n */\nconst canUploadDocument = (status: KycDocumentStatus | 'Missing'): boolean => {\n  return status === 'Missing' || status === 'Rejected';\n};\n\n/**\n * Find the latest document version for a given document type\n */\nconst findLatestDocument = (\n  documents: KycDocument[],\n  docType: KycDocumentType\n): KycDocument | undefined => {\n  const docsOfType = documents.filter(doc => doc.docType === docType);\n\n  if (docsOfType.length === 0) {\n    return undefined;\n  }\n\n  // Sort by uploadedAt descending and return the latest\n  return docsOfType.sort(\n    (a, b) =>\n      new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime()\n  )[0];\n};\n\n/**\n * Process API response to create fixed checklist\n */\nconst processKycDocuments = (\n  apiDocuments: KycDocument[] = []\n): KycDocView[] => {\n  return KYC_DOCUMENT_CHECKLIST.map(docType => {\n    const latestDoc = findLatestDocument(apiDocuments, docType);\n    const status: KycDocumentStatus | 'Missing' =\n      latestDoc?.status || 'Missing';\n\n    return {\n      docType,\n      status,\n      canUpload: canUploadDocument(status),\n      latestDoc,\n      displayName: KYC_DOCUMENT_DISPLAY_NAMES[docType],\n    };\n  });\n};\n\n/**\n * Custom hook for KYC documents with fixed checklist and auto-refresh\n *\n * @param customerId - Optional customer ID, derives from auth state if not provided\n * @param leadId - Optional lead ID to filter KYC documents for a specific lead\n * @returns Object containing docs array, loading state, and refetch function\n */\nexport const useKycDocuments = (\n  customerId?: string,\n  leadId?: string\n): UseKycDocsResult => {\n  const {user} = useNewAuth();\n\n  // Derive customer ID from auth state if not provided\n  const resolvedCustomerId = customerId || user?.id;\n\n  // Query KYC documents from API\n  const {\n    data: apiResponse,\n    isLoading,\n    refetch: apiRefetch,\n  } = useListKycDocumentsQuery(\n    {customerId: resolvedCustomerId, ...(leadId && {leadId})},\n    {\n      // Force fresh data on every call\n      refetchOnMountOrArgChange: true,\n      // Skip query if no customer ID available AND no leadId available\n      skip: !resolvedCustomerId && !leadId,\n    }\n  );\n\n  // Process API response into fixed checklist\n  const docs = useMemo(() => {\n    return processKycDocuments(apiResponse?.documents);\n  }, [apiResponse?.documents]);\n\n  // Memoized refetch function\n  const refetch = useCallback(() => {\n    if (resolvedCustomerId || leadId) {\n      apiRefetch();\n    }\n  }, [apiRefetch, resolvedCustomerId, leadId]);\n\n  return {\n    docs,\n    isLoading: isLoading && (!!resolvedCustomerId || !!leadId),\n    refetch,\n  };\n};\n\n/**\n * Utility function to get display name for a document type\n */\nexport const getKycDocumentDisplayName = (docType: KycDocumentType): string => {\n  return KYC_DOCUMENT_DISPLAY_NAMES[docType];\n};\n\n/**\n * Utility function to check if a document can be uploaded\n */\nexport const canUploadKycDocument = (\n  status: KycDocumentStatus | 'Missing'\n): boolean => {\n  return canUploadDocument(status);\n};\n\n/**\n * Export constants for external use\n */\nexport {KYC_DOCUMENT_CHECKLIST, KYC_DOCUMENT_DISPLAY_NAMES};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/KycDocument.html":{"url":"interfaces/KycDocument.html","title":"interface - KycDocument","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  KycDocument\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                KYC document details\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            customerId\n                                        \n                                \n                                \n                                        \n                                            docId\n                                        \n                                \n                                \n                                        \n                                            docType\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            uploadedAt\n                                        \n                                \n                                \n                                        \n                                            uploadedBy\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docType:         KycDocumentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         KycDocumentStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploadedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uploadedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uploadedBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uploadedBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KycUploadError.html":{"url":"classes/KycUploadError.html","title":"class - KycUploadError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KycUploadError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/kycUploader.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload error with step information\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                originalError\n                            \n                            \n                                    Public\n                                    Readonly\n                                step\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(step: string, originalError: Error)\n                    \n                \n                        \n                            \n                                Defined in src/lib/kycUploader.ts:50\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        step\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        originalError\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        originalError\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/kycUploader.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        step\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/kycUploader.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {kycApi} from '../api/endpoints/kyc';\nimport {requestKycSasToken} from '../api/kycService';\nimport type {RootState} from '../store';\nimport {selectNewAuth} from '../store/newAuthSlice';\nimport type {SasInfo} from '../types/AzureBlob';\nimport type {RNFile} from '../types/File';\nimport type {\n  KycDocumentType,\n  RequestSasTokenRequest,\n} from '../types/KycDocument';\nimport {uploadFileToSas, estimateUploadTime} from '../utils/azureBlobUploader';\nimport {compressImage, isCompressibleImage} from '../utils/imageCompression';\nimport {validateKycDocument} from '../utils/kycValidation';\n\n/**\n * Upload parameters for KYC document upload\n */\nexport interface KycDocUploadParams {\n  leadId?: string; // made optional for backward compatibility\n  customerId: string;\n  docType: KycDocumentType;\n  file: RNFile;\n  onProgress?: (percentage: number) => void;\n  store?: {\n    getState: () => RootState;\n    dispatch: any;\n  };\n  onInvalidate?: (leadId: string) => void;\n  abortSignal?: AbortSignal; // New parameter for cancellation\n}\n\n/**\n * Upload result containing blob information\n */\nexport interface UploadResult {\n  blobName: string;\n  url: string;\n}\n\n/**\n * Upload error with step information\n */\nexport class KycUploadError extends Error {\n  public readonly step: string;\n  public readonly originalError: Error;\n\n  constructor(step: string, originalError: Error) {\n    super(`KYC upload failed at ${step}: ${originalError.message}`);\n    this.name = 'KycUploadError';\n    this.step = step;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Mutex for SAS token refresh to prevent concurrent requests\n */\nclass SasTokenMutex {\n  private readonly locks = new Map>();\n\n  async executeWithLock(\n    key: string,\n    operation: () => Promise\n  ): Promise {\n    // If there's already a pending operation for this key, wait for it\n    if (this.locks.has(key)) {\n      return this.locks.get(key)!;\n    }\n\n    // Create and store the operation promise\n    const promise = operation();\n    this.locks.set(key, promise);\n\n    try {\n      const result = await promise;\n      return result;\n    } finally {\n      // Always clean up the lock\n      this.locks.delete(key);\n    }\n  }\n}\n\n// Global mutex instance\nconst sasTokenMutex = new SasTokenMutex();\n\n/**\n * Extract blob name from SAS URL\n * Format: https://storage.blob.core.windows.net/container/path/filename.ext?sas=token\n */\nfunction extractBlobName(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    const pathParts = url.pathname.split('/');\n\n    // Remove empty first element and container name\n    const pathWithoutContainer = pathParts.slice(2);\n\n    // Join remaining parts to get blob name\n    return pathWithoutContainer.join('/');\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract blob name from SAS URL:',\n      error\n    );\n    // Fallback: use timestamp-based name\n    return `unknown-${Date.now()}`;\n  }\n}\n\n/**\n * Extract base URL (without query parameters) from SAS URL\n */\nfunction extractBaseUrl(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    return `${url.origin}${url.pathname}`;\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract base URL from SAS URL:',\n      error\n    );\n    return sasUrl.split('?')[0];\n  }\n}\n\n/**\n * Get current user ID from auth state\n */\nfunction getCurrentUserId(store?: {getState: () => RootState}): string {\n  if (!store) {\n    throw new Error('Store is required to get current user ID');\n  }\n\n  const state = store.getState();\n\n  // Get user from new auth system\n  const newAuth = selectNewAuth(state);\n  const user = newAuth?.user;\n\n  if (!user || !user.id) {\n    throw new Error('User not authenticated or missing user ID');\n  }\n\n  return user.id;\n}\n\n/**\n * Check if SAS token needs refresh based on remaining validity and estimated upload time\n */\nfunction needsSasTokenRefresh(\n  sasInfo: SasInfo,\n  file: RNFile,\n  bufferTimeSeconds: number = 60\n): boolean {\n  // Calculate estimated upload time (rough estimate: 1MB/s)\n  const estimatedUploadTimeSeconds = estimateUploadTime(file.size);\n\n  // Check if remaining validity is less than estimated upload time + buffer\n  const requiredTimeSeconds = estimatedUploadTimeSeconds + bufferTimeSeconds;\n\n  const needsRefresh = sasInfo.expiresInSec  2MB\n * 3. Get SAS token with smart expiry checking\n * 4. Upload to Azure Blob with progress tracking\n * 5. Invalidate cache tags\n * 6. Return blob information\n *\n * @param params - Upload parameters\n * @returns Promise resolving to blob information\n */\nexport async function uploadKycDocument(\n  params: KycDocUploadParams\n): Promise {\n  const {\n    leadId,\n    customerId,\n    docType,\n    file,\n    onProgress,\n    store,\n    onInvalidate,\n    abortSignal,\n  } = params;\n\n  console.log(`[KycUploader] Starting KYC document upload for ${file.name}`);\n\n  let processedFile = file;\n  let sasInfo: SasInfo;\n\n  // Step 0: Validate customer ID\n  try {\n    console.log('[KycUploader] Step 3: Validating customer ID...');\n    if (!customerId) {\n      throw new Error('Customer ID is required');\n    }\n    console.log(`[KycUploader] Using customer ID: ${customerId}`);\n  } catch (error) {\n    console.error('[KycUploader] Customer ID validation failed:', error);\n    throw new KycUploadError('authentication', error as Error);\n  }\n\n  // Step 1: Validate document\n  try {\n    console.log('[KycUploader] Step 1: Validating document...');\n    await validateKycDocument(file, customerId, leadId);\n    console.log('[KycUploader] Document validation passed');\n  } catch (error) {\n    console.error('[KycUploader] Document validation failed:', error);\n    throw new KycUploadError('validation', error as Error);\n  }\n\n  // Step 2: Compress if needed\n  try {\n    console.log('[KycUploader] Step 2: Checking compression needs...');\n\n    const isImage = isCompressibleImage(file);\n    const sizeMB = file.size / (1024 * 1024);\n\n    if (isImage && sizeMB > 2) {\n      console.log(\n        `[KycUploader] Compressing ${file.name} (${sizeMB.toFixed(2)} MB)`\n      );\n      // Update progress for compression\n      if (onProgress) {\n        onProgress(10); // 10% for compression start\n      }\n\n      const compressionResult = await compressImage(file);\n      processedFile = compressionResult;\n\n      console.log(\n        `[KycUploader] Compression completed: ${file.size} → ${compressionResult.size} bytes`\n      );\n      if (onProgress) {\n        onProgress(20); // 20% for compression complete\n      }\n    } else {\n      console.log('[KycUploader] No compression needed');\n      if (onProgress) {\n        onProgress(20); // Skip compression, move to 20%\n      }\n    }\n  } catch (error) {\n    console.error('[KycUploader] Compression failed:', error);\n    throw new KycUploadError('compression', error as Error);\n  }\n\n  // Step 3: Get SAS token with smart expiry checking\n  try {\n    console.log('[KycUploader] Step 3: Requesting SAS token...');\n\n    if (onProgress) {\n      onProgress(30); // 30% for SAS token request\n    }\n\n    let requestKycSasParams: RequestSasTokenRequest;\n    if (leadId) {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId,\n      };\n    } else {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId: 'LEAD-1014',\n      };\n    }\n    sasInfo = await requestKycSasToken(requestKycSasParams, store);\n\n    console.log(\n      `[KycUploader] SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n    );\n\n    // Check if we need to refresh token immediately\n    if (needsSasTokenRefresh(sasInfo, processedFile)) {\n      console.log(\n        '[KycUploader] SAS token needs immediate refresh due to insufficient validity'\n      );\n      sasInfo = await requestKycSasToken(requestKycSasParams, store);\n      console.log(\n        `[KycUploader] Fresh SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n      );\n    }\n\n    if (onProgress) {\n      onProgress(40); // 40% for SAS token ready\n    }\n  } catch (error) {\n    console.error('[KycUploader] SAS token acquisition failed:', error);\n    throw new KycUploadError('sas_token', error as Error);\n  }\n\n  // Step 4: Upload to Azure Blob\n  try {\n    console.log('[KycUploader] Step 4: Uploading to Azure Blob...');\n\n    const getFreshSas = async (): Promise => {\n      console.log('[KycUploader] Refreshing SAS token during upload...');\n\n      let requestKycSasParams: RequestSasTokenRequest;\n      if (leadId) {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId,\n        };\n      } else {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId: 'LEAD-1013',\n        };\n      }\n      return sasTokenMutex.executeWithLock(\n        `${leadId}-${docType}-${customerId}`,\n        async () => {\n          const freshSas = await requestKycSasToken(requestKycSasParams, store);\n          console.log(\n            `[KycUploader] Fresh SAS token acquired during upload, expires in ${freshSas.expiresInSec}s`\n          );\n          return freshSas;\n        }\n      );\n    };\n\n    await uploadFileToSas({\n      // This function now expects AzureBlobUploadParams\n      sasUrl: sasInfo.sasUrl,\n      file: processedFile,\n      expiresInSec: sasInfo.expiresInSec,\n      onProgress: progress => {\n        // Map upload progress to 40-90% range\n        const mappedProgress = 40 + progress.percentage * 0.5;\n        if (onProgress) {\n          onProgress(Math.round(mappedProgress));\n        }\n      },\n      getFreshSas,\n      abortSignal, // New parameter abortSignal for cancellation\n    });\n\n    console.log('[KycUploader] Upload to Azure Blob completed');\n\n    if (onProgress) {\n      onProgress(90); // 90% for upload complete\n    }\n  } catch (error) {\n    console.error('[KycUploader] Upload to Azure Blob failed:', error);\n    throw new KycUploadError('upload', error as Error);\n  }\n\n  // Step 5: Invalidate cache tags\n  try {\n    console.log('[KycUploader] Step 5: Invalidating cache tags...');\n\n    if (store) {\n      // Prefer store-based invalidation\n      console.log('[KycUploader] Using store-based cache invalidation');\n      store.dispatch(\n        kycApi.util.invalidateTags([\n          {type: 'KycDoc', id: leadId},\n          {type: 'KycDoc', id: customerId},\n          {type: 'KycDoc', id: 'LIST'},\n        ])\n      );\n    } else if (onInvalidate) {\n      // Fallback to callback-based invalidation\n      console.log('[KycUploader] Using callback-based cache invalidation');\n      onInvalidate(leadId);\n    } else {\n      console.warn(\n        '[KycUploader] No invalidation method provided - cache may be stale'\n      );\n    }\n\n    if (onProgress) {\n      onProgress(95); // 95% for cache invalidation\n    }\n  } catch (error) {\n    console.error('[KycUploader] Cache invalidation failed:', error);\n    // Don't throw here - upload succeeded, cache invalidation is nice-to-have\n  }\n\n  // Step 6: Return result\n  try {\n    console.log('[KycUploader] Step 6: Preparing result...');\n\n    const blobName = extractBlobName(sasInfo.sasUrl);\n    const url = extractBaseUrl(sasInfo.sasUrl);\n\n    const result: UploadResult = {\n      blobName,\n      url,\n    };\n\n    console.log(\n      '[KycUploader] KYC document upload completed successfully:',\n      result\n    );\n    if (onProgress) {\n      onProgress(100); // 100% complete\n    }\n\n    return result;\n  } catch (error) {\n    console.error('[KycUploader] Failed to prepare result:', error);\n    throw new KycUploadError('result_preparation', error as Error);\n  }\n}\n\n/**\n * Utility function to check if a file needs compression\n */\nexport function shouldCompressFile(file: RNFile): boolean {\n  const isImage = isCompressibleImage(file);\n  const sizeMB = file.size / (1024 * 1024);\n  return isImage && sizeMB > 2;\n}\n\n/**\n * Utility function to estimate total upload time including all steps\n */\nexport function estimateKycUploadTime(file: RNFile): number {\n  let totalSeconds = 0;\n\n  // Validation: ~1 second (includes API call for doc count)\n  totalSeconds += 1;\n\n  // Compression: ~2 seconds for 10MB image\n  if (shouldCompressFile(file)) {\n    totalSeconds += 2;\n  }\n\n  // SAS token: ~0.5 seconds\n  totalSeconds += 0.5;\n\n  // Upload: file size dependent\n  totalSeconds += estimateUploadTime(file.size);\n\n  // Cache invalidation: ~0.1 seconds\n  totalSeconds += 0.1;\n\n  return Math.ceil(totalSeconds);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Lead.html":{"url":"interfaces/Lead.html","title":"interface - Lead","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Lead\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Lead.ts\n        \n\n\n            \n                Description\n            \n            \n                Lead interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            assignedTo\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            customer\n                                        \n                                \n                                \n                                        \n                                            customerId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            documents\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            followUpDate\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            pinCode\n                                        \n                                \n                                \n                                        \n                                            priority\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            quotations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            remarks\n                                        \n                                \n                                \n                                        \n                                            services\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tokenNumber\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        assignedTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        assignedTo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customer:         LeadCustomer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LeadCustomer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        documents\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        documents:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        followUpDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        followUpDate:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pinCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:     \"Low\" | \"Medium\" | \"High\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Low\" | \"Medium\" | \"High\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quotations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quotations:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remarks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remarks:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         \"App\" | \"Website\" | \"Referral\" | \"Direct\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         \"App\" | \"Website\" | \"Referral\" | \"Direct\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         LeadStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LeadStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokenNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tokenNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type LeadStatus =\n  | 'New Lead'\n  | 'In Discussion'\n  | 'Physical Meeting Assigned'\n  | 'Customer Accepted'\n  | 'Won'\n  | 'Pending at Solarium'\n  | 'Under Execution'\n  | 'Executed'\n  | 'Not Responding'\n  | 'Not Interested'\n  | 'Other Territory';\n\n/**\n * Lead Customer info\n */\nexport interface LeadCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n}\n\n/**\n * Lead interface\n */\nexport interface Lead {\n  id: string;\n  customerId: string;\n  services: string[]; // Service IDs\n  status: LeadStatus;\n  priority: 'Low' | 'Medium' | 'High';\n  source: 'App' | 'Website' | 'Referral' | 'Direct';\n  description?: string;\n  address: string;\n  state: string;\n  pinCode: string;\n  followUpDate?: string;\n  assignedTo?: string;\n  remarks?: string;\n  tokenNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n  customer: LeadCustomer;\n  quotations?: any[]; // Will be typed separately if needed\n  documents?: any[]; // Will be typed separately if needed\n}\n\n/**\n * Create Lead Request payload\n */\nexport interface CreateLeadRequest {\n  customerName: string;\n  phone: string;\n  address: string;\n  services: string[];\n}\n\n/**\n * Lead API Response\n */\nexport interface LeadResponse {\n  success: true;\n  data: Lead;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeadCustomer.html":{"url":"interfaces/LeadCustomer.html","title":"interface - LeadCustomer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeadCustomer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Lead.ts\n        \n\n\n            \n                Description\n            \n            \n                Lead Customer info\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type LeadStatus =\n  | 'New Lead'\n  | 'In Discussion'\n  | 'Physical Meeting Assigned'\n  | 'Customer Accepted'\n  | 'Won'\n  | 'Pending at Solarium'\n  | 'Under Execution'\n  | 'Executed'\n  | 'Not Responding'\n  | 'Not Interested'\n  | 'Other Territory';\n\n/**\n * Lead Customer info\n */\nexport interface LeadCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n}\n\n/**\n * Lead interface\n */\nexport interface Lead {\n  id: string;\n  customerId: string;\n  services: string[]; // Service IDs\n  status: LeadStatus;\n  priority: 'Low' | 'Medium' | 'High';\n  source: 'App' | 'Website' | 'Referral' | 'Direct';\n  description?: string;\n  address: string;\n  state: string;\n  pinCode: string;\n  followUpDate?: string;\n  assignedTo?: string;\n  remarks?: string;\n  tokenNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n  customer: LeadCustomer;\n  quotations?: any[]; // Will be typed separately if needed\n  documents?: any[]; // Will be typed separately if needed\n}\n\n/**\n * Create Lead Request payload\n */\nexport interface CreateLeadRequest {\n  customerName: string;\n  phone: string;\n  address: string;\n  services: string[];\n}\n\n/**\n * Lead API Response\n */\nexport interface LeadResponse {\n  success: true;\n  data: Lead;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeadListItemProps.html":{"url":"interfaces/LeadListItemProps.html","title":"interface - LeadListItemProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeadListItemProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/leads/LeadListItem/LeadListItem.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lead\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lead:         Lead\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Lead\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lead data to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when item is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, Text, TouchableOpacity} from 'react-native';\nimport {Chip} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport type {Lead} from '../../../types/Lead';\nimport {getRelativeTime} from '../../../utils/dateHelpers';\nimport {styles} from './LeadListItem.styles';\n\nexport interface LeadListItemProps {\n  /** Lead data to display */\n  lead: Lead;\n  /** Callback when item is pressed */\n  onPress: (leadId: string) => void;\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * Get status color and text color based on lead status\n * AC-4.2: Status colors follow palette mapping with proper contrast\n */\nconst getStatusConfig = (\n  status: string,\n  theme: any\n): {backgroundColor: string; textColor: string} => {\n  const statusLower = status.toLowerCase();\n\n  console.log(\n    '[LeadListItem] Status mapping for:',\n    status,\n    '-> lowercase:',\n    statusLower\n  );\n\n  if (statusLower.includes('new')) {\n    const config = {\n      backgroundColor: theme.colors.info || '#2196F3',\n      textColor: '#FFFFFF',\n    };\n    console.log('[LeadListItem] NEW status config:', config);\n    return config;\n  } else if (\n    statusLower.includes('discussion') ||\n    statusLower.includes('meeting')\n  ) {\n    // Use explicit purple since theme.colors.quoted might not exist\n    const config = {backgroundColor: '#673AB7', textColor: '#FFFFFF'};\n    console.log('[LeadListItem] DISCUSSION status config:', config);\n    return config;\n  } else if (\n    statusLower.includes('customer') &&\n    statusLower.includes('accepted')\n  ) {\n    const config = {\n      backgroundColor: theme.colors.warning || '#FF9800',\n      textColor: '#FFFFFF',\n    };\n    console.log('[LeadListItem] CUSTOMER_ACCEPTED status config:', config);\n    return config;\n  } else if (statusLower.includes('won') || statusLower.includes('executed')) {\n    const config = {\n      backgroundColor: theme.colors.success || '#4CAF50',\n      textColor: '#FFFFFF',\n    };\n    console.log('[LeadListItem] WON status config:', config);\n    return config;\n  } else if (\n    statusLower.includes('not interested') ||\n    statusLower.includes('not responding')\n  ) {\n    const config = {\n      backgroundColor: theme.colors.error || '#F44336',\n      textColor: '#FFFFFF',\n    };\n    console.log('[LeadListItem] NOT_INTERESTED status config:', config);\n    return config;\n  } else {\n    const config = {\n      backgroundColor: theme.colors.primary || '#2E7D32',\n      textColor: '#FFFFFF',\n    };\n    console.log('[LeadListItem] DEFAULT status config:', config);\n    return config;\n  }\n};\n\n/**\n * Split address into two lines for better display\n * AC-4.1: siteAddress (two-line)\n */\nconst splitAddress = (address: string): {line1: string; line2: string} => {\n  if (!address) {\n    return {line1: 'No address', line2: ''};\n  }\n\n  const parts = address.split(',').map(part => part.trim());\n\n  if (parts.length  = React.memo(\n  ({lead, onPress, testID}) => {\n    const theme = useAppTheme();\n    const statusConfig = getStatusConfig(lead.status, theme);\n    const {line1, line2} = splitAddress(lead.address);\n    const relativeTime = getRelativeTime(lead.updatedAt);\n\n    // AC-4.3: Accessible label combines address + status\n    const accessibleLabel = `Lead ${lead.leadId}, ${lead.customerName}, ${line1} ${line2}, Status: ${lead.status}, Updated ${relativeTime}`;\n\n    const handlePress = () => {\n      onPress(lead.id || lead.leadId); // Handle both id formats\n    };\n\n    return (\n      \n        {/* Lead Header - ID and Status */}\n        \n          \n            {lead.leadId}\n          \n\n          {/* AC-4.3: Status Chip exposes accessible label */}\n          \n            {lead.status}\n          \n        \n\n        {/* AC-4.1: siteAddress (two-line) */}\n        \n          \n            {line1}\n          \n          {line2 ? (\n            \n              {line2}\n            \n          ) : null}\n        \n\n        {/* Footer - Customer and Time */}\n        \n          \n            \n            \n              {lead.customerName}\n            \n          \n\n          {/* AC-4.1: updatedAt (relative) */}\n          \n            \n            \n              {relativeTime}\n            \n          \n        \n      \n    );\n  }\n);\n\nLeadListItem.displayName = 'LeadListItem';\n\nexport default LeadListItem;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LeadResponse.html":{"url":"interfaces/LeadResponse.html","title":"interface - LeadResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LeadResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Lead.ts\n        \n\n\n            \n                Description\n            \n            \n                Lead API Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         Lead\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Lead\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type LeadStatus =\n  | 'New Lead'\n  | 'In Discussion'\n  | 'Physical Meeting Assigned'\n  | 'Customer Accepted'\n  | 'Won'\n  | 'Pending at Solarium'\n  | 'Under Execution'\n  | 'Executed'\n  | 'Not Responding'\n  | 'Not Interested'\n  | 'Other Territory';\n\n/**\n * Lead Customer info\n */\nexport interface LeadCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n}\n\n/**\n * Lead interface\n */\nexport interface Lead {\n  id: string;\n  customerId: string;\n  services: string[]; // Service IDs\n  status: LeadStatus;\n  priority: 'Low' | 'Medium' | 'High';\n  source: 'App' | 'Website' | 'Referral' | 'Direct';\n  description?: string;\n  address: string;\n  state: string;\n  pinCode: string;\n  followUpDate?: string;\n  assignedTo?: string;\n  remarks?: string;\n  tokenNumber?: string;\n  createdAt: string;\n  updatedAt: string;\n  customer: LeadCustomer;\n  quotations?: any[]; // Will be typed separately if needed\n  documents?: any[]; // Will be typed separately if needed\n}\n\n/**\n * Create Lead Request payload\n */\nexport interface CreateLeadRequest {\n  customerName: string;\n  phone: string;\n  address: string;\n  services: string[];\n}\n\n/**\n * Lead API Response\n */\nexport interface LeadResponse {\n  success: true;\n  data: Lead;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListKycDocumentsRequest.html":{"url":"interfaces/ListKycDocumentsRequest.html","title":"interface - ListKycDocumentsRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ListKycDocumentsRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                List KYC documents request parameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            customerId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListKycDocumentsResponse.html":{"url":"interfaces/ListKycDocumentsResponse.html","title":"interface - ListKycDocumentsResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ListKycDocumentsResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                List KYC documents response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            documents\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        documents\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        documents:         KycDocument[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocument[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoadingOverlayContainerProps.html":{"url":"interfaces/LoadingOverlayContainerProps.html","title":"interface - LoadingOverlayContainerProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoadingOverlayContainerProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            backgroundColor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dismissible\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            mode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onDismiss\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            spinnerColor\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dismissible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dismissible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mode:         LoadingOverlayContainerMode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LoadingOverlayContainerMode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onDismiss\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onDismiss:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        spinnerColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        spinnerColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoadingOverlayProps.html":{"url":"interfaces/LoadingOverlayProps.html","title":"interface - LoadingOverlayProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoadingOverlayProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/feedback/LoadingOverlay.tsx\n        \n\n\n            \n                Description\n            \n            \n                Loading Overlay Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            transparent\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     \"small\" | \"large\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"small\" | \"large\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transparent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transparent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {ActivityIndicator, Modal, StyleSheet, Text, View} from 'react-native';\nimport {useAppTheme} from '../../theme/ThemeProvider';\n\n/**\n * Loading Overlay Props\n */\nexport interface LoadingOverlayProps {\n  visible: boolean;\n  message?: string;\n  transparent?: boolean;\n  size?: 'small' | 'large';\n  color?: string;\n}\n\n/**\n * Persistence Loading Overlay Props\n */\ninterface PersistenceLoadingProps {\n  visible: boolean;\n  stage: 'initializing' | 'rehydrating' | 'migrating' | 'complete';\n  progress?: number;\n}\n\n/**\n * Persistence Loading Overlay Component\n * Specialized loading overlay for Redux persistence operations\n */\nexport const PersistenceLoadingOverlay: React.FC = ({\n  visible,\n  stage,\n  progress,\n}) => {\n  const theme = useAppTheme();\n\n  const getStageMessage = () => {\n    switch (stage) {\n      case 'initializing':\n        return 'Initializing app...';\n      case 'rehydrating':\n        return 'Restoring your data...';\n      case 'migrating':\n        return 'Updating app data...';\n      case 'complete':\n        return 'Ready!';\n      default:\n        return 'Loading...';\n    }\n  };\n\n  const getStageIcon = () => {\n    switch (stage) {\n      case 'initializing':\n        return '🚀';\n      case 'rehydrating':\n        return '💾';\n      case 'migrating':\n        return '🔄';\n      case 'complete':\n        return '✅';\n      default:\n        return '⏳';\n    }\n  };\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    \n      \n        \n          {/* Stage Icon */}\n          {getStageIcon()}\n\n          {/* Loading Spinner */}\n          \n\n          {/* Stage Message */}\n          \n            {getStageMessage()}\n          \n\n          {/* Progress Bar */}\n          {progress !== undefined && (\n            \n              \n            \n          )}\n\n          {/* Progress Text */}\n          {progress !== undefined && (\n            \n              {Math.round(progress)}%\n            \n          )}\n        \n      \n    \n  );\n};\n\n/**\n * Loading Overlay Component\n * Shows a loading spinner with optional message over the current screen\n */\nconst LoadingOverlay: React.FC = ({\n  visible,\n  message,\n  transparent = false,\n  size = 'large',\n  color,\n}) => {\n  const theme = useAppTheme();\n  const spinnerColor = color || theme.colors.primary;\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    \n      \n        \n          \n          {message && (\n            \n              {message}\n            \n          )}\n        \n      \n    \n  );\n};\n\nconst stylesLoadingOverlayOriginal = StyleSheet.create({\n  // overlay: {\n  //   flex: 1,\n  //   justifyContent: 'center',\n  //   alignItems: 'center',\n  // },\n  // container: {\n  //   padding: 24,\n  //   borderRadius: 12,\n  //   alignItems: 'center',\n  //   minWidth: 120,\n  // },\n  // spinner: {\n  //   marginBottom: 8,\n  // },\n  // message: {\n  //   textAlign: 'center',\n  //   marginTop: 8,\n  // },\n});\n\nconst persistenceStyles = StyleSheet.create({\n  // stageIcon: {\n  //   fontSize: 32,\n  //   marginBottom: 16,\n  // },\n  // progressContainer: {\n  //   width: '100%',\n  //   height: 4,\n  //   borderRadius: 2,\n  //   marginTop: 16,\n  //   overflow: 'hidden',\n  // },\n  // progressBar: {\n  //   height: '100%',\n  //   borderRadius: 2,\n  // },\n  // progressText: {\n  //   marginTop: 8,\n  //   textAlign: 'center',\n  // },\n});\n\n// Merge styles\nconst allStyles = StyleSheet.create({\n  ...stylesLoadingOverlayOriginal,\n  ...persistenceStyles,\n});\n\n// Update the styles reference\nconst styles = allStyles;\n\nexport default LoadingOverlay;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoadingSpinnerProps.html":{"url":"interfaces/LoadingSpinnerProps.html","title":"interface - LoadingSpinnerProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoadingSpinnerProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            overlay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            text\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        overlay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        overlay:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         SpinnerSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpinnerSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginRequest.html":{"url":"interfaces/LoginRequest.html","title":"interface - LoginRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/newAuth.ts\n        \n\n\n            \n                Description\n            \n            \n                Login request interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            otp\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        otp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport {baseQuery} from '../baseQuery';\n\n/**\n * User interface matching API response\n */\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n}\n\n/**\n * Login request interface\n */\nexport interface LoginRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Login response interface matching API\n */\nexport interface LoginResponse {\n  accessToken: string;\n  user: User;\n}\n\n/**\n * Logout response interface\n */\nexport interface LogoutResponse {\n  success: boolean;\n}\n\n/**\n * New Auth API using actual endpoints\n */\nexport const newAuthApi = createApi({\n  reducerPath: 'newAuthApi',\n  baseQuery,\n  tagTypes: ['Auth'],\n  endpoints: builder => ({\n    /**\n     * Login with phone and OTP\n     */\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth/login',\n        method: 'POST',\n        body: credentials,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n\n    /**\n     * Logout user\n     */\n    logout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST',\n        body: {},\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n  }),\n});\n\n// Export hooks\nexport const {useLoginMutation, useLogoutMutation} = newAuthApi;\n\n// Export for store configuration\nexport default newAuthApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/newAuth.ts\n        \n\n\n            \n                Description\n            \n            \n                Login response interface matching API\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport {baseQuery} from '../baseQuery';\n\n/**\n * User interface matching API response\n */\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n}\n\n/**\n * Login request interface\n */\nexport interface LoginRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Login response interface matching API\n */\nexport interface LoginResponse {\n  accessToken: string;\n  user: User;\n}\n\n/**\n * Logout response interface\n */\nexport interface LogoutResponse {\n  success: boolean;\n}\n\n/**\n * New Auth API using actual endpoints\n */\nexport const newAuthApi = createApi({\n  reducerPath: 'newAuthApi',\n  baseQuery,\n  tagTypes: ['Auth'],\n  endpoints: builder => ({\n    /**\n     * Login with phone and OTP\n     */\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth/login',\n        method: 'POST',\n        body: credentials,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n\n    /**\n     * Logout user\n     */\n    logout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST',\n        body: {},\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n  }),\n});\n\n// Export hooks\nexport const {useLoginMutation, useLogoutMutation} = newAuthApi;\n\n// Export for store configuration\nexport default newAuthApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogoutManager.html":{"url":"classes/LogoutManager.html","title":"class - LogoutManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogoutManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/baseQuery.ts\n        \n\n\n            \n                Description\n            \n            \n                Idempotent logout state management\nPrevents multiple logout dispatches for concurrent 401/403 responses\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isLoggingOut\n                            \n                            \n                                    Private\n                                logoutPromise\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleLogout\n                            \n                            \n                                isInProgress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isLoggingOut\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/api/baseQuery.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logoutPromise\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Promise | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/api/baseQuery.ts:34\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogout(dispatch: any, _getState: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/api/baseQuery.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dispatch\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                _getState\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isInProgress\n                        \n                    \n                \n            \n            \n                \nisInProgress()\n                \n            \n\n\n                    \n                        \n                            Defined in src/api/baseQuery.ts:68\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseQueryFn,\n  FetchArgs,\n  FetchBaseQueryError,\n  fetchBaseQuery,\n} from '@reduxjs/toolkit/query';\nimport {AppConfig} from '../config/environments';\nimport type {RootState} from '../store';\nimport {logoutUser as newLogout} from '../store/newAuthSlice';\nimport {setLoading} from '../store/uiSlice';\nimport {\n  getRequestHeaders,\n  parseApiError,\n  isAuthError,\n  isRetryableError,\n  calculateRetryDelay,\n  debugApiCall,\n  buildApiUrl,\n} from '../utils/apiHelpers';\n\n// Remove this interface to fix type issues\n\n/**\n * Idempotent logout state management\n * Prevents multiple logout dispatches for concurrent 401/403 responses\n */\nclass LogoutManager {\n  private isLoggingOut = false;\n  private logoutPromise: Promise | null = null;\n\n  async handleLogout(dispatch: any, _getState: any): Promise {\n    if (this.isLoggingOut) {\n      // If logout is already in progress, wait for it to complete\n      return this.logoutPromise || Promise.resolve();\n    }\n\n    this.isLoggingOut = true;\n    console.log('[API] Initiating idempotent logout');\n\n    this.logoutPromise = new Promise(resolve => {\n      setTimeout(() => {\n        // Dispatch new auth logout\n        console.log('[API] Using new auth logout');\n        dispatch(newLogout());\n\n        console.log('[API] Logout dispatched');\n        resolve();\n      }, 100); // Small delay to batch concurrent requests\n    });\n\n    try {\n      await this.logoutPromise;\n    } finally {\n      // Reset state after a delay to allow for navigation\n      setTimeout(() => {\n        this.isLoggingOut = false;\n        this.logoutPromise = null;\n        console.log('[API] Logout manager reset');\n      }, 1000);\n    }\n  }\n\n  isInProgress(): boolean {\n    return this.isLoggingOut;\n  }\n}\n\n// Global logout manager instance\nconst logoutManager = new LogoutManager();\n\n/**\n * Create the base fetch query\n */\nconst baseFetchQuery = fetchBaseQuery({\n  baseUrl: buildApiUrl(''),\n  timeout: AppConfig.API_TIMEOUT,\n  prepareHeaders: (headers, {getState}) => {\n    const state = getState() as RootState;\n\n    // Get token from new auth system\n    const token = state.newAuth?.token || undefined;\n\n    // Add common headers\n    const requestHeaders = getRequestHeaders(token);\n    Object.entries(requestHeaders).forEach(([key, value]) => {\n      headers.set(key, value);\n    });\n\n    return headers;\n  },\n});\n\n/**\n * Enhanced base query with retry logic and error handling\n */\nconst baseQueryWithRetry: BaseQueryFn = async (args, api, extraOptions) => {\n  const {dispatch} = api;\n  const maxRetries = 3;\n  let attempt = 0;\n\n  // Set loading state for non-background requests\n  const isBackgroundRequest =\n    typeof args === 'object' && 'background' in args && args.background;\n  if (!isBackgroundRequest) {\n    dispatch(setLoading({isLoading: true}));\n  }\n\n  while (attempt \n          setTimeout(() => resolve(undefined), delay)\n        );\n        attempt++;\n        continue;\n      }\n\n      // Non-retryable error or max retries reached\n      if (!isBackgroundRequest) {\n        dispatch(setLoading({isLoading: false}));\n      }\n\n      return result;\n    } catch (error) {\n      console.error('[API] Unexpected error in baseQuery:', error);\n\n      if (!isBackgroundRequest) {\n        dispatch(setLoading({isLoading: false}));\n      }\n\n      return {\n        error: {\n          status: 'FETCH_ERROR',\n          error: error instanceof Error ? error.message : 'Unknown error',\n        } as FetchBaseQueryError,\n      };\n    }\n  }\n\n  // This should never be reached, but TypeScript requires it\n  if (!isBackgroundRequest) {\n    dispatch(setLoading({isLoading: false}));\n  }\n\n  return {\n    error: {\n      status: 'FETCH_ERROR',\n      error: 'Max retries exceeded',\n    } as FetchBaseQueryError,\n  };\n};\n\n/**\n * Base query with additional features\n */\nexport const baseQuery: BaseQueryFn = baseQueryWithRetry;\n\n/**\n * Transform response to standard format\n */\nexport const transformResponse = (response: any): T => {\n  // Handle different response formats from backend\n  if (response?.success !== undefined) {\n    // Backend returns {success: boolean, data: T, error?: string}\n    if (response.success) {\n      return response.data;\n    } else {\n      throw new Error(response.error || 'API request failed');\n    }\n  }\n\n  // Direct data response\n  return response;\n};\n\n/**\n * Transform error to standard format\n */\nexport const transformError = (error: FetchBaseQueryError) => {\n  return parseApiError(error);\n};\n\n/**\n * Create tag for cache invalidation\n */\nexport const createTag = (type: string, id?: string | number) => {\n  return id ? {type, id} : {type, id: 'LIST'};\n};\n\n/**\n * Provide tags for cache invalidation\n */\nexport const provideTags = (\n  type: string,\n  result?: T[]\n) => {\n  if (!result) {\n    return [{type, id: 'LIST'}];\n  }\n\n  return [...result.map(item => createTag(type, item.id)), {type, id: 'LIST'}];\n};\n\n/**\n * Invalidate tags for cache updates\n */\nexport const invalidateTags = (type: string, ids?: (string | number)[]) => {\n  if (!ids || ids.length === 0) {\n    return [{type, id: 'LIST'}];\n  }\n\n  return [...ids.map(id => createTag(type, id)), {type, id: 'LIST'}];\n};\n\nexport default baseQuery;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogoutResponse.html":{"url":"interfaces/LogoutResponse.html","title":"interface - LogoutResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LogoutResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/newAuth.ts\n        \n\n\n            \n                Description\n            \n            \n                Logout response interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport {baseQuery} from '../baseQuery';\n\n/**\n * User interface matching API response\n */\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n}\n\n/**\n * Login request interface\n */\nexport interface LoginRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Login response interface matching API\n */\nexport interface LoginResponse {\n  accessToken: string;\n  user: User;\n}\n\n/**\n * Logout response interface\n */\nexport interface LogoutResponse {\n  success: boolean;\n}\n\n/**\n * New Auth API using actual endpoints\n */\nexport const newAuthApi = createApi({\n  reducerPath: 'newAuthApi',\n  baseQuery,\n  tagTypes: ['Auth'],\n  endpoints: builder => ({\n    /**\n     * Login with phone and OTP\n     */\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth/login',\n        method: 'POST',\n        body: credentials,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n\n    /**\n     * Logout user\n     */\n    logout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST',\n        body: {},\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n  }),\n});\n\n// Export hooks\nexport const {useLoginMutation, useLogoutMutation} = newAuthApi;\n\n// Export for store configuration\nexport default newAuthApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MessageBubbleProps.html":{"url":"interfaces/MessageBubbleProps.html","title":"interface - MessageBubbleProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MessageBubbleProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/tickets/MessageBubble.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         TicketMessage\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketMessage\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message data to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, Text} from 'react-native';\nimport {StyleSheet} from 'react-native';\nimport {spacing, borderRadius} from '../../theme/palette';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {TicketMessage} from '../../types/Ticket';\nimport {getRelativeTime} from '../../utils/dateHelpers';\n\nexport interface MessageBubbleProps {\n  /** Message data to display */\n  message: TicketMessage;\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * Get message bubble styling based on sender role\n */\nconst getMessageStyle = (sender: string, theme: any) => {\n  const isCustomer = sender === 'Customer';\n\n  return {\n    bubble: {\n      backgroundColor: isCustomer\n        ? theme.colors.primary\n        : theme.colors.surfaceVariant,\n      alignSelf: isCustomer ? ('flex-end' as const) : ('flex-start' as const),\n      marginLeft: isCustomer ? 48 : 0,\n      marginRight: isCustomer ? 0 : 48,\n    },\n    text: {\n      color: isCustomer\n        ? theme.colors.onPrimary\n        : theme.colors.onSurfaceVariant,\n    },\n    timestamp: {\n      color: isCustomer\n        ? `${theme.colors.onPrimary}CC` // 80% opacity\n        : theme.colors.onSurfaceVariant,\n    },\n  };\n};\n\n/**\n * MessageBubble Component\n * Memoized for performance in FlatList\n */\nconst MessageBubble: React.FC = React.memo(\n  ({message, testID}) => {\n    const theme = useAppTheme();\n    const messageStyle = getMessageStyle(message.sender, theme);\n    const relativeTime = getRelativeTime(message.timestamp);\n\n    return (\n      \n        \n          {/* Message Content */}\n          \n            {message.message}\n          \n\n          {/* Message Footer */}\n          \n            {relativeTime}\n          \n        \n      \n    );\n  }\n);\n\nMessageBubble.displayName = 'MessageBubble';\n\n/**\n * MessageBubble Styles\n * Styling for message bubble component following chat UI patterns\n */\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: spacing.md,\n    paddingVertical: spacing.xs,\n  },\n\n  bubble: {\n    borderRadius: borderRadius.medium,\n    padding: spacing.md,\n    maxWidth: '85%',\n    elevation: 1,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n\n  timestamp: {\n    fontSize: 11,\n    fontWeight: '400',\n    alignSelf: 'flex-end',\n    opacity: 0.8,\n  },\n\n  messageText: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: spacing.xs,\n  },\n});\n\nexport default MessageBubble;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MigrationManifest.html":{"url":"interfaces/MigrationManifest.html","title":"interface - MigrationManifest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MigrationManifest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/migrations.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration type definition\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    PersistedState\n\n                    \n                \n                        \n                            \n                                Defined in src/store/migrations.ts:11\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import {PersistedState} from 'redux-persist';\n\n/**\n * Migration type definition\n */\nexport interface MigrationManifest {\n  [key: string]: (state: PersistedState) => PersistedState;\n}\n\n/**\n * Migration from version 0 to 1\n * Initial migration - adds version field\n */\nconst migration0to1 = (state: PersistedState): PersistedState => {\n  console.log('[Migration] Running migration 0 -> 1');\n\n  return {\n    ...state,\n    _persist: {\n      ...state._persist,\n      version: 1,\n    },\n  };\n};\n\n/**\n * Migration from version 1 to 2\n * Example: Restructure auth state\n */\nconst migration1to2 = (state: PersistedState): PersistedState => {\n  console.log('[Migration] Running migration 1 -> 2');\n\n  // Example migration logic\n  const typedState = state as any;\n\n  if (typedState.auth) {\n    // Example: Move phone to user object if it exists separately\n    if (typedState.auth.phone && !typedState.auth.user?.phone) {\n      typedState.auth.user = {\n        ...typedState.auth.user,\n        phone: typedState.auth.phone,\n      };\n      delete typedState.auth.phone;\n    }\n  }\n\n  return {\n    ...typedState,\n    _persist: {\n      ...state._persist,\n      version: 2,\n    },\n  };\n};\n\n/**\n * Migration manifest\n * Maps version numbers to migration functions\n */\nexport const migrations: MigrationManifest = {\n  0: migration0to1,\n  1: migration1to2,\n  // Add more migrations as needed\n  // 2: migration2to3,\n  // 3: migration3to4,\n};\n\n/**\n * Get current migration version\n */\nexport const getCurrentVersion = (): number => {\n  return Math.max(...Object.keys(migrations).map(Number)) + 1;\n};\n\n/**\n * Validate persisted state\n */\nexport const validatePersistedState = (state: any): boolean => {\n  try {\n    // Basic validation\n    if (!state || typeof state !== 'object') {\n      return false;\n    }\n\n    // Check for required structure\n    if (state.auth && typeof state.auth !== 'object') {\n      return false;\n    }\n\n    // Validate auth state structure\n    if (state.auth?.user) {\n      const user = state.auth.user;\n      if (!user.id || !user.phone) {\n        console.warn('[Persist] Invalid user structure, will reset');\n        return false;\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error('[Persist] State validation error:', error);\n    return false;\n  }\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MigrationResult.html":{"url":"interfaces/MigrationResult.html","title":"interface - MigrationResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MigrationResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/storage.ts\n        \n\n\n            \n                Description\n            \n            \n                Migration result with detailed info\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            fromKey\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fromKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fromKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         MigrationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MigrationStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum MigrationStatus {\n  NOT_NEEDED = 'NOT_NEEDED',\n  MIGRATED = 'MIGRATED',\n  FAILED = 'FAILED',\n}\n\n/**\n * Storage operation result\n */\nexport interface StorageResult {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Migration result with detailed info\n */\nexport interface MigrationResult {\n  status: MigrationStatus;\n  fromKey?: string;\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NewAuthState.html":{"url":"interfaces/NewAuthState.html","title":"interface - NewAuthState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NewAuthState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/newAuthSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                        \n                                            isLoggedIn\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoggedIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoggedIn:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     User | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, createAsyncThunk, PayloadAction} from '@reduxjs/toolkit';\nimport {User, LoginResponse} from '../api/endpoints/newAuth';\nimport {saveJWT, clearJWT, getJWT} from '../storage/secureStorage';\n\n/**\n * Authentication State\n */\nexport interface NewAuthState {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  user: User | null;\n  token: string | null;\n  error: string | null;\n}\n\n/**\n * Initial state\n */\nconst initialState: NewAuthState = {\n  isLoggedIn: false,\n  isLoading: false,\n  user: null,\n  token: null,\n  error: null,\n};\n\n/**\n * Simple auth restoration - just check if token exists\n */\nexport const restoreAuth = createAsyncThunk(\n  'newAuth/restore',\n  async (_, {dispatch}) => {\n    try {\n      const token = await getJWT();\n      if (token) {\n        // Simple JWT decode to get user info\n        const base64Decode = (str: string): string => {\n          if (typeof atob !== 'undefined') {\n            return atob(str);\n          }\n          // React Native polyfill\n          return Buffer.from(str, 'base64').toString('ascii');\n        };\n\n        const payload = JSON.parse(base64Decode(token.split('.')[1]));\n        const user: User = {\n          id: payload.userId,\n          name: payload.name,\n          email: payload.email,\n          phone: payload.phone,\n          role: payload.role,\n        };\n        dispatch(setAuthState({user, token, isLoggedIn: true}));\n        return {user, token};\n      }\n      return null;\n    } catch (error) {\n      console.error('[NewAuth] Restore failed:', error);\n      await clearJWT(); // Clear invalid token\n      return null;\n    }\n  }\n);\n\n/**\n * Login success handler\n */\nexport const loginSuccess = createAsyncThunk(\n  'newAuth/loginSuccess',\n  async (loginData: LoginResponse, {dispatch}) => {\n    try {\n      // Save token to secure storage\n      await saveJWT(loginData.accessToken);\n\n      // Update state\n      dispatch(\n        setAuthState({\n          user: loginData.user,\n          token: loginData.accessToken,\n          isLoggedIn: true,\n        })\n      );\n\n      return loginData;\n    } catch (error) {\n      console.error('[NewAuth] Login success handler failed:', error);\n      throw error;\n    }\n  }\n);\n\n/**\n * Logout handler\n */\nexport const logoutUser = createAsyncThunk(\n  'newAuth/logout',\n  async (_, {dispatch}) => {\n    try {\n      // Clear secure storage\n      await clearJWT();\n\n      // Clear state\n      dispatch(clearAuthState());\n\n      return true;\n    } catch (error) {\n      console.error('[NewAuth] Logout failed:', error);\n      // Still clear state even if storage clear fails\n      dispatch(clearAuthState());\n      return true;\n    }\n  }\n);\n\n/**\n * New Auth Slice\n */\nconst newAuthSlice = createSlice({\n  name: 'newAuth',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action: PayloadAction) => {\n      state.error = action.payload;\n    },\n    setAuthState: (\n      state,\n      action: PayloadAction\n    ) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = action.payload.isLoggedIn;\n      state.error = null;\n    },\n    clearAuthState: state => {\n      state.isLoggedIn = false;\n      state.user = null;\n      state.token = null;\n      state.error = null;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      // Restore auth\n      .addCase(restoreAuth.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(restoreAuth.fulfilled, state => {\n        state.isLoading = false;\n      })\n      .addCase(restoreAuth.rejected, state => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.user = null;\n        state.token = null;\n      })\n\n      // Login success\n      .addCase(loginSuccess.pending, state => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(loginSuccess.fulfilled, state => {\n        state.isLoading = false;\n      })\n      .addCase(loginSuccess.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || 'Login failed';\n      })\n\n      // Logout\n      .addCase(logoutUser.fulfilled, state => {\n        state.isLoading = false;\n      });\n  },\n});\n\n// Export actions\nexport const {setLoading, setError, setAuthState, clearAuthState} =\n  newAuthSlice.actions;\n\n// Export selectors\nexport const selectNewAuth = (state: {newAuth: NewAuthState}) => state.newAuth;\nexport const selectIsLoggedIn = (state: {newAuth: NewAuthState}) =>\n  state.newAuth.isLoggedIn;\nexport const selectUser = (state: {newAuth: NewAuthState}) =>\n  state.newAuth.user;\nexport const selectToken = (state: {newAuth: NewAuthState}) =>\n  state.newAuth.token;\nexport const selectAuthLoading = (state: {newAuth: NewAuthState}) =>\n  state.newAuth.isLoading;\nexport const selectAuthError = (state: {newAuth: NewAuthState}) =>\n  state.newAuth.error;\n\n// Export reducer\nexport default newAuthSlice.reducer;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Notification.html":{"url":"interfaces/Notification.html","title":"interface - Notification","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Notification.ts\n        \n\n\n            \n                Description\n            \n            \n                Notification entity from server API\nMatches the actual API response structure from /api/v1/notifications\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            read\n                                        \n                                \n                                \n                                        \n                                            severity\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when notification was created on server\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the notification (e.g., \"NOTIF-001\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Main notification message content\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Metadata for notification-specific data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Server-side read status (reference only - we manage read state locally)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        severity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        severity:         NotificationSeverity\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationSeverity\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Severity level (e.g., 'info', 'warning', 'error')\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Display title of the notification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NotificationType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Category/type of notification (e.g., 'user', 'announcement', 'system')\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Notification {\n  /** Unique identifier for the notification (e.g., \"NOTIF-001\") */\n  id: string;\n  /** Display title of the notification */\n  title: string;\n  /** Main notification message content */\n  message: string;\n  /** Category/type of notification (e.g., 'user', 'announcement', 'system') */\n  type: NotificationType;\n  /** Severity level (e.g., 'info', 'warning', 'error') */\n  severity: NotificationSeverity;\n  /** Server-side read status (reference only - we manage read state locally) */\n  read: boolean;\n  /** ISO timestamp when notification was created on server */\n  createdAt: string;\n  /** Metadata for notification-specific data */\n  metadata: Record;\n}\n\n/**\n * API response structure for notifications endpoint\n * GET /api/v1/notifications response format\n */\nexport interface NotificationsApiResponse {\n  success: boolean;\n  data: {\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\n/**\n * Available notification statuses for filtering\n */\nexport type NotificationStatus = 'read' | 'unread' | 'all';\n\n/**\n * Available notification types for filtering\n */\nexport type NotificationType =\n  | 'system'\n  | 'security'\n  | 'lead'\n  | 'quotation'\n  | 'commission'\n  | 'user'\n  | 'announcement';\n\n/**\n * Available notification severities for filtering\n */\nexport type NotificationSeverity = 'info' | 'warning' | 'error';\n\n/**\n * Available sort fields for notifications\n */\nexport type NotificationSortBy = 'createdAt' | 'readAt' | 'title';\n\n/**\n * Available sort orders\n */\nexport type NotificationSortOrder = 'asc' | 'desc';\n\n/**\n * Query parameters for notifications API\n * Used with GET /api/v1/notifications\n */\nexport interface NotificationsQueryParams {\n  /** Page number for pagination (default: 1) */\n  page?: number;\n  /** Number of items per page (default: 20) */\n  limit?: number;\n  /** Filter by read status (default: all) */\n  status?: NotificationStatus;\n  /** Filter by notification type */\n  type?: NotificationType;\n  /** Filter notifications from this date (ISO string format) */\n  dateFrom?: string;\n  /** Filter notifications to this date (ISO string format) */\n  dateTo?: string;\n  /** Field to sort by (default: createdAt) */\n  sortBy?: NotificationSortBy;\n  /** Sort order (default: desc) */\n  sortOrder?: NotificationSortOrder;\n}\n\n/**\n * Redux state shape for notifications slice\n * Manages local read state for immediate UI updates\n */\nexport interface NotificationsState {\n  /** Array of all notifications from server */\n  items: Notification[];\n  /** Array of notification IDs marked as read locally (stored as array for Redux serialization) */\n  readIds: string[];\n  /** Calculated count of unread notifications based on local read state */\n  unreadCount: number;\n  /** Timestamp of last successful fetch from server */\n  lastFetched: number | null;\n  /** Flag indicating if polling is currently active */\n  isPolling: boolean;\n  /** Current error message from polling, if any */\n  pollError: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationBellIconProps.html":{"url":"interfaces/NotificationBellIconProps.html","title":"interface - NotificationBellIconProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationBellIconProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/NotificationBellIcon/NotificationBellIcon.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            badgeSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iconSize\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        badgeSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        badgeSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iconSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iconSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useMemo} from 'react';\nimport {View, StyleSheet, TouchableOpacity} from 'react-native';\nimport {Badge} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useGetNotificationsQuery} from '../../../api/endpoints/notifications';\nimport {useAppSelector} from '../../../hooks/useTypedRedux';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\n\nexport interface NotificationBellIconProps {\n  onPress: () => void;\n  style?: any;\n  iconSize?: number;\n  badgeSize?: number;\n}\n\nconst NotificationBellIcon: React.FC = ({\n  onPress,\n  style,\n  iconSize = 24,\n  badgeSize = 16,\n}) => {\n  const theme = useAppTheme();\n  // Get notifications from RTK Query\n  const {data: notifications = []} = useGetNotificationsQuery(undefined, {\n    selectFromResult: result => ({\n      ...result,\n      data: result.data || [],\n    }),\n  });\n\n  // Get read IDs from Redux slice\n  const readIds = useAppSelector(state => state.notifications?.readIds || []);\n\n  // Compute unread count\n  const unreadCount = useMemo(() => {\n    const readIdSet = new Set(readIds);\n    return notifications.filter(notification => !readIdSet.has(notification.id))\n      .length;\n  }, [notifications, readIds]);\n\n  return (\n     0 ? `. ${unreadCount} unread` : ''\n      }`}\n      accessibilityHint=\"Tap to view notifications\"\n    >\n      \n        \n        {unreadCount > 0 && (\n          \n            {unreadCount > 99 ? '99+' : unreadCount.toString()}\n          \n        )}\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    marginRight: 8,\n  },\n  iconContainer: {\n    position: 'relative',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  badge: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n    zIndex: 1,\n    fontSize: 12,\n    fontWeight: 'bold',\n    minWidth: 16,\n    minHeight: 16,\n  },\n});\n\nexport default NotificationBellIcon;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationListItemProps.html":{"url":"interfaces/NotificationListItemProps.html","title":"interface - NotificationListItemProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationListItemProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/notifications/NotificationListItem.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            notification\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notification\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notification:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {formatDistanceToNow} from 'date-fns';\nimport React from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity} from 'react-native';\nimport {Card} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {\n  Notification,\n  NotificationSeverity,\n} from '../../types/Notification';\n\nexport interface NotificationListItemProps {\n  notification: Notification & {isRead: boolean};\n  onPress: (notification: Notification) => void;\n  testID?: string;\n}\n\n/**\n * Get icon name based on notification type\n */\nconst getNotificationIcon = (type: string): string => {\n  switch (type) {\n    case 'lead':\n      return 'assignment';\n    case 'quotation':\n      return 'receipt';\n    case 'commission':\n      return 'attach-money';\n    case 'system':\n      return 'settings';\n    case 'security':\n      return 'security';\n    case 'announcement':\n      return 'campaign';\n    default:\n      return 'notifications';\n  }\n};\n\n/**\n * Get severity color based on notification severity\n */\nconst getSeverityColor = (\n  severity: NotificationSeverity,\n  theme: any\n): string => {\n  switch (severity) {\n    case 'error':\n      return theme.colors.error;\n    case 'warning':\n      return theme.colors.tertiary;\n    case 'info':\n    default:\n      return theme.colors.primary;\n  }\n};\n\nconst NotificationListItem: React.FC = ({\n  notification,\n  onPress,\n  testID,\n}) => {\n  const theme = useAppTheme();\n\n  const handlePress = () => {\n    onPress(notification);\n  };\n\n  const timeAgo = formatDistanceToNow(new Date(notification.createdAt), {\n    addSuffix: true,\n  });\n\n  const iconName = getNotificationIcon(notification.type);\n  const severityColor = getSeverityColor(notification.severity, theme);\n\n  return (\n    \n      \n        \n          {/* Left: Icon with severity color */}\n          \n            \n          \n\n          {/* Center: Content */}\n          \n            \n              {notification.title}\n            \n            \n              {notification.message}\n            \n            \n              {timeAgo}\n            \n          \n\n          {/* Right: Unread indicator */}\n          {!notification.isRead && (\n            \n              \n            \n          )}\n        \n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 16,\n    marginVertical: 4,\n  },\n  card: {\n    borderRadius: 8,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    padding: 16,\n  },\n  iconContainer: {\n    marginRight: 12,\n    marginTop: 2,\n  },\n  textContainer: {\n    flex: 1,\n    marginRight: 8,\n  },\n  title: {\n    fontSize: 16,\n    lineHeight: 20,\n    marginBottom: 4,\n  },\n  message: {\n    fontSize: 14,\n    lineHeight: 18,\n    marginBottom: 8,\n  },\n  timestamp: {\n    fontSize: 12,\n    lineHeight: 16,\n  },\n  unreadIndicatorContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginLeft: 8,\n  },\n  unreadIndicator: {\n    width: 8,\n    height: 8,\n    borderRadius: 4,\n  },\n});\n\nexport default NotificationListItem;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationPollingConfig.html":{"url":"interfaces/NotificationPollingConfig.html","title":"interface - NotificationPollingConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationPollingConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useNotificationPolling.ts\n        \n\n\n            \n                Description\n            \n            \n                Polling configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseIntervalSeconds\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxJitterSeconds\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startImmediately\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseIntervalSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseIntervalSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base polling interval in seconds (default: 30)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether polling is enabled (default: true)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxJitterSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxJitterSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum jitter in seconds (default: 5)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startImmediately\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startImmediately:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to start polling immediately (default: true)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useEffect, useRef} from 'react';\nimport {AppState, AppStateStatus} from 'react-native';\nimport {RefreshResult} from '../refresh/refreshTypes';\nimport {useRefreshControl} from './useRefreshControl';\n\n/**\n * Polling configuration\n */\ninterface NotificationPollingConfig {\n  /** Base polling interval in seconds (default: 30) */\n  baseIntervalSeconds?: number;\n  /** Maximum jitter in seconds (default: 5) */\n  maxJitterSeconds?: number;\n  /** Whether polling is enabled (default: true) */\n  enabled?: boolean;\n  /** Whether to start polling immediately (default: true) */\n  startImmediately?: boolean;\n}\n\n/**\n * Polling state\n */\ninterface NotificationPollingState {\n  isPolling: boolean;\n  lastPollAt: number | null;\n  nextPollAt: number | null;\n  pollCount: number;\n  startPolling: () => void;\n  stopPolling: () => void;\n  pollNow: () => Promise;\n}\n\n/**\n * Add jitter to interval to prevent thundering herd\n */\nconst addJitter = (baseIntervalMs: number, maxJitterMs: number): number => {\n  const jitter = Math.random() * maxJitterMs * 2 - maxJitterMs; // ±maxJitter\n  return Math.max(1000, baseIntervalMs + jitter); // Minimum 1 second\n};\n\n/**\n * Hook for automatic notifications polling\n *\n * Integrates with existing refresh infrastructure and handles:\n * - 30s + jitter polling intervals\n * - Background/foreground app state transitions\n * - Proper cleanup on unmount\n * - Debounce respect through existing refresh system\n */\nexport const useNotificationPolling = (\n  config: NotificationPollingConfig = {}\n): NotificationPollingState => {\n  const {\n    baseIntervalSeconds = 30,\n    maxJitterSeconds = 5,\n    enabled = true,\n    startImmediately = true,\n  } = config;\n\n  const {refreshNotifications, canRefreshNotifications} = useRefreshControl();\n\n  // Polling state\n  const isPollingRef = useRef(false);\n  const timerRef = useRef(null);\n  const lastPollAtRef = useRef(null);\n  const nextPollAtRef = useRef(null);\n  const pollCountRef = useRef(0);\n  const appStateRef = useRef(AppState.currentState);\n\n  /**\n   * Calculate next poll time with jitter\n   */\n  const calculateNextPollTime = useCallback((): number => {\n    const baseMs = baseIntervalSeconds * 1000;\n    const maxJitterMs = maxJitterSeconds * 1000;\n    const intervalWithJitter = addJitter(baseMs, maxJitterMs);\n    return Date.now() + intervalWithJitter;\n  }, [baseIntervalSeconds, maxJitterSeconds]);\n\n  /**\n   * Execute a single poll\n   */\n  const pollNow = useCallback(async (): Promise => {\n    if (!enabled) {\n      console.log('[NotificationPolling] Polling disabled, skipping poll');\n      return {\n        success: true,\n        refreshedApis: [],\n        errors: [],\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    console.log('[NotificationPolling] Executing poll now...');\n\n    try {\n      lastPollAtRef.current = Date.now();\n      pollCountRef.current += 1;\n\n      const result = await refreshNotifications();\n\n      console.log('[NotificationPolling] Poll completed:', {\n        success: result.success,\n        refreshedApis: result.refreshedApis.length,\n        errors: result.errors.length,\n        pollCount: pollCountRef.current,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Polling failed';\n      console.error('[NotificationPolling] Poll error:', errorMessage);\n\n      return {\n        success: false,\n        refreshedApis: [],\n        errors: [{api: 'notifications' as any, error: errorMessage}],\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }, [enabled, refreshNotifications]);\n\n  /**\n   * Schedule next poll\n   */\n  const scheduleNextPoll = useCallback(() => {\n    if (!enabled || !isPollingRef.current) {\n      return;\n    }\n\n    // Clear existing timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Calculate delay\n    const nextPollTime = calculateNextPollTime();\n    const delay = nextPollTime - Date.now();\n    nextPollAtRef.current = nextPollTime;\n\n    console.log(\n      '[NotificationPolling] Scheduling next poll in',\n      Math.round(delay / 1000),\n      'seconds'\n    );\n\n    timerRef.current = setTimeout(async () => {\n      // Only poll if we can refresh (respects debounce)\n      if (canRefreshNotifications() && isPollingRef.current) {\n        await pollNow();\n        scheduleNextPoll(); // Schedule next poll\n      } else {\n        console.log(\n          '[NotificationPolling] Poll skipped (debounce or stopped), rescheduling...'\n        );\n        scheduleNextPoll(); // Reschedule anyway to keep trying\n      }\n    }, delay);\n  }, [enabled, calculateNextPollTime, canRefreshNotifications, pollNow]);\n\n  /**\n   * Start polling\n   */\n  const startPolling = useCallback(() => {\n    if (!enabled) {\n      console.log('[NotificationPolling] Cannot start - polling disabled');\n      return;\n    }\n\n    if (isPollingRef.current) {\n      console.log(\n        '[NotificationPolling] Already polling, ignoring start request'\n      );\n      return;\n    }\n\n    console.log('[NotificationPolling] Starting notification polling...');\n    isPollingRef.current = true;\n    scheduleNextPoll();\n  }, [enabled, scheduleNextPoll]);\n\n  /**\n   * Stop polling\n   */\n  const stopPolling = useCallback(() => {\n    console.log('[NotificationPolling] Stopping notification polling...');\n    isPollingRef.current = false;\n    nextPollAtRef.current = null;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Handle app state changes\n   */\n  const handleAppStateChange = useCallback(\n    (nextAppState: AppStateStatus) => {\n      const previousState = appStateRef.current;\n      appStateRef.current = nextAppState;\n\n      console.log(\n        '[NotificationPolling] App state change:',\n        previousState,\n        '->',\n        nextAppState\n      );\n\n      if (\n        nextAppState === 'active' &&\n        (previousState === 'background' || previousState === 'inactive')\n      ) {\n        // App came to foreground\n        if (enabled && !isPollingRef.current) {\n          console.log(\n            '[NotificationPolling] App foregrounded, resuming polling...'\n          );\n          // Wait 5 seconds then resume polling\n          setTimeout(() => {\n            if (appStateRef.current === 'active') {\n              startPolling();\n            }\n          }, 5000);\n        }\n      } else if (\n        (nextAppState === 'background' || nextAppState === 'inactive') &&\n        isPollingRef.current\n      ) {\n        // App went to background\n        console.log(\n          '[NotificationPolling] App backgrounded, pausing polling...'\n        );\n        stopPolling();\n      }\n    },\n    [enabled, startPolling, stopPolling]\n  );\n\n  /**\n   * Setup app state listener\n   */\n  useEffect(() => {\n    const subscription = AppState.addEventListener(\n      'change',\n      handleAppStateChange\n    );\n    return () => {\n      subscription?.remove();\n    };\n  }, [handleAppStateChange]);\n\n  /**\n   * Start polling on mount if enabled\n   */\n  useEffect(() => {\n    if (enabled && startImmediately && AppState.currentState === 'active') {\n      console.log('[NotificationPolling] Auto-starting polling on mount');\n      startPolling();\n    }\n\n    return () => {\n      console.log('[NotificationPolling] Cleaning up on unmount');\n      stopPolling();\n    };\n  }, [enabled, startImmediately, startPolling, stopPolling]);\n\n  return {\n    isPolling: isPollingRef.current,\n    lastPollAt: lastPollAtRef.current,\n    nextPollAt: nextPollAtRef.current,\n    pollCount: pollCountRef.current,\n    startPolling,\n    stopPolling,\n    pollNow,\n  };\n};\n\nexport default useNotificationPolling;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationPollingState.html":{"url":"interfaces/NotificationPollingState.html","title":"interface - NotificationPollingState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationPollingState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useNotificationPolling.ts\n        \n\n\n            \n                Description\n            \n            \n                Polling state\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isPolling\n                                        \n                                \n                                \n                                        \n                                            lastPollAt\n                                        \n                                \n                                \n                                        \n                                            nextPollAt\n                                        \n                                \n                                \n                                        \n                                            pollCount\n                                        \n                                \n                                \n                                        \n                                            pollNow\n                                        \n                                \n                                \n                                        \n                                            startPolling\n                                        \n                                \n                                \n                                        \n                                            stopPolling\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPolling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastPollAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastPollAt:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextPollAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextPollAt:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pollCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pollCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pollNow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pollNow:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startPolling:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stopPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopPolling:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useEffect, useRef} from 'react';\nimport {AppState, AppStateStatus} from 'react-native';\nimport {RefreshResult} from '../refresh/refreshTypes';\nimport {useRefreshControl} from './useRefreshControl';\n\n/**\n * Polling configuration\n */\ninterface NotificationPollingConfig {\n  /** Base polling interval in seconds (default: 30) */\n  baseIntervalSeconds?: number;\n  /** Maximum jitter in seconds (default: 5) */\n  maxJitterSeconds?: number;\n  /** Whether polling is enabled (default: true) */\n  enabled?: boolean;\n  /** Whether to start polling immediately (default: true) */\n  startImmediately?: boolean;\n}\n\n/**\n * Polling state\n */\ninterface NotificationPollingState {\n  isPolling: boolean;\n  lastPollAt: number | null;\n  nextPollAt: number | null;\n  pollCount: number;\n  startPolling: () => void;\n  stopPolling: () => void;\n  pollNow: () => Promise;\n}\n\n/**\n * Add jitter to interval to prevent thundering herd\n */\nconst addJitter = (baseIntervalMs: number, maxJitterMs: number): number => {\n  const jitter = Math.random() * maxJitterMs * 2 - maxJitterMs; // ±maxJitter\n  return Math.max(1000, baseIntervalMs + jitter); // Minimum 1 second\n};\n\n/**\n * Hook for automatic notifications polling\n *\n * Integrates with existing refresh infrastructure and handles:\n * - 30s + jitter polling intervals\n * - Background/foreground app state transitions\n * - Proper cleanup on unmount\n * - Debounce respect through existing refresh system\n */\nexport const useNotificationPolling = (\n  config: NotificationPollingConfig = {}\n): NotificationPollingState => {\n  const {\n    baseIntervalSeconds = 30,\n    maxJitterSeconds = 5,\n    enabled = true,\n    startImmediately = true,\n  } = config;\n\n  const {refreshNotifications, canRefreshNotifications} = useRefreshControl();\n\n  // Polling state\n  const isPollingRef = useRef(false);\n  const timerRef = useRef(null);\n  const lastPollAtRef = useRef(null);\n  const nextPollAtRef = useRef(null);\n  const pollCountRef = useRef(0);\n  const appStateRef = useRef(AppState.currentState);\n\n  /**\n   * Calculate next poll time with jitter\n   */\n  const calculateNextPollTime = useCallback((): number => {\n    const baseMs = baseIntervalSeconds * 1000;\n    const maxJitterMs = maxJitterSeconds * 1000;\n    const intervalWithJitter = addJitter(baseMs, maxJitterMs);\n    return Date.now() + intervalWithJitter;\n  }, [baseIntervalSeconds, maxJitterSeconds]);\n\n  /**\n   * Execute a single poll\n   */\n  const pollNow = useCallback(async (): Promise => {\n    if (!enabled) {\n      console.log('[NotificationPolling] Polling disabled, skipping poll');\n      return {\n        success: true,\n        refreshedApis: [],\n        errors: [],\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    console.log('[NotificationPolling] Executing poll now...');\n\n    try {\n      lastPollAtRef.current = Date.now();\n      pollCountRef.current += 1;\n\n      const result = await refreshNotifications();\n\n      console.log('[NotificationPolling] Poll completed:', {\n        success: result.success,\n        refreshedApis: result.refreshedApis.length,\n        errors: result.errors.length,\n        pollCount: pollCountRef.current,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Polling failed';\n      console.error('[NotificationPolling] Poll error:', errorMessage);\n\n      return {\n        success: false,\n        refreshedApis: [],\n        errors: [{api: 'notifications' as any, error: errorMessage}],\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }, [enabled, refreshNotifications]);\n\n  /**\n   * Schedule next poll\n   */\n  const scheduleNextPoll = useCallback(() => {\n    if (!enabled || !isPollingRef.current) {\n      return;\n    }\n\n    // Clear existing timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Calculate delay\n    const nextPollTime = calculateNextPollTime();\n    const delay = nextPollTime - Date.now();\n    nextPollAtRef.current = nextPollTime;\n\n    console.log(\n      '[NotificationPolling] Scheduling next poll in',\n      Math.round(delay / 1000),\n      'seconds'\n    );\n\n    timerRef.current = setTimeout(async () => {\n      // Only poll if we can refresh (respects debounce)\n      if (canRefreshNotifications() && isPollingRef.current) {\n        await pollNow();\n        scheduleNextPoll(); // Schedule next poll\n      } else {\n        console.log(\n          '[NotificationPolling] Poll skipped (debounce or stopped), rescheduling...'\n        );\n        scheduleNextPoll(); // Reschedule anyway to keep trying\n      }\n    }, delay);\n  }, [enabled, calculateNextPollTime, canRefreshNotifications, pollNow]);\n\n  /**\n   * Start polling\n   */\n  const startPolling = useCallback(() => {\n    if (!enabled) {\n      console.log('[NotificationPolling] Cannot start - polling disabled');\n      return;\n    }\n\n    if (isPollingRef.current) {\n      console.log(\n        '[NotificationPolling] Already polling, ignoring start request'\n      );\n      return;\n    }\n\n    console.log('[NotificationPolling] Starting notification polling...');\n    isPollingRef.current = true;\n    scheduleNextPoll();\n  }, [enabled, scheduleNextPoll]);\n\n  /**\n   * Stop polling\n   */\n  const stopPolling = useCallback(() => {\n    console.log('[NotificationPolling] Stopping notification polling...');\n    isPollingRef.current = false;\n    nextPollAtRef.current = null;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Handle app state changes\n   */\n  const handleAppStateChange = useCallback(\n    (nextAppState: AppStateStatus) => {\n      const previousState = appStateRef.current;\n      appStateRef.current = nextAppState;\n\n      console.log(\n        '[NotificationPolling] App state change:',\n        previousState,\n        '->',\n        nextAppState\n      );\n\n      if (\n        nextAppState === 'active' &&\n        (previousState === 'background' || previousState === 'inactive')\n      ) {\n        // App came to foreground\n        if (enabled && !isPollingRef.current) {\n          console.log(\n            '[NotificationPolling] App foregrounded, resuming polling...'\n          );\n          // Wait 5 seconds then resume polling\n          setTimeout(() => {\n            if (appStateRef.current === 'active') {\n              startPolling();\n            }\n          }, 5000);\n        }\n      } else if (\n        (nextAppState === 'background' || nextAppState === 'inactive') &&\n        isPollingRef.current\n      ) {\n        // App went to background\n        console.log(\n          '[NotificationPolling] App backgrounded, pausing polling...'\n        );\n        stopPolling();\n      }\n    },\n    [enabled, startPolling, stopPolling]\n  );\n\n  /**\n   * Setup app state listener\n   */\n  useEffect(() => {\n    const subscription = AppState.addEventListener(\n      'change',\n      handleAppStateChange\n    );\n    return () => {\n      subscription?.remove();\n    };\n  }, [handleAppStateChange]);\n\n  /**\n   * Start polling on mount if enabled\n   */\n  useEffect(() => {\n    if (enabled && startImmediately && AppState.currentState === 'active') {\n      console.log('[NotificationPolling] Auto-starting polling on mount');\n      startPolling();\n    }\n\n    return () => {\n      console.log('[NotificationPolling] Cleaning up on unmount');\n      stopPolling();\n    };\n  }, [enabled, startImmediately, startPolling, stopPolling]);\n\n  return {\n    isPolling: isPollingRef.current,\n    lastPollAt: lastPollAtRef.current,\n    nextPollAt: nextPollAtRef.current,\n    pollCount: pollCountRef.current,\n    startPolling,\n    stopPolling,\n    pollNow,\n  };\n};\n\nexport default useNotificationPolling;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationsApiResponse.html":{"url":"interfaces/NotificationsApiResponse.html","title":"interface - NotificationsApiResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationsApiResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Notification.ts\n        \n\n\n            \n                Description\n            \n            \n                API response structure for notifications endpoint\nGET /api/v1/notifications response format\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Notification {\n  /** Unique identifier for the notification (e.g., \"NOTIF-001\") */\n  id: string;\n  /** Display title of the notification */\n  title: string;\n  /** Main notification message content */\n  message: string;\n  /** Category/type of notification (e.g., 'user', 'announcement', 'system') */\n  type: NotificationType;\n  /** Severity level (e.g., 'info', 'warning', 'error') */\n  severity: NotificationSeverity;\n  /** Server-side read status (reference only - we manage read state locally) */\n  read: boolean;\n  /** ISO timestamp when notification was created on server */\n  createdAt: string;\n  /** Metadata for notification-specific data */\n  metadata: Record;\n}\n\n/**\n * API response structure for notifications endpoint\n * GET /api/v1/notifications response format\n */\nexport interface NotificationsApiResponse {\n  success: boolean;\n  data: {\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\n/**\n * Available notification statuses for filtering\n */\nexport type NotificationStatus = 'read' | 'unread' | 'all';\n\n/**\n * Available notification types for filtering\n */\nexport type NotificationType =\n  | 'system'\n  | 'security'\n  | 'lead'\n  | 'quotation'\n  | 'commission'\n  | 'user'\n  | 'announcement';\n\n/**\n * Available notification severities for filtering\n */\nexport type NotificationSeverity = 'info' | 'warning' | 'error';\n\n/**\n * Available sort fields for notifications\n */\nexport type NotificationSortBy = 'createdAt' | 'readAt' | 'title';\n\n/**\n * Available sort orders\n */\nexport type NotificationSortOrder = 'asc' | 'desc';\n\n/**\n * Query parameters for notifications API\n * Used with GET /api/v1/notifications\n */\nexport interface NotificationsQueryParams {\n  /** Page number for pagination (default: 1) */\n  page?: number;\n  /** Number of items per page (default: 20) */\n  limit?: number;\n  /** Filter by read status (default: all) */\n  status?: NotificationStatus;\n  /** Filter by notification type */\n  type?: NotificationType;\n  /** Filter notifications from this date (ISO string format) */\n  dateFrom?: string;\n  /** Filter notifications to this date (ISO string format) */\n  dateTo?: string;\n  /** Field to sort by (default: createdAt) */\n  sortBy?: NotificationSortBy;\n  /** Sort order (default: desc) */\n  sortOrder?: NotificationSortOrder;\n}\n\n/**\n * Redux state shape for notifications slice\n * Manages local read state for immediate UI updates\n */\nexport interface NotificationsState {\n  /** Array of all notifications from server */\n  items: Notification[];\n  /** Array of notification IDs marked as read locally (stored as array for Redux serialization) */\n  readIds: string[];\n  /** Calculated count of unread notifications based on local read state */\n  unreadCount: number;\n  /** Timestamp of last successful fetch from server */\n  lastFetched: number | null;\n  /** Flag indicating if polling is currently active */\n  isPolling: boolean;\n  /** Current error message from polling, if any */\n  pollError: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationsQueryParams.html":{"url":"interfaces/NotificationsQueryParams.html","title":"interface - NotificationsQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationsQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Notification.ts\n        \n\n\n            \n                Description\n            \n            \n                Query parameters for notifications API\nUsed with GET /api/v1/notifications\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dateFrom\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dateTo\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortOrder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dateFrom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateFrom:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter notifications from this date (ISO string format)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateTo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateTo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter notifications to this date (ISO string format)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of items per page (default: 20)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Page number for pagination (default: 1)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortBy:         NotificationSortBy\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationSortBy\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Field to sort by (default: createdAt)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortOrder:         NotificationSortOrder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationSortOrder\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Sort order (default: desc)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         NotificationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by read status (default: all)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NotificationType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NotificationType\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by notification type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Notification {\n  /** Unique identifier for the notification (e.g., \"NOTIF-001\") */\n  id: string;\n  /** Display title of the notification */\n  title: string;\n  /** Main notification message content */\n  message: string;\n  /** Category/type of notification (e.g., 'user', 'announcement', 'system') */\n  type: NotificationType;\n  /** Severity level (e.g., 'info', 'warning', 'error') */\n  severity: NotificationSeverity;\n  /** Server-side read status (reference only - we manage read state locally) */\n  read: boolean;\n  /** ISO timestamp when notification was created on server */\n  createdAt: string;\n  /** Metadata for notification-specific data */\n  metadata: Record;\n}\n\n/**\n * API response structure for notifications endpoint\n * GET /api/v1/notifications response format\n */\nexport interface NotificationsApiResponse {\n  success: boolean;\n  data: {\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\n/**\n * Available notification statuses for filtering\n */\nexport type NotificationStatus = 'read' | 'unread' | 'all';\n\n/**\n * Available notification types for filtering\n */\nexport type NotificationType =\n  | 'system'\n  | 'security'\n  | 'lead'\n  | 'quotation'\n  | 'commission'\n  | 'user'\n  | 'announcement';\n\n/**\n * Available notification severities for filtering\n */\nexport type NotificationSeverity = 'info' | 'warning' | 'error';\n\n/**\n * Available sort fields for notifications\n */\nexport type NotificationSortBy = 'createdAt' | 'readAt' | 'title';\n\n/**\n * Available sort orders\n */\nexport type NotificationSortOrder = 'asc' | 'desc';\n\n/**\n * Query parameters for notifications API\n * Used with GET /api/v1/notifications\n */\nexport interface NotificationsQueryParams {\n  /** Page number for pagination (default: 1) */\n  page?: number;\n  /** Number of items per page (default: 20) */\n  limit?: number;\n  /** Filter by read status (default: all) */\n  status?: NotificationStatus;\n  /** Filter by notification type */\n  type?: NotificationType;\n  /** Filter notifications from this date (ISO string format) */\n  dateFrom?: string;\n  /** Filter notifications to this date (ISO string format) */\n  dateTo?: string;\n  /** Field to sort by (default: createdAt) */\n  sortBy?: NotificationSortBy;\n  /** Sort order (default: desc) */\n  sortOrder?: NotificationSortOrder;\n}\n\n/**\n * Redux state shape for notifications slice\n * Manages local read state for immediate UI updates\n */\nexport interface NotificationsState {\n  /** Array of all notifications from server */\n  items: Notification[];\n  /** Array of notification IDs marked as read locally (stored as array for Redux serialization) */\n  readIds: string[];\n  /** Calculated count of unread notifications based on local read state */\n  unreadCount: number;\n  /** Timestamp of last successful fetch from server */\n  lastFetched: number | null;\n  /** Flag indicating if polling is currently active */\n  isPolling: boolean;\n  /** Current error message from polling, if any */\n  pollError: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationsState.html":{"url":"interfaces/NotificationsState.html","title":"interface - NotificationsState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationsState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Notification.ts\n        \n\n\n            \n                Description\n            \n            \n                Redux state shape for notifications slice\nManages local read state for immediate UI updates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isPolling\n                                        \n                                \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            lastFetched\n                                        \n                                \n                                \n                                        \n                                            pollError\n                                        \n                                \n                                \n                                        \n                                            readIds\n                                        \n                                \n                                \n                                        \n                                            unreadCount\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPolling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Flag indicating if polling is currently active\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:         Notification[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Notification[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of all notifications from server\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastFetched\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastFetched:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of last successful fetch from server\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pollError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pollError:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current error message from polling, if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        readIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        readIds:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of notification IDs marked as read locally (stored as array for Redux serialization)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unreadCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unreadCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Calculated count of unread notifications based on local read state\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Notification {\n  /** Unique identifier for the notification (e.g., \"NOTIF-001\") */\n  id: string;\n  /** Display title of the notification */\n  title: string;\n  /** Main notification message content */\n  message: string;\n  /** Category/type of notification (e.g., 'user', 'announcement', 'system') */\n  type: NotificationType;\n  /** Severity level (e.g., 'info', 'warning', 'error') */\n  severity: NotificationSeverity;\n  /** Server-side read status (reference only - we manage read state locally) */\n  read: boolean;\n  /** ISO timestamp when notification was created on server */\n  createdAt: string;\n  /** Metadata for notification-specific data */\n  metadata: Record;\n}\n\n/**\n * API response structure for notifications endpoint\n * GET /api/v1/notifications response format\n */\nexport interface NotificationsApiResponse {\n  success: boolean;\n  data: {\n    notifications: Notification[];\n    total: number;\n    unreadCount: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\n/**\n * Available notification statuses for filtering\n */\nexport type NotificationStatus = 'read' | 'unread' | 'all';\n\n/**\n * Available notification types for filtering\n */\nexport type NotificationType =\n  | 'system'\n  | 'security'\n  | 'lead'\n  | 'quotation'\n  | 'commission'\n  | 'user'\n  | 'announcement';\n\n/**\n * Available notification severities for filtering\n */\nexport type NotificationSeverity = 'info' | 'warning' | 'error';\n\n/**\n * Available sort fields for notifications\n */\nexport type NotificationSortBy = 'createdAt' | 'readAt' | 'title';\n\n/**\n * Available sort orders\n */\nexport type NotificationSortOrder = 'asc' | 'desc';\n\n/**\n * Query parameters for notifications API\n * Used with GET /api/v1/notifications\n */\nexport interface NotificationsQueryParams {\n  /** Page number for pagination (default: 1) */\n  page?: number;\n  /** Number of items per page (default: 20) */\n  limit?: number;\n  /** Filter by read status (default: all) */\n  status?: NotificationStatus;\n  /** Filter by notification type */\n  type?: NotificationType;\n  /** Filter notifications from this date (ISO string format) */\n  dateFrom?: string;\n  /** Filter notifications to this date (ISO string format) */\n  dateTo?: string;\n  /** Field to sort by (default: createdAt) */\n  sortBy?: NotificationSortBy;\n  /** Sort order (default: desc) */\n  sortOrder?: NotificationSortOrder;\n}\n\n/**\n * Redux state shape for notifications slice\n * Manages local read state for immediate UI updates\n */\nexport interface NotificationsState {\n  /** Array of all notifications from server */\n  items: Notification[];\n  /** Array of notification IDs marked as read locally (stored as array for Redux serialization) */\n  readIds: string[];\n  /** Calculated count of unread notifications based on local read state */\n  unreadCount: number;\n  /** Timestamp of last successful fetch from server */\n  lastFetched: number | null;\n  /** Flag indicating if polling is currently active */\n  isPolling: boolean;\n  /** Current error message from polling, if any */\n  pollError: string | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OTPInputFieldProps.html":{"url":"interfaces/OTPInputFieldProps.html","title":"interface - OTPInputFieldProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OTPInputFieldProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/OTPInput.ts\n        \n\n\n            \n                Description\n            \n            \n                Individual OTP Input Field Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            disabled\n                                        \n                                \n                                \n                                        \n                                            hasError\n                                        \n                                \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            inputRef\n                                        \n                                \n                                \n                                        \n                                            isFocused\n                                        \n                                \n                                \n                                        \n                                            onBlur\n                                        \n                                \n                                \n                                        \n                                            onChangeText\n                                        \n                                \n                                \n                                        \n                                            onFocus\n                                        \n                                \n                                \n                                        \n                                            onKeyPress\n                                        \n                                \n                                \n                                        \n                                            placeholder\n                                        \n                                \n                                \n                                        \n                                            secureTextEntry\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the field is disabled\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether to show error state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Field index\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputRef\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputRef:     React.RefObject\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.RefObject\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ref for the TextInput\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isFocused\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFocused:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether this field is focused\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onBlur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onBlur:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when field loses focus\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onChangeText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onChangeText:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when value changes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onFocus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when field is focused\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onKeyPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onKeyPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when key is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placeholder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placeholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Placeholder character\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secureTextEntry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secureTextEntry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether to secure text entry\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current digit value\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface OTPInputProps {\n  /** Current OTP value */\n  value: string;\n\n  /** Callback when OTP value changes */\n  onChangeText: (otp: string) => void;\n\n  /** Callback when OTP input is completed (all digits entered) */\n  onComplete?: (otp: string) => void;\n\n  /** Number of OTP digits (default: 6) */\n  length?: number;\n\n  /** Whether the input is disabled */\n  disabled?: boolean;\n\n  /** Whether to show error state */\n  hasError?: boolean;\n\n  /** Error message to display */\n  errorMessage?: string;\n\n  /** Whether to auto-focus first input on mount */\n  autoFocus?: boolean;\n\n  /** Whether inputs are secure (hide digits) */\n  secureTextEntry?: boolean;\n\n  /** Placeholder character for empty inputs */\n  placeholder?: string;\n\n  /** Test ID for testing */\n  testID?: string;\n\n  /** Accessibility label */\n  accessibilityLabel?: string;\n}\n\n/**\n * Individual OTP Input Field Props\n */\nexport interface OTPInputFieldProps {\n  /** Current digit value */\n  value: string;\n\n  /** Field index */\n  index: number;\n\n  /** Whether this field is focused */\n  isFocused: boolean;\n\n  /** Whether to show error state */\n  hasError: boolean;\n\n  /** Whether the field is disabled */\n  disabled: boolean;\n\n  /** Whether to secure text entry */\n  secureTextEntry: boolean;\n\n  /** Placeholder character */\n  placeholder: string;\n\n  /** Callback when value changes */\n  onChangeText: (text: string, index: number) => void;\n\n  /** Callback when key is pressed */\n  onKeyPress: (key: string, index: number) => void;\n\n  /** Callback when field is focused */\n  onFocus: (index: number) => void;\n\n  /** Callback when field loses focus */\n  onBlur: (index: number) => void;\n\n  /** Ref for the TextInput */\n  inputRef: React.RefObject;\n\n  /** Test ID */\n  testID?: string;\n}\n\n/**\n * OTP Input State\n */\nexport interface OTPInputState {\n  /** Array of digit values */\n  digits: string[];\n\n  /** Currently focused field index */\n  focusedIndex: number;\n\n  /** Whether any field is focused */\n  isFocused: boolean;\n}\n\n/**\n * OTP Input Constants\n */\nexport const OTP_INPUT_CONSTANTS = {\n  DEFAULT_LENGTH: 6,\n  MIN_LENGTH: 4,\n  MAX_LENGTH: 8,\n  DEFAULT_PLACEHOLDER: '○',\n  FILLED_PLACEHOLDER: '●',\n} as const;\n\n/**\n * Key codes for handling keyboard input\n */\nexport const OTP_KEY_CODES = {\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete',\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  TAB: 'Tab',\n  ENTER: 'Enter',\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OTPInputProps.html":{"url":"interfaces/OTPInputProps.html","title":"interface - OTPInputProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OTPInputProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/OTPInput.ts\n        \n\n\n            \n                Description\n            \n            \n                OTP Input Component Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessibilityLabel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasError\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            length\n                                        \n                                \n                                \n                                        \n                                            onChangeText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onComplete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            placeholder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secureTextEntry\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessibilityLabel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessibilityLabel:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Accessibility label\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoFocus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to auto-focus first input on mount\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether the input is disabled\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Error message to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show error state\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        length\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        length:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of OTP digits (default: 6)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onChangeText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onChangeText:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when OTP value changes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onComplete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onComplete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Callback when OTP input is completed (all digits entered)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placeholder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placeholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Placeholder character for empty inputs\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secureTextEntry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secureTextEntry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether inputs are secure (hide digits)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current OTP value\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface OTPInputProps {\n  /** Current OTP value */\n  value: string;\n\n  /** Callback when OTP value changes */\n  onChangeText: (otp: string) => void;\n\n  /** Callback when OTP input is completed (all digits entered) */\n  onComplete?: (otp: string) => void;\n\n  /** Number of OTP digits (default: 6) */\n  length?: number;\n\n  /** Whether the input is disabled */\n  disabled?: boolean;\n\n  /** Whether to show error state */\n  hasError?: boolean;\n\n  /** Error message to display */\n  errorMessage?: string;\n\n  /** Whether to auto-focus first input on mount */\n  autoFocus?: boolean;\n\n  /** Whether inputs are secure (hide digits) */\n  secureTextEntry?: boolean;\n\n  /** Placeholder character for empty inputs */\n  placeholder?: string;\n\n  /** Test ID for testing */\n  testID?: string;\n\n  /** Accessibility label */\n  accessibilityLabel?: string;\n}\n\n/**\n * Individual OTP Input Field Props\n */\nexport interface OTPInputFieldProps {\n  /** Current digit value */\n  value: string;\n\n  /** Field index */\n  index: number;\n\n  /** Whether this field is focused */\n  isFocused: boolean;\n\n  /** Whether to show error state */\n  hasError: boolean;\n\n  /** Whether the field is disabled */\n  disabled: boolean;\n\n  /** Whether to secure text entry */\n  secureTextEntry: boolean;\n\n  /** Placeholder character */\n  placeholder: string;\n\n  /** Callback when value changes */\n  onChangeText: (text: string, index: number) => void;\n\n  /** Callback when key is pressed */\n  onKeyPress: (key: string, index: number) => void;\n\n  /** Callback when field is focused */\n  onFocus: (index: number) => void;\n\n  /** Callback when field loses focus */\n  onBlur: (index: number) => void;\n\n  /** Ref for the TextInput */\n  inputRef: React.RefObject;\n\n  /** Test ID */\n  testID?: string;\n}\n\n/**\n * OTP Input State\n */\nexport interface OTPInputState {\n  /** Array of digit values */\n  digits: string[];\n\n  /** Currently focused field index */\n  focusedIndex: number;\n\n  /** Whether any field is focused */\n  isFocused: boolean;\n}\n\n/**\n * OTP Input Constants\n */\nexport const OTP_INPUT_CONSTANTS = {\n  DEFAULT_LENGTH: 6,\n  MIN_LENGTH: 4,\n  MAX_LENGTH: 8,\n  DEFAULT_PLACEHOLDER: '○',\n  FILLED_PLACEHOLDER: '●',\n} as const;\n\n/**\n * Key codes for handling keyboard input\n */\nexport const OTP_KEY_CODES = {\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete',\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  TAB: 'Tab',\n  ENTER: 'Enter',\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OTPInputState.html":{"url":"interfaces/OTPInputState.html","title":"interface - OTPInputState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OTPInputState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/OTPInput.ts\n        \n\n\n            \n                Description\n            \n            \n                OTP Input State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            digits\n                                        \n                                \n                                \n                                        \n                                            focusedIndex\n                                        \n                                \n                                \n                                        \n                                            isFocused\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        digits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        digits:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Array of digit values\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        focusedIndex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        focusedIndex:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Currently focused field index\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isFocused\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFocused:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether any field is focused\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface OTPInputProps {\n  /** Current OTP value */\n  value: string;\n\n  /** Callback when OTP value changes */\n  onChangeText: (otp: string) => void;\n\n  /** Callback when OTP input is completed (all digits entered) */\n  onComplete?: (otp: string) => void;\n\n  /** Number of OTP digits (default: 6) */\n  length?: number;\n\n  /** Whether the input is disabled */\n  disabled?: boolean;\n\n  /** Whether to show error state */\n  hasError?: boolean;\n\n  /** Error message to display */\n  errorMessage?: string;\n\n  /** Whether to auto-focus first input on mount */\n  autoFocus?: boolean;\n\n  /** Whether inputs are secure (hide digits) */\n  secureTextEntry?: boolean;\n\n  /** Placeholder character for empty inputs */\n  placeholder?: string;\n\n  /** Test ID for testing */\n  testID?: string;\n\n  /** Accessibility label */\n  accessibilityLabel?: string;\n}\n\n/**\n * Individual OTP Input Field Props\n */\nexport interface OTPInputFieldProps {\n  /** Current digit value */\n  value: string;\n\n  /** Field index */\n  index: number;\n\n  /** Whether this field is focused */\n  isFocused: boolean;\n\n  /** Whether to show error state */\n  hasError: boolean;\n\n  /** Whether the field is disabled */\n  disabled: boolean;\n\n  /** Whether to secure text entry */\n  secureTextEntry: boolean;\n\n  /** Placeholder character */\n  placeholder: string;\n\n  /** Callback when value changes */\n  onChangeText: (text: string, index: number) => void;\n\n  /** Callback when key is pressed */\n  onKeyPress: (key: string, index: number) => void;\n\n  /** Callback when field is focused */\n  onFocus: (index: number) => void;\n\n  /** Callback when field loses focus */\n  onBlur: (index: number) => void;\n\n  /** Ref for the TextInput */\n  inputRef: React.RefObject;\n\n  /** Test ID */\n  testID?: string;\n}\n\n/**\n * OTP Input State\n */\nexport interface OTPInputState {\n  /** Array of digit values */\n  digits: string[];\n\n  /** Currently focused field index */\n  focusedIndex: number;\n\n  /** Whether any field is focused */\n  isFocused: boolean;\n}\n\n/**\n * OTP Input Constants\n */\nexport const OTP_INPUT_CONSTANTS = {\n  DEFAULT_LENGTH: 6,\n  MIN_LENGTH: 4,\n  MAX_LENGTH: 8,\n  DEFAULT_PLACEHOLDER: '○',\n  FILLED_PLACEHOLDER: '●',\n} as const;\n\n/**\n * Key codes for handling keyboard input\n */\nexport const OTP_KEY_CODES = {\n  BACKSPACE: 'Backspace',\n  DELETE: 'Delete',\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  TAB: 'Tab',\n  ENTER: 'Enter',\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedRequest.html":{"url":"interfaces/PaginatedRequest.html","title":"interface - PaginatedRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/apiHelpers.ts\n        \n\n\n            \n                Description\n            \n            \n                API Request Types\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            search\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sortOrder\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        search\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        search:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sortOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sortOrder:     \"asc\" | \"desc\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"asc\" | \"desc\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {AppConfig} from '../config/environments';\n\n/**\n * API Response Types\n */\nexport interface ApiResponse {\n  success: boolean;\n  data: T | null;\n  error: ApiError | null;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: number;\n  message: string;\n  details?: any;\n}\n\n/**\n * API Request Types\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * HTTP Methods\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request configuration\n */\nexport interface RequestConfig {\n  method?: HttpMethod;\n  headers?: Record;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Build API URL with base URL\n */\nexport const buildApiUrl = (endpoint: string): string => {\n  const baseUrl = AppConfig.BASE_API_URL.replace(/\\/$/, ''); // Remove trailing slash\n  const cleanEndpoint = endpoint.replace(/^\\//, ''); // Remove leading slash\n  return `${baseUrl}/api/v1/${cleanEndpoint}`;\n};\n\n/**\n * Build query parameters string\n */\nexport const buildQueryParams = (params: Record): string => {\n  const cleanParams = Object.entries(params)\n    .filter(\n      ([_, value]) => value !== undefined && value !== null && value !== ''\n    )\n    .map(([key, value]) => [key, String(value)]);\n\n  if (cleanParams.length === 0) {\n    return '';\n  }\n\n  const searchParams = new URLSearchParams(cleanParams);\n  return `?${searchParams.toString()}`;\n};\n\n/**\n * Get request headers with common defaults\n */\nexport const getRequestHeaders = (\n  token?: string,\n  additionalHeaders?: Record\n): Record => {\n  const headers: Record = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'X-App-Version': '1.0.0',\n    'X-Platform': 'mobile',\n    ...additionalHeaders,\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n/**\n * Parse API error response\n */\nexport const parseApiError = (error: any): ApiError => {\n  // Handle different error formats\n  if (error?.data?.error) {\n    return {\n      code: error.status || 500,\n      message: error.data.error.message || 'An error occurred',\n      details: error.data.error.details,\n    };\n  }\n\n  if (error?.data?.message) {\n    return {\n      code: error.status || 500,\n      message: error.data.message,\n      details: error.data,\n    };\n  }\n\n  if (error?.message) {\n    return {\n      code: error.status || 500,\n      message: error.message,\n      details: error,\n    };\n  }\n\n  return {\n    code: error?.status || 500,\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if error is a network error\n */\nexport const isNetworkError = (error: any): boolean => {\n  return (\n    error?.name === 'NetworkError' ||\n    error?.code === 'NETWORK_ERROR' ||\n    error?.status === 0 ||\n    !navigator.onLine\n  );\n};\n\n/**\n * Check if error requires authentication\n */\nexport const isAuthError = (error: any): boolean => {\n  return error?.status === 401 || error?.status === 403;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isNetworkError(error)) {\n    return true;\n  }\n\n  const retryableStatuses = [408, 429, 500, 502, 503, 504];\n  return retryableStatuses.includes(error?.status);\n};\n\n/**\n * Calculate retry delay with exponential backoff\n */\nexport const calculateRetryDelay = (\n  attempt: number,\n  baseDelay: number = 1000\n): number => {\n  // Exponential backoff: baseDelay * 2^attempt + random jitter\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\n  const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n  return Math.min(exponentialDelay + jitter, 30000); // Cap at 30 seconds\n};\n\n/**\n * Format file size for uploads\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Validate file for upload\n */\nexport const validateFileUpload = (\n  file: {size: number; type: string; name: string},\n  options: {\n    maxSize?: number;\n    allowedTypes?: string[];\n    allowedExtensions?: string[];\n  } = {}\n): {valid: boolean; error?: string} => {\n  const {\n    maxSize = 10 * 1024 * 1024, // 10MB default\n    allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.pdf'],\n  } = options;\n\n  // Check file size\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: `File size must be less than ${formatFileSize(maxSize)}`,\n    };\n  }\n\n  // Check file type\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  // Check file extension\n  const extension = file.name\n    .toLowerCase()\n    .substring(file.name.lastIndexOf('.'));\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `File extension ${extension} is not allowed`,\n    };\n  }\n\n  return {valid: true};\n};\n\n/**\n * Debug API request/response\n */\nexport const debugApiCall = (\n  method: string,\n  url: string,\n  request?: any,\n  response?: any,\n  error?: any\n) => {\n  if (!__DEV__) {\n    return;\n  }\n\n  console.group(`[API] ${method} ${url}`);\n\n  if (request) {\n    console.log('Request:', request);\n  }\n\n  if (response) {\n    console.log('Response:', response);\n  }\n\n  if (error) {\n    console.error('Error:', error);\n  }\n\n  console.groupEnd();\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResponse.html":{"url":"interfaces/PaginatedResponse.html","title":"interface - PaginatedResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/apiHelpers.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            pagination\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pagination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pagination:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {AppConfig} from '../config/environments';\n\n/**\n * API Response Types\n */\nexport interface ApiResponse {\n  success: boolean;\n  data: T | null;\n  error: ApiError | null;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: number;\n  message: string;\n  details?: any;\n}\n\n/**\n * API Request Types\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * HTTP Methods\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request configuration\n */\nexport interface RequestConfig {\n  method?: HttpMethod;\n  headers?: Record;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Build API URL with base URL\n */\nexport const buildApiUrl = (endpoint: string): string => {\n  const baseUrl = AppConfig.BASE_API_URL.replace(/\\/$/, ''); // Remove trailing slash\n  const cleanEndpoint = endpoint.replace(/^\\//, ''); // Remove leading slash\n  return `${baseUrl}/api/v1/${cleanEndpoint}`;\n};\n\n/**\n * Build query parameters string\n */\nexport const buildQueryParams = (params: Record): string => {\n  const cleanParams = Object.entries(params)\n    .filter(\n      ([_, value]) => value !== undefined && value !== null && value !== ''\n    )\n    .map(([key, value]) => [key, String(value)]);\n\n  if (cleanParams.length === 0) {\n    return '';\n  }\n\n  const searchParams = new URLSearchParams(cleanParams);\n  return `?${searchParams.toString()}`;\n};\n\n/**\n * Get request headers with common defaults\n */\nexport const getRequestHeaders = (\n  token?: string,\n  additionalHeaders?: Record\n): Record => {\n  const headers: Record = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'X-App-Version': '1.0.0',\n    'X-Platform': 'mobile',\n    ...additionalHeaders,\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n/**\n * Parse API error response\n */\nexport const parseApiError = (error: any): ApiError => {\n  // Handle different error formats\n  if (error?.data?.error) {\n    return {\n      code: error.status || 500,\n      message: error.data.error.message || 'An error occurred',\n      details: error.data.error.details,\n    };\n  }\n\n  if (error?.data?.message) {\n    return {\n      code: error.status || 500,\n      message: error.data.message,\n      details: error.data,\n    };\n  }\n\n  if (error?.message) {\n    return {\n      code: error.status || 500,\n      message: error.message,\n      details: error,\n    };\n  }\n\n  return {\n    code: error?.status || 500,\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if error is a network error\n */\nexport const isNetworkError = (error: any): boolean => {\n  return (\n    error?.name === 'NetworkError' ||\n    error?.code === 'NETWORK_ERROR' ||\n    error?.status === 0 ||\n    !navigator.onLine\n  );\n};\n\n/**\n * Check if error requires authentication\n */\nexport const isAuthError = (error: any): boolean => {\n  return error?.status === 401 || error?.status === 403;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isNetworkError(error)) {\n    return true;\n  }\n\n  const retryableStatuses = [408, 429, 500, 502, 503, 504];\n  return retryableStatuses.includes(error?.status);\n};\n\n/**\n * Calculate retry delay with exponential backoff\n */\nexport const calculateRetryDelay = (\n  attempt: number,\n  baseDelay: number = 1000\n): number => {\n  // Exponential backoff: baseDelay * 2^attempt + random jitter\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\n  const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n  return Math.min(exponentialDelay + jitter, 30000); // Cap at 30 seconds\n};\n\n/**\n * Format file size for uploads\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Validate file for upload\n */\nexport const validateFileUpload = (\n  file: {size: number; type: string; name: string},\n  options: {\n    maxSize?: number;\n    allowedTypes?: string[];\n    allowedExtensions?: string[];\n  } = {}\n): {valid: boolean; error?: string} => {\n  const {\n    maxSize = 10 * 1024 * 1024, // 10MB default\n    allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.pdf'],\n  } = options;\n\n  // Check file size\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: `File size must be less than ${formatFileSize(maxSize)}`,\n    };\n  }\n\n  // Check file type\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  // Check file extension\n  const extension = file.name\n    .toLowerCase()\n    .substring(file.name.lastIndexOf('.'));\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `File extension ${extension} is not allowed`,\n    };\n  }\n\n  return {valid: true};\n};\n\n/**\n * Debug API request/response\n */\nexport const debugApiCall = (\n  method: string,\n  url: string,\n  request?: any,\n  response?: any,\n  error?: any\n) => {\n  if (!__DEV__) {\n    return;\n  }\n\n  console.group(`[API] ${method} ${url}`);\n\n  if (request) {\n    console.log('Request:', request);\n  }\n\n  if (response) {\n    console.log('Response:', response);\n  }\n\n  if (error) {\n    console.error('Error:', error);\n  }\n\n  console.groupEnd();\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PersistenceLoadingProps.html":{"url":"interfaces/PersistenceLoadingProps.html","title":"interface - PersistenceLoadingProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PersistenceLoadingProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/feedback/LoadingOverlay.tsx\n        \n\n\n            \n                Description\n            \n            \n                Persistence Loading Overlay Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            progress\n                                        \n                                \n                                \n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        progress:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:     \"initializing\" | \"rehydrating\" | \"migrating\" | \"complete\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"initializing\" | \"rehydrating\" | \"migrating\" | \"complete\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {ActivityIndicator, Modal, StyleSheet, Text, View} from 'react-native';\nimport {useAppTheme} from '../../theme/ThemeProvider';\n\n/**\n * Loading Overlay Props\n */\nexport interface LoadingOverlayProps {\n  visible: boolean;\n  message?: string;\n  transparent?: boolean;\n  size?: 'small' | 'large';\n  color?: string;\n}\n\n/**\n * Persistence Loading Overlay Props\n */\ninterface PersistenceLoadingProps {\n  visible: boolean;\n  stage: 'initializing' | 'rehydrating' | 'migrating' | 'complete';\n  progress?: number;\n}\n\n/**\n * Persistence Loading Overlay Component\n * Specialized loading overlay for Redux persistence operations\n */\nexport const PersistenceLoadingOverlay: React.FC = ({\n  visible,\n  stage,\n  progress,\n}) => {\n  const theme = useAppTheme();\n\n  const getStageMessage = () => {\n    switch (stage) {\n      case 'initializing':\n        return 'Initializing app...';\n      case 'rehydrating':\n        return 'Restoring your data...';\n      case 'migrating':\n        return 'Updating app data...';\n      case 'complete':\n        return 'Ready!';\n      default:\n        return 'Loading...';\n    }\n  };\n\n  const getStageIcon = () => {\n    switch (stage) {\n      case 'initializing':\n        return '🚀';\n      case 'rehydrating':\n        return '💾';\n      case 'migrating':\n        return '🔄';\n      case 'complete':\n        return '✅';\n      default:\n        return '⏳';\n    }\n  };\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    \n      \n        \n          {/* Stage Icon */}\n          {getStageIcon()}\n\n          {/* Loading Spinner */}\n          \n\n          {/* Stage Message */}\n          \n            {getStageMessage()}\n          \n\n          {/* Progress Bar */}\n          {progress !== undefined && (\n            \n              \n            \n          )}\n\n          {/* Progress Text */}\n          {progress !== undefined && (\n            \n              {Math.round(progress)}%\n            \n          )}\n        \n      \n    \n  );\n};\n\n/**\n * Loading Overlay Component\n * Shows a loading spinner with optional message over the current screen\n */\nconst LoadingOverlay: React.FC = ({\n  visible,\n  message,\n  transparent = false,\n  size = 'large',\n  color,\n}) => {\n  const theme = useAppTheme();\n  const spinnerColor = color || theme.colors.primary;\n\n  if (!visible) {\n    return null;\n  }\n\n  return (\n    \n      \n        \n          \n          {message && (\n            \n              {message}\n            \n          )}\n        \n      \n    \n  );\n};\n\nconst stylesLoadingOverlayOriginal = StyleSheet.create({\n  // overlay: {\n  //   flex: 1,\n  //   justifyContent: 'center',\n  //   alignItems: 'center',\n  // },\n  // container: {\n  //   padding: 24,\n  //   borderRadius: 12,\n  //   alignItems: 'center',\n  //   minWidth: 120,\n  // },\n  // spinner: {\n  //   marginBottom: 8,\n  // },\n  // message: {\n  //   textAlign: 'center',\n  //   marginTop: 8,\n  // },\n});\n\nconst persistenceStyles = StyleSheet.create({\n  // stageIcon: {\n  //   fontSize: 32,\n  //   marginBottom: 16,\n  // },\n  // progressContainer: {\n  //   width: '100%',\n  //   height: 4,\n  //   borderRadius: 2,\n  //   marginTop: 16,\n  //   overflow: 'hidden',\n  // },\n  // progressBar: {\n  //   height: '100%',\n  //   borderRadius: 2,\n  // },\n  // progressText: {\n  //   marginTop: 8,\n  //   textAlign: 'center',\n  // },\n});\n\n// Merge styles\nconst allStyles = StyleSheet.create({\n  ...stylesLoadingOverlayOriginal,\n  ...persistenceStyles,\n});\n\n// Update the styles reference\nconst styles = allStyles;\n\nexport default LoadingOverlay;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PersistenceStatus.html":{"url":"interfaces/PersistenceStatus.html","title":"interface - PersistenceStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PersistenceStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/usePersistenceStatus.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            flush\n                                        \n                                \n                                \n                                        \n                                            isPersisting\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     Error | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Error | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Latest persistence error, if any\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        flush\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flush:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Manual flush function to trigger persistence\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPersisting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPersisting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether persistence is currently in progress\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useEffect, useState, useCallback} from 'react';\nimport {persistor} from '../store';\n\ninterface PersistenceStatus {\n  /** Whether persistence is currently in progress */\n  isPersisting: boolean;\n  /** Latest persistence error, if any */\n  error: Error | null;\n  /** Manual flush function to trigger persistence */\n  flush: () => Promise;\n}\n\nexport const usePersistenceStatus = (): PersistenceStatus => {\n  const [isPersisting, setIsPersisting] = useState(false);\n  const [error, setError] = useState(null);\n\n  /**\n   * Manual flush function\n   */\n  const flush = useCallback(async (): Promise => {\n    try {\n      setIsPersisting(true);\n      setError(null);\n\n      console.log('[usePersistenceStatus] Starting manual flush...');\n\n      // Trigger persistence flush\n      await persistor.flush();\n\n      console.log('[usePersistenceStatus] Manual flush completed');\n    } catch (err) {\n      const error =\n        err instanceof Error ? err : new Error('Persistence failed');\n      console.error('[usePersistenceStatus] Flush error:', error);\n      setError(error);\n    } finally {\n      setIsPersisting(false);\n    }\n  }, []);\n\n  /**\n   * Monitor persistor state changes\n   */\n  useEffect(() => {\n    const handlePersistorStateChange = () => {\n      const state = persistor.getState();\n\n      // Check if persistence is in progress\n      const isCurrentlyPersisting = state.registry.length > 0;\n\n      if (isCurrentlyPersisting !== isPersisting) {\n        console.log('[usePersistenceStatus] Persistence state changed:', {\n          isPersisting: isCurrentlyPersisting,\n          registry: state.registry,\n        });\n        setIsPersisting(isCurrentlyPersisting);\n      }\n    };\n\n    // Initial check\n    handlePersistorStateChange();\n\n    // Subscribe to changes\n    const unsubscribe = persistor.subscribe(handlePersistorStateChange);\n\n    return () => {\n      unsubscribe();\n    };\n  }, [isPersisting]);\n\n  return {\n    isPersisting,\n    error,\n    flush,\n  };\n};\n\nexport default usePersistenceStatus;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileApiError.html":{"url":"interfaces/ProfileApiError.html","title":"interface - ProfileApiError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileApiError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile API error response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileData.html":{"url":"interfaces/ProfileData.html","title":"interface - ProfileData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Complete profile data structure returned from GET /api/v1/profile\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            avatar\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            language\n                                        \n                                \n                                \n                                        \n                                            lastLoginAt\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            timezone\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        avatar:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Avatar image URL (nullable)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's email address\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    First name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        language\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        language:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's language preference\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastLoginAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastLoginAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last login timestamp\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's full name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's phone number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Account status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timezone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timezone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User's timezone\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Profile last updated timestamp\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique user identifier\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileFormData.html":{"url":"interfaces/ProfileFormData.html","title":"interface - ProfileFormData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileFormData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/forms/ProfileForm.tsx\n        \n\n\n            \n                Description\n            \n            \n                Profile form data interface (matches form fields)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {useCallback, useMemo, useEffect} from 'react';\nimport {useFormContext} from 'react-hook-form';\nimport {View, Text, StyleSheet} from 'react-native';\nimport {Button, TextInput} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {ProfileData, UpdateProfileRequest} from '../../types/Profile';\nimport {\n  profileValidationRules,\n  sanitizeProfileData,\n} from '../../utils/profileValidation';\nimport FormProviderWrapper from './FormProviderWrapper';\n\n/**\n * Profile form data interface (matches form fields)\n */\ninterface ProfileFormData {\n  name: string;\n  email: string;\n  phone: string; // Read-only, for display only\n}\n\n/**\n * Profile form props\n */\nexport interface ProfileFormProps {\n  /** Initial profile data to populate the form */\n  initialData?: ProfileData;\n  /** Callback when form is submitted with valid data */\n  onSubmit: (data: UpdateProfileRequest) => void;\n  /** Loading state during form submission */\n  isLoading?: boolean;\n  /** Error message to display */\n  errorMessage?: string;\n  /** Test ID for testing purposes */\n  testID?: string;\n}\n\n/**\n * Profile Form Fields Component (uses useFormContext)\n */\nconst ProfileFormFields: React.FC void; // Add this prop to trigger submission\n}> = ({initialData, isLoading, onFormSubmit}) => {\n  const theme = useAppTheme();\n  const {\n    register,\n    setValue,\n    watch,\n    formState: {errors, isDirty},\n    reset,\n    trigger,\n  } = useFormContext();\n\n  // Watch form values for real-time validation\n  const nameValue = watch('name');\n  const emailValue = watch('email');\n\n  // Register fields with validation rules\n  useEffect(() => {\n    register('name', profileValidationRules.name);\n    register('email', profileValidationRules.email);\n    register('phone'); // Read-only field\n  }, [register]);\n\n  // Set initial values when data is available\n  useEffect(() => {\n    if (initialData) {\n      setValue('name', initialData.name || '');\n      setValue('email', initialData.email || '');\n      setValue('phone', initialData.phone || '');\n    }\n  }, [initialData, setValue]);\n\n  /**\n   * Handle name field changes\n   */\n  const handleNameChange = useCallback(\n    (text: string) => {\n      console.log('[ProfileForm] Name changed:', text);\n      setValue('name', text, {shouldValidate: true, shouldDirty: true});\n    },\n    [setValue]\n  );\n\n  /**\n   * Handle email field changes\n   */\n  const handleEmailChange = useCallback(\n    (text: string) => {\n      console.log('[ProfileForm] Email changed:', text);\n      setValue('email', text, {shouldValidate: true, shouldDirty: true});\n    },\n    [setValue]\n  );\n\n  /**\n   * Reset form to initial values\n   */\n  const handleReset = useCallback(() => {\n    console.log('[ProfileForm] Resetting form');\n    if (initialData) {\n      reset({\n        name: initialData.name || '',\n        email: initialData.email || '',\n        phone: initialData.phone || '',\n      });\n    }\n  }, [reset, initialData]);\n\n  /**\n   * Handle form submission\n   */\n  const handleUpdatePress = useCallback(async () => {\n    console.log('[ProfileForm] Update button pressed');\n    console.log('[ProfileForm] Current form state:', {\n      isDirty,\n      errors: Object.keys(errors),\n      nameValue,\n      emailValue,\n    });\n\n    // Trigger validation\n    const isValid = await trigger();\n    console.log('[ProfileForm] Form validation result:', isValid);\n\n    if (isValid && isDirty) {\n      console.log('[ProfileForm] Form is valid and dirty, submitting...');\n      onFormSubmit(); // Call the parent's submit function\n    } else {\n      console.log('[ProfileForm] Form not submitted:', {\n        isValid,\n        isDirty,\n        errors,\n      });\n    }\n  }, [onFormSubmit, isDirty, errors, trigger, nameValue, emailValue]);\n\n  /**\n   * Check if form has valid changes\n   */\n  const hasValidChanges = useMemo(() => {\n    const isValid = Object.keys(errors).length === 0;\n    console.log('[ProfileForm] Form state check:', {\n      isDirty,\n      isValid,\n      hasValidChanges: isDirty && isValid,\n    });\n    return isDirty && isValid;\n  }, [isDirty, errors]);\n\n  return (\n    \n      {/* Phone Number - Read Only Display */}\n      \n        \n          Phone Number\n        \n        \n          \n          \n            {initialData?.phone || 'Not available'}\n          \n        \n        \n          Phone number cannot be changed\n        \n      \n\n      {/* Name Field */}\n      \n      {errors.name && (\n        \n          {errors.name.message}\n        \n      )}\n      \n        {(nameValue || '').length}/100 characters\n      \n\n      {/* Email Field */}\n      \n      {errors.email && (\n        \n          {errors.email.message}\n        \n      )}\n\n      {/* Action Buttons */}\n      \n        {/* Reset Button */}\n         (\n            \n          )}\n          testID=\"reset-button\"\n          accessibilityLabel=\"Reset form to original values\"\n          accessibilityHint={\n            isDirty\n              ? 'Reset all changes and restore original values'\n              : 'No changes to reset'\n          }\n        >\n          Reset\n        \n\n        {/* Update Button - FIXED */}\n         (\n            \n          )}\n          testID=\"update-button\"\n          accessibilityLabel={\n            isLoading\n              ? 'Updating profile'\n              : hasValidChanges\n              ? 'Save profile changes'\n              : 'No changes to save'\n          }\n          accessibilityHint={\n            isLoading\n              ? 'Please wait, saving your profile changes'\n              : !isDirty\n              ? 'Make changes to enable this button'\n              : !hasValidChanges\n              ? 'Please fix form errors first'\n              : 'Save your profile changes'\n          }\n        >\n          {isLoading ? 'Updating...' : 'Update Profile'}\n        \n      \n    \n  );\n};\n\n/**\n * Profile Form Component\n */\nconst ProfileForm: React.FC = ({\n  initialData,\n  onSubmit,\n  isLoading = false,\n  errorMessage,\n  testID = 'profile-form',\n}) => {\n  const theme = useAppTheme();\n\n  /**\n   * Prepare default values from initial data\n   */\n  const defaultValues: ProfileFormData = useMemo(() => {\n    console.log('[ProfileForm] Setting default values:', initialData);\n    return {\n      name: initialData?.name || '',\n      email: initialData?.email || '',\n      phone: initialData?.phone || '', // Read-only field\n    };\n  }, [initialData]);\n\n  /**\n   * Handle form submission with data sanitization\n   */\n  const handleSubmit = useCallback(\n    (formData: ProfileFormData) => {\n      console.log('[ProfileForm] Form submitted with data:', formData);\n\n      // Sanitize and prepare data for API\n      const sanitizedData = sanitizeProfileData({\n        name: formData.name,\n        email: formData.email,\n      });\n\n      console.log('[ProfileForm] Sanitized data:', sanitizedData);\n\n      // Only submit if there's actually data to update\n      if (Object.keys(sanitizedData).length > 0) {\n        console.log('[ProfileForm] Calling onSubmit with sanitized data');\n        onSubmit(sanitizedData);\n      } else {\n        console.log('[ProfileForm] No changes to submit');\n      }\n    },\n    [onSubmit]\n  );\n\n  /**\n   * Handle form submission trigger from child component\n   */\n  const handleFormSubmit = useCallback(() => {\n    console.log('[ProfileForm] handleFormSubmit called');\n    // This will be called by the FormProviderWrapper's onSubmit method\n  }, []);\n\n  /**\n   * Render error message if provided\n   */\n  const renderErrorMessage = useCallback(() => {\n    if (!errorMessage) {\n      return null;\n    }\n\n    return (\n      \n        \n        \n          {errorMessage}\n        \n      \n    );\n  }, [errorMessage, theme]);\n\n  return (\n    \n      {/* Error Message */}\n      {renderErrorMessage()}\n\n      {/* Form */}\n      \n        {methods => (\n          \n            {/* Header */}\n            \n              \n              \n                Profile Information\n              \n            \n\n            \n              Update your personal information. All fields are optional.\n            \n\n            {/* Form Fields */}\n            \n          \n        )}\n      \n    \n  );\n};\n\n/**\n * Styles (same as before)\n */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  formContent: {\n    flex: 1,\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginLeft: 12,\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    marginBottom: 24,\n    lineHeight: 20,\n  },\n  fieldsContainer: {\n    flex: 1,\n    marginBottom: 24,\n  },\n  readOnlyFieldContainer: {\n    marginBottom: 16,\n  },\n  readOnlyLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  readOnlyValueContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    minHeight: 48,\n  },\n  readOnlyIcon: {\n    marginRight: 12,\n  },\n  readOnlyValue: {\n    fontSize: 16,\n    flex: 1,\n  },\n  readOnlyHelper: {\n    fontSize: 12,\n    marginTop: 4,\n    fontStyle: 'italic',\n  },\n  textInput: {\n    backgroundColor: 'transparent',\n    marginBottom: 4,\n  },\n  errorText: {\n    fontSize: 12,\n    marginLeft: 16,\n    marginTop: 4,\n    marginBottom: 4,\n  },\n  charCountText: {\n    fontSize: 12,\n    textAlign: 'right',\n    marginRight: 16,\n    marginBottom: 16,\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: '#E0E0E0',\n  },\n  resetButton: {\n    flex: 1,\n    marginRight: 8,\n  },\n  updateButton: {\n    flex: 1,\n    marginLeft: 8,\n  },\n  errorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  errorMessageText: {\n    fontSize: 14,\n    marginLeft: 8,\n    flex: 1,\n  },\n});\n\nexport default ProfileForm;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileFormProps.html":{"url":"interfaces/ProfileFormProps.html","title":"interface - ProfileFormProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileFormProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/forms/ProfileForm.tsx\n        \n\n\n            \n                Description\n            \n            \n                Profile form props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            initialData\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                        \n                                            onSubmit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Error message to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        initialData:         ProfileData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ProfileData\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Initial profile data to populate the form\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Loading state during form submission\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onSubmit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onSubmit:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when form is submitted with valid data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing purposes\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React, {useCallback, useMemo, useEffect} from 'react';\nimport {useFormContext} from 'react-hook-form';\nimport {View, Text, StyleSheet} from 'react-native';\nimport {Button, TextInput} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {ProfileData, UpdateProfileRequest} from '../../types/Profile';\nimport {\n  profileValidationRules,\n  sanitizeProfileData,\n} from '../../utils/profileValidation';\nimport FormProviderWrapper from './FormProviderWrapper';\n\n/**\n * Profile form data interface (matches form fields)\n */\ninterface ProfileFormData {\n  name: string;\n  email: string;\n  phone: string; // Read-only, for display only\n}\n\n/**\n * Profile form props\n */\nexport interface ProfileFormProps {\n  /** Initial profile data to populate the form */\n  initialData?: ProfileData;\n  /** Callback when form is submitted with valid data */\n  onSubmit: (data: UpdateProfileRequest) => void;\n  /** Loading state during form submission */\n  isLoading?: boolean;\n  /** Error message to display */\n  errorMessage?: string;\n  /** Test ID for testing purposes */\n  testID?: string;\n}\n\n/**\n * Profile Form Fields Component (uses useFormContext)\n */\nconst ProfileFormFields: React.FC void; // Add this prop to trigger submission\n}> = ({initialData, isLoading, onFormSubmit}) => {\n  const theme = useAppTheme();\n  const {\n    register,\n    setValue,\n    watch,\n    formState: {errors, isDirty},\n    reset,\n    trigger,\n  } = useFormContext();\n\n  // Watch form values for real-time validation\n  const nameValue = watch('name');\n  const emailValue = watch('email');\n\n  // Register fields with validation rules\n  useEffect(() => {\n    register('name', profileValidationRules.name);\n    register('email', profileValidationRules.email);\n    register('phone'); // Read-only field\n  }, [register]);\n\n  // Set initial values when data is available\n  useEffect(() => {\n    if (initialData) {\n      setValue('name', initialData.name || '');\n      setValue('email', initialData.email || '');\n      setValue('phone', initialData.phone || '');\n    }\n  }, [initialData, setValue]);\n\n  /**\n   * Handle name field changes\n   */\n  const handleNameChange = useCallback(\n    (text: string) => {\n      console.log('[ProfileForm] Name changed:', text);\n      setValue('name', text, {shouldValidate: true, shouldDirty: true});\n    },\n    [setValue]\n  );\n\n  /**\n   * Handle email field changes\n   */\n  const handleEmailChange = useCallback(\n    (text: string) => {\n      console.log('[ProfileForm] Email changed:', text);\n      setValue('email', text, {shouldValidate: true, shouldDirty: true});\n    },\n    [setValue]\n  );\n\n  /**\n   * Reset form to initial values\n   */\n  const handleReset = useCallback(() => {\n    console.log('[ProfileForm] Resetting form');\n    if (initialData) {\n      reset({\n        name: initialData.name || '',\n        email: initialData.email || '',\n        phone: initialData.phone || '',\n      });\n    }\n  }, [reset, initialData]);\n\n  /**\n   * Handle form submission\n   */\n  const handleUpdatePress = useCallback(async () => {\n    console.log('[ProfileForm] Update button pressed');\n    console.log('[ProfileForm] Current form state:', {\n      isDirty,\n      errors: Object.keys(errors),\n      nameValue,\n      emailValue,\n    });\n\n    // Trigger validation\n    const isValid = await trigger();\n    console.log('[ProfileForm] Form validation result:', isValid);\n\n    if (isValid && isDirty) {\n      console.log('[ProfileForm] Form is valid and dirty, submitting...');\n      onFormSubmit(); // Call the parent's submit function\n    } else {\n      console.log('[ProfileForm] Form not submitted:', {\n        isValid,\n        isDirty,\n        errors,\n      });\n    }\n  }, [onFormSubmit, isDirty, errors, trigger, nameValue, emailValue]);\n\n  /**\n   * Check if form has valid changes\n   */\n  const hasValidChanges = useMemo(() => {\n    const isValid = Object.keys(errors).length === 0;\n    console.log('[ProfileForm] Form state check:', {\n      isDirty,\n      isValid,\n      hasValidChanges: isDirty && isValid,\n    });\n    return isDirty && isValid;\n  }, [isDirty, errors]);\n\n  return (\n    \n      {/* Phone Number - Read Only Display */}\n      \n        \n          Phone Number\n        \n        \n          \n          \n            {initialData?.phone || 'Not available'}\n          \n        \n        \n          Phone number cannot be changed\n        \n      \n\n      {/* Name Field */}\n      \n      {errors.name && (\n        \n          {errors.name.message}\n        \n      )}\n      \n        {(nameValue || '').length}/100 characters\n      \n\n      {/* Email Field */}\n      \n      {errors.email && (\n        \n          {errors.email.message}\n        \n      )}\n\n      {/* Action Buttons */}\n      \n        {/* Reset Button */}\n         (\n            \n          )}\n          testID=\"reset-button\"\n          accessibilityLabel=\"Reset form to original values\"\n          accessibilityHint={\n            isDirty\n              ? 'Reset all changes and restore original values'\n              : 'No changes to reset'\n          }\n        >\n          Reset\n        \n\n        {/* Update Button - FIXED */}\n         (\n            \n          )}\n          testID=\"update-button\"\n          accessibilityLabel={\n            isLoading\n              ? 'Updating profile'\n              : hasValidChanges\n              ? 'Save profile changes'\n              : 'No changes to save'\n          }\n          accessibilityHint={\n            isLoading\n              ? 'Please wait, saving your profile changes'\n              : !isDirty\n              ? 'Make changes to enable this button'\n              : !hasValidChanges\n              ? 'Please fix form errors first'\n              : 'Save your profile changes'\n          }\n        >\n          {isLoading ? 'Updating...' : 'Update Profile'}\n        \n      \n    \n  );\n};\n\n/**\n * Profile Form Component\n */\nconst ProfileForm: React.FC = ({\n  initialData,\n  onSubmit,\n  isLoading = false,\n  errorMessage,\n  testID = 'profile-form',\n}) => {\n  const theme = useAppTheme();\n\n  /**\n   * Prepare default values from initial data\n   */\n  const defaultValues: ProfileFormData = useMemo(() => {\n    console.log('[ProfileForm] Setting default values:', initialData);\n    return {\n      name: initialData?.name || '',\n      email: initialData?.email || '',\n      phone: initialData?.phone || '', // Read-only field\n    };\n  }, [initialData]);\n\n  /**\n   * Handle form submission with data sanitization\n   */\n  const handleSubmit = useCallback(\n    (formData: ProfileFormData) => {\n      console.log('[ProfileForm] Form submitted with data:', formData);\n\n      // Sanitize and prepare data for API\n      const sanitizedData = sanitizeProfileData({\n        name: formData.name,\n        email: formData.email,\n      });\n\n      console.log('[ProfileForm] Sanitized data:', sanitizedData);\n\n      // Only submit if there's actually data to update\n      if (Object.keys(sanitizedData).length > 0) {\n        console.log('[ProfileForm] Calling onSubmit with sanitized data');\n        onSubmit(sanitizedData);\n      } else {\n        console.log('[ProfileForm] No changes to submit');\n      }\n    },\n    [onSubmit]\n  );\n\n  /**\n   * Handle form submission trigger from child component\n   */\n  const handleFormSubmit = useCallback(() => {\n    console.log('[ProfileForm] handleFormSubmit called');\n    // This will be called by the FormProviderWrapper's onSubmit method\n  }, []);\n\n  /**\n   * Render error message if provided\n   */\n  const renderErrorMessage = useCallback(() => {\n    if (!errorMessage) {\n      return null;\n    }\n\n    return (\n      \n        \n        \n          {errorMessage}\n        \n      \n    );\n  }, [errorMessage, theme]);\n\n  return (\n    \n      {/* Error Message */}\n      {renderErrorMessage()}\n\n      {/* Form */}\n      \n        {methods => (\n          \n            {/* Header */}\n            \n              \n              \n                Profile Information\n              \n            \n\n            \n              Update your personal information. All fields are optional.\n            \n\n            {/* Form Fields */}\n            \n          \n        )}\n      \n    \n  );\n};\n\n/**\n * Styles (same as before)\n */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  formContent: {\n    flex: 1,\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginLeft: 12,\n  },\n  headerSubtitle: {\n    fontSize: 14,\n    marginBottom: 24,\n    lineHeight: 20,\n  },\n  fieldsContainer: {\n    flex: 1,\n    marginBottom: 24,\n  },\n  readOnlyFieldContainer: {\n    marginBottom: 16,\n  },\n  readOnlyLabel: {\n    fontSize: 16,\n    fontWeight: '500',\n    marginBottom: 8,\n  },\n  readOnlyValueContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    borderRadius: 8,\n    borderWidth: 1,\n    minHeight: 48,\n  },\n  readOnlyIcon: {\n    marginRight: 12,\n  },\n  readOnlyValue: {\n    fontSize: 16,\n    flex: 1,\n  },\n  readOnlyHelper: {\n    fontSize: 12,\n    marginTop: 4,\n    fontStyle: 'italic',\n  },\n  textInput: {\n    backgroundColor: 'transparent',\n    marginBottom: 4,\n  },\n  errorText: {\n    fontSize: 12,\n    marginLeft: 16,\n    marginTop: 4,\n    marginBottom: 4,\n  },\n  charCountText: {\n    fontSize: 12,\n    textAlign: 'right',\n    marginRight: 16,\n    marginBottom: 16,\n  },\n  actionsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingTop: 16,\n    borderTopWidth: 1,\n    borderTopColor: '#E0E0E0',\n  },\n  resetButton: {\n    flex: 1,\n    marginRight: 8,\n  },\n  updateButton: {\n    flex: 1,\n    marginLeft: 8,\n  },\n  errorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 16,\n  },\n  errorMessageText: {\n    fontSize: 14,\n    marginLeft: 8,\n    flex: 1,\n  },\n});\n\nexport default ProfileForm;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileIconProps.html":{"url":"interfaces/ProfileIconProps.html","title":"interface - ProfileIconProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileIconProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/ProfileIcon.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Icon color (optional - defaults to theme)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function called when profile icon is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Icon size\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {TouchableOpacity, StyleSheet} from 'react-native';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useAppTheme} from '../../theme/ThemeProvider';\n\nexport interface ProfileIconProps {\n  /** Function called when profile icon is pressed */\n  onPress: () => void;\n  /** Icon size */\n  size?: number;\n  /** Icon color (optional - defaults to theme) */\n  color?: string;\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * Profile Icon Component\n */\nconst ProfileIcon: React.FC = ({\n  onPress,\n  size = 24,\n  color,\n  testID = 'profile-icon',\n}) => {\n  const theme = useAppTheme();\n  const iconColor = color || theme.colors.onPrimary;\n\n  return (\n    \n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default ProfileIcon;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProfileValidation.html":{"url":"interfaces/ProfileValidation.html","title":"interface - ProfileValidation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProfileValidation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile validation constraints\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationActionResponse.html":{"url":"interfaces/QuotationActionResponse.html","title":"interface - QuotationActionResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationActionResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/quotations.ts\n        \n\n\n            \n                Description\n            \n            \n                Response type for accept/reject quotation actions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport type {\n  QuotationListItem,\n  QuotationDetail,\n  QuotationsListResponse,\n  QuotationPdfResponse,\n  GetQuotationsRequest,\n} from '../../types/Quotation';\nimport {baseQuery, transformResponse, transformError} from '../baseQuery';\n\n/**\n * Response type for accept/reject quotation actions\n */\nexport interface QuotationActionResponse {\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Transform quotation errors to provide better error messages\n */\nconst transformQuotationError = (error: any) => {\n  const baseError = transformError(error);\n\n  // Add quotation-specific error handling\n  if (error.status === 404) {\n    return {\n      ...baseError,\n      message: 'Quotation not found or access denied',\n    };\n  }\n\n  if (error.status === 403) {\n    return {\n      ...baseError,\n      message: 'You do not have permission to access this quotation',\n    };\n  }\n\n  if (error.status === 409) {\n    return {\n      ...baseError,\n      message: 'Quotation already processed',\n      code: 409,\n    };\n  }\n\n  return baseError;\n};\n\n/**\n * Quotations API Definition\n */\nexport const quotationsApi = createApi({\n  reducerPath: 'quotationsApi',\n  baseQuery,\n  tagTypes: [\n    'Quotation',\n    'QuotationsList',\n    'QuotationPdf',\n    'Lead',\n    'LeadsList',\n  ],\n  endpoints: builder => ({\n    /**\n     * Get quotations with filters\n     */\n    getQuotations: builder.query({\n      query: (params = {}) => {\n        const {offset = 0, limit = 25, ...filters} = params;\n        return {\n          url: 'quotations',\n          params: {offset, limit, ...filters},\n        };\n      },\n      transformResponse: transformResponse,\n      transformErrorResponse: transformQuotationError,\n      providesTags: result => [\n        ...(result?.items.map(item => ({\n          type: 'Quotation' as const,\n          id: item.quotationId,\n        })) || []),\n        {type: 'QuotationsList', id: 'LIST'},\n      ],\n    }),\n\n    /**\n     * Get quotations by lead ID\n     */\n    getQuotationsByLeadId: builder.query({\n      query: leadId => ({\n        url: 'quotations',\n        params: {leadId, limit: 100}, // Get all quotations for the lead\n      }),\n      transformResponse: (response: any): QuotationListItem[] => {\n        const data = transformResponse(response);\n        return data.items;\n      },\n      transformErrorResponse: transformQuotationError,\n      providesTags: (result, error, leadId) => [\n        ...(result?.map(item => ({\n          type: 'Quotation' as const,\n          id: item.quotationId,\n        })) || []),\n        {type: 'QuotationsList', id: leadId},\n      ],\n    }),\n\n    /**\n     * Get quotation by ID\n     */\n    getQuotationById: builder.query({\n      query: quotationId => `quotations/${quotationId}`,\n      transformResponse: transformResponse,\n      transformErrorResponse: transformQuotationError,\n      providesTags: (result, error, quotationId) => [\n        {type: 'Quotation', id: quotationId},\n      ],\n    }),\n\n    /**\n     * Get quotation PDF URL\n     */\n    getQuotationPdf: builder.mutation({\n      query: quotationId => ({\n        url: `quotations/${quotationId}/pdf`,\n        method: 'GET',\n      }),\n      transformResponse: transformResponse,\n      transformErrorResponse: transformQuotationError,\n      invalidatesTags: (result, error, quotationId) => [\n        {type: 'QuotationPdf', id: quotationId},\n      ],\n    }),\n\n    /**\n     * Accept a quotation\n     *\n     * @remarks\n     * This mutation handles the quotation acceptance workflow:\n     * - Sends PATCH request to accept endpoint\n     * - Invalidates relevant caches (quotation and lead data)\n     * - Triggers automatic refresh of dependent data\n     *\n     * Backend side effects:\n     * - Updates quotation status to 'Accepted'\n     * - Updates lead status to 'Customer Accepted'\n     * - Triggers any configured business logic workflows\n     *\n     * @param quotationId - Unique identifier for the quotation to accept\n     * @returns Promise resolving to success/error response\n     */\n    acceptQuotation: builder.mutation({\n      query: quotationId => ({\n        url: `quotations/${quotationId}/accept`,\n        method: 'PATCH',\n        body: {},\n      }),\n      transformErrorResponse: transformQuotationError,\n      invalidatesTags: (result, error, quotationId) => [\n        {type: 'Quotation', id: quotationId},\n        {type: 'QuotationsList', id: 'LIST'},\n        // Also invalidate lead data as quotation acceptance affects lead status\n        {type: 'Lead', id: 'LIST'},\n        {type: 'LeadsList', id: 'LIST'},\n      ],\n    }),\n\n    /**\n     * Reject a quotation\n     *\n     * @remarks\n     * This mutation handles the quotation rejection workflow:\n     * - Sends PATCH request to reject endpoint\n     * - Invalidates relevant caches (quotation and lead data)\n     * - Triggers automatic refresh of dependent data\n     *\n     * Backend side effects:\n     * - Updates quotation status to 'Rejected'\n     * - May update lead status based on business rules\n     * - Triggers any configured business logic workflows\n     *\n     * @param quotationId - Unique identifier for the quotation to reject\n     * @returns Promise resolving to success/error response\n     */\n    rejectQuotation: builder.mutation({\n      query: quotationId => ({\n        url: `quotations/${quotationId}/reject`,\n        method: 'PATCH',\n        body: {},\n      }),\n      transformErrorResponse: transformQuotationError,\n      invalidatesTags: (result, error, quotationId) => [\n        {type: 'Quotation', id: quotationId},\n        {type: 'QuotationsList', id: 'LIST'},\n        // Also invalidate lead data as quotation rejection may affect lead\n        {type: 'Lead', id: 'LIST'},\n        {type: 'LeadsList', id: 'LIST'},\n      ],\n    }),\n  }),\n});\n\n// Export hooks\nexport const {\n  useGetQuotationsQuery,\n  useGetQuotationsByLeadIdQuery,\n  useGetQuotationByIdQuery,\n  useGetQuotationPdfMutation,\n  useAcceptQuotationMutation,\n  useRejectQuotationMutation,\n} = quotationsApi;\n\nexport default quotationsApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationComponent.html":{"url":"interfaces/QuotationComponent.html","title":"interface - QuotationComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Component details for quotation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationDetail.html":{"url":"interfaces/QuotationDetail.html","title":"interface - QuotationDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Detailed Quotation (from GET /api/v1/quotations/{id})\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            acceptedAt\n                                        \n                                \n                                \n                                        \n                                            components\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            pricing\n                                        \n                                \n                                \n                                        \n                                            quotationId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rejectedAt\n                                        \n                                \n                                \n                                        \n                                            roofType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sharedAt\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            systemKW\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        acceptedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        acceptedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        components\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        components:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pricing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pricing:         QuotationPricing\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuotationPricing\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quotationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quotationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rejectedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rejectedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roofType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roofType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sharedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sharedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         QuotationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuotationStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        systemKW\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        systemKW:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationListItem.html":{"url":"interfaces/QuotationListItem.html","title":"interface - QuotationListItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationListItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Quotation List Item (from GET /api/v1/quotations)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            quotationId\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            systemKW\n                                        \n                                \n                                \n                                        \n                                            totalCost\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quotationId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quotationId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         QuotationStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuotationStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        systemKW\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        systemKW:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationPdfResponse.html":{"url":"interfaces/QuotationPdfResponse.html","title":"interface - QuotationPdfResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationPdfResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Quotation PDF Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            pdfUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pdfUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pdfUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationPricing.html":{"url":"interfaces/QuotationPricing.html","title":"interface - QuotationPricing","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationPricing\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Pricing breakdown for quotation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            gst\n                                        \n                                \n                                \n                                        \n                                            installationFee\n                                        \n                                \n                                \n                                        \n                                            systemCost\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                                \n                                        \n                                            transportFee\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        gst\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gst:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        installationFee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        installationFee:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        systemCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        systemCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transportFee\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transportFee:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotationsListResponse.html":{"url":"interfaces/QuotationsListResponse.html","title":"interface - QuotationsListResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotationsListResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Quotation.ts\n        \n\n\n            \n                Description\n            \n            \n                Quotations List Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            limit\n                                        \n                                \n                                \n                                        \n                                            offset\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:         QuotationListItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         QuotationListItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type QuotationStatus =\n  | 'Draft'\n  | 'Created'\n  | 'Shared'\n  | 'Accepted'\n  | 'Rejected';\n\n/**\n * Quotation List Item (from GET /api/v1/quotations)\n */\nexport interface QuotationListItem {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  totalCost: number;\n  status: QuotationStatus;\n  createdAt: string;\n}\n\n/**\n * Component details for quotation\n */\nexport interface QuotationComponent {\n  id: string;\n  name: string;\n  quantity: number;\n}\n\n/**\n * Pricing breakdown for quotation\n */\nexport interface QuotationPricing {\n  systemCost: number;\n  installationFee: number;\n  transportFee: number;\n  gst: number;\n  total: number;\n}\n\n/**\n * Detailed Quotation (from GET /api/v1/quotations/{id})\n */\nexport interface QuotationDetail {\n  quotationId: string;\n  leadId: string;\n  systemKW: number;\n  roofType: string;\n  components: {\n    panels: QuotationComponent[];\n    inverters: QuotationComponent[];\n  };\n  pricing: QuotationPricing;\n  status: QuotationStatus;\n  sharedAt?: string;\n  acceptedAt?: string;\n  rejectedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Quotations List Response\n */\nexport interface QuotationsListResponse {\n  items: QuotationListItem[];\n  total: number;\n  offset: number;\n  limit: number;\n}\n\n/**\n * Quotation PDF Response\n */\nexport interface QuotationPdfResponse {\n  pdfUrl: string;\n}\n\n/**\n * Get Quotations Request Parameters\n */\nexport interface GetQuotationsRequest {\n  leadId?: string;\n  status?: QuotationStatus;\n  offset?: number;\n  limit?: number;\n  owner?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/QuotesTabProps.html":{"url":"interfaces/QuotesTabProps.html","title":"interface - QuotesTabProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuotesTabProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/LeadDetail/QuotesTab.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lead ID to fetch quotations for\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React, {useCallback} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  ActivityIndicator,\n  RefreshControl,\n  Alert,\n  TouchableOpacity,\n  Pressable,\n  Linking,\n} from 'react-native';\nimport {Chip} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\n// Import leads API for explicit cache invalidation\nimport {leadsApi} from '../../../api/endpoints/leads';\nimport {\n  useGetQuotationsByLeadIdQuery,\n  useGetQuotationPdfMutation,\n  useAcceptQuotationMutation,\n  useRejectQuotationMutation,\n} from '../../../api/endpoints/quotations';\nimport {SafeAreaContainer} from '../../../components';\nimport {AcceptRejectButtons} from '../../../components/quotes';\nimport {useActionDebounce} from '../../../hooks/useActionDebounce';\nimport {useNewAuth} from '../../../hooks/useNewAuth';\nimport {useRefreshControl} from '../../../hooks/useRefreshControl';\nimport {useAppDispatch} from '../../../hooks/useTypedRedux';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport type {\n  QuotationListItem,\n  QuotationStatus,\n} from '../../../types/Quotation';\nimport {formatDisplayDate} from '../../../utils/dateHelpers';\nimport {openConfirmDialog} from '../../../utils/openConfirmDialog';\n\ninterface QuotesTabProps {\n  /** Lead ID to fetch quotations for */\n  leadId: string;\n}\n\n/**\n * Status color configuration\n */\nconst getStatusConfig = (status: QuotationStatus) => {\n  const configs = {\n    Draft: {backgroundColor: '#9E9E9E', textColor: '#FFFFFF'},\n    Created: {backgroundColor: '#2196F3', textColor: '#FFFFFF'},\n    Shared: {backgroundColor: '#03A9F4', textColor: '#FFFFFF'},\n    Accepted: {backgroundColor: '#4CAF50', textColor: '#FFFFFF'},\n    Rejected: {backgroundColor: '#F44336', textColor: '#FFFFFF'},\n  };\n  return configs[status] || configs.Draft;\n};\n\n/**\n * Quote Item Component with Clean Layout and Accept/Reject Actions\n */\nconst QuoteItem: React.FC void;\n  onDownloadPdf: (quotationId: string) => void;\n}> = ({quotation, onViewDetails, onDownloadPdf}) => {\n  const theme = useAppTheme();\n  const dispatch = useAppDispatch();\n  const {user} = useNewAuth();\n\n  const statusConfig = getStatusConfig(quotation.status);\n\n  // Role-based access control\n  const isCustomer = user?.role === 'Customer';\n  const shouldShowAcceptReject = quotation.status === 'Shared' && isCustomer;\n\n  // API mutations\n  const [acceptQuotation, {isLoading: isAccepting}] =\n    useAcceptQuotationMutation();\n  const [rejectQuotation, {isLoading: isRejecting}] =\n    useRejectQuotationMutation();\n\n  // Debounce hook for this specific quotation\n  const {isBlocked: isDebounceBlocked, triggerAction} = useActionDebounce(\n    quotation.quotationId\n  );\n\n  // Enhanced refresh control\n  const {refreshQuotations} = useRefreshControl();\n\n  const formattedDate = React.useMemo(() => {\n    try {\n      return formatDisplayDate(quotation.createdAt);\n    } catch (error) {\n      console.warn('[QuotesTab] Date formatting error:', error);\n      return 'Invalid date';\n    }\n  }, [quotation.createdAt]);\n\n  const quotationTitle = `Quote #${\n    quotation.quotationId.split('-')[1] || quotation.quotationId\n  }`;\n\n  /**\n   * Explicit lead refresh helper\n   * Forces refresh of lead data after quotation actions to ensure lead status updates are visible\n   *\n   * @remarks\n   * This function is called after successful accept/reject operations to ensure that\n   * backend changes to lead status (e.g., \"Customer Accepted\") are reflected in the UI.\n   * The function uses RTK Query's invalidateTags to force cache invalidation.\n   *\n   * @returns Promise that resolves when refresh is complete\n   */\n  const refreshLeadData = useCallback(async () => {\n    try {\n      console.log(\n        '[QuotesTab] Explicitly refreshing lead data after quotation action'\n      );\n\n      // Force invalidation of lead cache to ensure fresh data\n      dispatch(leadsApi.util.invalidateTags(['Lead', 'LeadsList']));\n\n      // Allow small delay to ensure cache invalidation takes effect\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      console.log('[QuotesTab] Lead data refresh triggered successfully');\n    } catch (error) {\n      console.error('[QuotesTab] Error refreshing lead data:', error);\n      // Don't throw - this is supplementary refresh\n    }\n  }, [dispatch]);\n\n  /**\n   * Handle quotation acceptance with comprehensive error handling\n   *\n   * @remarks\n   * This function implements the complete accept workflow:\n   * 1. Debounce check to prevent rapid actions\n   * 2. User confirmation dialog\n   * 3. API call to accept quotation\n   * 4. Success feedback and data refresh\n   * 5. Comprehensive error handling for various scenarios\n   *\n   * The function handles role-based access, conflict errors, and network failures\n   * with appropriate user feedback for each scenario.\n   *\n   * @returns Promise that resolves when operation is complete\n   */\n  const handleAccept = useCallback(async () => {\n    try {\n      // Check if action is blocked by debounce\n      if (isDebounceBlocked) {\n        Alert.alert(\n          'Please Wait',\n          'Please wait before performing another action.'\n        );\n        return;\n      }\n\n      // Show confirmation dialog\n      const confirmed = await openConfirmDialog({\n        title: 'Accept Quotation',\n        message: `Are you sure you want to accept ${quotationTitle}? This action cannot be undone.`,\n        confirmText: 'Accept',\n        cancelText: 'Cancel',\n      });\n\n      if (!confirmed) {\n        return;\n      }\n\n      // Trigger debounce\n      triggerAction();\n\n      console.log('[QuotesTab] Accepting quotation:', quotation.quotationId);\n\n      // Call accept API\n      const result = await acceptQuotation(quotation.quotationId).unwrap();\n\n      if (result.success) {\n        console.log(\n          '[QuotesTab] Quotation accepted successfully, refreshing data...'\n        );\n\n        // Success feedback\n        Alert.alert('Success', 'Quotation accepted successfully!', [\n          {text: 'OK'},\n        ]);\n\n        // Refresh quotations data first\n        await refreshQuotations();\n\n        // Then explicitly refresh lead data to show updated lead status\n        // This ensures lead status change (to \"Customer Accepted\") is visible\n        await refreshLeadData();\n\n        console.log('[QuotesTab] All data refreshed after accept operation');\n      } else {\n        throw new Error(result.error || 'Failed to accept quotation');\n      }\n    } catch (error: any) {\n      console.error('[QuotesTab] Accept quotation error:', error);\n\n      // Handle specific error cases\n      if (error.data?.error?.includes('Only customers can accept')) {\n        // Role-based logout\n        Alert.alert(\n          'Access Denied',\n          'You do not have permission to perform this action. You will be logged out.',\n          [\n            {\n              text: 'OK',\n              onPress: () => {\n                // TODO: Implement proper logout function\n                console.log('User role access denied - logout required');\n              },\n            },\n          ]\n        );\n        return;\n      }\n\n      if (error.code === 409 || error.status === 409) {\n        Alert.alert('Action Not Allowed', 'Quotation already processed', [\n          {text: 'OK'},\n        ]);\n        return;\n      }\n\n      if (error.data?.error?.includes('Access denied')) {\n        Alert.alert(\n          'Access Denied',\n          'You do not have access to this quotation.',\n          [{text: 'OK'}]\n        );\n        return;\n      }\n\n      // Generic error\n      const errorMessage =\n        error.data?.error ||\n        error.message ||\n        'Failed to accept quotation. Please try again.';\n      Alert.alert('Error', errorMessage, [{text: 'OK'}]);\n    }\n  }, [\n    quotation.quotationId,\n    quotationTitle,\n    isDebounceBlocked,\n    triggerAction,\n    acceptQuotation,\n    refreshQuotations,\n    refreshLeadData,\n    dispatch,\n  ]);\n\n  /**\n   * Handle quotation rejection with comprehensive error handling\n   *\n   * @remarks\n   * Similar to handleAccept but for rejection operations.\n   * Uses destructive confirmation dialog styling to emphasize the permanent nature\n   * of the action.\n   *\n   * @returns Promise that resolves when operation is complete\n   */\n  const handleReject = useCallback(async () => {\n    try {\n      // Check if action is blocked by debounce\n      if (isDebounceBlocked) {\n        Alert.alert(\n          'Please Wait',\n          'Please wait before performing another action.'\n        );\n        return;\n      }\n\n      // Show confirmation dialog\n      const confirmed = await openConfirmDialog({\n        title: 'Reject Quotation',\n        message: `Are you sure you want to reject ${quotationTitle}? This action cannot be undone.`,\n        confirmText: 'Reject',\n        cancelText: 'Cancel',\n        destructive: true,\n      });\n\n      if (!confirmed) {\n        return;\n      }\n\n      // Trigger debounce\n      triggerAction();\n\n      console.log('[QuotesTab] Rejecting quotation:', quotation.quotationId);\n\n      // Call reject API\n      const result = await rejectQuotation(quotation.quotationId).unwrap();\n\n      if (result.success) {\n        console.log(\n          '[QuotesTab] Quotation rejected successfully, refreshing data...'\n        );\n\n        // Success feedback\n        Alert.alert('Success', 'Quotation rejected successfully!', [\n          {text: 'OK'},\n        ]);\n\n        // Refresh quotations data first\n        await refreshQuotations();\n\n        // Then explicitly refresh lead data to show any backend-updated lead status\n        await refreshLeadData();\n\n        console.log('[QuotesTab] All data refreshed after reject operation');\n      } else {\n        throw new Error(result.error || 'Failed to reject quotation');\n      }\n    } catch (error: any) {\n      console.error('[QuotesTab] Reject quotation error:', error);\n\n      // Handle specific error cases\n      if (error.data?.error?.includes('Only customers can accept')) {\n        // Role-based logout\n        Alert.alert(\n          'Access Denied',\n          'You do not have permission to perform this action. You will be logged out.',\n          [\n            {\n              text: 'OK',\n              onPress: () => {\n                // TODO: Implement proper logout function\n                console.log('User role access denied - logout required');\n              },\n            },\n          ]\n        );\n        return;\n      }\n\n      if (error.code === 409 || error.status === 409) {\n        Alert.alert('Action Not Allowed', 'Quotation already processed', [\n          {text: 'OK'},\n        ]);\n        return;\n      }\n\n      if (error.data?.error?.includes('Access denied')) {\n        Alert.alert(\n          'Access Denied',\n          'You do not have access to this quotation.',\n          [{text: 'OK'}]\n        );\n        return;\n      }\n\n      // Generic error\n      const errorMessage =\n        error.data?.error ||\n        error.message ||\n        'Failed to reject quotation. Please try again.';\n      Alert.alert('Error', errorMessage, [{text: 'OK'}]);\n    }\n  }, [\n    quotation.quotationId,\n    quotationTitle,\n    isDebounceBlocked,\n    triggerAction,\n    rejectQuotation,\n    refreshQuotations,\n    refreshLeadData,\n    dispatch,\n  ]);\n\n  // Calculate if buttons should be disabled\n  const isActionDisabled = isAccepting || isRejecting || isDebounceBlocked;\n\n  return (\n     onViewDetails(quotation.quotationId)}\n      style={({pressed}) => [\n        {\n          backgroundColor: theme.colors.surface,\n          borderRadius: 12,\n          padding: 16,\n          paddingBottom: shouldShowAcceptReject ? 24 : 20, // Extra padding for accept/reject buttons\n          marginVertical: 6,\n          elevation: 2,\n          shadowColor: '#000',\n          shadowOffset: {width: 0, height: 1},\n          shadowOpacity: 0.22,\n          shadowRadius: 2.22,\n          opacity: pressed ? 0.7 : 1,\n          minHeight: shouldShowAcceptReject ? 140 : 100, // Increased height for buttons\n          position: 'relative',\n        },\n      ]}\n      testID={`quote-item-${quotation.quotationId}`}\n    >\n      \n        {/* Left side: Icon + Content */}\n        \n          {/* Quote Icon */}\n          \n\n          {/* Content */}\n          \n            {/* Title */}\n            \n              {quotationTitle}\n            \n\n            {/* Date */}\n            \n              Generated On: {formattedDate}\n            \n          \n        \n\n        {/* Right side: Status Badge */}\n        \n          {quotation.status}\n        \n      \n\n      {/* Accept/Reject Buttons - Show when status is 'Shared' and user is Customer */}\n      {shouldShowAcceptReject && (\n        \n          \n        \n      )}\n\n      {/* PDF Download Button - Positioned at bottom-right */}\n       {\n          e.stopPropagation(); // Prevent triggering parent onPress\n          onDownloadPdf(quotation.quotationId);\n        }}\n        style={{\n          position: 'absolute',\n          bottom: 12,\n          right: 12,\n          flexDirection: 'row',\n          alignItems: 'center',\n          backgroundColor: theme.colors.primaryContainer,\n          paddingHorizontal: 12,\n          paddingVertical: 8,\n          borderRadius: 8,\n          elevation: 1,\n          shadowColor: '#000',\n          shadowOffset: {width: 0, height: 1},\n          shadowOpacity: 0.1,\n          shadowRadius: 1,\n        }}\n        testID={`quote-pdf-${quotation.quotationId}`}\n      >\n        \n        \n          Download\n        \n      \n    \n  );\n};\n\n/**\n * Empty State Component\n */\nconst EmptyState: React.FC = () => {\n  const theme = useAppTheme();\n\n  return (\n    \n      \n      \n        Quotations coming soon...\n      \n      \n        Your quotations will appear here once they are prepared by our team.\n      \n    \n  );\n};\n\n/**\n * QuotesTab Component\n * Shows quotations for a lead with loading, error, and empty states\n */\nconst QuotesTab: React.FC = ({leadId}) => {\n  const theme = useAppTheme();\n\n  // Fetch quotations for this lead\n  const {\n    data: quotations,\n    isLoading,\n    isError,\n    isFetching,\n  } = useGetQuotationsByLeadIdQuery(leadId);\n\n  // Filter quotations to only show Shared, Accepted, or Rejected statuses\n  const filteredQuotations = React.useMemo(() => {\n    if (!quotations) {\n      return [];\n    }\n\n    const allowedStatuses: QuotationStatus[] = [\n      'Shared',\n      'Accepted',\n      'Rejected',\n    ];\n    return quotations.filter(quotation =>\n      allowedStatuses.includes(quotation.status)\n    );\n  }, [quotations]);\n\n  // PDF download mutation\n  const [getQuotationPdf, {isLoading: isPdfLoading}] =\n    useGetQuotationPdfMutation();\n\n  // Enhanced refresh control with debounce for quotations\n  const {refreshQuotations, canRefreshQuotations} = useRefreshControl();\n\n  /**\n   * Handle pull-to-refresh\n   */\n  const handleRefresh = useCallback(async () => {\n    console.log('[QuotesTab] Refreshing quotations for lead:', leadId);\n    try {\n      await refreshQuotations();\n    } catch (error) {\n      console.error('[QuotesTab] Refresh error:', error);\n    }\n  }, [refreshQuotations]);\n\n  /**\n   * Handle view quotation details (anywhere on container)\n   */\n  const handleViewDetails = useCallback((quotationId: string) => {\n    console.log('[QuotesTab] View details for quotation:', quotationId);\n    Alert.alert(\n      'Coming Soon',\n      `Quotation details for ${quotationId} will be available soon.`,\n      [{text: 'OK'}]\n    );\n  }, []);\n\n  /**\n   * Handle PDF download (bottom-right button)\n   */\n  const handleDownloadPdf = useCallback(\n    async (quotationId: string) => {\n      console.log('[QuotesTab] Download PDF for quotation:', quotationId);\n\n      try {\n        const result = await getQuotationPdf(quotationId).unwrap();\n\n        if (result.pdfUrl) {\n          // TEMPORARY: Use test PDF URL since mock server returns dummy URLs\n          // TODO: Remove this line when connecting to real API\n          const testPdfUrl =\n            'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf';\n\n          console.log('[QuotesTab] Original API URL:', result.pdfUrl);\n          console.log('[QuotesTab] Using test PDF URL:', testPdfUrl);\n\n          // Open PDF in system's default viewer directly\n          try {\n            await Linking.openURL(testPdfUrl);\n          } catch (error) {\n            console.error('[QuotesTab] Linking.openURL error:', error);\n            throw new Error('Cannot open PDF - no compatible app found');\n          }\n        } else {\n          throw new Error('PDF URL not received from server');\n        }\n      } catch (error: any) {\n        console.error('[QuotesTab] PDF download error:', error);\n\n        // Handle different error types\n        let errorMessage =\n          'Could not download the quotation PDF. Please try again.';\n\n        if (error.status === 401) {\n          errorMessage = 'Session expired. Please log in again.';\n        } else if (error.status === 403) {\n          errorMessage = 'You do not have permission to view this quotation.';\n        } else if (error.status === 404) {\n          errorMessage = 'Quotation PDF not found.';\n        } else if (error.status === 409) {\n          errorMessage =\n            'Quotation is not available for download at this time.';\n        }\n\n        Alert.alert('Download Failed', errorMessage, [{text: 'OK'}]);\n      }\n    },\n    [getQuotationPdf]\n  );\n\n  /**\n   * Render quotation item\n   */\n  const renderQuotationItem = useCallback(\n    ({item}: {item: QuotationListItem}) => (\n      \n    ),\n    [handleViewDetails, handleDownloadPdf]\n  );\n\n  // Loading state\n  if (isLoading && !filteredQuotations) {\n    return (\n      \n        \n          \n          \n            Loading quotations...\n          \n        \n      \n    );\n  }\n\n  // Error state\n  if (isError) {\n    return (\n      \n        \n          \n          \n            Failed to Load Quotations\n          \n          \n            Please pull down to refresh and try again.\n          \n        \n      \n    );\n  }\n\n  // Empty state\n  if (!filteredQuotations || filteredQuotations.length === 0) {\n    return (\n      \n         null}\n          ListEmptyComponent={}\n          refreshControl={\n            \n          }\n        />\n      \n    );\n  }\n\n  // Content state\n  return (\n    \n       item.quotationId}\n        contentContainerStyle={{\n          padding: 16,\n          backgroundColor: theme.colors.background,\n        }}\n        refreshControl={\n          \n        }\n        showsVerticalScrollIndicator={false}\n        // Performance optimizations for >30 items\n        removeClippedSubviews={true}\n        maxToRenderPerBatch={10}\n        updateCellsBatchingPeriod={50}\n        initialNumToRender={10}\n        windowSize={10}\n      />\n\n      {/* PDF Loading Overlay */}\n      {isPdfLoading && (\n        \n          \n            \n            \n              Preparing PDF...\n            \n          \n        \n      )}\n    \n  );\n};\n\nexport default QuotesTab;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RNFile.html":{"url":"interfaces/RNFile.html","title":"interface - RNFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RNFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/File.ts\n        \n\n\n            \n                Description\n            \n            \n                React Native File interface for file operations\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            uri\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uri\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uri:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RNFile {\n  uri: string;\n  name: string;\n  type: string;\n  size: number;\n}\n\n/**\n * Image compression options\n */\nexport interface CompressionOptions {\n  maxSizeMB?: number;\n  maxWidthPx?: number;\n  maxHeightPx?: number;\n  quality?: number;\n  keepExif?: boolean;\n}\n\n/**\n * Compression result with metadata\n */\nexport interface CompressionResult extends RNFile {\n  originalSize: number;\n  compressionRatio: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshError.html":{"url":"interfaces/RefreshError.html","title":"interface - RefreshError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            api\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        api\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        api:         RefreshableApi\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshableApi\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshHookReturn.html":{"url":"interfaces/RefreshHookReturn.html","title":"interface - RefreshHookReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshHookReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            canRefresh\n                                        \n                                \n                                \n                                        \n                                            canRefreshKyc\n                                        \n                                \n                                \n                                        \n                                            canRefreshLeads\n                                        \n                                \n                                \n                                        \n                                            canRefreshNotifications\n                                        \n                                \n                                \n                                        \n                                            canRefreshQuotations\n                                        \n                                \n                                \n                                        \n                                            canRefreshSingleLead\n                                        \n                                \n                                \n                                        \n                                            canRefreshSingleQuotation\n                                        \n                                \n                                \n                                        \n                                            canRefreshTickets\n                                        \n                                \n                                \n                                        \n                                            clearError\n                                        \n                                \n                                \n                                        \n                                            getFormattedLastRefresh\n                                        \n                                \n                                \n                                        \n                                            isRefreshing\n                                        \n                                \n                                \n                                        \n                                            lastRefreshAt\n                                        \n                                \n                                \n                                        \n                                            refreshAll\n                                        \n                                \n                                \n                                        \n                                            refreshCount\n                                        \n                                \n                                \n                                        \n                                            refreshError\n                                        \n                                \n                                \n                                        \n                                            refreshKyc\n                                        \n                                \n                                \n                                        \n                                            refreshLeads\n                                        \n                                \n                                \n                                        \n                                            refreshNotifications\n                                        \n                                \n                                \n                                        \n                                            refreshProgress\n                                        \n                                \n                                \n                                        \n                                            refreshQuotations\n                                        \n                                \n                                \n                                        \n                                            refreshSingleLead\n                                        \n                                \n                                \n                                        \n                                            refreshSingleQuotation\n                                        \n                                \n                                \n                                        \n                                            refreshSpecific\n                                        \n                                \n                                \n                                        \n                                            refreshTickets\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canRefresh\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefresh:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshKyc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshKyc:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshLeads\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshLeads:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshNotifications\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshNotifications:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshQuotations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshQuotations:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshSingleLead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshSingleLead:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshSingleQuotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshSingleQuotation:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canRefreshTickets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canRefreshTickets:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clearError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clearError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getFormattedLastRefresh\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getFormattedLastRefresh:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isRefreshing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isRefreshing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastRefreshAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRefreshAt:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshAll\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshAll:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshError:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshKyc\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshKyc:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshLeads\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshLeads:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshNotifications\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshNotifications:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshProgress:         RefreshProgress\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshProgress\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshQuotations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshQuotations:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshSingleLead\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshSingleLead:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshSingleQuotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshSingleQuotation:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshSpecific\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshSpecific:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshTickets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshTickets:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshOptions.html":{"url":"interfaces/RefreshOptions.html","title":"interface - RefreshOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            apis\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            includeUserData\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isBackground\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showLoading\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        apis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apis:         RefreshableApi[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshableApi[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Specific APIs to refresh (if not provided, refreshes all)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeUserData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        includeUserData:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to include user-specific data in refresh\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBackground\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isBackground:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : false\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether this is a background refresh\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showLoading:         boolean\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : true\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to show loading indicators during refresh\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshProgress.html":{"url":"interfaces/RefreshProgress.html","title":"interface - RefreshProgress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshProgress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            current\n                                        \n                                \n                                \n                                        \n                                            currentStep\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currentStep\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentStep:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshResult.html":{"url":"interfaces/RefreshResult.html","title":"interface - RefreshResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            errors\n                                        \n                                \n                                \n                                        \n                                            refreshedApis\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        errors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errors:         RefreshError[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshError[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshedApis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshedApis:         RefreshableApi[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshableApi[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshState.html":{"url":"interfaces/RefreshState.html","title":"interface - RefreshState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/refresh/refreshTypes.ts\n        \n\n\n            \n                Description\n            \n            \n                RefreshControl Types\nType definitions for the refresh control system\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isRefreshing\n                                        \n                                \n                                \n                                        \n                                            lastRefreshAt\n                                        \n                                \n                                \n                                        \n                                            refreshCount\n                                        \n                                \n                                \n                                        \n                                            refreshError\n                                        \n                                \n                                \n                                        \n                                            refreshProgress\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isRefreshing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isRefreshing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastRefreshAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastRefreshAt:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshError:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshProgress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshProgress:         RefreshProgress\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         RefreshProgress\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface RefreshState {\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n}\n\nexport interface RefreshProgress {\n  current: number;\n  total: number;\n  currentStep: string;\n}\n\nexport interface RefreshOptions {\n  /**\n   * Whether to show loading indicators during refresh\n   * @default true\n   */\n  showLoading?: boolean;\n\n  /**\n   * Whether to include user-specific data in refresh\n   * @default true\n   */\n  includeUserData?: boolean;\n\n  /**\n   * Specific APIs to refresh (if not provided, refreshes all)\n   */\n  apis?: RefreshableApi[];\n\n  /**\n   * Whether this is a background refresh\n   * @default false\n   */\n  isBackground?: boolean;\n}\n\nexport enum RefreshableApi {\n  AUTH = 'auth',\n  SERVICES = 'services',\n  LEADS = 'leads',\n  SINGLE_LEAD = 'single_lead',\n  QUOTATIONS = 'quotations',\n  SINGLE_QUOTATION = 'single_quotation',\n  KYC = 'kyc',\n  NOTIFICATIONS = 'notifications',\n  TICKETS = 'tickets',\n  // Add more APIs here as they're implemented\n}\n\nexport interface RefreshResult {\n  success: boolean;\n  refreshedApis: RefreshableApi[];\n  errors: RefreshError[];\n  timestamp: string;\n}\n\nexport interface RefreshError {\n  api: RefreshableApi;\n  error: string;\n  code?: string;\n}\n\nexport interface RefreshHookReturn {\n  // Actions\n  refreshAll: (options?: RefreshOptions) => Promise;\n  refreshSpecific: (\n    apis: RefreshableApi[],\n    options?: RefreshOptions\n  ) => Promise;\n\n  // State\n  isRefreshing: boolean;\n  lastRefreshAt: string | null;\n  refreshError: string | null;\n  refreshCount: number;\n  refreshProgress: RefreshProgress;\n\n  // Utilities\n  getFormattedLastRefresh: () => string;\n  canRefresh: boolean;\n  clearError: () => void;\n\n  // Leads-specific with debounce\n  refreshLeads: () => Promise;\n  canRefreshLeads: () => boolean;\n\n  // Single lead-specific with debounce\n  refreshSingleLead: (leadId: string) => Promise;\n  canRefreshSingleLead: () => boolean;\n\n  // Quotations-specific with debounce\n  refreshQuotations: () => Promise;\n  canRefreshQuotations: () => boolean;\n\n  // Single quotation-specific with debounce\n  refreshSingleQuotation: (quotationId: string) => Promise;\n  canRefreshSingleQuotation: () => boolean;\n\n  // KYC-specific with debounce\n  refreshKyc: () => Promise;\n  canRefreshKyc: () => boolean;\n\n  // Notifications-specific with debounce\n  refreshNotifications: () => Promise;\n  canRefreshNotifications: () => boolean;\n\n  // Tickets-specific with debounce\n  refreshTickets: () => Promise;\n  canRefreshTickets: () => boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTimestamps.html":{"url":"classes/RefreshTimestamps.html","title":"class - RefreshTimestamps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTimestamps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/refreshTimestamps.ts\n        \n\n\n            \n                Description\n            \n            \n                Global timestamp storage (singleton pattern)\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                timestamps\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clearAll\n                            \n                            \n                                getAll\n                            \n                            \n                                getLastRefresh\n                            \n                            \n                                setLastRefresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timestamps\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n    [RefreshableApi.AUTH]: null,\n    [RefreshableApi.SERVICES]: null,\n    [RefreshableApi.LEADS]: null,\n    [RefreshableApi.SINGLE_LEAD]: null,\n    [RefreshableApi.QUOTATIONS]: null,\n    [RefreshableApi.SINGLE_QUOTATION]: null,\n    [RefreshableApi.KYC]: null,\n    [RefreshableApi.NOTIFICATIONS]: null,\n    [RefreshableApi.TICKETS]: null,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/utils/refreshTimestamps.ts:12\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clearAll\n                        \n                    \n                \n            \n            \n                \nclearAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/refreshTimestamps.ts:42\n                        \n                    \n\n\n            \n                \n                        Clear all timestamps (useful for testing/logout)\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/refreshTimestamps.ts:51\n                        \n                    \n\n\n            \n                \n                        Get all timestamps (for debugging)\n\n\n                        \n                            Returns :         Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLastRefresh\n                        \n                    \n                \n            \n            \n                \ngetLastRefresh(api: RefreshableApi)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/refreshTimestamps.ts:27\n                        \n                    \n\n\n            \n                \n                        Get last refresh timestamp for an API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                api\n                                            \n                                                            RefreshableApi\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     number | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLastRefresh\n                        \n                    \n                \n            \n            \n                \nsetLastRefresh(api: RefreshableApi, timestamp: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/refreshTimestamps.ts:34\n                        \n                    \n\n\n            \n                \n                        Set refresh timestamp for an API\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                api\n                                            \n                                                            RefreshableApi\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                timestamp\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {RefreshableApi} from '../refresh/refreshTypes';\n\n/**\n * Global timestamp storage (singleton pattern)\n */\nclass RefreshTimestamps {\n  private timestamps: Record = {\n    [RefreshableApi.AUTH]: null,\n    [RefreshableApi.SERVICES]: null,\n    [RefreshableApi.LEADS]: null,\n    [RefreshableApi.SINGLE_LEAD]: null,\n    [RefreshableApi.QUOTATIONS]: null,\n    [RefreshableApi.SINGLE_QUOTATION]: null,\n    [RefreshableApi.KYC]: null,\n    [RefreshableApi.NOTIFICATIONS]: null,\n    [RefreshableApi.TICKETS]: null,\n  };\n\n  /**\n   * Get last refresh timestamp for an API\n   */\n  getLastRefresh(api: RefreshableApi): number | null {\n    return this.timestamps[api];\n  }\n\n  /**\n   * Set refresh timestamp for an API\n   */\n  setLastRefresh(api: RefreshableApi, timestamp: number): void {\n    this.timestamps[api] = timestamp;\n    console.log(`[RefreshTimestamps] Set ${api} timestamp to:`, timestamp);\n  }\n\n  /**\n   * Clear all timestamps (useful for testing/logout)\n   */\n  clearAll(): void {\n    Object.keys(this.timestamps).forEach(key => {\n      this.timestamps[key as RefreshableApi] = null;\n    });\n  }\n\n  /**\n   * Get all timestamps (for debugging)\n   */\n  getAll(): Record {\n    return {...this.timestamps};\n  }\n}\n\n// Export singleton instance\nexport const refreshTimestamps = new RefreshTimestamps();\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReopenTicketRequest.html":{"url":"interfaces/ReopenTicketRequest.html","title":"interface - ReopenTicketRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReopenTicketRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/tickets.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            reason\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        reason\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reason:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Reason for reopening (10-500 chars)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport type {\n  GetTicketByIdResponse,\n  GetTicketsResponse,\n  TicketsQueryParams,\n  CreateTicketRequest,\n  CreateTicketResponse,\n  AddMessageRequest,\n} from '../../types/Ticket';\nimport {baseQuery, transformResponse} from '../baseQuery';\n\nexport interface ReopenTicketRequest {\n  /** Reason for reopening (10-500 chars) */\n  reason: string;\n}\n\n/**\n * Transform ticket API errors to consistent ServiceFetchError format\n * Follows the same pattern as notifications error transformation\n */\nconst transformTicketError = (error: any) => {\n  // Handle HTTP errors with status code and backend message\n  if (error.status && error.data) {\n    const statusCode = error.status;\n    const errorMessage = error.data.error || 'Request failed';\n\n    return {\n      name: 'ServiceFetchError',\n      message: errorMessage,\n      code: 'API_ERROR',\n      operation: 'API_ERROR',\n      httpStatus: statusCode,\n      serviceId: undefined,\n      originalError: undefined,\n    };\n  }\n\n  // Handle network errors (no HTTP status)\n  if (error.status === 'FETCH_ERROR') {\n    return {\n      name: 'ServiceFetchError',\n      message: 'Network error - please check your connection',\n      code: 'NETWORK_ERROR',\n      operation: 'NETWORK_ERROR',\n      httpStatus: 0,\n      serviceId: undefined,\n      originalError: undefined,\n    };\n  }\n\n  // Handle timeout errors\n  if (error.status === 'TIMEOUT_ERROR') {\n    return {\n      name: 'ServiceFetchError',\n      message: 'Request timeout - please try again',\n      code: 'TIMEOUT_ERROR',\n      operation: 'TIMEOUT_ERROR',\n      httpStatus: 408,\n      serviceId: undefined,\n      originalError: undefined,\n    };\n  }\n\n  // Fallback for unexpected error formats\n  return {\n    name: 'ServiceFetchError',\n    message: 'Unexpected error occurred',\n    code: 'UNKNOWN_ERROR',\n    operation: 'UNKNOWN_ERROR',\n    httpStatus: 500,\n    serviceId: undefined,\n    originalError: undefined,\n  };\n};\n\n/**\n * Tickets API definition using RTK Query\n * Provides endpoints for CRUD operations on support tickets\n */\nexport const ticketsApi = createApi({\n  reducerPath: 'ticketsApi',\n  baseQuery,\n  tagTypes: ['Ticket', 'TicketsList'],\n  endpoints: builder => ({\n    /**\n     * Get paginated tickets list for current user\n     * Uses JWT token from auth state to identify user\n     *\n     * @param params - Optional query parameters for filtering/pagination\n     */\n    getTickets: builder.query({\n      query: (params = {}) => {\n        const searchParams = new URLSearchParams();\n\n        // Add pagination parameters with defaults\n        searchParams.append('offset', (params.offset || 0).toString());\n        searchParams.append('limit', (params.limit || 25).toString());\n\n        // Add optional filter parameters\n        if (params.status) {\n          searchParams.append('status', params.status);\n        }\n        if (params.cpId) {\n          searchParams.append('cpId', params.cpId);\n        }\n        if (params.customerId) {\n          searchParams.append('customerId', params.customerId);\n        }\n        if (params.dateRange) {\n          searchParams.append('dateRange', params.dateRange);\n        }\n\n        return `tickets?${searchParams.toString()}`;\n      },\n      transformResponse: transformResponse,\n      transformErrorResponse: transformTicketError,\n      providesTags: result => {\n        if (!result || !result.items) {\n          return [{type: 'TicketsList' as const, id: 'LIST'}];\n        }\n\n        return [\n          ...result.items.map(ticket => ({\n            type: 'Ticket' as const,\n            id: ticket.ticketId,\n          })),\n          {type: 'TicketsList' as const, id: 'LIST'},\n        ];\n      },\n    }),\n\n    /**\n     * Get single ticket with full message thread\n     * Used for detailed ticket view with all messages\n     */\n    getTicketById: builder.query({\n      query: ticketId => `tickets/${ticketId}`,\n      transformResponse: transformResponse,\n      transformErrorResponse: transformTicketError,\n      providesTags: (result, error, ticketId) => [\n        {type: 'Ticket' as const, id: ticketId}, // Refresh Ticket\n      ],\n    }),\n\n    /**\n     * Create a new support ticket\n     * Only works for leads with status \"Executed\"\n     */\n    createTicket: builder.mutation({\n      query: ticketData => ({\n        url: 'tickets',\n        method: 'POST',\n        body: ticketData,\n      }),\n      transformResponse: transformResponse,\n      transformErrorResponse: transformTicketError,\n      invalidatesTags: [{type: 'TicketsList' as const, id: 'LIST'}], // Refresh list\n    }),\n\n    /**\n     * Add a message to an existing ticket thread\n     */\n    addMessage: builder.mutation({\n      query: ({ticketId, message}) => ({\n        url: `tickets/${ticketId}/messages`,\n        method: 'POST',\n        body: message,\n      }),\n      transformResponse: transformResponse,\n      transformErrorResponse: transformTicketError,\n      invalidatesTags: (result, error, {ticketId}) => [\n        {type: 'Ticket' as const, id: ticketId}, // Refresh Ticket\n        {type: 'TicketsList' as const, id: 'LIST'}, // Refresh list (for message count, etc.)\n      ],\n    }),\n\n    /**\n     * Reopen a closed ticket\n     * Only works for closed tickets\n     */\n    reopenTicket: builder.mutation({\n      query: ({ticketId, reason}) => ({\n        url: `tickets/${ticketId}/reopen`,\n        method: 'PATCH',\n        body: reason,\n      }),\n      transformResponse: transformResponse,\n      transformErrorResponse: transformTicketError,\n      invalidatesTags: (result, error, {ticketId}) => [\n        {type: 'Ticket' as const, id: ticketId},\n        {type: 'TicketsList' as const, id: 'LIST'},\n      ],\n    }),\n  }),\n});\n\n// Export hooks for use in components\nexport const {\n  useGetTicketsQuery,\n  useGetTicketByIdQuery,\n  useCreateTicketMutation,\n  useAddMessageMutation,\n  useReopenTicketMutation,\n} = ticketsApi;\n\n// Export the API for store configuration\nexport default ticketsApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestConfig.html":{"url":"interfaces/RequestConfig.html","title":"interface - RequestConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/apiHelpers.ts\n        \n\n\n            \n                Description\n            \n            \n                Request configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            method\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            retries\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            retryDelay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timeout\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         HttpMethod\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         HttpMethod\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retries:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        retryDelay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryDelay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeout\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timeout:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {AppConfig} from '../config/environments';\n\n/**\n * API Response Types\n */\nexport interface ApiResponse {\n  success: boolean;\n  data: T | null;\n  error: ApiError | null;\n  message?: string;\n}\n\nexport interface ApiError {\n  code: number;\n  message: string;\n  details?: any;\n}\n\n/**\n * API Request Types\n */\nexport interface PaginatedRequest {\n  page?: number;\n  limit?: number;\n  search?: string;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n}\n\nexport interface PaginatedResponse {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * HTTP Methods\n */\nexport type HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n\n/**\n * Request configuration\n */\nexport interface RequestConfig {\n  method?: HttpMethod;\n  headers?: Record;\n  timeout?: number;\n  retries?: number;\n  retryDelay?: number;\n}\n\n/**\n * Build API URL with base URL\n */\nexport const buildApiUrl = (endpoint: string): string => {\n  const baseUrl = AppConfig.BASE_API_URL.replace(/\\/$/, ''); // Remove trailing slash\n  const cleanEndpoint = endpoint.replace(/^\\//, ''); // Remove leading slash\n  return `${baseUrl}/api/v1/${cleanEndpoint}`;\n};\n\n/**\n * Build query parameters string\n */\nexport const buildQueryParams = (params: Record): string => {\n  const cleanParams = Object.entries(params)\n    .filter(\n      ([_, value]) => value !== undefined && value !== null && value !== ''\n    )\n    .map(([key, value]) => [key, String(value)]);\n\n  if (cleanParams.length === 0) {\n    return '';\n  }\n\n  const searchParams = new URLSearchParams(cleanParams);\n  return `?${searchParams.toString()}`;\n};\n\n/**\n * Get request headers with common defaults\n */\nexport const getRequestHeaders = (\n  token?: string,\n  additionalHeaders?: Record\n): Record => {\n  const headers: Record = {\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'X-App-Version': '1.0.0',\n    'X-Platform': 'mobile',\n    ...additionalHeaders,\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  return headers;\n};\n\n/**\n * Parse API error response\n */\nexport const parseApiError = (error: any): ApiError => {\n  // Handle different error formats\n  if (error?.data?.error) {\n    return {\n      code: error.status || 500,\n      message: error.data.error.message || 'An error occurred',\n      details: error.data.error.details,\n    };\n  }\n\n  if (error?.data?.message) {\n    return {\n      code: error.status || 500,\n      message: error.data.message,\n      details: error.data,\n    };\n  }\n\n  if (error?.message) {\n    return {\n      code: error.status || 500,\n      message: error.message,\n      details: error,\n    };\n  }\n\n  return {\n    code: error?.status || 500,\n    message: 'An unexpected error occurred',\n    details: error,\n  };\n};\n\n/**\n * Check if error is a network error\n */\nexport const isNetworkError = (error: any): boolean => {\n  return (\n    error?.name === 'NetworkError' ||\n    error?.code === 'NETWORK_ERROR' ||\n    error?.status === 0 ||\n    !navigator.onLine\n  );\n};\n\n/**\n * Check if error requires authentication\n */\nexport const isAuthError = (error: any): boolean => {\n  return error?.status === 401 || error?.status === 403;\n};\n\n/**\n * Check if error is retryable\n */\nexport const isRetryableError = (error: any): boolean => {\n  if (isNetworkError(error)) {\n    return true;\n  }\n\n  const retryableStatuses = [408, 429, 500, 502, 503, 504];\n  return retryableStatuses.includes(error?.status);\n};\n\n/**\n * Calculate retry delay with exponential backoff\n */\nexport const calculateRetryDelay = (\n  attempt: number,\n  baseDelay: number = 1000\n): number => {\n  // Exponential backoff: baseDelay * 2^attempt + random jitter\n  const exponentialDelay = baseDelay * Math.pow(2, attempt);\n  const jitter = Math.random() * 1000; // Add up to 1 second of jitter\n  return Math.min(exponentialDelay + jitter, 30000); // Cap at 30 seconds\n};\n\n/**\n * Format file size for uploads\n */\nexport const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) {\n    return '0 Bytes';\n  }\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n};\n\n/**\n * Validate file for upload\n */\nexport const validateFileUpload = (\n  file: {size: number; type: string; name: string},\n  options: {\n    maxSize?: number;\n    allowedTypes?: string[];\n    allowedExtensions?: string[];\n  } = {}\n): {valid: boolean; error?: string} => {\n  const {\n    maxSize = 10 * 1024 * 1024, // 10MB default\n    allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'],\n    allowedExtensions = ['.jpg', '.jpeg', '.png', '.pdf'],\n  } = options;\n\n  // Check file size\n  if (file.size > maxSize) {\n    return {\n      valid: false,\n      error: `File size must be less than ${formatFileSize(maxSize)}`,\n    };\n  }\n\n  // Check file type\n  if (!allowedTypes.includes(file.type)) {\n    return {\n      valid: false,\n      error: `File type ${file.type} is not allowed`,\n    };\n  }\n\n  // Check file extension\n  const extension = file.name\n    .toLowerCase()\n    .substring(file.name.lastIndexOf('.'));\n  if (!allowedExtensions.includes(extension)) {\n    return {\n      valid: false,\n      error: `File extension ${extension} is not allowed`,\n    };\n  }\n\n  return {valid: true};\n};\n\n/**\n * Debug API request/response\n */\nexport const debugApiCall = (\n  method: string,\n  url: string,\n  request?: any,\n  response?: any,\n  error?: any\n) => {\n  if (!__DEV__) {\n    return;\n  }\n\n  console.group(`[API] ${method} ${url}`);\n\n  if (request) {\n    console.log('Request:', request);\n  }\n\n  if (response) {\n    console.log('Response:', response);\n  }\n\n  if (error) {\n    console.error('Error:', error);\n  }\n\n  console.groupEnd();\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestSasTokenRequest.html":{"url":"interfaces/RequestSasTokenRequest.html","title":"interface - RequestSasTokenRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestSasTokenRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                Request SAS token payload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            customerId\n                                        \n                                \n                                \n                                        \n                                            docType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        docType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docType:         KycDocumentType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocumentType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RoleBasedGuardProps.html":{"url":"interfaces/RoleBasedGuardProps.html","title":"interface - RoleBasedGuardProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RoleBasedGuardProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/navigation/roleBasedGuard.tsx\n        \n\n\n            \n                Description\n            \n            \n                Role-Based Guard Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fallback\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            requireAuth\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     React.ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fallback\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fallback:     React.ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.ReactNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        requireAuth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        requireAuth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {LoadingOverlay} from '../components';\nimport {useAppSelector} from '../hooks/useTypedRedux';\nimport {selectIsLoggedIn, selectAuthLoading} from '../store/newAuthSlice';\n\n/**\n * Role-Based Guard Props\n */\ninterface RoleBasedGuardProps {\n  children: React.ReactNode;\n  requireAuth?: boolean;\n  fallback?: React.ReactNode;\n}\n\n/**\n * Role-Based Guard Component\n * Redirects unauthenticated users or shows loading state\n */\nconst RoleBasedGuard: React.FC = ({\n  children,\n  requireAuth = true,\n  fallback = null,\n}) => {\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\n  const isLoading = useAppSelector(selectAuthLoading);\n\n  // Show loading overlay during authentication check\n  if (isLoading) {\n    return (\n      \n    );\n  }\n\n  // If authentication is required but user is not logged in\n  if (requireAuth && !isLoggedIn) {\n    return fallback ? <>{fallback} : null;\n  }\n\n  // If user is logged in but trying to access auth screens\n  if (!requireAuth && isLoggedIn) {\n    return fallback ? <>{fallback} : null;\n  }\n\n  return <>{children};\n};\n\n/**\n * HOC wrapper for components\n */\nexport function withRoleBasedGuard(\n  Component: React.ComponentType,\n  options: Omit = {}\n) {\n  const WrappedComponent = (props: T) => (\n    \n      \n    \n  );\n\n  WrappedComponent.displayName = `withRoleBasedGuard(${\n    Component.displayName || Component.name\n  })`;\n\n  return WrappedComponent;\n}\n\nexport default RoleBasedGuard;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SafeAreaContainerProps.html":{"url":"interfaces/SafeAreaContainerProps.html","title":"interface - SafeAreaContainerProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SafeAreaContainerProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n            \n                Description\n            \n            \n                Safe Area Container Types\n\n            \n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            backgroundColor\n                                        \n                                \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            keyboardAvoiding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            padding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paddingHorizontal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            paddingVertical\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollable\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyboardAvoiding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyboardAvoiding:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        padding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        padding:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paddingHorizontal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paddingHorizontal:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paddingVertical\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paddingVertical:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SafeAreaLayoutProps.html":{"url":"interfaces/SafeAreaLayoutProps.html","title":"interface - SafeAreaLayoutProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SafeAreaLayoutProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/layout/SafeAreaLayout.tsx\n        \n\n\n            \n                Description\n            \n            \n                Safe Area Layout Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            backgroundColor\n                                        \n                                \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            edges\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            keyboardAvoiding\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scrollable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusBarStyle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            style\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     React.ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyboardAvoiding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyboardAvoiding:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scrollable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scrollable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusBarStyle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusBarStyle:     \"default\" | \"dark-content\" | \"light-content\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"default\" | \"dark-content\" | \"light-content\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        style:         object\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         object\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {SafeAreaView} from 'react-native-safe-area-context';\nimport {useAppTheme} from '../../theme/ThemeProvider';\n\n/**\n * Safe Area Layout Props\n */\nexport interface SafeAreaLayoutProps {\n  children: React.ReactNode;\n  scrollable?: boolean;\n  keyboardAvoiding?: boolean;\n  backgroundColor?: string;\n  statusBarStyle?: 'default' | 'dark-content' | 'light-content';\n  edges?: Array;\n  style?: object;\n}\n\n/**\n * Safe Area Layout Component\n * Provides consistent safe area handling across all screens\n */\nconst SafeAreaLayout: React.FC = ({\n  children,\n  scrollable = false,\n  keyboardAvoiding = true,\n  backgroundColor,\n  statusBarStyle = 'dark-content',\n  edges = ['top', 'bottom', 'left', 'right'],\n  style,\n}) => {\n  const theme = useAppTheme();\n  const bgColor = backgroundColor || theme.colors.background;\n\n  // Render content based on configuration\n  const renderContent = () => {\n    if (keyboardAvoiding) {\n      return (\n        \n          {scrollable ? (\n            \n              {children}\n            \n          ) : (\n            \n              {children}\n            \n          )}\n        \n      );\n    }\n\n    if (scrollable) {\n      return (\n        \n          {children}\n        \n      );\n    }\n\n    return (\n      \n        {children}\n      \n    );\n  };\n\n  return (\n    <>\n      \n      \n        {renderContent()}\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n  },\n  scrollView: {\n    flex: 1,\n  },\n  scrollContent: {\n    flexGrow: 1,\n  },\n  keyboardAvoidingView: {\n    flex: 1,\n  },\n});\n\nexport default SafeAreaLayout;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SasInfo.html":{"url":"interfaces/SasInfo.html","title":"interface - SasInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SasInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/AzureBlob.ts\n        \n\n\n            \n                Description\n            \n            \n                SAS information for Azure Blob upload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expiresInSec\n                                        \n                                \n                                \n                                        \n                                            sasUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiresInSec\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresInSec:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sasUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sasUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SasInfo {\n  sasUrl: string;\n  expiresInSec: number;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\n/**\n * Upload parameters for Azure Blob\n */\nexport interface AzureBlobUploadParams {\n  sasUrl: string;\n  file: RNFile;\n  expiresInSec: number;\n  onProgress?: (progress: UploadProgress) => void;\n  getFreshSas?: () => Promise;\n  abortSignal?: AbortSignal;\n}\n\n/**\n * Upload error types\n */\nexport type UploadErrorType =\n  | 'NETWORK_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'EXPIRED_TOKEN'\n  | 'CANCELLED'\n  | 'INVALID_RESPONSE'\n  | 'UPLOAD_EXPIRED';\n\n/**\n * Upload error with specific type\n */\nexport interface UploadError extends Error {\n  type: UploadErrorType;\n  statusCode?: number;\n  retryable: boolean;\n}\n\n// Import RNFile from existing types\nimport type {RNFile} from './File';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SasTokenMutex.html":{"url":"classes/SasTokenMutex.html","title":"class - SasTokenMutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SasTokenMutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/kycUploader.ts\n        \n\n\n            \n                Description\n            \n            \n                Mutex for SAS token refresh to prevent concurrent requests\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                locks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeWithLock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        locks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/lib/kycUploader.ts:64\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeWithLock\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeWithLock(key: string, operation: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/kycUploader.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                operation\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {kycApi} from '../api/endpoints/kyc';\nimport {requestKycSasToken} from '../api/kycService';\nimport type {RootState} from '../store';\nimport {selectNewAuth} from '../store/newAuthSlice';\nimport type {SasInfo} from '../types/AzureBlob';\nimport type {RNFile} from '../types/File';\nimport type {\n  KycDocumentType,\n  RequestSasTokenRequest,\n} from '../types/KycDocument';\nimport {uploadFileToSas, estimateUploadTime} from '../utils/azureBlobUploader';\nimport {compressImage, isCompressibleImage} from '../utils/imageCompression';\nimport {validateKycDocument} from '../utils/kycValidation';\n\n/**\n * Upload parameters for KYC document upload\n */\nexport interface KycDocUploadParams {\n  leadId?: string; // made optional for backward compatibility\n  customerId: string;\n  docType: KycDocumentType;\n  file: RNFile;\n  onProgress?: (percentage: number) => void;\n  store?: {\n    getState: () => RootState;\n    dispatch: any;\n  };\n  onInvalidate?: (leadId: string) => void;\n  abortSignal?: AbortSignal; // New parameter for cancellation\n}\n\n/**\n * Upload result containing blob information\n */\nexport interface UploadResult {\n  blobName: string;\n  url: string;\n}\n\n/**\n * Upload error with step information\n */\nexport class KycUploadError extends Error {\n  public readonly step: string;\n  public readonly originalError: Error;\n\n  constructor(step: string, originalError: Error) {\n    super(`KYC upload failed at ${step}: ${originalError.message}`);\n    this.name = 'KycUploadError';\n    this.step = step;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Mutex for SAS token refresh to prevent concurrent requests\n */\nclass SasTokenMutex {\n  private readonly locks = new Map>();\n\n  async executeWithLock(\n    key: string,\n    operation: () => Promise\n  ): Promise {\n    // If there's already a pending operation for this key, wait for it\n    if (this.locks.has(key)) {\n      return this.locks.get(key)!;\n    }\n\n    // Create and store the operation promise\n    const promise = operation();\n    this.locks.set(key, promise);\n\n    try {\n      const result = await promise;\n      return result;\n    } finally {\n      // Always clean up the lock\n      this.locks.delete(key);\n    }\n  }\n}\n\n// Global mutex instance\nconst sasTokenMutex = new SasTokenMutex();\n\n/**\n * Extract blob name from SAS URL\n * Format: https://storage.blob.core.windows.net/container/path/filename.ext?sas=token\n */\nfunction extractBlobName(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    const pathParts = url.pathname.split('/');\n\n    // Remove empty first element and container name\n    const pathWithoutContainer = pathParts.slice(2);\n\n    // Join remaining parts to get blob name\n    return pathWithoutContainer.join('/');\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract blob name from SAS URL:',\n      error\n    );\n    // Fallback: use timestamp-based name\n    return `unknown-${Date.now()}`;\n  }\n}\n\n/**\n * Extract base URL (without query parameters) from SAS URL\n */\nfunction extractBaseUrl(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    return `${url.origin}${url.pathname}`;\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract base URL from SAS URL:',\n      error\n    );\n    return sasUrl.split('?')[0];\n  }\n}\n\n/**\n * Get current user ID from auth state\n */\nfunction getCurrentUserId(store?: {getState: () => RootState}): string {\n  if (!store) {\n    throw new Error('Store is required to get current user ID');\n  }\n\n  const state = store.getState();\n\n  // Get user from new auth system\n  const newAuth = selectNewAuth(state);\n  const user = newAuth?.user;\n\n  if (!user || !user.id) {\n    throw new Error('User not authenticated or missing user ID');\n  }\n\n  return user.id;\n}\n\n/**\n * Check if SAS token needs refresh based on remaining validity and estimated upload time\n */\nfunction needsSasTokenRefresh(\n  sasInfo: SasInfo,\n  file: RNFile,\n  bufferTimeSeconds: number = 60\n): boolean {\n  // Calculate estimated upload time (rough estimate: 1MB/s)\n  const estimatedUploadTimeSeconds = estimateUploadTime(file.size);\n\n  // Check if remaining validity is less than estimated upload time + buffer\n  const requiredTimeSeconds = estimatedUploadTimeSeconds + bufferTimeSeconds;\n\n  const needsRefresh = sasInfo.expiresInSec  2MB\n * 3. Get SAS token with smart expiry checking\n * 4. Upload to Azure Blob with progress tracking\n * 5. Invalidate cache tags\n * 6. Return blob information\n *\n * @param params - Upload parameters\n * @returns Promise resolving to blob information\n */\nexport async function uploadKycDocument(\n  params: KycDocUploadParams\n): Promise {\n  const {\n    leadId,\n    customerId,\n    docType,\n    file,\n    onProgress,\n    store,\n    onInvalidate,\n    abortSignal,\n  } = params;\n\n  console.log(`[KycUploader] Starting KYC document upload for ${file.name}`);\n\n  let processedFile = file;\n  let sasInfo: SasInfo;\n\n  // Step 0: Validate customer ID\n  try {\n    console.log('[KycUploader] Step 3: Validating customer ID...');\n    if (!customerId) {\n      throw new Error('Customer ID is required');\n    }\n    console.log(`[KycUploader] Using customer ID: ${customerId}`);\n  } catch (error) {\n    console.error('[KycUploader] Customer ID validation failed:', error);\n    throw new KycUploadError('authentication', error as Error);\n  }\n\n  // Step 1: Validate document\n  try {\n    console.log('[KycUploader] Step 1: Validating document...');\n    await validateKycDocument(file, customerId, leadId);\n    console.log('[KycUploader] Document validation passed');\n  } catch (error) {\n    console.error('[KycUploader] Document validation failed:', error);\n    throw new KycUploadError('validation', error as Error);\n  }\n\n  // Step 2: Compress if needed\n  try {\n    console.log('[KycUploader] Step 2: Checking compression needs...');\n\n    const isImage = isCompressibleImage(file);\n    const sizeMB = file.size / (1024 * 1024);\n\n    if (isImage && sizeMB > 2) {\n      console.log(\n        `[KycUploader] Compressing ${file.name} (${sizeMB.toFixed(2)} MB)`\n      );\n      // Update progress for compression\n      if (onProgress) {\n        onProgress(10); // 10% for compression start\n      }\n\n      const compressionResult = await compressImage(file);\n      processedFile = compressionResult;\n\n      console.log(\n        `[KycUploader] Compression completed: ${file.size} → ${compressionResult.size} bytes`\n      );\n      if (onProgress) {\n        onProgress(20); // 20% for compression complete\n      }\n    } else {\n      console.log('[KycUploader] No compression needed');\n      if (onProgress) {\n        onProgress(20); // Skip compression, move to 20%\n      }\n    }\n  } catch (error) {\n    console.error('[KycUploader] Compression failed:', error);\n    throw new KycUploadError('compression', error as Error);\n  }\n\n  // Step 3: Get SAS token with smart expiry checking\n  try {\n    console.log('[KycUploader] Step 3: Requesting SAS token...');\n\n    if (onProgress) {\n      onProgress(30); // 30% for SAS token request\n    }\n\n    let requestKycSasParams: RequestSasTokenRequest;\n    if (leadId) {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId,\n      };\n    } else {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId: 'LEAD-1014',\n      };\n    }\n    sasInfo = await requestKycSasToken(requestKycSasParams, store);\n\n    console.log(\n      `[KycUploader] SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n    );\n\n    // Check if we need to refresh token immediately\n    if (needsSasTokenRefresh(sasInfo, processedFile)) {\n      console.log(\n        '[KycUploader] SAS token needs immediate refresh due to insufficient validity'\n      );\n      sasInfo = await requestKycSasToken(requestKycSasParams, store);\n      console.log(\n        `[KycUploader] Fresh SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n      );\n    }\n\n    if (onProgress) {\n      onProgress(40); // 40% for SAS token ready\n    }\n  } catch (error) {\n    console.error('[KycUploader] SAS token acquisition failed:', error);\n    throw new KycUploadError('sas_token', error as Error);\n  }\n\n  // Step 4: Upload to Azure Blob\n  try {\n    console.log('[KycUploader] Step 4: Uploading to Azure Blob...');\n\n    const getFreshSas = async (): Promise => {\n      console.log('[KycUploader] Refreshing SAS token during upload...');\n\n      let requestKycSasParams: RequestSasTokenRequest;\n      if (leadId) {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId,\n        };\n      } else {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId: 'LEAD-1013',\n        };\n      }\n      return sasTokenMutex.executeWithLock(\n        `${leadId}-${docType}-${customerId}`,\n        async () => {\n          const freshSas = await requestKycSasToken(requestKycSasParams, store);\n          console.log(\n            `[KycUploader] Fresh SAS token acquired during upload, expires in ${freshSas.expiresInSec}s`\n          );\n          return freshSas;\n        }\n      );\n    };\n\n    await uploadFileToSas({\n      // This function now expects AzureBlobUploadParams\n      sasUrl: sasInfo.sasUrl,\n      file: processedFile,\n      expiresInSec: sasInfo.expiresInSec,\n      onProgress: progress => {\n        // Map upload progress to 40-90% range\n        const mappedProgress = 40 + progress.percentage * 0.5;\n        if (onProgress) {\n          onProgress(Math.round(mappedProgress));\n        }\n      },\n      getFreshSas,\n      abortSignal, // New parameter abortSignal for cancellation\n    });\n\n    console.log('[KycUploader] Upload to Azure Blob completed');\n\n    if (onProgress) {\n      onProgress(90); // 90% for upload complete\n    }\n  } catch (error) {\n    console.error('[KycUploader] Upload to Azure Blob failed:', error);\n    throw new KycUploadError('upload', error as Error);\n  }\n\n  // Step 5: Invalidate cache tags\n  try {\n    console.log('[KycUploader] Step 5: Invalidating cache tags...');\n\n    if (store) {\n      // Prefer store-based invalidation\n      console.log('[KycUploader] Using store-based cache invalidation');\n      store.dispatch(\n        kycApi.util.invalidateTags([\n          {type: 'KycDoc', id: leadId},\n          {type: 'KycDoc', id: customerId},\n          {type: 'KycDoc', id: 'LIST'},\n        ])\n      );\n    } else if (onInvalidate) {\n      // Fallback to callback-based invalidation\n      console.log('[KycUploader] Using callback-based cache invalidation');\n      onInvalidate(leadId);\n    } else {\n      console.warn(\n        '[KycUploader] No invalidation method provided - cache may be stale'\n      );\n    }\n\n    if (onProgress) {\n      onProgress(95); // 95% for cache invalidation\n    }\n  } catch (error) {\n    console.error('[KycUploader] Cache invalidation failed:', error);\n    // Don't throw here - upload succeeded, cache invalidation is nice-to-have\n  }\n\n  // Step 6: Return result\n  try {\n    console.log('[KycUploader] Step 6: Preparing result...');\n\n    const blobName = extractBlobName(sasInfo.sasUrl);\n    const url = extractBaseUrl(sasInfo.sasUrl);\n\n    const result: UploadResult = {\n      blobName,\n      url,\n    };\n\n    console.log(\n      '[KycUploader] KYC document upload completed successfully:',\n      result\n    );\n    if (onProgress) {\n      onProgress(100); // 100% complete\n    }\n\n    return result;\n  } catch (error) {\n    console.error('[KycUploader] Failed to prepare result:', error);\n    throw new KycUploadError('result_preparation', error as Error);\n  }\n}\n\n/**\n * Utility function to check if a file needs compression\n */\nexport function shouldCompressFile(file: RNFile): boolean {\n  const isImage = isCompressibleImage(file);\n  const sizeMB = file.size / (1024 * 1024);\n  return isImage && sizeMB > 2;\n}\n\n/**\n * Utility function to estimate total upload time including all steps\n */\nexport function estimateKycUploadTime(file: RNFile): number {\n  let totalSeconds = 0;\n\n  // Validation: ~1 second (includes API call for doc count)\n  totalSeconds += 1;\n\n  // Compression: ~2 seconds for 10MB image\n  if (shouldCompressFile(file)) {\n    totalSeconds += 2;\n  }\n\n  // SAS token: ~0.5 seconds\n  totalSeconds += 0.5;\n\n  // Upload: file size dependent\n  totalSeconds += estimateUploadTime(file.size);\n\n  // Cache invalidation: ~0.1 seconds\n  totalSeconds += 0.1;\n\n  return Math.ceil(totalSeconds);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SasTokenResponse.html":{"url":"interfaces/SasTokenResponse.html","title":"interface - SasTokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SasTokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/KycDocument.ts\n        \n\n\n            \n                Description\n            \n            \n                SAS token response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sasUrl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sasUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sasUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type KycDocumentType =\n  | 'IncomeProof'\n  | 'LightBill'\n  | 'CancelledCheque'\n  | 'Aadhaar'\n  | 'PAN'\n  | 'PassportPhoto'\n  | 'Other';\n\n/**\n * KYC document status\n */\nexport type KycDocumentStatus = 'Pending' | 'Approved' | 'Rejected';\n\n/**\n * Request SAS token payload\n */\nexport interface RequestSasTokenRequest {\n  customerId: string;\n  docType: KycDocumentType;\n  leadId?: string;\n}\n\n/**\n * SAS token response\n */\nexport interface SasTokenResponse {\n  sasUrl: string;\n}\n\n/**\n * KYC document details\n */\nexport interface KycDocument {\n  docId: string;\n  customerId: string;\n  docType: KycDocumentType;\n  status: KycDocumentStatus;\n  uploadedAt: string;\n  uploadedBy: string;\n}\n\n/**\n * List KYC documents request parameters\n */\nexport interface ListKycDocumentsRequest {\n  leadId?: string;\n  customerId?: string;\n}\n\n/**\n * List KYC documents response\n */\nexport interface ListKycDocumentsResponse {\n  documents: KycDocument[];\n}\n\n/**\n * Document download SAS request\n */\nexport interface GetDocumentSasRequest {\n  docId: string;\n}\n\n/**\n * Document download SAS response\n */\nexport interface GetDocumentSasResponse {\n  sasUrl: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecurePersistAdapter.html":{"url":"classes/SecurePersistAdapter.html","title":"class - SecurePersistAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecurePersistAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/securePersistAdapter.ts\n        \n\n\n            \n                Description\n            \n            \n                Secure storage adapter for Redux-Persist\nImplements the Storage interface required by redux-persist\n\n            \n\n\n            \n                Implements\n            \n            \n                        Storage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getItem\n                            \n                            \n                                    Async\n                                removeItem\n                            \n                            \n                                    Async\n                                setItem\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/store/securePersistAdapter.ts:36\n                        \n                    \n\n\n            \n                \n                        Get item from storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        removeItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeItem(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/store/securePersistAdapter.ts:98\n                        \n                    \n\n\n            \n                \n                        Remove item from storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    setItem(key: string, value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/store/securePersistAdapter.ts:69\n                        \n                    \n\n\n            \n                \n                        Set item in storage\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import AsyncStorage from '@react-native-async-storage/async-storage';\nimport type {Storage} from 'redux-persist';\nimport {SecureStorageError} from '../errors/SecureStorageError';\nimport {saveJWT, getJWT, clearJWT} from '../storage/secureStorage';\n\n/**\n * Storage keys mapping for redux-persist\n */\nconst PERSIST_KEY_MAPPING: Record = {\n  'persist:root': 'other', // Root persist key\n  auth: 'other', // Auth state key\n  auth_token_secure: 'jwt', // JWT token key\n};\n\n/**\n * Determine if key is for JWT token\n */\nconst isJWTKey = (key: string): boolean => {\n  return key === 'auth_token_secure' || PERSIST_KEY_MAPPING[key] === 'jwt';\n};\n\n/**\n * Secure storage adapter for Redux-Persist\n * Implements the Storage interface required by redux-persist\n */\nclass SecurePersistAdapter implements Storage {\n  /**\n   * Get item from storage\n   */\n  async getItem(key: string): Promise {\n    try {\n      console.log(`[SecurePersistAdapter] Getting item: ${key}`);\n\n      if (isJWTKey(key)) {\n        const token = await getJWT();\n        return token || null;\n      }\n\n      // For non-JWT keys, use AsyncStorage for regular Redux Persist data\n      const value = await AsyncStorage.getItem(key);\n      console.log(\n        `[SecurePersistAdapter] Retrieved from AsyncStorage: ${key} = ${\n          value ? 'data exists' : 'null'\n        }`\n      );\n      return value;\n    } catch (error) {\n      console.error(`[SecurePersistAdapter] Failed to get ${key}:`, error);\n\n      if (error instanceof SecureStorageError) {\n        // Re-throw secure storage errors for higher-level handling\n        throw error;\n      }\n\n      // For other errors, return null to prevent persist failures\n      return null;\n    }\n  }\n\n  /**\n   * Set item in storage\n   */\n  async setItem(key: string, value: string): Promise {\n    try {\n      console.log(`[SecurePersistAdapter] Setting item: ${key}`);\n\n      if (isJWTKey(key) && value) {\n        await saveJWT(value);\n        return;\n      }\n\n      // For non-JWT keys, store in AsyncStorage for regular Redux Persist data\n      await AsyncStorage.setItem(key, value);\n      console.log(`[SecurePersistAdapter] Stored in AsyncStorage: ${key}`);\n      return;\n    } catch (error) {\n      console.error(`[SecurePersistAdapter] Failed to set ${key}:`, error);\n\n      if (error instanceof SecureStorageError) {\n        // Re-throw secure storage errors for higher-level handling\n        throw error;\n      }\n\n      // For other errors, silently continue to prevent persist failures\n      return;\n    }\n  }\n\n  /**\n   * Remove item from storage\n   */\n  async removeItem(key: string): Promise {\n    try {\n      console.log(`[SecurePersistAdapter] Removing item: ${key}`);\n\n      if (isJWTKey(key)) {\n        await clearJWT();\n        return;\n      }\n\n      // For non-JWT keys, remove from AsyncStorage\n      await AsyncStorage.removeItem(key);\n      console.log(`[SecurePersistAdapter] Removed from AsyncStorage: ${key}`);\n      return;\n    } catch (error) {\n      console.error(`[SecurePersistAdapter] Failed to remove ${key}:`, error);\n\n      if (error instanceof SecureStorageError) {\n        // Re-throw secure storage errors for higher-level handling\n        throw error;\n      }\n\n      // For other errors, silently continue\n      return;\n    }\n  }\n}\n\n/**\n * Export singleton instance\n */\nexport const securePersistAdapter = new SecurePersistAdapter();\n\n/**\n * Export class for testing\n */\nexport {SecurePersistAdapter};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecureStorageError.html":{"url":"classes/SecureStorageError.html","title":"class - SecureStorageError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecureStorageError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/SecureStorageError.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for secure storage operations\nProvides detailed error information for storage failures\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                operation\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                originalError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forDelete\n                            \n                            \n                                    Static\n                                forMigration\n                            \n                            \n                                    Static\n                                forRead\n                            \n                            \n                                    Static\n                                forWrite\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, operation: string, code: string, originalError?: Error)\n                    \n                \n                        \n                            \n                                Defined in src/errors/SecureStorageError.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        originalError\n                                                  \n                                                        \n                                                                    Error\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/SecureStorageError.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        operation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/SecureStorageError.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        originalError\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/SecureStorageError.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    forDelete(key: string, originalError?: Error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/SecureStorageError.ts:56\n                        \n                    \n\n\n            \n                \n                        Create error for delete operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SecureStorageError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forMigration\n                        \n                    \n                \n            \n            \n                \n                        \n                    forMigration(originalError?: Error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/SecureStorageError.ts:68\n                        \n                    \n\n\n            \n                \n                        Create error for migration operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SecureStorageError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRead(key: string, originalError?: Error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/SecureStorageError.ts:32\n                        \n                    \n\n\n            \n                \n                        Create error for read operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SecureStorageError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forWrite\n                        \n                    \n                \n            \n            \n                \n                        \n                    forWrite(key: string, originalError?: Error)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/SecureStorageError.ts:44\n                        \n                    \n\n\n            \n                \n                        Create error for write operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         SecureStorageError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/SecureStorageError.ts:80\n                        \n                    \n\n\n            \n                \n                        Convert to plain object for logging\n\n\n                        \n                            Returns :     { name: any; message: any; code: string; operation: string; stack: any; originalError: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class SecureStorageError extends Error {\n  public readonly code: string;\n  public readonly operation: string;\n  public readonly originalError?: Error;\n\n  constructor(\n    message: string,\n    operation: string,\n    code: string = 'STORAGE_ERROR',\n    originalError?: Error\n  ) {\n    super(message);\n    this.name = 'SecureStorageError';\n    this.code = code;\n    this.operation = operation;\n    this.originalError = originalError;\n\n    // Maintains proper stack trace for where our error was thrown (V8 only)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, SecureStorageError);\n    }\n  }\n\n  /**\n   * Create error for read operations\n   */\n  static forRead(key: string, originalError?: Error): SecureStorageError {\n    return new SecureStorageError(\n      `Failed to read from secure storage: ${key}`,\n      'READ',\n      'READ_ERROR',\n      originalError\n    );\n  }\n\n  /**\n   * Create error for write operations\n   */\n  static forWrite(key: string, originalError?: Error): SecureStorageError {\n    return new SecureStorageError(\n      `Failed to write to secure storage: ${key}`,\n      'WRITE',\n      'WRITE_ERROR',\n      originalError\n    );\n  }\n\n  /**\n   * Create error for delete operations\n   */\n  static forDelete(key: string, originalError?: Error): SecureStorageError {\n    return new SecureStorageError(\n      `Failed to delete from secure storage: ${key}`,\n      'DELETE',\n      'DELETE_ERROR',\n      originalError\n    );\n  }\n\n  /**\n   * Create error for migration operations\n   */\n  static forMigration(originalError?: Error): SecureStorageError {\n    return new SecureStorageError(\n      'Failed to migrate legacy token to secure storage',\n      'MIGRATION',\n      'MIGRATION_ERROR',\n      originalError\n    );\n  }\n\n  /**\n   * Convert to plain object for logging\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      stack: this.stack,\n      originalError: this.originalError?.message,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendOtpRequest.html":{"url":"interfaces/SendOtpRequest.html","title":"interface - SendOtpRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendOtpRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                Send OTP Request\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendOtpResponse.html":{"url":"interfaces/SendOtpResponse.html","title":"interface - SendOtpResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendOtpResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                Send OTP Response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            otpSent\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        otpSent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otpSent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServerError.html":{"url":"interfaces/ServerError.html","title":"interface - ServerError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServerError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/api-error.ts\n        \n\n\n            \n                Description\n            \n            \n                Server Error (5xx) - Internal server errors\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            details\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        details\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        details:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ValidationError {\n  status: 400;\n  message: string;\n  errors: Record; // field -> error messages\n}\n\n/**\n * Server Error (5xx) - Internal server errors\n */\nexport interface ServerError {\n  status: number;\n  message: string;\n  details?: string;\n}\n\n/**\n * Generic API Error Response\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: string;\n  details?: any;\n}\n\n/**\n * Type guards for error detection\n */\nexport const isValidationError = (error: any): error is ValidationError => {\n  return (\n    error &&\n    typeof error === 'object' &&\n    error.status === 400 &&\n    typeof error.message === 'string' &&\n    error.errors &&\n    typeof error.errors === 'object'\n  );\n};\n\nexport const isServerError = (error: any): error is ServerError => {\n  return (\n    error &&\n    typeof error === 'object' &&\n    typeof error.status === 'number' &&\n    error.status >= 500 &&\n    error.status  {\n  return (\n    error &&\n    typeof error === 'object' &&\n    error.success === false &&\n    typeof error.error === 'string'\n  );\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Service.html":{"url":"interfaces/Service.html","title":"interface - Service","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Service\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service Type Definitions\nShared model for solar services catalogue\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            estimatedDuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            features\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            priceRange\n                                        \n                                \n                                \n                                        \n                                            serviceId\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        estimatedDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        estimatedDuration:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        features\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        features:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priceRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priceRange:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        serviceId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        serviceId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Service {\n  serviceId: string;\n  name: string;\n  description: string;\n  type: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n  };\n  active: boolean;\n  category?: string;\n  features?: string[];\n  estimatedDuration?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface GetServicesRequest {\n  type?: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n  };\n  active?: boolean;\n  category?: string;\n}\n\nexport interface ServiceResponse {\n  success: boolean;\n  data: {\n    items: Service[];\n    total?: number;\n    page?: number;\n    limit?: number;\n  };\n  error?: string;\n}\n\nexport interface SingleServiceResponse {\n  success: boolean;\n  data: Service;\n  error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ServiceFetchError.html":{"url":"classes/ServiceFetchError.html","title":"class - ServiceFetchError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ServiceFetchError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/ServiceFetchError.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom error class for service API operations\nProvides detailed error information for service fetch failures\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                httpStatus\n                            \n                            \n                                    Public\n                                    Readonly\n                                operation\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                originalError\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                serviceId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forListFetch\n                            \n                            \n                                    Static\n                                forServiceFetch\n                            \n                            \n                                toJSON\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, operation: string, code: string, options?: literal type)\n                    \n                \n                        \n                            \n                                Defined in src/errors/ServiceFetchError.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        operation\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    literal type\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ServiceFetchError.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        httpStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ServiceFetchError.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        operation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ServiceFetchError.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        originalError\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Error\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ServiceFetchError.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        serviceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ServiceFetchError.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forListFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    forListFetch(originalError?: Error, httpStatus?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/ServiceFetchError.ts:40\n                        \n                    \n\n\n            \n                \n                        Create error for service list fetch operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                httpStatus\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ServiceFetchError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forServiceFetch\n                        \n                    \n                \n            \n            \n                \n                        \n                    forServiceFetch(serviceId: string, originalError?: Error, httpStatus?: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/ServiceFetchError.ts:55\n                        \n                    \n\n\n            \n                \n                        Create error for individual service fetch operations\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serviceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                originalError\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                httpStatus\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ServiceFetchError\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toJSON\n                        \n                    \n                \n            \n            \n                \ntoJSON()\n                \n            \n\n\n                    \n                        \n                            Defined in src/errors/ServiceFetchError.ts:71\n                        \n                    \n\n\n            \n                \n                        Convert to plain object for logging\n\n\n                        \n                            Returns :     { name: any; message: any; code: string; operation: string; serviceId: string; httpStatus: number; stack: any; originalError: any; }\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class ServiceFetchError extends Error {\n  public readonly code: string;\n  public readonly operation: string;\n  public readonly serviceId?: string;\n  public readonly httpStatus?: number;\n  public readonly originalError?: Error;\n\n  constructor(\n    message: string,\n    operation: string,\n    code: string = 'SERVICE_ERROR',\n    options?: {\n      serviceId?: string;\n      httpStatus?: number;\n      originalError?: Error;\n    }\n  ) {\n    super(message);\n    this.name = 'ServiceFetchError';\n    this.code = code;\n    this.operation = operation;\n    this.serviceId = options?.serviceId;\n    this.httpStatus = options?.httpStatus;\n    this.originalError = options?.originalError;\n\n    // Maintains proper stack trace for where our error was thrown (V8 only)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ServiceFetchError);\n    }\n  }\n\n  /**\n   * Create error for service list fetch operations\n   */\n  static forListFetch(\n    originalError?: Error,\n    httpStatus?: number\n  ): ServiceFetchError {\n    return new ServiceFetchError(\n      'Failed to fetch services list',\n      'LIST_FETCH',\n      'LIST_FETCH_ERROR',\n      {originalError, httpStatus}\n    );\n  }\n\n  /**\n   * Create error for individual service fetch operations\n   */\n  static forServiceFetch(\n    serviceId: string,\n    originalError?: Error,\n    httpStatus?: number\n  ): ServiceFetchError {\n    return new ServiceFetchError(\n      `Failed to fetch service: ${serviceId}`,\n      'SERVICE_FETCH',\n      'SERVICE_FETCH_ERROR',\n      {serviceId, originalError, httpStatus}\n    );\n  }\n\n  /**\n   * Convert to plain object for logging\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      operation: this.operation,\n      serviceId: this.serviceId,\n      httpStatus: this.httpStatus,\n      stack: this.stack,\n      originalError: this.originalError?.message,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceItemProps.html":{"url":"interfaces/ServiceItemProps.html","title":"interface - ServiceItemProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceItemProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/ServicesScreen.tsx\n        \n\n\n            \n                Description\n            \n            \n                Service Item Component\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cartItemCount\n                                        \n                                \n                                \n                                        \n                                            isCartFull\n                                        \n                                \n                                \n                                        \n                                            onAddToCart\n                                        \n                                \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                        \n                                            service\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cartItemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCartFull\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCartFull:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onAddToCart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onAddToCart:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        service\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        service:         Service\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Service\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useNavigation, useRoute} from '@react-navigation/native';\nimport type {RouteProp} from '@react-navigation/native';\nimport {StackNavigationProp} from '@react-navigation/stack';\nimport React, {useCallback, useLayoutEffect, useEffect, useState} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  StyleSheet,\n  RefreshControl,\n  TouchableOpacity,\n  ActivityIndicator,\n  Alert,\n} from 'react-native';\nimport {Button, Snackbar} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useGetServicesQuery} from '../../api/endpoints/services';\nimport {\n  NotificationBellIcon,\n  ProfileIcon,\n  SafeAreaContainer,\n} from '../../components/common';\nimport {useRefreshControl} from '../../hooks'; // Import the new refresh control hook\nimport {useCartActions} from '../../hooks/useCartActions';\nimport {CART_CHECKOUT_ROUTE} from '../../navigation';\nimport type {\n  MainTabParamList,\n  RootStackParamList,\n  RootStackScreenProps,\n} from '../../navigation/types';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {Service} from '../../types';\n\ntype ServicesScreenNavigationProp = StackNavigationProp;\n\ntype ServicesScreenRouteProp = RouteProp;\n\n/**\n * Service Item Component\n */\ninterface ServiceItemProps {\n  service: Service;\n  onPress: (service: Service) => void;\n  onAddToCart: (service: Service, increment?: number) => void;\n  isCartFull: boolean;\n  cartItemCount: number;\n}\n\nconst ServiceItem: React.FC = ({\n  service,\n  onPress,\n  onAddToCart,\n  isCartFull,\n  cartItemCount,\n}) => {\n  const theme = useAppTheme();\n\n  const handleAddToCart = () => {\n    onAddToCart(service);\n  };\n\n  const handleIncrement = () => {\n    onAddToCart(service); // Reuse the same add logic\n  };\n\n  const handleDecrement = () => {\n    // This will be passed from parent\n    onAddToCart(service, -1); // Indicate decrement\n  };\n\n  const canAddToCart = !isCartFull || cartItemCount > 0;\n  const showQuantityControls = cartItemCount > 0;\n\n  return (\n     onPress(service)}\n      activeOpacity={0.7}\n      accessible={true}\n      accessibilityRole=\"button\"\n      accessibilityLabel={`${service.name}, ${service.type} service. ${service.description}`}\n      accessibilityHint=\"Tap to view service details\"\n    >\n      \n        \n        \n          \n            {service.name}\n          \n          \n            {service.type}\n          \n        \n        \n      \n\n      \n        {service.description}\n      \n\n      \n        {service.priceRange && (\n          \n            \n            \n              Contact for pricing\n            \n          \n        )}\n\n        \n          {showQuantityControls ? (\n            // Quantity Controls Block\n            \n              {/* Minus Button */}\n              \n                \n              \n\n              {/* Quantity Display */}\n              \n                \n                  {cartItemCount}\n                \n              \n\n              {/* Plus Button */}\n              \n                \n              \n            \n          ) : (\n            // ADD Button (when quantity is 0)\n            \n              {isCartFull && cartItemCount === 0 ? 'Cart Full' : 'ADD'}\n            \n          )}\n        \n      \n    \n  );\n};\n\n/**\n * Services Screen Component\n */\nconst ServicesScreen: React.FC = () => {\n  const theme = useAppTheme();\n  const navigation = useNavigation();\n  const route = useRoute();\n\n  // Local state for success snackbar\n  const [successSnackbarVisible, setSuccessSnackbarVisible] = useState(false);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Use the collective refresh control hook\n  const {\n    refreshAll,\n    isRefreshing: isCollectiveRefreshing,\n    refreshError,\n    getFormattedLastRefresh,\n    clearError,\n  } = useRefreshControl();\n\n  // Fetch services - only active services\n  const {\n    data: services = [],\n    isLoading,\n    isError,\n    error,\n    refetch,\n  } = useGetServicesQuery({active: true});\n\n  // Cart actions\n  const {addToCart, removeFromCart, cartCount, isCartFull, cartItems} =\n    useCartActions();\n\n  const navigationToNotiScreen =\n    useNavigation['navigation']>();\n\n  const handleNotificationPress = () => {\n    navigationToNotiScreen.navigate('Notifications');\n  };\n\n  const handleProfilePress = () => {\n    navigation.navigate('Profile');\n  };\n\n  /**\n   * Configure header with notification-bell-icon and cart-icon\n   */\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      headerShown: true,\n      title: 'Services',\n      headerStyle: {\n        backgroundColor: theme.colors.primary,\n      },\n      headerTintColor: theme.colors.onPrimary,\n      headerTitleStyle: {\n        fontWeight: '600',\n      },\n      headerRight: () => (\n        \n          {/* Notification Bell Icon */}\n          \n\n          {/* Cart Icon */}\n           navigation.navigate(CART_CHECKOUT_ROUTE as any)}\n            accessible={true}\n            accessibilityRole=\"button\"\n            accessibilityLabel={`Shopping cart with ${cartCount} items`}\n            accessibilityHint=\"Navigate to cart checkout\"\n          >\n            \n              \n              {cartCount > 0 && (\n                \n                  \n                    {cartCount > 99 ? '99+' : cartCount.toString()}\n                  \n                \n              )}\n            \n          \n\n          {/* Profile Icon */}\n          \n        \n      ),\n    });\n  }, [navigation, theme.colors, cartCount]);\n\n  /**\n   * Handle success message from navigation params\n   */\n  useEffect(() => {\n    if (route.params?.showSuccessMessage && route.params?.successMessage) {\n      setSuccessMessage(route.params.successMessage);\n      setSuccessSnackbarVisible(true);\n\n      // Clear the params to prevent showing message again on re-focus\n      navigation.setParams({\n        showSuccessMessage: undefined,\n        successMessage: undefined,\n        leadId: undefined,\n      });\n    }\n  }, [route.params, navigation]);\n\n  /**\n   * Handle service item press\n   */\n  const handleServicePress = useCallback(\n    (service: Service) => {\n      navigation.navigate('ServiceDetail', {\n        serviceId: service.serviceId,\n        serviceName: service.name,\n      });\n    },\n    [navigation]\n  );\n\n  /**\n   * Handle add to cart (supports both add and decrement)\n   */\n  const handleAddToCart = useCallback(\n    (service: Service, increment: number = 1) => {\n      if (increment > 0) {\n        // Adding to cart\n        if (isCartFull) {\n          const existingItem = cartItems[service.serviceId];\n          if (!existingItem) {\n            Alert.alert(\n              'Cart Full',\n              'You have reached the maximum of 20 items in your cart. Please remove some items to add new ones.',\n              [{text: 'OK'}]\n            );\n            return;\n          }\n        }\n\n        try {\n          addToCart(service, increment);\n        } catch (error) {\n          console.error('[ServicesScreen] Add to cart failed:', error);\n          Alert.alert(\n            'Error',\n            'Could not add item to cart. Please try again.',\n            [{text: 'OK'}]\n          );\n        }\n      } else {\n        // Removing from cart (decrement)\n        try {\n          removeFromCart(service.serviceId, Math.abs(increment));\n        } catch (error) {\n          console.error('[ServicesScreen] Remove from cart failed:', error);\n          Alert.alert(\n            'Error',\n            'Could not remove item from cart. Please try again.',\n            [{text: 'OK'}]\n          );\n        }\n      }\n    },\n    [addToCart, removeFromCart, isCartFull, cartItems]\n  );\n\n  /**\n   * Handle collective refresh - refreshes all app data\n   */\n  const handleRefresh = useCallback(async () => {\n    try {\n      // Clear any previous refresh errors\n      if (refreshError) {\n        clearError();\n      }\n\n      // Perform collective refresh of all APIs\n      const result = await refreshAll({\n        showLoading: true,\n        includeUserData: true, // This will refresh auth and leads data too\n      });\n\n      if (!result.success && result.errors.length > 0) {\n        // Show error if refresh failed\n        const errorMessage = result.errors\n          .map(err => `${err.api}: ${err.error}`)\n          .join('\\n');\n\n        Alert.alert(\n          'Refresh Warning',\n          `Some data may not be up to date:\\n${errorMessage}`,\n          [{text: 'OK'}]\n        );\n      }\n    } catch (error) {\n      console.error('[ServicesScreen] Refresh failed:', error);\n      Alert.alert(\n        'Refresh Failed',\n        'Could not refresh app data. Please try again.',\n        [{text: 'OK'}]\n      );\n    }\n  }, [refreshAll, refreshError, clearError]);\n\n  /**\n   * Handle fallback refresh (RTK Query only) when collective refresh fails\n   */\n  const handleFallbackRefresh = useCallback(() => {\n    refetch();\n  }, [refetch]);\n\n  /**\n   * Handle retry on error\n   */\n  const handleRetry = useCallback(() => {\n    // Try collective refresh first, fallback to RTK Query refetch\n    handleRefresh().catch(() => {\n      handleFallbackRefresh();\n    });\n  }, [handleRefresh, handleFallbackRefresh]);\n\n  /**\n   * Show error alert\n   */\n  const showErrorAlert = useCallback(() => {\n    const errorMessage =\n      isError && error\n        ? 'data' in error\n          ? typeof error.data === 'string'\n            ? error.data\n            : 'Failed to load services'\n          : 'Network error occurred'\n        : 'Unknown error occurred';\n\n    Alert.alert('Error Loading Services', errorMessage, [\n      {text: 'Retry', onPress: handleRetry},\n      {text: 'Cancel', style: 'cancel'},\n    ]);\n  }, [isError, error, handleRetry]);\n\n  /**\n   * Render service item\n   */\n  const renderServiceItem = useCallback(\n    ({item}: {item: Service}) => {\n      const cartItem = cartItems[item.serviceId];\n      const cartItemCount = cartItem?.qty || 0;\n\n      return (\n        \n      );\n    },\n    [handleServicePress, handleAddToCart, isCartFull, cartItems]\n  );\n\n  /**\n   * Render empty state\n   */\n  const renderEmptyState = () => (\n    \n      \n      \n        No Services Available\n      \n      \n        Services will appear here once they are available.\n      \n      {/* Show last refresh info */}\n      \n        Last updated: {getFormattedLastRefresh()}\n      \n    \n  );\n\n  /**\n   * Render loading state\n   */\n  const renderLoadingState = () => (\n    \n      \n      \n        Loading services...\n      \n    \n  );\n\n  /**\n   * Render error state\n   */\n  const renderErrorState = () => (\n    \n      \n      \n        Failed to Load Services\n      \n      \n        \n          Retry\n        \n      \n      \n        \n          View Details\n        \n      \n    \n  );\n\n  /**\n   * Render header with last refresh info and cart summary\n   */\n  const renderHeader = () => (\n    \n      \n        Last updated: {getFormattedLastRefresh()}\n      \n      {cartCount > 0 && (\n        \n          Cart: {cartCount} item{cartCount === 1 ? '' : 's'}\n        \n      )}\n    \n  );\n\n  /**\n   * Main render\n   */\n  if (isLoading) {\n    return {renderLoadingState()};\n  }\n\n  if (isError) {\n    return {renderErrorState()};\n  }\n\n  return (\n    \n      \n         item.serviceId}\n          renderItem={renderServiceItem}\n          contentContainerStyle={styles.listContainer}\n          showsVerticalScrollIndicator={false}\n          refreshControl={\n            \n          }\n          ListHeaderComponent={services.length > 0 ? renderHeader : undefined}\n          ListEmptyComponent={renderEmptyState}\n        />\n      \n\n      {/* Success Snackbar */}\n       setSuccessSnackbarVisible(false)}\n        duration={5000}\n        action={{\n          label: 'Dismiss',\n          onPress: () => setSuccessSnackbarVisible(false),\n        }}\n        style={{\n          backgroundColor: theme.colors.primaryContainer,\n          marginBottom: 16,\n        }}\n      >\n        \n          {successMessage}\n        \n      \n    \n  );\n};\n\n/**\n * Styles\n */\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  listContainer: {\n    padding: 16,\n    flexGrow: 1,\n  },\n  serviceItem: {\n    padding: 16,\n    paddingBottom: 20,\n    marginBottom: 12,\n    borderRadius: 12,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.2,\n    shadowRadius: 2,\n  },\n  serviceHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  serviceIcon: {\n    marginRight: 12,\n  },\n  serviceInfo: {\n    flex: 1,\n  },\n  serviceName: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 2,\n  },\n  serviceType: {\n    fontSize: 14,\n    fontWeight: '400',\n  },\n  serviceDescription: {\n    fontSize: 14,\n    lineHeight: 20,\n    marginBottom: 8,\n  },\n  priceContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  priceText: {\n    fontSize: 14,\n    fontWeight: '500',\n    marginLeft: 4,\n  },\n  // Header\n  headerContainer: {\n    paddingBottom: 8,\n    marginBottom: 8,\n  },\n  lastRefreshHeader: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n  // Empty state\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingVertical: 48,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 8,\n  },\n  emptyMessage: {\n    fontSize: 16,\n    textAlign: 'center',\n    paddingHorizontal: 32,\n    marginBottom: 16,\n  },\n  lastRefreshText: {\n    fontSize: 12,\n    fontStyle: 'italic',\n  },\n  // Loading state\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    fontSize: 16,\n    marginTop: 16,\n  },\n  // Error state\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  errorTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 24,\n    textAlign: 'center',\n  },\n  retryButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 12,\n    borderRadius: 8,\n    marginBottom: 12,\n  },\n  retryButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  detailsButton: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n  },\n  detailsButtonText: {\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  // Service footer\n  serviceFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: 12,\n    minHeight: 40, // Ensure minimum height for buttons\n  },\n  cartButtonContainer: {\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    minHeight: 36, // Ensure button container has enough height\n  },\n  cartCountText: {\n    fontSize: 12,\n    fontWeight: '500',\n    marginBottom: 4,\n  },\n  addButton: {\n    minWidth: 80,\n    height: 36, // Fixed height for consistency\n    marginTop: 4, // Small top margin for spacing\n  },\n  addButtonDisabled: {\n    opacity: 0.6,\n  },\n  addButtonContent: {\n    height: 36, // Match button height\n    paddingHorizontal: 12,\n  },\n  addButtonLabel: {\n    fontSize: 12,\n    fontWeight: '600',\n    lineHeight: 16, // Proper line height for better text alignment\n  },\n  cartSummaryText: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500',\n    marginTop: 4,\n  },\n  // Quantity Controls Block\n  quantityControlsBlock: {\n    flexDirection: 'row',\n    borderWidth: 1,\n    borderRadius: 6,\n    overflow: 'hidden',\n    minWidth: 100,\n  },\n  quantityButton: {\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    minWidth: 36,\n  },\n  quantityButtonLeft: {\n    borderTopLeftRadius: 6,\n    borderBottomLeftRadius: 6,\n  },\n  quantityButtonRight: {\n    borderTopRightRadius: 6,\n    borderBottomRightRadius: 6,\n  },\n  quantityDisplay: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n    minWidth: 40,\n  },\n  quantityText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  // Header styles\n  headerRightContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  headerCartButton: {\n    padding: 8,\n    marginRight: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  headerNotificationButton: {\n    padding: 8,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  cartIconContainer: {\n    position: 'relative',\n    width: 24,\n    height: 24,\n  },\n  cartBadge: {\n    position: 'absolute',\n    top: -8,\n    right: -8,\n    minWidth: 18,\n    minHeight: 18,\n    borderRadius: 9,\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 1,\n  },\n  cartBadgeText: {\n    fontSize: 12,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n});\n\nexport default ServicesScreen;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServiceResponse.html":{"url":"interfaces/ServiceResponse.html","title":"interface - ServiceResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServiceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Service {\n  serviceId: string;\n  name: string;\n  description: string;\n  type: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n  };\n  active: boolean;\n  category?: string;\n  features?: string[];\n  estimatedDuration?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface GetServicesRequest {\n  type?: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n  };\n  active?: boolean;\n  category?: string;\n}\n\nexport interface ServiceResponse {\n  success: boolean;\n  data: {\n    items: Service[];\n    total?: number;\n    page?: number;\n    limit?: number;\n  };\n  error?: string;\n}\n\nexport interface SingleServiceResponse {\n  success: boolean;\n  data: Service;\n  error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ServicesCartState.html":{"url":"interfaces/ServicesCartState.html","title":"interface - ServicesCartState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ServicesCartState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/servicesCartSlice.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            lastUpdated\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:         Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastUpdated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastUpdated:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSelector, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport type {Service} from '../types/Service';\n\nexport interface CartItem {\n  id: string;\n  qty: number;\n  service: Service;\n  addedAt: string;\n}\n\nexport interface ServicesCartState {\n  items: Record;\n  totalItems: number;\n  lastUpdated: string | null;\n}\n\nconst initialState: ServicesCartState = {\n  items: {},\n  totalItems: 0,\n  lastUpdated: null,\n};\n\n/**\n * Validate cart state for persistence recovery\n */\nexport const validateCartState = (state: any): boolean => {\n  if (!state || typeof state !== 'object') {\n    return false;\n  }\n  if (!state.items || typeof state.items !== 'object') {\n    return false;\n  }\n  if (typeof state.totalItems !== 'number') {\n    return false;\n  }\n\n  // Validate each cart item\n  for (const [key, item] of Object.entries(state.items)) {\n    if (!item || typeof item !== 'object') {\n      return false;\n    }\n    const cartItem = item as any;\n    if (!cartItem.id || typeof cartItem.id !== 'string') {\n      return false;\n    }\n    if (typeof cartItem.qty !== 'number' || cartItem.qty ): number => {\n  return Object.values(items).reduce((total, item) => total + item.qty, 0);\n};\n\n/**\n * Check if adding item would exceed max limit\n */\nconst wouldExceedMaxItems = (\n  items: Record,\n  serviceId: string,\n  qtyToAdd: number\n): boolean => {\n  const currentTotal = calculateTotalItems(items);\n  const existingQty = items[serviceId]?.qty || 0;\n  const newTotal = currentTotal - existingQty + (existingQty + qtyToAdd);\n  return newTotal > 20;\n};\n\nexport const servicesCartSlice = createSlice({\n  name: 'servicesCart',\n  initialState,\n  reducers: {\n    /**\n     * Add service to cart or increase existing quantity\n     *\n     * Enforces 20-item total limit and validates input.\n     * If service exists, increases quantity. If new, creates cart item.\n     *\n     * @param action.payload.service - Complete service object to add\n     * @param action.payload.qty - Quantity to add (default: 1)\n     *\n     * @example\n     * ```typescript\n     * dispatch(addToCart({\n     *   service: { serviceId: 'solar-install', name: 'Installation', ... },\n     *   qty: 3\n     * }));\n     * ```\n     */\n    addToCart: (\n      state,\n      action: PayloadAction\n    ) => {\n      const {service, qty = 1} = action.payload;\n      const serviceId = service.serviceId;\n\n      // Check max items constraint\n      if (wouldExceedMaxItems(state.items, serviceId, qty)) {\n        console.warn(\n          `[Cart] Cannot add ${qty} of ${serviceId}. Would exceed 20 item limit.`\n        );\n        return; // Don't modify state if it would exceed limit\n      }\n\n      const timestamp = new Date().toISOString();\n\n      if (state.items[serviceId]) {\n        // Update existing item\n        state.items[serviceId].qty += qty;\n        state.items[serviceId].service = service; // Update service data\n      } else {\n        // Add new item\n        state.items[serviceId] = {\n          id: serviceId,\n          qty,\n          service,\n          addedAt: timestamp,\n        };\n      }\n\n      state.totalItems = calculateTotalItems(state.items);\n      state.lastUpdated = timestamp;\n    },\n\n    /**\n     * Remove service from cart or decrease quantity\n     *\n     * If quantity to remove >= current quantity, removes service completely.\n     * Otherwise, decreases quantity by specified amount.\n     *\n     * @param action.payload.serviceId - Service ID to remove from\n     * @param action.payload.qty - Quantity to remove (default: 1)\n     */\n    removeFromCart: (\n      state,\n      action: PayloadAction\n    ) => {\n      const {serviceId, qty = 1} = action.payload;\n      const existingItem = state.items[serviceId];\n\n      if (!existingItem) {\n        console.warn(`[Cart] Cannot remove ${serviceId}. Not in cart.`);\n        return;\n      }\n\n      const timestamp = new Date().toISOString();\n\n      if (existingItem.qty \n    ) => {\n      const {serviceId, qty} = action.payload;\n      const existingItem = state.items[serviceId];\n\n      if (!existingItem) {\n        console.warn(`[Cart] Cannot update ${serviceId}. Not in cart.`);\n        return;\n      }\n\n      if (qty  20) {\n          console.warn(\n            `[Cart] Cannot set ${serviceId} quantity to ${qty}. Would exceed 20 item limit.`\n          );\n          return;\n        }\n\n        state.items[serviceId].qty = qty;\n      }\n\n      state.totalItems = calculateTotalItems(state.items);\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    /**\n     * Clear entire cart\n     */\n    clearCart: state => {\n      state.items = {};\n      state.totalItems = 0;\n      state.lastUpdated = new Date().toISOString();\n    },\n\n    /**\n     * Remove specific service completely\n     */\n    removeService: (state, action: PayloadAction) => {\n      const {serviceId} = action.payload;\n\n      if (state.items[serviceId]) {\n        delete state.items[serviceId];\n        state.totalItems = calculateTotalItems(state.items);\n        state.lastUpdated = new Date().toISOString();\n      }\n    },\n\n    /**\n     * Reset cart state (for testing/corruption recovery)\n     */\n    resetCartState: () => initialState,\n  },\n});\n\n// Export actions\nexport const {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  removeService,\n  resetCartState,\n} = servicesCartSlice.actions;\n\n// Selectors\nexport const selectCartItems = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.items ?? {};\n\nexport const selectCartItemsArray = createSelector([selectCartItems], items =>\n  Object.values(items)\n);\n\nexport const selectCartCount = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.totalItems ?? 0;\n\nexport const selectCartItemById =\n  (serviceId: string) =>\n  (state: {servicesCart: ServicesCartState | undefined}) =>\n    state.servicesCart?.items[serviceId] || null;\n\nexport const selectCartIsEmpty = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => (state.servicesCart?.totalItems ?? 0) === 0;\n\nexport const selectCartLastUpdated = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => state.servicesCart?.lastUpdated ?? null;\n\nexport const selectUniqueItemsCount = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => Object.keys(state.servicesCart?.items ?? {}).length;\n\nexport const selectIsCartFull = (state: {\n  servicesCart: ServicesCartState | undefined;\n}) => (state.servicesCart?.totalItems ?? 0) >= 20;\n\n// Export reducer\nexport default servicesCartSlice.reducer;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SingleServiceResponse.html":{"url":"interfaces/SingleServiceResponse.html","title":"interface - SingleServiceResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SingleServiceResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         Service\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Service\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Service {\n  serviceId: string;\n  name: string;\n  description: string;\n  type: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n    currency?: string;\n  };\n  active: boolean;\n  category?: string;\n  features?: string[];\n  estimatedDuration?: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface GetServicesRequest {\n  type?: string;\n  priceRange?: {\n    min?: number;\n    max?: number;\n  };\n  active?: boolean;\n  category?: string;\n}\n\nexport interface ServiceResponse {\n  success: boolean;\n  data: {\n    items: Service[];\n    total?: number;\n    page?: number;\n    limit?: number;\n  };\n  error?: string;\n}\n\nexport interface SingleServiceResponse {\n  success: boolean;\n  data: Service;\n  error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpacingScale.html":{"url":"interfaces/SpacingScale.html","title":"interface - SpacingScale","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpacingScale\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/theme/palette.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            lg\n                                        \n                                \n                                \n                                        \n                                            md\n                                        \n                                \n                                \n                                        \n                                            sm\n                                        \n                                \n                                \n                                        \n                                            xl\n                                        \n                                \n                                \n                                        \n                                            xs\n                                        \n                                \n                                \n                                        \n                                            xxl\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lg:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        md\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        md:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sm:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xs:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        xxl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        xxl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ColorPalette {\n  primary: string;\n  primaryDark: string;\n  primaryLight: string;\n  secondary: string;\n  secondaryDark: string;\n  secondaryLight: string;\n  background: string;\n  surface: string;\n  error: string;\n  warning: string;\n  success: string;\n  info: string;\n  quoted: string;\n  text: {\n    primary: string;\n    secondary: string;\n    disabled: string;\n    placeholder: string;\n  };\n  border: {\n    default: string;\n    light: string;\n    focus: string;\n  };\n  overlay: {\n    light: string;\n    medium: string;\n    dark: string;\n  };\n}\n\nexport interface SpacingScale {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  xxl: number;\n}\n\nexport interface Typography {\n  fontFamily: {\n    regular: string;\n    medium: string;\n    bold: string;\n    light: string;\n  };\n  fontSize: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n  };\n  lineHeight: {\n    tight: number;\n    normal: number;\n    relaxed: number;\n  };\n}\n\n/**\n * Solarium Green Energy Color Palette\n */\nexport const colors: ColorPalette = {\n  // Primary colors - Green theme for solar energy\n  primary: '#2E7D32', // Dark green\n  primaryDark: '#1B5E20', // Darker green\n  primaryLight: '#4CAF50', // Light green\n\n  // Secondary colors - Complementary blue\n  secondary: '#1976D2', // Blue\n  secondaryDark: '#0D47A1', // Dark blue\n  secondaryLight: '#42A5F5', // Light blue\n\n  // Background colors\n  background: '#FFFFFF',\n  surface: '#F8F9FA',\n\n  // Status colors\n  error: '#F44336',\n  warning: '#FF9800',\n  success: '#4CAF50',\n  info: '#2196F3',\n  // Lead status colors\n  quoted: '#673AB7', // Purple for quoted/discussion status\n\n  // Text colors\n  text: {\n    primary: '#212121',\n    secondary: '#757575',\n    disabled: '#BDBDBD',\n    placeholder: '#9E9E9E',\n  },\n\n  // Border colors\n  border: {\n    default: '#E0E0E0',\n    light: '#F5F5F5',\n    focus: '#2E7D32',\n  },\n\n  // Overlay colors\n  overlay: {\n    light: 'rgba(0, 0, 0, 0.1)',\n    medium: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.8)',\n  },\n};\n\n/**\n * Spacing scale based on 8px grid\n */\nexport const spacing: SpacingScale = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  xxl: 48,\n};\n\n/**\n * Typography definitions\n */\nexport const typography: Typography = {\n  fontFamily: {\n    regular: 'System',\n    medium: 'System',\n    bold: 'System',\n    light: 'System',\n  },\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    md: 16,\n    lg: 18,\n    xl: 24,\n    xxl: 32,\n  },\n  lineHeight: {\n    tight: 1.2,\n    normal: 1.4,\n    relaxed: 1.6,\n  },\n};\n\n/**\n * Shadow definitions for elevation\n */\nexport const shadows = {\n  small: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  medium: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  large: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n};\n\n/**\n * Border radius definitions\n */\nexport const borderRadius = {\n  small: 4,\n  medium: 8,\n  large: 12,\n  xl: 16,\n  round: 50,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusBadgeProps.html":{"url":"interfaces/StatusBadgeProps.html","title":"interface - StatusBadgeProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusBadgeProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/common/StatusBadge/StatusBadge.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            variant\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TicketStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Status to display\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        variant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        variant:     \"default\" | \"compact\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"default\" | \"compact\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Badge size variant\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Chip} from 'react-native-paper';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport type {TicketStatus} from '../../../types/Ticket';\n\nexport interface StatusBadgeProps {\n  /** Status to display */\n  status: TicketStatus;\n  /** Badge size variant */\n  variant?: 'default' | 'compact';\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * Get status color configuration based on ticket status\n */\nconst getStatusConfig = (\n  status: TicketStatus,\n  theme: any\n): {backgroundColor: string; textColor: string} => {\n  switch (status) {\n    case 'Open':\n      return {\n        backgroundColor: theme.colors.success || '#4CAF50',\n        textColor: '#FFFFFF',\n      };\n    case 'Closed':\n      return {\n        backgroundColor: theme.colors.onSurfaceVariant || '#757575',\n        textColor: '#FFFFFF',\n      };\n    default:\n      return {\n        backgroundColor: theme.colors.primary || '#2E7D32',\n        textColor: '#FFFFFF',\n      };\n  }\n};\n\n/**\n * StatusBadge Component\n * Memoized for performance in FlatList\n */\nconst StatusBadge: React.FC = React.memo(\n  ({status, variant = 'default', testID}) => {\n    const theme = useAppTheme();\n    const statusConfig = getStatusConfig(status, theme);\n\n    return (\n      \n        {status}\n      \n    );\n  }\n);\n\nStatusBadge.displayName = 'StatusBadge';\n\n/**\n * StatusBadge Styles\n * Styling for status badge component following Material Design patterns\n */\nconst styles = StyleSheet.create({\n  defaultChip: {\n    height: 32,\n    borderRadius: 16,\n  },\n\n  compactChip: {\n    height: 28,\n    borderRadius: 14,\n  },\n\n  defaultText: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n    letterSpacing: 0.5,\n    lineHeight: 16,\n  },\n\n  compactText: {\n    fontSize: 10,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n    letterSpacing: 0.3,\n    lineHeight: 14,\n  },\n});\n\nexport default StatusBadge;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StatusColorConfig.html":{"url":"interfaces/StatusColorConfig.html","title":"interface - StatusColorConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StatusColorConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/constants/quoteStatus.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            backgroundColor\n                                        \n                                \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            textColor\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        backgroundColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        backgroundColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        textColor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type {QuotationStatus} from '../types/Quotation';\n\nexport interface StatusColorConfig {\n  backgroundColor: string;\n  textColor: string;\n  displayName: string;\n}\n\n/**\n * Color mapping for quotation statuses\n * Following Material Design color guidelines\n */\nexport const QUOTATION_STATUS_COLORS: Record = {\n  Draft: {\n    backgroundColor: '#9E9E9E', // Material Grey 500\n    textColor: '#FFFFFF',\n    displayName: 'Draft',\n  },\n  Created: {\n    backgroundColor: '#2196F3', // Material Blue 500\n    textColor: '#FFFFFF',\n    displayName: 'Created',\n  },\n  Shared: {\n    backgroundColor: '#03A9F4', // Material Light Blue 500\n    textColor: '#FFFFFF',\n    displayName: 'Shared',\n  },\n  Accepted: {\n    backgroundColor: '#4CAF50', // Material Green 500\n    textColor: '#FFFFFF',\n    displayName: 'Accepted',\n  },\n  Rejected: {\n    backgroundColor: '#F44336', // Material Red 500\n    textColor: '#FFFFFF',\n    displayName: 'Rejected',\n  },\n};\n\n/**\n * Get status color configuration\n * @param status - The quotation status\n * @returns StatusColorConfig object with colors and display name\n */\nexport const getQuotationStatusConfig = (\n  status: QuotationStatus\n): StatusColorConfig => {\n  return QUOTATION_STATUS_COLORS[status] || QUOTATION_STATUS_COLORS.Draft;\n};\n\n/**\n * Check if status indicates quotation is actionable by customer\n * @param status - The quotation status\n * @returns true if customer can accept/reject this quotation\n */\nexport const isQuotationActionable = (status: QuotationStatus): boolean => {\n  return status === 'Shared';\n};\n\n/**\n * Check if status indicates quotation is finalized\n * @param status - The quotation status\n * @returns true if quotation is in final state (accepted/rejected)\n */\nexport const isQuotationFinalized = (status: QuotationStatus): boolean => {\n  return status === 'Accepted' || status === 'Rejected';\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StorageResult.html":{"url":"interfaces/StorageResult.html","title":"interface - StorageResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StorageResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/storage.ts\n        \n\n\n            \n                Description\n            \n            \n                Storage operation result\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum MigrationStatus {\n  NOT_NEEDED = 'NOT_NEEDED',\n  MIGRATED = 'MIGRATED',\n  FAILED = 'FAILED',\n}\n\n/**\n * Storage operation result\n */\nexport interface StorageResult {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Migration result with detailed info\n */\nexport interface MigrationResult {\n  status: MigrationStatus;\n  fromKey?: string;\n  message?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TestWrapperProps.html":{"url":"interfaces/TestWrapperProps.html","title":"interface - TestWrapperProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TestWrapperProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/testUtils.tsx\n        \n\n\n            \n                Description\n            \n            \n                Test wrapper component\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                                \n                                        \n                                            store\n                                        \n                                \n                                \n                                        \n                                            withNavigation\n                                        \n                                \n                                \n                                        \n                                            withPersistence\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     React.ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        store\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        store:     ReturnType<>\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReturnType<>\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withNavigation:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withPersistence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        withPersistence:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {NavigationContainer} from '@react-navigation/native';\nimport {configureStore} from '@reduxjs/toolkit';\nimport {render, RenderOptions} from '@testing-library/react-native';\nimport React, {ReactElement} from 'react';\nimport {Provider} from 'react-redux';\nimport {persistStore} from 'redux-persist';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport {authApi, servicesApi, leadsApi} from '../api';\nimport {LoadingOverlay} from '../components';\nimport type {RootState} from '../store';\nimport authReducer from '../store/authSlice';\nimport cacheReducer from '../store/cacheSlice';\nimport uiReducer from '../store/uiSlice';\nimport ThemeProvider from '../theme/ThemeProvider';\n\n/**\n * Test store configuration\n */\ninterface ExtendedRenderOptions extends Omit {\n  preloadedState?: Partial;\n  store?: ReturnType;\n  withNavigation?: boolean;\n  withPersistence?: boolean;\n}\n\n/**\n * Create test store\n */\nexport const setupTestStore = (preloadedState?: Partial) => {\n  return configureStore({\n    reducer: {\n      auth: authReducer,\n      ui: uiReducer,\n      cache: cacheReducer,\n      [authApi.reducerPath]: authApi.reducer,\n      [servicesApi.reducerPath]: servicesApi.reducer,\n      [leadsApi.reducerPath]: leadsApi.reducer,\n    },\n    middleware: getDefaultMiddleware =>\n      getDefaultMiddleware({\n        serializableCheck: false, // Disable for testing\n      })\n        .concat(authApi.middleware)\n        .concat(servicesApi.middleware)\n        .concat(leadsApi.middleware),\n    preloadedState,\n  });\n};\n\n/**\n * Test wrapper component\n */\ninterface TestWrapperProps {\n  children: React.ReactNode;\n  store: ReturnType;\n  withNavigation: boolean;\n  withPersistence: boolean;\n}\n\nconst TestWrapper: React.FC = ({\n  children,\n  store,\n  withNavigation,\n  withPersistence,\n}) => {\n  const persistor = withPersistence ? persistStore(store) : null;\n\n  const content = withNavigation ? (\n    {children}\n  ) : (\n    children\n  );\n\n  return (\n    \n      {withPersistence && persistor ? (\n        }\n          persistor={persistor}\n        >\n          {content}\n        \n      ) : (\n        {content}\n      )}\n    \n  );\n};\n\n/**\n * Custom render function with providers\n */\nexport const renderWithProviders = (\n  ui: ReactElement,\n  {\n    preloadedState,\n    store = setupTestStore(preloadedState),\n    withNavigation = false,\n    withPersistence = false,\n    ...renderOptions\n  }: ExtendedRenderOptions = {}\n) => {\n  const Wrapper = ({children}: {children: React.ReactNode}) => (\n    \n      {children}\n    \n  );\n\n  return {\n    store,\n    ...render(ui, {wrapper: Wrapper, ...renderOptions}),\n  };\n};\n\n/**\n * Create mock user state\n */\nexport const createMockUser = () => ({\n  id: 'test-user-1',\n  phone: '1234567890',\n  name: 'Test User',\n  email: 'test@example.com',\n});\n\n/**\n * Create mock auth state\n */\nexport const createMockAuthState = (overrides = {}) => ({\n  isLoggedIn: true,\n  isLoading: false,\n  isSendingOtp: false,\n  token: 'mock-token-123',\n  refreshToken: 'mock-refresh-token-123',\n  user: createMockUser(),\n  lastLoginTime: Date.now(),\n  error: undefined,\n  ...overrides,\n});\n\n/**\n * Create mock lead\n */\nexport const createMockLead = (overrides = {}) => ({\n  id: 'lead-123',\n  customerId: 'test-user-1',\n  services: ['service-1'],\n  status: 'New Lead' as const,\n  priority: 'Medium' as const,\n  source: 'App' as const,\n  address: '123 Test Street',\n  state: 'Test State',\n  pinCode: '123456',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  customer: {\n    id: 'test-user-1',\n    name: 'Test User',\n    phone: '1234567890',\n  },\n  ...overrides,\n});\n\n/**\n * Create mock service\n */\nexport const createMockService = (overrides = {}) => ({\n  id: 'service-1',\n  name: 'Test Solar Installation',\n  description: 'Test service description',\n  category: 'Installation',\n  price: {min: 50000, max: 100000, currency: 'INR'},\n  image: 'https://example.com/image.jpg',\n  features: ['Feature 1', 'Feature 2'],\n  isActive: true,\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  ...overrides,\n});\n\n/**\n * Mock API responses\n */\nexport const mockApiResponse = (\n  data: T,\n  success = true\n) => ({\n  success,\n  data: success ? data : null,\n  error: success ? null : {code: 400, message: 'Test error'},\n});\n\n/**\n * Wait for async operations\n */\nexport const waitForAsync = () =>\n  new Promise(resolve => setTimeout(resolve, 0));\n\n/**\n * Mock navigation object\n */\nexport const createMockNavigation = () => ({\n  navigate: jest.fn(),\n  goBack: jest.fn(),\n  reset: jest.fn(),\n  setParams: jest.fn(),\n  dispatch: jest.fn(),\n  setOptions: jest.fn(),\n  isFocused: jest.fn(() => true),\n  addListener: jest.fn(() => jest.fn()),\n});\n\n/**\n * Mock route object\n */\nexport const createMockRoute = (params = {}) => ({\n  params,\n  key: 'test-route',\n  name: 'TestScreen',\n});\n\n/**\n * Async test helper\n */\nexport const asyncTest = (testFn: () => Promise) => {\n  return async () => {\n    await testFn();\n    await waitForAsync();\n  };\n};\n\n/**\n * Fire event and wait\n */\nexport const fireEventAndWait = async (\n  element: any,\n  event: string,\n  ...args: any[]\n) => {\n  const {fireEvent} = await import('@testing-library/react-native');\n  fireEvent[event](element, ...args);\n  await waitForAsync();\n};\n\n/**\n * Assert loading state\n */\nexport const expectLoadingState = (\n  getByTestId: any,\n  testId: string,\n  isLoading: boolean\n) => {\n  if (isLoading) {\n    expect(getByTestId(testId)).toBeTruthy();\n  } else {\n    expect(() => getByTestId(testId)).toThrow();\n  }\n};\n\n/**\n * Assert error state\n */\nexport const expectErrorState = (getByText: any, errorMessage: string) => {\n  expect(getByText(errorMessage)).toBeTruthy();\n};\n\n/**\n * Create test IDs\n */\nexport const testIds = {\n  loading: 'loading-indicator',\n  error: 'error-message',\n  success: 'success-message',\n  loginForm: 'login-form',\n  phoneInput: 'phone-input',\n  otpInput: 'otp-input',\n  submitButton: 'submit-button',\n  backButton: 'back-button',\n  logoutButton: 'logout-button',\n};\n\n/**\n * Performance testing helper\n */\nexport const measurePerformance = async (testFn: () => Promise) => {\n  const start = performance.now();\n  await testFn();\n  const end = performance.now();\n  return end - start;\n};\n\n/**\n * Accessibility testing helper\n */\nexport const testAccessibility = async (component: ReactElement) => {\n  const {queryByRole} = renderWithProviders(component);\n\n  // Test basic accessibility\n  expect(queryByRole).toBeDefined();\n\n  // Add more accessibility tests as needed\n  return true;\n};\n\n// Re-export testing library utilities\nexport * from '@testing-library/react-native';\nexport {renderWithProviders as render};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TextInputProps.html":{"url":"interfaces/TextInputProps.html","title":"interface - TextInputProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TextInputProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Components.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseComponentProps\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoCapitalize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            autoCorrect\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            disabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            errorMessage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            hasError\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            helperText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            keyboardType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxLength\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            multiline\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            numberOfLines\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onBlur\n                                        \n                                \n                                \n                                        \n                                            onChangeText\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onFocus\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            placeholder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            prefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            secureTextEntry\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCharacterCount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            suffix\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            variant\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoCapitalize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoCapitalize:     \"none\" | \"sentences\" | \"words\" | \"characters\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"sentences\" | \"words\" | \"characters\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        autoCorrect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoCorrect:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        disabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        errorMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        errorMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hasError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hasError:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        helperText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        helperText:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        keyboardType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        keyboardType:     \"default\" | \"numeric\" | \"email-address\" | \"phone-pad\" | \"url\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"default\" | \"numeric\" | \"email-address\" | \"phone-pad\" | \"url\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxLength\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        multiline\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        multiline:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        numberOfLines\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        numberOfLines:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onBlur\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onBlur:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onChangeText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onChangeText:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onFocus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onFocus:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placeholder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placeholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefix:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secureTextEntry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secureTextEntry:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCharacterCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCharacterCount:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        suffix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        suffix:     ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReactNode\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        variant\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        variant:         TextInputVariant\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TextInputVariant\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {ReactNode} from 'react';\nimport {ViewStyle, TextStyle} from 'react-native';\n\n/**\n * Common component props\n */\nexport interface BaseComponentProps {\n  testID?: string;\n  accessibilityLabel?: string;\n  accessibilityHint?: string;\n  style?: ViewStyle;\n}\n\n/**\n * Button Component Types\n */\nexport type ButtonVariant =\n  | 'primary'\n  | 'secondary'\n  | 'outline'\n  | 'ghost'\n  | 'danger';\nexport type ButtonSize = 'small' | 'medium' | 'large';\n\nexport interface ButtonProps extends BaseComponentProps {\n  title: string;\n  onPress: () => void;\n  variant?: ButtonVariant;\n  size?: ButtonSize;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: ReactNode;\n  iconPosition?: 'left' | 'right';\n  fullWidth?: boolean;\n  style?: ViewStyle;\n  textStyle?: TextStyle;\n}\n\n/**\n * TextInput Component Types\n */\nexport type TextInputVariant = 'default' | 'outlined' | 'filled';\n\nexport interface TextInputProps extends BaseComponentProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  placeholder?: string;\n  label?: string;\n  helperText?: string;\n  errorMessage?: string;\n  hasError?: boolean;\n  disabled?: boolean;\n  multiline?: boolean;\n  numberOfLines?: number;\n  maxLength?: number;\n  keyboardType?: 'default' | 'numeric' | 'email-address' | 'phone-pad' | 'url';\n  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';\n  autoCorrect?: boolean;\n  secureTextEntry?: boolean;\n  variant?: TextInputVariant;\n  prefix?: ReactNode;\n  suffix?: ReactNode;\n  showCharacterCount?: boolean;\n  onFocus?: () => void;\n  onBlur?: () => void;\n}\n\n/**\n * Loading Overlay Types\n */\nexport type LoadingOverlayContainerMode = 'fullscreen' | 'local';\n\nexport interface LoadingOverlayContainerProps extends BaseComponentProps {\n  visible: boolean;\n  message?: string;\n  mode?: LoadingOverlayContainerMode;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  backgroundColor?: string;\n  spinnerColor?: string;\n}\n\n/**\n * Safe Area Container Types\n */\nexport interface SafeAreaContainerProps extends BaseComponentProps {\n  children: ReactNode;\n  backgroundColor?: string;\n  keyboardAvoiding?: boolean;\n  scrollable?: boolean;\n  padding?: number;\n  paddingHorizontal?: number;\n  paddingVertical?: number;\n}\n\n/**\n * Error Message Types\n */\nexport type ErrorMessageType = 'error' | 'warning' | 'info' | 'success';\n\nexport interface ErrorMessageProps extends BaseComponentProps {\n  message: string;\n  type?: ErrorMessageType;\n  visible?: boolean;\n  dismissible?: boolean;\n  onDismiss?: () => void;\n  icon?: boolean;\n}\n\n/**\n * Loading Spinner Types\n */\nexport type SpinnerSize = 'small' | 'medium' | 'large';\n\nexport interface LoadingSpinnerProps extends BaseComponentProps {\n  size?: SpinnerSize;\n  color?: string;\n  text?: string;\n  overlay?: boolean;\n}\n\n/**\n * Common style types\n */\nexport interface ComponentColors {\n  primary: string;\n  secondary: string;\n  success: string;\n  warning: string;\n  error: string;\n  info: string;\n  light: string;\n  dark: string;\n  white: string;\n  transparent: string;\n}\n\nexport interface ComponentSizes {\n  small: number;\n  medium: number;\n  large: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ThemeProviderProps.html":{"url":"interfaces/ThemeProviderProps.html","title":"interface - ThemeProviderProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ThemeProviderProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/theme/ThemeProvider.tsx\n        \n\n\n            \n                Description\n            \n            \n                Theme Provider Props\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            children\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        children\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        children:     React.ReactNode\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     React.ReactNode\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import React, {createContext, useContext} from 'react';\nimport {MD3LightTheme, PaperProvider, configureFonts} from 'react-native-paper';\nimport type {MD3Theme} from 'react-native-paper';\nimport {colors, spacing, typography, shadows, borderRadius} from './palette';\n\n// Extend the MD3Theme with our custom properties\nexport interface ExtendedTheme extends MD3Theme {\n  spacing: typeof spacing;\n  typography: typeof typography;\n  shadows: typeof shadows;\n  borderRadius: typeof borderRadius;\n}\n\n/**\n * Configure fonts for react-native-paper\n */\nconst fontConfig = configureFonts({\n  config: {\n    displayLarge: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.xxl,\n      lineHeight: typography.fontSize.xxl * typography.lineHeight.tight,\n    },\n    displayMedium: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.xl,\n      lineHeight: typography.fontSize.xl * typography.lineHeight.tight,\n    },\n    displaySmall: {\n      fontFamily: typography.fontFamily.bold,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    headlineLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xl,\n      lineHeight: typography.fontSize.xl * typography.lineHeight.normal,\n    },\n    headlineMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    headlineSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.normal,\n    },\n    titleLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.lg,\n      lineHeight: typography.fontSize.lg * typography.lineHeight.normal,\n    },\n    titleMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.normal,\n    },\n    titleSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.normal,\n    },\n    bodyLarge: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.md,\n      lineHeight: typography.fontSize.md * typography.lineHeight.relaxed,\n    },\n    bodyMedium: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.relaxed,\n    },\n    bodySmall: {\n      fontFamily: typography.fontFamily.regular,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.relaxed,\n    },\n    labelLarge: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.sm,\n      lineHeight: typography.fontSize.sm * typography.lineHeight.normal,\n    },\n    labelMedium: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.normal,\n    },\n    labelSmall: {\n      fontFamily: typography.fontFamily.medium,\n      fontSize: typography.fontSize.xs,\n      lineHeight: typography.fontSize.xs * typography.lineHeight.normal,\n    },\n  },\n});\n\n/**\n * Custom theme based on Material Design 3\n */\nconst customTheme: ExtendedTheme = {\n  ...MD3LightTheme,\n  fonts: fontConfig,\n  colors: {\n    ...MD3LightTheme.colors,\n    primary: colors.primary,\n    primaryContainer: colors.primaryLight,\n    secondary: colors.secondary,\n    secondaryContainer: colors.secondaryLight,\n    background: colors.background,\n    surface: colors.surface,\n    error: colors.error,\n    onPrimary: '#FFFFFF',\n    onSecondary: '#FFFFFF',\n    onBackground: colors.text.primary,\n    onSurface: colors.text.primary,\n    onError: '#FFFFFF',\n    outline: colors.border.default,\n    outlineVariant: colors.border.light,\n  },\n  // Add our custom properties\n  spacing,\n  typography,\n  shadows,\n  borderRadius,\n};\n\n/**\n * Theme context for accessing theme outside of Paper components\n */\nconst ThemeContext = createContext(customTheme);\n\n/**\n * Hook to access theme in components\n */\nexport const useAppTheme = (): ExtendedTheme => {\n  const theme = useContext(ThemeContext);\n  if (!theme) {\n    throw new Error('useAppTheme must be used within ThemeProvider');\n  }\n  return theme;\n};\n\n/**\n * Theme Provider Props\n */\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Theme Provider Component\n * Wraps the app with Material Design theme and custom theme context\n */\nconst ThemeProvider: React.FC = ({children}) => {\n  return (\n    \n      \n        {children}\n      \n    \n  );\n};\n\nexport default ThemeProvider;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Ticket.html":{"url":"interfaces/Ticket.html","title":"interface - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Base complete ticket interface, used in frontend\nBased on api response structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            closedAt\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            messages\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            ticketId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        closedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        closedAt:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when ticket was closed (null if open)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when ticket was created\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID who created the ticket\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Initial ticket description\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated executed lead identifier\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        messages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        messages:     TicketMessage[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TicketMessage[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    All messages in chronological order\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TicketStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current ticket status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket subject line\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ticketId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ticketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique ticket identifier\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketListItem.html":{"url":"interfaces/TicketListItem.html","title":"interface - TicketListItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketListItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Base ticket interface for list view\nBased on GET /api/v1/tickets response structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            leadId\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            ticketId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when ticket was created\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User ID who created the ticket\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Associated executed lead identifier\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TicketStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketStatus\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Current ticket status\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket subject line\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ticketId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ticketId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique ticket identifier (e.g., \"TKT004\")\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketListItemProps.html":{"url":"interfaces/TicketListItemProps.html","title":"interface - TicketListItemProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketListItemProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/components/tickets/TicketListItemComponent.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            onPress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            testID\n                                        \n                                \n                                \n                                        \n                                            ticket\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        onPress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onPress:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Callback when item is pressed\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        testID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        testID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Test ID for testing\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ticket\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ticket:         TicketListItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketListItem\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket data to display\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import React from 'react';\nimport {View, Text, TouchableOpacity} from 'react-native';\nimport {StyleSheet} from 'react-native';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {spacing, borderRadius} from '../../theme/palette';\nimport {useAppTheme} from '../../theme/ThemeProvider';\nimport type {TicketListItem} from '../../types/Ticket';\nimport {getRelativeTime} from '../../utils/dateHelpers';\nimport {StatusBadge} from '../common/StatusBadge';\n\nexport interface TicketListItemProps {\n  /** Ticket data to display */\n  ticket: TicketListItem;\n  /** Callback when item is pressed */\n  onPress: (ticketId: string) => void;\n  /** Test ID for testing */\n  testID?: string;\n}\n\n/**\n * TicketListItemComponent\n * Memoized for performance in FlatList\n */\nconst TicketListItemComponent: React.FC = React.memo(\n  ({ticket, onPress, testID}) => {\n    const theme = useAppTheme();\n    const relativeTime = getRelativeTime(ticket.createdAt);\n\n    // Accessible label for screen readers\n    const accessibleLabel = `Ticket ${ticket.ticketId}, ${ticket.subject}, Status: ${ticket.status}, Created ${relativeTime}`;\n\n    const handlePress = () => {\n      onPress(ticket.ticketId);\n    };\n\n    return (\n      \n        {/* Ticket Header - ID and Status */}\n        \n          \n            {ticket.ticketId}\n          \n\n          \n        \n\n        {/* Ticket Subject */}\n        \n          {ticket.subject}\n        \n\n        {/* Footer - Lead ID and Created Time */}\n        \n          \n            \n            \n              {ticket.leadId}\n            \n          \n\n          \n            \n            \n              {relativeTime}\n            \n          \n        \n      \n    );\n  }\n);\n\nTicketListItemComponent.displayName = 'TicketListItemComponent';\n\n/**\n * TicketListItemComponent Styles\n * Styling for ticket list row component following app design patterns\n */\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: spacing.md,\n    marginBottom: spacing.sm,\n    padding: spacing.md,\n    borderRadius: borderRadius.medium,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: {width: 0, height: 1},\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    minHeight: 100,\n  },\n\n  ticketHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: spacing.sm,\n  },\n\n  ticketId: {\n    fontSize: 12,\n    fontWeight: '600',\n    textTransform: 'uppercase',\n    letterSpacing: 0.5,\n  },\n\n  subject: {\n    fontSize: 16,\n    fontWeight: '500',\n    lineHeight: 22,\n    marginBottom: spacing.sm,\n  },\n\n  footer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginTop: spacing.xs,\n  },\n\n  leadInfo: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    flex: 1,\n  },\n\n  leadIcon: {\n    marginRight: spacing.xs,\n  },\n\n  leadId: {\n    fontSize: 12,\n    fontWeight: '500',\n    flex: 1,\n  },\n\n  timeContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  timeIcon: {\n    marginRight: 4,\n  },\n\n  timeText: {\n    fontSize: 11,\n    fontWeight: '400',\n  },\n});\n\nexport default TicketListItemComponent;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketMessage.html":{"url":"interfaces/TicketMessage.html","title":"interface - TicketMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Message within a ticket thread\nBased on messages array structure in GET /api/v1/tickets/{id}\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            sender\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message content\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sender:         MessageSender\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MessageSender\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message sender role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    ISO timestamp when message was created\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketPollingConfig.html":{"url":"interfaces/TicketPollingConfig.html","title":"interface - TicketPollingConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketPollingConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useTicketPolling.ts\n        \n\n\n            \n                Description\n            \n            \n                Polling configuration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            baseIntervalSeconds\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maxJitterSeconds\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            startImmediately\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseIntervalSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseIntervalSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Base polling interval in seconds (default: 30)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether polling is enabled (default: true)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxJitterSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxJitterSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum jitter in seconds (default: 5)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startImmediately\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startImmediately:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to start polling immediately (default: true)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {AppState, AppStateStatus} from 'react-native';\nimport {RefreshResult} from '../refresh/refreshTypes';\nimport {useRefreshControl} from './useRefreshControl';\n\n/**\n * Polling configuration\n */\ninterface TicketPollingConfig {\n  /** Base polling interval in seconds (default: 30) */\n  baseIntervalSeconds?: number;\n  /** Maximum jitter in seconds (default: 5) */\n  maxJitterSeconds?: number;\n  /** Whether polling is enabled (default: true) */\n  enabled?: boolean;\n  /** Whether to start polling immediately (default: true) */\n  startImmediately?: boolean;\n}\n\n/**\n * Polling state\n */\ninterface TicketPollingState {\n  isPolling: boolean;\n  lastPollAt: number | null;\n  nextPollAt: number | null;\n  pollCount: number;\n  startPolling: () => void;\n  stopPolling: () => void;\n  pollNow: () => Promise;\n}\n\n/**\n * Add jitter to interval to prevent thundering herd\n */\nconst addJitter = (baseIntervalMs: number, maxJitterMs: number): number => {\n  const jitter = Math.random() * maxJitterMs * 2 - maxJitterMs; // ±maxJitter\n  return Math.max(1000, baseIntervalMs + jitter); // Minimum 1 second\n};\n\n/**\n * Hook for automatic ticket polling\n *\n * Integrates with existing refresh infrastructure and handles:\n * - 30s + jitter polling intervals\n * - Background/foreground app state transitions\n * - Screen focus/blur detection\n * - Proper cleanup on unmount\n * - Debounce respect through existing refresh system\n */\nexport const useTicketPolling = (\n  config: TicketPollingConfig = {}\n): TicketPollingState => {\n  const {\n    baseIntervalSeconds = 30,\n    maxJitterSeconds = 5,\n    enabled = true,\n    startImmediately = true,\n  } = config;\n\n  const {refreshTickets, canRefreshTickets} = useRefreshControl();\n\n  // Polling state\n  const isPollingRef = useRef(false);\n  const timerRef = useRef(null);\n  const lastPollAtRef = useRef(null);\n  const nextPollAtRef = useRef(null);\n  const pollCountRef = useRef(0);\n  const appStateRef = useRef(AppState.currentState);\n\n  /**\n   * Calculate next poll time with jitter\n   */\n  const calculateNextPollTime = useCallback((): number => {\n    const baseMs = baseIntervalSeconds * 1000;\n    const maxJitterMs = maxJitterSeconds * 1000;\n    const intervalWithJitter = addJitter(baseMs, maxJitterMs);\n    return Date.now() + intervalWithJitter;\n  }, [baseIntervalSeconds, maxJitterSeconds]);\n\n  /**\n   * Execute a single poll\n   */\n  const pollNow = useCallback(async (): Promise => {\n    if (!enabled) {\n      console.log('[TicketPolling] Polling disabled, skipping poll');\n      return {\n        success: true,\n        refreshedApis: [],\n        errors: [],\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    console.log('[TicketPolling] Executing poll now...');\n\n    try {\n      lastPollAtRef.current = Date.now();\n      pollCountRef.current += 1;\n\n      const result = await refreshTickets();\n\n      console.log('[TicketPolling] Poll completed:', {\n        success: result.success,\n        refreshedApis: result.refreshedApis.length,\n        errors: result.errors.length,\n        pollCount: pollCountRef.current,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Ticket polling failed';\n      console.error('[TicketPolling] Poll error:', errorMessage);\n\n      return {\n        success: false,\n        refreshedApis: [],\n        errors: [{api: 'tickets' as any, error: errorMessage}],\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }, [enabled, refreshTickets]);\n\n  /**\n   * Schedule next poll\n   */\n  const scheduleNextPoll = useCallback(() => {\n    if (!enabled || !isPollingRef.current) {\n      return;\n    }\n\n    // Clear existing timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Calculate delay\n    const nextPollTime = calculateNextPollTime();\n    const delay = nextPollTime - Date.now();\n    nextPollAtRef.current = nextPollTime;\n\n    console.log(\n      '[TicketPolling] Scheduling next poll in',\n      Math.round(delay / 1000),\n      'seconds'\n    );\n\n    timerRef.current = setTimeout(async () => {\n      // Only poll if we can refresh (respects 60s debounce)\n      if (canRefreshTickets() && isPollingRef.current) {\n        await pollNow();\n        scheduleNextPoll(); // Schedule next poll\n      } else {\n        console.log(\n          '[TicketPolling] Poll skipped (debounce or stopped), rescheduling...'\n        );\n        scheduleNextPoll(); // Reschedule anyway to keep trying\n      }\n    }, delay);\n  }, [enabled, calculateNextPollTime, canRefreshTickets, pollNow]);\n\n  /**\n   * Start polling\n   */\n  const startPolling = useCallback(() => {\n    if (!enabled) {\n      console.log('[TicketPolling] Cannot start - polling disabled');\n      return;\n    }\n\n    if (isPollingRef.current) {\n      console.log('[TicketPolling] Already polling, ignoring start request');\n      return;\n    }\n\n    console.log('[TicketPolling] Starting ticket polling...');\n    isPollingRef.current = true;\n    scheduleNextPoll();\n  }, [enabled, scheduleNextPoll]);\n\n  /**\n   * Stop polling\n   */\n  const stopPolling = useCallback(() => {\n    console.log('[TicketPolling] Stopping ticket polling...');\n    isPollingRef.current = false;\n    nextPollAtRef.current = null;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Handle app state changes\n   */\n  const handleAppStateChange = useCallback(\n    (nextAppState: AppStateStatus) => {\n      const previousState = appStateRef.current;\n      appStateRef.current = nextAppState;\n\n      console.log(\n        '[TicketPolling] App state change:',\n        previousState,\n        '->',\n        nextAppState\n      );\n\n      if (\n        nextAppState === 'active' &&\n        (previousState === 'background' || previousState === 'inactive')\n      ) {\n        // App came to foreground\n        if (enabled && !isPollingRef.current) {\n          console.log('[TicketPolling] App foregrounded, resuming polling...');\n          // Wait 5 seconds then resume polling\n          setTimeout(() => {\n            if (appStateRef.current === 'active') {\n              startPolling();\n            }\n          }, 5000);\n        }\n      } else if (\n        (nextAppState === 'background' || nextAppState === 'inactive') &&\n        isPollingRef.current\n      ) {\n        // App went to background\n        console.log('[TicketPolling] App backgrounded, pausing polling...');\n        stopPolling();\n      }\n    },\n    [enabled, startPolling, stopPolling]\n  );\n\n  /**\n   * Setup app state listener\n   */\n  useEffect(() => {\n    const subscription = AppState.addEventListener(\n      'change',\n      handleAppStateChange\n    );\n    return () => {\n      subscription?.remove();\n    };\n  }, [handleAppStateChange]);\n\n  /**\n   * Cleanup on unmount - FORCE stop all timers\n   */\n  useEffect(() => {\n    return () => {\n      console.log('[TicketPolling] Cleaning up on unmount - FORCE STOP');\n      isPollingRef.current = false;\n      nextPollAtRef.current = null;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  }, []);\n\n  return useMemo(\n    () => ({\n      isPolling: isPollingRef.current,\n      lastPollAt: lastPollAtRef.current,\n      nextPollAt: nextPollAtRef.current,\n      pollCount: pollCountRef.current,\n      startPolling,\n      stopPolling,\n      pollNow,\n    }),\n    [startPolling, stopPolling, pollNow]\n  );\n};\n\nexport default useTicketPolling;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketPollingState.html":{"url":"interfaces/TicketPollingState.html","title":"interface - TicketPollingState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketPollingState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useTicketPolling.ts\n        \n\n\n            \n                Description\n            \n            \n                Polling state\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isPolling\n                                        \n                                \n                                \n                                        \n                                            lastPollAt\n                                        \n                                \n                                \n                                        \n                                            nextPollAt\n                                        \n                                \n                                \n                                        \n                                            pollCount\n                                        \n                                \n                                \n                                        \n                                            pollNow\n                                        \n                                \n                                \n                                        \n                                            startPolling\n                                        \n                                \n                                \n                                        \n                                            stopPolling\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPolling:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastPollAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastPollAt:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextPollAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextPollAt:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pollCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pollCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pollNow\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pollNow:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startPolling:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stopPolling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stopPolling:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {AppState, AppStateStatus} from 'react-native';\nimport {RefreshResult} from '../refresh/refreshTypes';\nimport {useRefreshControl} from './useRefreshControl';\n\n/**\n * Polling configuration\n */\ninterface TicketPollingConfig {\n  /** Base polling interval in seconds (default: 30) */\n  baseIntervalSeconds?: number;\n  /** Maximum jitter in seconds (default: 5) */\n  maxJitterSeconds?: number;\n  /** Whether polling is enabled (default: true) */\n  enabled?: boolean;\n  /** Whether to start polling immediately (default: true) */\n  startImmediately?: boolean;\n}\n\n/**\n * Polling state\n */\ninterface TicketPollingState {\n  isPolling: boolean;\n  lastPollAt: number | null;\n  nextPollAt: number | null;\n  pollCount: number;\n  startPolling: () => void;\n  stopPolling: () => void;\n  pollNow: () => Promise;\n}\n\n/**\n * Add jitter to interval to prevent thundering herd\n */\nconst addJitter = (baseIntervalMs: number, maxJitterMs: number): number => {\n  const jitter = Math.random() * maxJitterMs * 2 - maxJitterMs; // ±maxJitter\n  return Math.max(1000, baseIntervalMs + jitter); // Minimum 1 second\n};\n\n/**\n * Hook for automatic ticket polling\n *\n * Integrates with existing refresh infrastructure and handles:\n * - 30s + jitter polling intervals\n * - Background/foreground app state transitions\n * - Screen focus/blur detection\n * - Proper cleanup on unmount\n * - Debounce respect through existing refresh system\n */\nexport const useTicketPolling = (\n  config: TicketPollingConfig = {}\n): TicketPollingState => {\n  const {\n    baseIntervalSeconds = 30,\n    maxJitterSeconds = 5,\n    enabled = true,\n    startImmediately = true,\n  } = config;\n\n  const {refreshTickets, canRefreshTickets} = useRefreshControl();\n\n  // Polling state\n  const isPollingRef = useRef(false);\n  const timerRef = useRef(null);\n  const lastPollAtRef = useRef(null);\n  const nextPollAtRef = useRef(null);\n  const pollCountRef = useRef(0);\n  const appStateRef = useRef(AppState.currentState);\n\n  /**\n   * Calculate next poll time with jitter\n   */\n  const calculateNextPollTime = useCallback((): number => {\n    const baseMs = baseIntervalSeconds * 1000;\n    const maxJitterMs = maxJitterSeconds * 1000;\n    const intervalWithJitter = addJitter(baseMs, maxJitterMs);\n    return Date.now() + intervalWithJitter;\n  }, [baseIntervalSeconds, maxJitterSeconds]);\n\n  /**\n   * Execute a single poll\n   */\n  const pollNow = useCallback(async (): Promise => {\n    if (!enabled) {\n      console.log('[TicketPolling] Polling disabled, skipping poll');\n      return {\n        success: true,\n        refreshedApis: [],\n        errors: [],\n        timestamp: new Date().toISOString(),\n      };\n    }\n\n    console.log('[TicketPolling] Executing poll now...');\n\n    try {\n      lastPollAtRef.current = Date.now();\n      pollCountRef.current += 1;\n\n      const result = await refreshTickets();\n\n      console.log('[TicketPolling] Poll completed:', {\n        success: result.success,\n        refreshedApis: result.refreshedApis.length,\n        errors: result.errors.length,\n        pollCount: pollCountRef.current,\n      });\n\n      return result;\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Ticket polling failed';\n      console.error('[TicketPolling] Poll error:', errorMessage);\n\n      return {\n        success: false,\n        refreshedApis: [],\n        errors: [{api: 'tickets' as any, error: errorMessage}],\n        timestamp: new Date().toISOString(),\n      };\n    }\n  }, [enabled, refreshTickets]);\n\n  /**\n   * Schedule next poll\n   */\n  const scheduleNextPoll = useCallback(() => {\n    if (!enabled || !isPollingRef.current) {\n      return;\n    }\n\n    // Clear existing timer\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n\n    // Calculate delay\n    const nextPollTime = calculateNextPollTime();\n    const delay = nextPollTime - Date.now();\n    nextPollAtRef.current = nextPollTime;\n\n    console.log(\n      '[TicketPolling] Scheduling next poll in',\n      Math.round(delay / 1000),\n      'seconds'\n    );\n\n    timerRef.current = setTimeout(async () => {\n      // Only poll if we can refresh (respects 60s debounce)\n      if (canRefreshTickets() && isPollingRef.current) {\n        await pollNow();\n        scheduleNextPoll(); // Schedule next poll\n      } else {\n        console.log(\n          '[TicketPolling] Poll skipped (debounce or stopped), rescheduling...'\n        );\n        scheduleNextPoll(); // Reschedule anyway to keep trying\n      }\n    }, delay);\n  }, [enabled, calculateNextPollTime, canRefreshTickets, pollNow]);\n\n  /**\n   * Start polling\n   */\n  const startPolling = useCallback(() => {\n    if (!enabled) {\n      console.log('[TicketPolling] Cannot start - polling disabled');\n      return;\n    }\n\n    if (isPollingRef.current) {\n      console.log('[TicketPolling] Already polling, ignoring start request');\n      return;\n    }\n\n    console.log('[TicketPolling] Starting ticket polling...');\n    isPollingRef.current = true;\n    scheduleNextPoll();\n  }, [enabled, scheduleNextPoll]);\n\n  /**\n   * Stop polling\n   */\n  const stopPolling = useCallback(() => {\n    console.log('[TicketPolling] Stopping ticket polling...');\n    isPollingRef.current = false;\n    nextPollAtRef.current = null;\n\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Handle app state changes\n   */\n  const handleAppStateChange = useCallback(\n    (nextAppState: AppStateStatus) => {\n      const previousState = appStateRef.current;\n      appStateRef.current = nextAppState;\n\n      console.log(\n        '[TicketPolling] App state change:',\n        previousState,\n        '->',\n        nextAppState\n      );\n\n      if (\n        nextAppState === 'active' &&\n        (previousState === 'background' || previousState === 'inactive')\n      ) {\n        // App came to foreground\n        if (enabled && !isPollingRef.current) {\n          console.log('[TicketPolling] App foregrounded, resuming polling...');\n          // Wait 5 seconds then resume polling\n          setTimeout(() => {\n            if (appStateRef.current === 'active') {\n              startPolling();\n            }\n          }, 5000);\n        }\n      } else if (\n        (nextAppState === 'background' || nextAppState === 'inactive') &&\n        isPollingRef.current\n      ) {\n        // App went to background\n        console.log('[TicketPolling] App backgrounded, pausing polling...');\n        stopPolling();\n      }\n    },\n    [enabled, startPolling, stopPolling]\n  );\n\n  /**\n   * Setup app state listener\n   */\n  useEffect(() => {\n    const subscription = AppState.addEventListener(\n      'change',\n      handleAppStateChange\n    );\n    return () => {\n      subscription?.remove();\n    };\n  }, [handleAppStateChange]);\n\n  /**\n   * Cleanup on unmount - FORCE stop all timers\n   */\n  useEffect(() => {\n    return () => {\n      console.log('[TicketPolling] Cleaning up on unmount - FORCE STOP');\n      isPollingRef.current = false;\n      nextPollAtRef.current = null;\n\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = null;\n      }\n    };\n  }, []);\n\n  return useMemo(\n    () => ({\n      isPolling: isPollingRef.current,\n      lastPollAt: lastPollAtRef.current,\n      nextPollAt: nextPollAtRef.current,\n      pollCount: pollCountRef.current,\n      startPolling,\n      stopPolling,\n      pollNow,\n    }),\n    [startPolling, stopPolling, pollNow]\n  );\n};\n\nexport default useTicketPolling;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketsQueryParams.html":{"url":"interfaces/TicketsQueryParams.html","title":"interface - TicketsQueryParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketsQueryParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Query parameters for ticket list endpoint\nBased on available filters in the API\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cpId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            customerId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dateRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            offset\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cpId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cpId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by channel partner ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        customerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        customerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by customer ID\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dateRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dateRange:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by date range\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Items per page (default: 25)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        offset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        offset:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Pagination offset (default: 0)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         TicketStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TicketStatus\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Filter by ticket status\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketsState.html":{"url":"interfaces/TicketsState.html","title":"interface - TicketsState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketsState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Ticket.ts\n        \n\n\n            \n                Description\n            \n            \n                Redux state interface for tickets\nUsed by the tickets slice for caching\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            list\n                                        \n                                \n                                \n                                        \n                                            threads\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        list\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        list:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Ticket list cache\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threads\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        threads:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Individual ticket thread cache\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export type TicketStatus = 'Open' | 'Closed';\n\n/**\n * Message sender type\n * Based on actual API response structure\n */\nexport type MessageSender = 'Customer' | 'Admin' | 'KAM';\n\n/**\n * Base complete ticket interface, used in frontend\n * Based on api response structure\n */\nexport interface Ticket {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Base ticket interface for list view\n * Based on GET /api/v1/tickets response structure\n */\nexport interface TicketListItem {\n  /** Unique ticket identifier (e.g., \"TKT004\") */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** User ID who created the ticket */\n  createdBy: string;\n}\n\n/**\n * Message within a ticket thread\n * Based on messages array structure in GET /api/v1/tickets/{id}\n */\nexport interface TicketMessage {\n  /** Message sender role */\n  sender: MessageSender;\n  /** ISO timestamp when message was created */\n  timestamp: string;\n  /** Message content */\n  message: string;\n}\n\n/**\n * Complete ticket with full details and message thread\n * Based on GET /api/v1/tickets/{id} response structure\n */\nexport interface GetTicketByIdResponse {\n  /** Unique ticket identifier */\n  ticketId: string;\n  /** Associated executed lead identifier */\n  leadId: string;\n  /** Ticket subject line */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n  /** Current ticket status */\n  status: TicketStatus;\n  /** All messages in chronological order */\n  messages: TicketMessage[];\n  /** ISO timestamp when ticket was created */\n  createdAt: string;\n  /** ISO timestamp when ticket was closed (null if open) */\n  closedAt: string | null;\n}\n\n/**\n * Paginated response for ticket list\n * Based on GET /api/v1/tickets response structure\n */\nexport interface GetTicketsResponse {\n  /** Array of tickets */\n  items: TicketListItem[];\n  /** Total number of tickets available */\n  total: number;\n  /** Current offset for pagination */\n  offset: number;\n  /** Current limit for pagination */\n  limit: number;\n}\n\n/**\n * Query parameters for ticket list endpoint\n * Based on available filters in the API\n */\nexport interface TicketsQueryParams {\n  /** Pagination offset (default: 0) */\n  offset?: number;\n  /** Items per page (default: 25) */\n  limit?: number;\n  /** Filter by ticket status */\n  status?: TicketStatus;\n  /** Filter by channel partner ID */\n  cpId?: string;\n  /** Filter by customer ID */\n  customerId?: string;\n  /** Filter by date range */\n  dateRange?: string;\n}\n\n/**\n * Request payload for creating a new ticket\n * Based on POST /api/v1/tickets request structure\n */\nexport interface CreateTicketRequest {\n  /** Lead ID (must be status=Executed) */\n  leadId: string;\n  /** Ticket subject */\n  subject: string;\n  /** Initial ticket description */\n  description: string;\n}\n\n/**\n * Response for ticket creation\n * Based on POST /api/v1/tickets response structure\n */\nexport interface CreateTicketResponse {\n  /** Newly created ticket ID */\n  ticketId: string;\n}\n\n/**\n * Request payload for adding a message to ticket\n * Based on POST /api/v1/tickets/{id}/messages request structure\n */\nexport interface AddMessageRequest {\n  /** Message content */\n  message: string;\n}\n\n/**\n * Redux state interface for tickets\n * Used by the tickets slice for caching\n */\nexport interface TicketsState {\n  /** Ticket list cache */\n  list: {\n    /** Cached ticket items */\n    items: TicketListItem[];\n    /** Total count from last fetch */\n    total: number;\n    /** Last successful fetch timestamp */\n    lastFetched: number | null;\n    /** Current error message if any */\n    error: string | null;\n  };\n  /** Individual ticket thread cache */\n  threads: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TicketsTabProps.html":{"url":"interfaces/TicketsTabProps.html","title":"interface - TicketsTabProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TicketsTabProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/screens/main/LeadDetail/TicketsTab.tsx\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            leadId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        leadId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        leadId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useNavigation, useFocusEffect} from '@react-navigation/native';\nimport React, {useCallback, useMemo, useState} from 'react';\nimport {\n  View,\n  Text,\n  FlatList,\n  StyleSheet,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\nimport {Button, FAB, Snackbar} from 'react-native-paper';\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons';\nimport {useGetTicketsQuery} from '../../../api/endpoints/tickets';\nimport CreateTicketModal from '../../../components/modals/CreateTicketModal';\nimport {TicketListItemComponent} from '../../../components/tickets';\nimport {useRefreshControl} from '../../../hooks/useRefreshControl';\nimport {useTicketPolling} from '../../../hooks/useTicketPolling';\nimport {useAppSelector} from '../../../hooks/useTypedRedux';\nimport type {RootStackScreenProps} from '../../../navigation/types';\nimport {selectTicketsByLeadId} from '../../../store/ticketsSlice';\nimport {useAppTheme} from '../../../theme/ThemeProvider';\nimport type {TicketListItem as TicketListItemType} from '../../../types/Ticket';\n\nexport interface TicketsTabProps {\n  leadId: string;\n}\n\n/**\n * TicketsTab Component\n * Shows support tickets for a specific lead\n */\nconst TicketsTab: React.FC = ({leadId}) => {\n  const theme = useAppTheme();\n  const navigation =\n    useNavigation['navigation']>();\n\n  // Modal state\n  const [createTicketModalVisible, setCreateTicketModalVisible] =\n    useState(false);\n  const [snackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // Fetch all tickets (will be filtered by leadId)\n  const {\n    data: apiTickets,\n    isLoading,\n    isError,\n    isFetching,\n  } = useGetTicketsQuery(undefined, {\n    selectFromResult: result => ({\n      ...result,\n      data: result.data || {items: [], total: 0, offset: 0, limit: 25},\n    }),\n  });\n\n  // Get tickets filtered by leadId from Redux state\n  const leadTickets = useAppSelector(selectTicketsByLeadId(leadId));\n\n  // Pull-to-refresh functionality\n  const {refreshTickets, canRefreshTickets} = useRefreshControl();\n\n  // Ticket polling with focus-based lifecycle\n  const ticketPolling = useTicketPolling({\n    enabled: true,\n    startImmediately: false, // Only start via focus control\n  });\n\n  /**\n   * Handle tab focus - start polling\n   */\n  useFocusEffect(\n    useCallback(() => {\n      console.log(\n        '[TicketsTab] Tab focused, starting ticket polling for lead:',\n        leadId\n      );\n      ticketPolling.startPolling();\n\n      return () => {\n        console.log(\n          '[TicketsTab] Tab unfocused, stopping ticket polling for lead:',\n          leadId\n        );\n        ticketPolling.stopPolling();\n      };\n    }, [ticketPolling, leadId])\n  );\n\n  /**\n   * Handle pull-to-refresh\n   */\n  const handleRefresh = useCallback(async () => {\n    console.log('[TicketsTab] Pull to refresh triggered for lead:', leadId);\n    try {\n      await refreshTickets();\n    } catch (error) {\n      console.error('[TicketsTab] Refresh error:', error);\n    }\n  }, [refreshTickets, leadId]);\n\n  /**\n   * Handle ticket item press - navigate to ticket thread\n   */\n  const handleTicketPress = useCallback(\n    (ticketId: string) => {\n      console.log('[TicketsTab] Navigating to ticket thread:', ticketId);\n      // Navigate to TicketThread screen (escape the tab navigator)\n      (navigation as any).navigate('TicketThread', {ticketId});\n    },\n    [navigation]\n  );\n\n  /**\n   * Handle create ticket button press\n   */\n  const handleCreateTicket = useCallback(() => {\n    console.log('[TicketsTab] Opening create ticket modal for lead:', leadId);\n    setCreateTicketModalVisible(true);\n  }, [leadId]);\n\n  /**\n   * Handle close create ticket modal\n   */\n  const handleCloseCreateTicketModal = useCallback(() => {\n    setCreateTicketModalVisible(false);\n  }, []);\n\n  /**\n   * Show snackbar message\n   */\n  const showMessage = useCallback((message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarVisible(true);\n  }, []);\n\n  /**\n   * Handle ticket created successfully\n   */\n  const handleTicketCreated = useCallback(\n    (ticketId: string) => {\n      console.log('[TicketsTab] Ticket created successfully:', ticketId);\n      showMessage(`Ticket ${ticketId} created successfully!`);\n      // Optionally navigate to the new ticket\n      // (navigation as any).navigate('TicketThread', {ticketId});\n    },\n    [showMessage]\n  );\n\n  /**\n   * FlatList optimizations\n   */\n  const keyExtractor = useCallback(\n    (item: TicketListItemType) => item.ticketId,\n    []\n  );\n\n  const renderTicketItem = useCallback(\n    ({item}: {item: TicketListItemType}) => (\n      \n    ),\n    [handleTicketPress]\n  );\n\n  const getItemLayout = useCallback(\n    (_: any, index: number) => ({\n      length: 100, // Approximate height of TicketListItemComponent\n      offset: 100 * index,\n      index,\n    }),\n    []\n  );\n\n  /**\n   * Memoized empty state component\n   */\n  const EmptyState = useMemo(\n    () => (\n      \n        \n        \n          No Support Tickets\n        \n        \n          No support tickets found for this lead. Create a new ticket to get\n          help with your requests.\n        \n        \n          Create Ticket\n        \n      \n    ),\n    [theme, handleCreateTicket]\n  );\n\n  /**\n   * Memoized error state component\n   */\n  const ErrorState = useMemo(\n    () => (\n      \n        \n        \n          Failed to Load Tickets\n        \n        \n          Please pull down to refresh and try again.\n        \n        \n          Retry\n        \n      \n    ),\n    [theme, handleRefresh]\n  );\n\n  // Show loading only if we're loading AND have no cached data for this lead\n  const shouldShowLoading = isLoading && leadTickets.length === 0;\n\n  // Loading state\n  if (shouldShowLoading) {\n    return (\n      \n        \n        \n          Loading tickets...\n        \n      \n    );\n  }\n\n  return (\n    \n      \n        }\n        // Performance optimizations\n        removeClippedSubviews={true}\n        maxToRenderPerBatch={10}\n        windowSize={10}\n        initialNumToRender={10}\n        // States\n        ListEmptyComponent={isError ? ErrorState : EmptyState}\n        // Styling\n        contentContainerStyle={\n          leadTickets.length === 0\n            ? styles.emptyListContainer\n            : styles.listContainer\n        }\n        showsVerticalScrollIndicator={false}\n      />\n\n      {/* Create Ticket FAB - Always visible, prefilled with leadId */}\n      \n\n      {/* Create Ticket Modal with prefilled leadId */}\n      \n\n      {/* Snackbar for success messages */}\n       {\n          setSnackbarVisible(false);\n          setSnackbarMessage('');\n        }}\n        duration={4000}\n        action={{\n          label: 'Dismiss',\n          onPress: () => {\n            setSnackbarVisible(false);\n            setSnackbarMessage('');\n          },\n        }}\n      >\n        {snackbarMessage}\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  loadingText: {\n    fontSize: 16,\n    marginTop: 16,\n    textAlign: 'center',\n  },\n  listContainer: {\n    paddingTop: 16,\n    paddingBottom: 100, // Space for FAB\n  },\n  emptyListContainer: {\n    flexGrow: 1,\n    paddingBottom: 100, // Space for FAB\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  emptyTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  emptyDescription: {\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n    marginBottom: 24,\n  },\n  createButton: {\n    marginTop: 16,\n  },\n  errorContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  errorTitle: {\n    fontSize: 20,\n    fontWeight: '600',\n    marginTop: 16,\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  errorDescription: {\n    fontSize: 16,\n    textAlign: 'center',\n    lineHeight: 24,\n    marginBottom: 24,\n  },\n  retryButton: {\n    marginTop: 16,\n  },\n  fab: {\n    position: 'absolute',\n    right: 16,\n    bottom: 16,\n  },\n});\n\nexport default TicketsTab;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimerOptions.html":{"url":"interfaces/TimerOptions.html","title":"interface - TimerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Timer.ts\n        \n\n\n            \n                Description\n            \n            \n                Timer Configuration Options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            autoStart\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultDuration\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onComplete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onTick\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoStart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        autoStart:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultDuration\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultDuration:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onComplete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onComplete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onTick\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onTick:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CountdownTimerState {\n  secondsLeft: number;\n  isActive: boolean;\n  restart: (newDuration?: number) => void;\n  stop: () => void;\n  pause: () => void;\n  resume: () => void;\n}\n\n/**\n * Timer Configuration Options\n */\nexport interface TimerOptions {\n  defaultDuration?: number;\n  autoStart?: boolean;\n  onComplete?: () => void;\n  onTick?: (secondsLeft: number) => void;\n}\n\n/**\n * Timer Constants\n */\nexport const TIMER_CONSTANTS = {\n  RESEND_DURATION: 60, // 60 seconds for resend timer\n  LOCKOUT_DURATION: 900, // 15 minutes (900 seconds) for lockout timer\n  TICK_INTERVAL: 1000, // 1 second intervals\n} as const;\n\n/**\n * Timer Types for different use cases\n */\nexport type TimerType = 'resend' | 'lockout' | 'custom';\n\n/**\n * Timer Status\n */\nexport type TimerStatus = 'idle' | 'active' | 'paused' | 'completed';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Typography.html":{"url":"interfaces/Typography.html","title":"interface - Typography","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Typography\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/theme/palette.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fontFamily\n                                        \n                                \n                                \n                                        \n                                            fontSize\n                                        \n                                \n                                \n                                        \n                                            lineHeight\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fontFamily\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fontFamily:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fontSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fontSize:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineHeight\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineHeight:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ColorPalette {\n  primary: string;\n  primaryDark: string;\n  primaryLight: string;\n  secondary: string;\n  secondaryDark: string;\n  secondaryLight: string;\n  background: string;\n  surface: string;\n  error: string;\n  warning: string;\n  success: string;\n  info: string;\n  quoted: string;\n  text: {\n    primary: string;\n    secondary: string;\n    disabled: string;\n    placeholder: string;\n  };\n  border: {\n    default: string;\n    light: string;\n    focus: string;\n  };\n  overlay: {\n    light: string;\n    medium: string;\n    dark: string;\n  };\n}\n\nexport interface SpacingScale {\n  xs: number;\n  sm: number;\n  md: number;\n  lg: number;\n  xl: number;\n  xxl: number;\n}\n\nexport interface Typography {\n  fontFamily: {\n    regular: string;\n    medium: string;\n    bold: string;\n    light: string;\n  };\n  fontSize: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n    xxl: number;\n  };\n  lineHeight: {\n    tight: number;\n    normal: number;\n    relaxed: number;\n  };\n}\n\n/**\n * Solarium Green Energy Color Palette\n */\nexport const colors: ColorPalette = {\n  // Primary colors - Green theme for solar energy\n  primary: '#2E7D32', // Dark green\n  primaryDark: '#1B5E20', // Darker green\n  primaryLight: '#4CAF50', // Light green\n\n  // Secondary colors - Complementary blue\n  secondary: '#1976D2', // Blue\n  secondaryDark: '#0D47A1', // Dark blue\n  secondaryLight: '#42A5F5', // Light blue\n\n  // Background colors\n  background: '#FFFFFF',\n  surface: '#F8F9FA',\n\n  // Status colors\n  error: '#F44336',\n  warning: '#FF9800',\n  success: '#4CAF50',\n  info: '#2196F3',\n  // Lead status colors\n  quoted: '#673AB7', // Purple for quoted/discussion status\n\n  // Text colors\n  text: {\n    primary: '#212121',\n    secondary: '#757575',\n    disabled: '#BDBDBD',\n    placeholder: '#9E9E9E',\n  },\n\n  // Border colors\n  border: {\n    default: '#E0E0E0',\n    light: '#F5F5F5',\n    focus: '#2E7D32',\n  },\n\n  // Overlay colors\n  overlay: {\n    light: 'rgba(0, 0, 0, 0.1)',\n    medium: 'rgba(0, 0, 0, 0.5)',\n    dark: 'rgba(0, 0, 0, 0.8)',\n  },\n};\n\n/**\n * Spacing scale based on 8px grid\n */\nexport const spacing: SpacingScale = {\n  xs: 4,\n  sm: 8,\n  md: 16,\n  lg: 24,\n  xl: 32,\n  xxl: 48,\n};\n\n/**\n * Typography definitions\n */\nexport const typography: Typography = {\n  fontFamily: {\n    regular: 'System',\n    medium: 'System',\n    bold: 'System',\n    light: 'System',\n  },\n  fontSize: {\n    xs: 12,\n    sm: 14,\n    md: 16,\n    lg: 18,\n    xl: 24,\n    xxl: 32,\n  },\n  lineHeight: {\n    tight: 1.2,\n    normal: 1.4,\n    relaxed: 1.6,\n  },\n};\n\n/**\n * Shadow definitions for elevation\n */\nexport const shadows = {\n  small: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 2,\n  },\n  medium: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    elevation: 4,\n  },\n  large: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 8,\n    elevation: 8,\n  },\n};\n\n/**\n * Border radius definitions\n */\nexport const borderRadius = {\n  small: 4,\n  medium: 8,\n  large: 12,\n  xl: 16,\n  round: 50,\n};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UIState.html":{"url":"interfaces/UIState.html","title":"interface - UIState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UIState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/uiSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                UI State\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            activeModal\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            loadingMessage\n                                        \n                                \n                                \n                                        \n                                            networkStatus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        activeModal\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        activeModal:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        loadingMessage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loadingMessage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkStatus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        networkStatus:     \"online\" | \"offline\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"online\" | \"offline\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, PayloadAction} from '@reduxjs/toolkit';\n\n/**\n * UI State\n */\nexport interface UIState {\n  isLoading: boolean;\n  loadingMessage?: string;\n  error?: string | null;\n  activeModal?: string;\n  networkStatus: 'online' | 'offline';\n}\n\n/**\n * Initial state\n */\nconst initialState: UIState = {\n  isLoading: false,\n  loadingMessage: undefined,\n  error: null,\n  activeModal: undefined,\n  networkStatus: 'online',\n};\n\n/**\n * UI slice\n */\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    setLoading: (\n      state,\n      action: PayloadAction\n    ) => {\n      state.isLoading = action.payload.isLoading;\n      state.loadingMessage = action.payload.message;\n    },\n    setError: (state, action: PayloadAction) => {\n      state.error = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    },\n    showModal: (state, action: PayloadAction) => {\n      state.activeModal = action.payload;\n    },\n    hideModal: state => {\n      state.activeModal = undefined;\n    },\n    setNetworkStatus: (state, action: PayloadAction) => {\n      state.networkStatus = action.payload;\n    },\n  },\n});\n\nexport const {setLoading, setError, showModal, hideModal, setNetworkStatus} =\n  uiSlice.actions;\n\nexport default uiSlice.reducer;\n\n// Selectors\nexport const selectIsLoading = (state: {ui: UIState}) => state.ui.isLoading;\nexport const selectLoadingMessage = (state: {ui: UIState}) =>\n  state.ui.loadingMessage;\nexport const selectActiveModal = (state: {ui: UIState}) => state.ui.activeModal;\nexport const selectNetworkStatus = (state: {ui: UIState}) =>\n  state.ui.networkStatus;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateProfileRequest.html":{"url":"interfaces/UpdateProfileRequest.html","title":"interface - UpdateProfileRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdateProfileRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile update request payload (all fields optional)\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    User's email address (valid email format)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    User's full name (max 100 characters)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    User's phone number (10 digits)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateProfileResponse.html":{"url":"interfaces/UpdateProfileResponse.html","title":"interface - UpdateProfileResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdateProfileResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Profile.ts\n        \n\n\n            \n                Description\n            \n            \n                Profile API response envelope for PATCH requests\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Success status\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProfileData {\n  /** Unique user identifier */\n  userId: string;\n  /** User's full name */\n  name: string;\n  /** User's email address */\n  email: string;\n  /** User's phone number */\n  phone: string;\n  /** User role */\n  role: string;\n  /** Account status */\n  status: string;\n  /** First name */\n  firstName: string;\n  /** Last name */\n  lastName: string;\n  /** Avatar image URL (nullable) */\n  avatar: string | null;\n  /** User's timezone */\n  timezone: string;\n  /** User's language preference */\n  language: string;\n  /** Last login timestamp */\n  lastLoginAt: string;\n  /** Profile last updated timestamp */\n  updatedAt: string;\n}\n\n/**\n * Profile update request payload (all fields optional)\n */\nexport interface UpdateProfileRequest {\n  /** User's full name (max 100 characters) */\n  name?: string;\n  /** User's email address (valid email format) */\n  email?: string;\n  /** User's phone number (10 digits) */\n  phone?: string;\n}\n\n/**\n * Profile API response envelope for GET requests\n */\nexport interface GetProfileResponse {\n  /** Success status */\n  success: boolean;\n  /** Profile data */\n  data: ProfileData;\n}\n\n/**\n * Profile API response envelope for PATCH requests\n */\nexport interface UpdateProfileResponse {\n  /** Success status */\n  success: boolean;\n}\n\n/**\n * Profile validation constraints\n */\nexport interface ProfileValidation {\n  name: {\n    maxLength: 100;\n  };\n  email: {\n    format: 'email';\n  };\n  phone: {\n    pattern: '^\\\\d{10}$';\n  };\n}\n\n/**\n * Profile API error response\n */\nexport interface ProfileApiError {\n  statusCode: number;\n  code: string;\n  error: string;\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadError.html":{"url":"interfaces/UploadError.html","title":"interface - UploadError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/AzureBlob.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload error with specific type\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            retryable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            statusCode\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        retryable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         UploadErrorType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadErrorType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SasInfo {\n  sasUrl: string;\n  expiresInSec: number;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\n/**\n * Upload parameters for Azure Blob\n */\nexport interface AzureBlobUploadParams {\n  sasUrl: string;\n  file: RNFile;\n  expiresInSec: number;\n  onProgress?: (progress: UploadProgress) => void;\n  getFreshSas?: () => Promise;\n  abortSignal?: AbortSignal;\n}\n\n/**\n * Upload error types\n */\nexport type UploadErrorType =\n  | 'NETWORK_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'EXPIRED_TOKEN'\n  | 'CANCELLED'\n  | 'INVALID_RESPONSE'\n  | 'UPLOAD_EXPIRED';\n\n/**\n * Upload error with specific type\n */\nexport interface UploadError extends Error {\n  type: UploadErrorType;\n  statusCode?: number;\n  retryable: boolean;\n}\n\n// Import RNFile from existing types\nimport type {RNFile} from './File';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UploadMutex.html":{"url":"classes/UploadMutex.html","title":"class - UploadMutex","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UploadMutex\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/azureBlobUploader.ts\n        \n\n\n            \n                Description\n            \n            \n                Mutex to prevent concurrent getFreshSas calls\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                locks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                executeWithLock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        locks\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map>()\n                    \n                \n                    \n                        \n                                Defined in src/utils/azureBlobUploader.ts:38\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        executeWithLock\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeWithLock(key: string, operation: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/azureBlobUploader.ts:40\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                operation\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type {\n  SasInfo,\n  AzureBlobUploadParams,\n  UploadProgress,\n  UploadError,\n  UploadErrorType,\n} from '../types/AzureBlob';\n\n/**\n * Upload configuration\n */\nconst UPLOAD_CONFIG = {\n  // Timeout based on environment (in milliseconds)\n  TIMEOUT_MS: __DEV__ ? 10000 : 8000, // 10s dev/staging, 8s prod\n\n  // Progress update interval\n  PROGRESS_INTERVAL_MS: 100,\n\n  // Minimum progress ticks for 10MB file\n  MIN_PROGRESS_TICKS: 5,\n\n  // Maximum retry attempts\n  MAX_RETRY_ATTEMPTS: 1,\n\n  // Buffer time for token expiry checks (30 seconds)\n  EXPIRY_BUFFER_MS: 30 * 1000,\n} as const;\n\n/**\n * Mutex to prevent concurrent getFreshSas calls\n */\nclass UploadMutex {\n  private readonly locks = new Map>();\n\n  async executeWithLock(\n    key: string,\n    operation: () => Promise\n  ): Promise {\n    // If there's already a pending operation for this key, wait for it\n    if (this.locks.has(key)) {\n      return this.locks.get(key) as Promise;\n    }\n\n    // Create and store the operation promise\n    const promise = operation();\n    this.locks.set(key, promise as Promise);\n\n    try {\n      const result = await promise;\n      return result;\n    } finally {\n      // Always clean up the lock\n      this.locks.delete(key);\n    }\n  }\n}\n\n// Global mutex instance\nconst uploadMutex = new UploadMutex();\n\n/**\n * Create upload error with specific type\n */\nfunction createUploadError(\n  message: string,\n  type: UploadErrorType,\n  statusCode?: number,\n  retryable: boolean = false\n): UploadError {\n  const error = new Error(message) as UploadError;\n  error.type = type;\n  error.statusCode = statusCode;\n  error.retryable = retryable;\n  return error;\n}\n\n/**\n * Calculate progress with minimum tick guarantee\n */\nfunction calculateProgress(loaded: number, total: number): UploadProgress {\n  const percentage = total > 0 ? Math.round((loaded / total) * 100) : 0;\n\n  return {\n    loaded,\n    total,\n    percentage: Math.min(percentage, 100),\n  };\n}\n\n/**\n * Check if upload has expired based on start time and expiry\n */\nfunction isUploadExpired(startTime: number, expiresInSec: number): boolean {\n  const elapsedSeconds = (Date.now() - startTime) / 1000;\n  return elapsedSeconds >= expiresInSec - UPLOAD_CONFIG.EXPIRY_BUFFER_MS / 1000;\n}\n\n/**\n * Perform the actual upload using XMLHttpRequest\n */\nfunction performUpload(\n  sasUrl: string,\n  file: any, // RNFile\n  onProgress?: (progress: UploadProgress) => void,\n  abortSignal?: AbortSignal\n): Promise {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    let lastProgressTime = 0;\n\n    // Setup progress tracking\n    const updateProgress = (loaded: number, total: number) => {\n      const now = Date.now();\n\n      // Ensure minimum progress interval (100ms)\n      if (now - lastProgressTime >= UPLOAD_CONFIG.PROGRESS_INTERVAL_MS) {\n        lastProgressTime = now;\n\n        if (onProgress) {\n          const progress = calculateProgress(loaded, total);\n          onProgress(progress);\n\n          console.log(\n            `[AzureBlobUploader] Progress: ${progress.percentage}% (${loaded}/${total} bytes)`\n          );\n        }\n      }\n    };\n\n    // Handle upload progress\n    xhr.upload.addEventListener('progress', event => {\n      if (event.lengthComputable) {\n        updateProgress(event.loaded, event.total);\n      }\n    });\n\n    // Handle completion\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200 || xhr.status === 201) {\n        console.log(\n          `[AzureBlobUploader] Upload completed successfully: ${xhr.status}`\n        );\n        // Ensure final progress is 100%\n        if (onProgress) {\n          onProgress(calculateProgress(100, 100));\n        }\n\n        resolve();\n      } else {\n        console.error(\n          `[AzureBlobUploader] Upload failed with status: ${xhr.status}`\n        );\n        const error = createUploadError(\n          `Upload failed with status ${xhr.status}`,\n          xhr.status === 403 ? 'EXPIRED_TOKEN' : 'INVALID_RESPONSE',\n          xhr.status,\n          xhr.status === 403 // 403 is retryable\n        );\n\n        reject(error);\n      }\n    });\n\n    // Handle network errors\n    xhr.addEventListener('error', () => {\n      console.error('[AzureBlobUploader] Network error during upload');\n      const error = createUploadError(\n        'Network error during upload',\n        'NETWORK_ERROR',\n        undefined,\n        true // Network errors are retryable\n      );\n      reject(error);\n    });\n\n    // Handle timeout\n    xhr.addEventListener('timeout', () => {\n      console.error('[AzureBlobUploader] Upload timeout');\n      const error = createUploadError(\n        'Upload timeout',\n        'TIMEOUT_ERROR',\n        undefined,\n        true // Timeouts are retryable\n      );\n      reject(error);\n    });\n\n    // Handle abort\n    xhr.addEventListener('abort', () => {\n      console.log('[AzureBlobUploader] Upload cancelled');\n      const error = createUploadError(\n        'Upload cancelled',\n        'CANCELLED',\n        undefined,\n        false // Cancelled uploads are not retryable\n      );\n      reject(error);\n    });\n\n    // Setup abort signal\n    if (abortSignal) {\n      const abortHandler = () => {\n        xhr.abort();\n      };\n\n      abortSignal.addEventListener('abort', abortHandler);\n\n      // Check if already aborted\n      if (abortSignal.aborted) {\n        xhr.abort();\n        return;\n      }\n    }\n\n    // Configure and start upload\n    xhr.open('PUT', sasUrl);\n    xhr.timeout = UPLOAD_CONFIG.TIMEOUT_MS;\n\n    // Set content type based on file type\n    if (file.type) {\n      xhr.setRequestHeader('Content-Type', file.type);\n    }\n\n    // Additional Azure Blob headers\n    xhr.setRequestHeader('x-ms-blob-type', 'BlockBlob');\n\n    console.log(\n      `[AzureBlobUploader] Starting upload: ${file.name} (${file.size} bytes)`\n    );\n    // Start upload with file blob\n    if (file.uri && file.uri.startsWith('file://')) {\n      // For React Native file URIs, we need to create a blob-like object\n      // This is a simplified approach - in a real app, you'd use libraries like react-native-fs\n      xhr.send({\n        uri: file.uri,\n        type: file.type,\n        name: file.name,\n      } as any);\n    } else {\n      // For web blobs or direct file objects\n      xhr.send(file as any);\n    }\n  });\n}\n\n/**\n * Upload file to Azure Blob Storage using SAS URL\n *\n * @param params - Upload parameters\n * @returns Promise that resolves when upload completes\n *\n * Features:\n * - Progress tracking with minimum 100ms intervals\n * - Automatic retry on 403 (expired token) or timeout\n * - Global upload expiry check\n * - Cancellation support via AbortSignal\n * - Mutex to prevent concurrent token refresh\n */\nexport async function uploadFileToSas(\n  params: AzureBlobUploadParams\n): Promise {\n  const {sasUrl, file, expiresInSec, onProgress, getFreshSas, abortSignal} =\n    params;\n\n  const startTime = Date.now();\n  const uploadKey = `${file.name}-${file.size}-${startTime}`;\n  let currentSasUrl = sasUrl;\n  let attempts = 0;\n\n  console.log(\n    `[AzureBlobUploader] Starting upload for ${file.name} with ${expiresInSec}s expiry`\n  );\n\n  // Validation\n  if (!sasUrl || !file) {\n    throw createUploadError(\n      'Invalid upload parameters: sasUrl and file are required',\n      'INVALID_RESPONSE'\n    );\n  }\n\n  if (file.size \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadProgress.html":{"url":"interfaces/UploadProgress.html","title":"interface - UploadProgress","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadProgress\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/AzureBlob.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload progress information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            loaded\n                                        \n                                \n                                \n                                        \n                                            percentage\n                                        \n                                \n                                \n                                        \n                                            total\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        loaded\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        loaded:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SasInfo {\n  sasUrl: string;\n  expiresInSec: number;\n}\n\n/**\n * Upload progress information\n */\nexport interface UploadProgress {\n  loaded: number;\n  total: number;\n  percentage: number;\n}\n\n/**\n * Upload parameters for Azure Blob\n */\nexport interface AzureBlobUploadParams {\n  sasUrl: string;\n  file: RNFile;\n  expiresInSec: number;\n  onProgress?: (progress: UploadProgress) => void;\n  getFreshSas?: () => Promise;\n  abortSignal?: AbortSignal;\n}\n\n/**\n * Upload error types\n */\nexport type UploadErrorType =\n  | 'NETWORK_ERROR'\n  | 'TIMEOUT_ERROR'\n  | 'EXPIRED_TOKEN'\n  | 'CANCELLED'\n  | 'INVALID_RESPONSE'\n  | 'UPLOAD_EXPIRED';\n\n/**\n * Upload error with specific type\n */\nexport interface UploadError extends Error {\n  type: UploadErrorType;\n  statusCode?: number;\n  retryable: boolean;\n}\n\n// Import RNFile from existing types\nimport type {RNFile} from './File';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadResult.html":{"url":"interfaces/UploadResult.html","title":"interface - UploadResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/kycUploader.ts\n        \n\n\n            \n                Description\n            \n            \n                Upload result containing blob information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            blobName\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blobName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blobName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {kycApi} from '../api/endpoints/kyc';\nimport {requestKycSasToken} from '../api/kycService';\nimport type {RootState} from '../store';\nimport {selectNewAuth} from '../store/newAuthSlice';\nimport type {SasInfo} from '../types/AzureBlob';\nimport type {RNFile} from '../types/File';\nimport type {\n  KycDocumentType,\n  RequestSasTokenRequest,\n} from '../types/KycDocument';\nimport {uploadFileToSas, estimateUploadTime} from '../utils/azureBlobUploader';\nimport {compressImage, isCompressibleImage} from '../utils/imageCompression';\nimport {validateKycDocument} from '../utils/kycValidation';\n\n/**\n * Upload parameters for KYC document upload\n */\nexport interface KycDocUploadParams {\n  leadId?: string; // made optional for backward compatibility\n  customerId: string;\n  docType: KycDocumentType;\n  file: RNFile;\n  onProgress?: (percentage: number) => void;\n  store?: {\n    getState: () => RootState;\n    dispatch: any;\n  };\n  onInvalidate?: (leadId: string) => void;\n  abortSignal?: AbortSignal; // New parameter for cancellation\n}\n\n/**\n * Upload result containing blob information\n */\nexport interface UploadResult {\n  blobName: string;\n  url: string;\n}\n\n/**\n * Upload error with step information\n */\nexport class KycUploadError extends Error {\n  public readonly step: string;\n  public readonly originalError: Error;\n\n  constructor(step: string, originalError: Error) {\n    super(`KYC upload failed at ${step}: ${originalError.message}`);\n    this.name = 'KycUploadError';\n    this.step = step;\n    this.originalError = originalError;\n  }\n}\n\n/**\n * Mutex for SAS token refresh to prevent concurrent requests\n */\nclass SasTokenMutex {\n  private readonly locks = new Map>();\n\n  async executeWithLock(\n    key: string,\n    operation: () => Promise\n  ): Promise {\n    // If there's already a pending operation for this key, wait for it\n    if (this.locks.has(key)) {\n      return this.locks.get(key)!;\n    }\n\n    // Create and store the operation promise\n    const promise = operation();\n    this.locks.set(key, promise);\n\n    try {\n      const result = await promise;\n      return result;\n    } finally {\n      // Always clean up the lock\n      this.locks.delete(key);\n    }\n  }\n}\n\n// Global mutex instance\nconst sasTokenMutex = new SasTokenMutex();\n\n/**\n * Extract blob name from SAS URL\n * Format: https://storage.blob.core.windows.net/container/path/filename.ext?sas=token\n */\nfunction extractBlobName(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    const pathParts = url.pathname.split('/');\n\n    // Remove empty first element and container name\n    const pathWithoutContainer = pathParts.slice(2);\n\n    // Join remaining parts to get blob name\n    return pathWithoutContainer.join('/');\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract blob name from SAS URL:',\n      error\n    );\n    // Fallback: use timestamp-based name\n    return `unknown-${Date.now()}`;\n  }\n}\n\n/**\n * Extract base URL (without query parameters) from SAS URL\n */\nfunction extractBaseUrl(sasUrl: string): string {\n  try {\n    const url = new URL(sasUrl);\n    return `${url.origin}${url.pathname}`;\n  } catch (error) {\n    console.warn(\n      '[KycUploader] Failed to extract base URL from SAS URL:',\n      error\n    );\n    return sasUrl.split('?')[0];\n  }\n}\n\n/**\n * Get current user ID from auth state\n */\nfunction getCurrentUserId(store?: {getState: () => RootState}): string {\n  if (!store) {\n    throw new Error('Store is required to get current user ID');\n  }\n\n  const state = store.getState();\n\n  // Get user from new auth system\n  const newAuth = selectNewAuth(state);\n  const user = newAuth?.user;\n\n  if (!user || !user.id) {\n    throw new Error('User not authenticated or missing user ID');\n  }\n\n  return user.id;\n}\n\n/**\n * Check if SAS token needs refresh based on remaining validity and estimated upload time\n */\nfunction needsSasTokenRefresh(\n  sasInfo: SasInfo,\n  file: RNFile,\n  bufferTimeSeconds: number = 60\n): boolean {\n  // Calculate estimated upload time (rough estimate: 1MB/s)\n  const estimatedUploadTimeSeconds = estimateUploadTime(file.size);\n\n  // Check if remaining validity is less than estimated upload time + buffer\n  const requiredTimeSeconds = estimatedUploadTimeSeconds + bufferTimeSeconds;\n\n  const needsRefresh = sasInfo.expiresInSec  2MB\n * 3. Get SAS token with smart expiry checking\n * 4. Upload to Azure Blob with progress tracking\n * 5. Invalidate cache tags\n * 6. Return blob information\n *\n * @param params - Upload parameters\n * @returns Promise resolving to blob information\n */\nexport async function uploadKycDocument(\n  params: KycDocUploadParams\n): Promise {\n  const {\n    leadId,\n    customerId,\n    docType,\n    file,\n    onProgress,\n    store,\n    onInvalidate,\n    abortSignal,\n  } = params;\n\n  console.log(`[KycUploader] Starting KYC document upload for ${file.name}`);\n\n  let processedFile = file;\n  let sasInfo: SasInfo;\n\n  // Step 0: Validate customer ID\n  try {\n    console.log('[KycUploader] Step 3: Validating customer ID...');\n    if (!customerId) {\n      throw new Error('Customer ID is required');\n    }\n    console.log(`[KycUploader] Using customer ID: ${customerId}`);\n  } catch (error) {\n    console.error('[KycUploader] Customer ID validation failed:', error);\n    throw new KycUploadError('authentication', error as Error);\n  }\n\n  // Step 1: Validate document\n  try {\n    console.log('[KycUploader] Step 1: Validating document...');\n    await validateKycDocument(file, customerId, leadId);\n    console.log('[KycUploader] Document validation passed');\n  } catch (error) {\n    console.error('[KycUploader] Document validation failed:', error);\n    throw new KycUploadError('validation', error as Error);\n  }\n\n  // Step 2: Compress if needed\n  try {\n    console.log('[KycUploader] Step 2: Checking compression needs...');\n\n    const isImage = isCompressibleImage(file);\n    const sizeMB = file.size / (1024 * 1024);\n\n    if (isImage && sizeMB > 2) {\n      console.log(\n        `[KycUploader] Compressing ${file.name} (${sizeMB.toFixed(2)} MB)`\n      );\n      // Update progress for compression\n      if (onProgress) {\n        onProgress(10); // 10% for compression start\n      }\n\n      const compressionResult = await compressImage(file);\n      processedFile = compressionResult;\n\n      console.log(\n        `[KycUploader] Compression completed: ${file.size} → ${compressionResult.size} bytes`\n      );\n      if (onProgress) {\n        onProgress(20); // 20% for compression complete\n      }\n    } else {\n      console.log('[KycUploader] No compression needed');\n      if (onProgress) {\n        onProgress(20); // Skip compression, move to 20%\n      }\n    }\n  } catch (error) {\n    console.error('[KycUploader] Compression failed:', error);\n    throw new KycUploadError('compression', error as Error);\n  }\n\n  // Step 3: Get SAS token with smart expiry checking\n  try {\n    console.log('[KycUploader] Step 3: Requesting SAS token...');\n\n    if (onProgress) {\n      onProgress(30); // 30% for SAS token request\n    }\n\n    let requestKycSasParams: RequestSasTokenRequest;\n    if (leadId) {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId,\n      };\n    } else {\n      requestKycSasParams = {\n        customerId,\n        docType,\n        leadId: 'LEAD-1014',\n      };\n    }\n    sasInfo = await requestKycSasToken(requestKycSasParams, store);\n\n    console.log(\n      `[KycUploader] SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n    );\n\n    // Check if we need to refresh token immediately\n    if (needsSasTokenRefresh(sasInfo, processedFile)) {\n      console.log(\n        '[KycUploader] SAS token needs immediate refresh due to insufficient validity'\n      );\n      sasInfo = await requestKycSasToken(requestKycSasParams, store);\n      console.log(\n        `[KycUploader] Fresh SAS token acquired, expires in ${sasInfo.expiresInSec}s`\n      );\n    }\n\n    if (onProgress) {\n      onProgress(40); // 40% for SAS token ready\n    }\n  } catch (error) {\n    console.error('[KycUploader] SAS token acquisition failed:', error);\n    throw new KycUploadError('sas_token', error as Error);\n  }\n\n  // Step 4: Upload to Azure Blob\n  try {\n    console.log('[KycUploader] Step 4: Uploading to Azure Blob...');\n\n    const getFreshSas = async (): Promise => {\n      console.log('[KycUploader] Refreshing SAS token during upload...');\n\n      let requestKycSasParams: RequestSasTokenRequest;\n      if (leadId) {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId,\n        };\n      } else {\n        requestKycSasParams = {\n          customerId,\n          docType,\n          leadId: 'LEAD-1013',\n        };\n      }\n      return sasTokenMutex.executeWithLock(\n        `${leadId}-${docType}-${customerId}`,\n        async () => {\n          const freshSas = await requestKycSasToken(requestKycSasParams, store);\n          console.log(\n            `[KycUploader] Fresh SAS token acquired during upload, expires in ${freshSas.expiresInSec}s`\n          );\n          return freshSas;\n        }\n      );\n    };\n\n    await uploadFileToSas({\n      // This function now expects AzureBlobUploadParams\n      sasUrl: sasInfo.sasUrl,\n      file: processedFile,\n      expiresInSec: sasInfo.expiresInSec,\n      onProgress: progress => {\n        // Map upload progress to 40-90% range\n        const mappedProgress = 40 + progress.percentage * 0.5;\n        if (onProgress) {\n          onProgress(Math.round(mappedProgress));\n        }\n      },\n      getFreshSas,\n      abortSignal, // New parameter abortSignal for cancellation\n    });\n\n    console.log('[KycUploader] Upload to Azure Blob completed');\n\n    if (onProgress) {\n      onProgress(90); // 90% for upload complete\n    }\n  } catch (error) {\n    console.error('[KycUploader] Upload to Azure Blob failed:', error);\n    throw new KycUploadError('upload', error as Error);\n  }\n\n  // Step 5: Invalidate cache tags\n  try {\n    console.log('[KycUploader] Step 5: Invalidating cache tags...');\n\n    if (store) {\n      // Prefer store-based invalidation\n      console.log('[KycUploader] Using store-based cache invalidation');\n      store.dispatch(\n        kycApi.util.invalidateTags([\n          {type: 'KycDoc', id: leadId},\n          {type: 'KycDoc', id: customerId},\n          {type: 'KycDoc', id: 'LIST'},\n        ])\n      );\n    } else if (onInvalidate) {\n      // Fallback to callback-based invalidation\n      console.log('[KycUploader] Using callback-based cache invalidation');\n      onInvalidate(leadId);\n    } else {\n      console.warn(\n        '[KycUploader] No invalidation method provided - cache may be stale'\n      );\n    }\n\n    if (onProgress) {\n      onProgress(95); // 95% for cache invalidation\n    }\n  } catch (error) {\n    console.error('[KycUploader] Cache invalidation failed:', error);\n    // Don't throw here - upload succeeded, cache invalidation is nice-to-have\n  }\n\n  // Step 6: Return result\n  try {\n    console.log('[KycUploader] Step 6: Preparing result...');\n\n    const blobName = extractBlobName(sasInfo.sasUrl);\n    const url = extractBaseUrl(sasInfo.sasUrl);\n\n    const result: UploadResult = {\n      blobName,\n      url,\n    };\n\n    console.log(\n      '[KycUploader] KYC document upload completed successfully:',\n      result\n    );\n    if (onProgress) {\n      onProgress(100); // 100% complete\n    }\n\n    return result;\n  } catch (error) {\n    console.error('[KycUploader] Failed to prepare result:', error);\n    throw new KycUploadError('result_preparation', error as Error);\n  }\n}\n\n/**\n * Utility function to check if a file needs compression\n */\nexport function shouldCompressFile(file: RNFile): boolean {\n  const isImage = isCompressibleImage(file);\n  const sizeMB = file.size / (1024 * 1024);\n  return isImage && sizeMB > 2;\n}\n\n/**\n * Utility function to estimate total upload time including all steps\n */\nexport function estimateKycUploadTime(file: RNFile): number {\n  let totalSeconds = 0;\n\n  // Validation: ~1 second (includes API call for doc count)\n  totalSeconds += 1;\n\n  // Compression: ~2 seconds for 10MB image\n  if (shouldCompressFile(file)) {\n    totalSeconds += 2;\n  }\n\n  // SAS token: ~0.5 seconds\n  totalSeconds += 0.5;\n\n  // Upload: file size dependent\n  totalSeconds += estimateUploadTime(file.size);\n\n  // Cache invalidation: ~0.1 seconds\n  totalSeconds += 0.1;\n\n  return Math.ceil(totalSeconds);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseActionDebounceOptions.html":{"url":"interfaces/UseActionDebounceOptions.html","title":"interface - UseActionDebounceOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseActionDebounceOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useActionDebounce.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for configuring the action debounce hook\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            debounceSeconds\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        debounceSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debounceSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom debounce window in seconds (default: DEBOUNCE_WINDOWS.QUOTE_ACTION)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useState, useCallback, useEffect, useRef} from 'react';\nimport {\n  isOutsideDebounceWindow,\n  DEBOUNCE_WINDOWS,\n} from '../utils/debounceWindow';\n\n/**\n * Return type for useActionDebounce hook\n */\nexport interface UseActionDebounceResult {\n  /** Whether the action is currently blocked due to debounce */\n  isBlocked: boolean;\n  /** Function to trigger the action and start debounce timer */\n  triggerAction: () => void;\n  /** Remaining seconds in debounce window (0 if not blocked) */\n  remainingSeconds: number;\n}\n\n/**\n * Options for configuring the action debounce hook\n */\nexport interface UseActionDebounceOptions {\n  /** Custom debounce window in seconds (default: DEBOUNCE_WINDOWS.QUOTE_ACTION) */\n  debounceSeconds?: number;\n}\n\n/**\n * Global map to store last action timestamps per quotation ID\n * This ensures debounce state persists across component re-renders and is independent per quotation\n */\nconst quotationActionTimestamps = new Map();\n\n/**\n * Action Debounce Hook\n *\n * Provides debounced action handling with automatic state management for quotation actions.\n * Each quotation has independent debounce state, preventing rapid successive actions while\n * allowing actions on different quotations simultaneously.\n *\n * The hook uses existing debounceWindow utilities for time calculations and maintains\n * a global Map for timestamp storage to ensure consistency across component lifecycle.\n *\n * @param quotationId - Unique identifier for the quotation (used as debounce key)\n * @param options - Configuration options for debounce behavior\n * @returns Object containing isBlocked state, triggerAction function, and remaining seconds\n *\n * @example\n * ```typescript\n * const { isBlocked, triggerAction, remainingSeconds } = useActionDebounce('quote-123');\n *\n * const handleAccept = () => {\n *   if (isBlocked) return;\n *   triggerAction(); // Starts 5-second debounce\n *   // Perform actual accept logic\n * };\n * ```\n */\nexport const useActionDebounce = (\n  quotationId: string,\n  options: UseActionDebounceOptions = {}\n): UseActionDebounceResult => {\n  const {debounceSeconds = DEBOUNCE_WINDOWS.QUOTE_ACTION} = options;\n\n  // State to track if action is currently blocked\n  const [isBlocked, setIsBlocked] = useState(false);\n  const [remainingSeconds, setRemainingSeconds] = useState(0);\n\n  // Timer ref for cleanup\n  const timerRef = useRef(null);\n  const intervalRef = useRef(null);\n\n  /**\n   * Update the blocked state based on current timestamp\n   */\n  const updateBlockedState = useCallback(() => {\n    const lastActionTime = quotationActionTimestamps.get(quotationId) || null;\n    const isActionAllowed = isOutsideDebounceWindow(\n      lastActionTime,\n      debounceSeconds\n    );\n\n    const blocked = !isActionAllowed;\n    setIsBlocked(blocked);\n\n    if (blocked && lastActionTime) {\n      const now = Date.now();\n      const debounceMs = debounceSeconds * 1000;\n      const timeSinceLastAction = now - lastActionTime;\n      const remainingMs = debounceMs - timeSinceLastAction;\n      const remainingSecs = Math.max(0, Math.ceil(remainingMs / 1000));\n      setRemainingSeconds(remainingSecs);\n    } else {\n      setRemainingSeconds(0);\n    }\n  }, [quotationId, debounceSeconds]);\n\n  /**\n   * Trigger the action and start debounce timer\n   */\n  const triggerAction = useCallback(() => {\n    const now = Date.now();\n\n    // Check if action is currently allowed\n    const lastActionTime = quotationActionTimestamps.get(quotationId) || null;\n    if (!isOutsideDebounceWindow(lastActionTime, debounceSeconds)) {\n      // Action is still blocked, don't trigger\n      return;\n    }\n\n    // Record the action timestamp\n    quotationActionTimestamps.set(quotationId, now);\n\n    // Update state immediately\n    setIsBlocked(true);\n    setRemainingSeconds(debounceSeconds);\n\n    // Clear existing timers\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Start countdown interval\n    intervalRef.current = setInterval(() => {\n      updateBlockedState();\n    }, 1000);\n\n    // Set timer to unblock after debounce period\n    timerRef.current = setTimeout(() => {\n      setIsBlocked(false);\n      setRemainingSeconds(0);\n\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }, debounceSeconds * 1000);\n  }, [quotationId, debounceSeconds, updateBlockedState]);\n\n  // Initialize state on mount and when quotationId changes\n  useEffect(() => {\n    updateBlockedState();\n  }, [updateBlockedState]);\n\n  // Cleanup timers on unmount\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    isBlocked,\n    triggerAction,\n    remainingSeconds,\n  };\n};\n\nexport default useActionDebounce;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseActionDebounceResult.html":{"url":"interfaces/UseActionDebounceResult.html","title":"interface - UseActionDebounceResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseActionDebounceResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useActionDebounce.ts\n        \n\n\n            \n                Description\n            \n            \n                Return type for useActionDebounce hook\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isBlocked\n                                        \n                                \n                                \n                                        \n                                            remainingSeconds\n                                        \n                                \n                                \n                                        \n                                            triggerAction\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isBlocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isBlocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether the action is currently blocked due to debounce\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        remainingSeconds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        remainingSeconds:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Remaining seconds in debounce window (0 if not blocked)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        triggerAction\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        triggerAction:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Function to trigger the action and start debounce timer\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useState, useCallback, useEffect, useRef} from 'react';\nimport {\n  isOutsideDebounceWindow,\n  DEBOUNCE_WINDOWS,\n} from '../utils/debounceWindow';\n\n/**\n * Return type for useActionDebounce hook\n */\nexport interface UseActionDebounceResult {\n  /** Whether the action is currently blocked due to debounce */\n  isBlocked: boolean;\n  /** Function to trigger the action and start debounce timer */\n  triggerAction: () => void;\n  /** Remaining seconds in debounce window (0 if not blocked) */\n  remainingSeconds: number;\n}\n\n/**\n * Options for configuring the action debounce hook\n */\nexport interface UseActionDebounceOptions {\n  /** Custom debounce window in seconds (default: DEBOUNCE_WINDOWS.QUOTE_ACTION) */\n  debounceSeconds?: number;\n}\n\n/**\n * Global map to store last action timestamps per quotation ID\n * This ensures debounce state persists across component re-renders and is independent per quotation\n */\nconst quotationActionTimestamps = new Map();\n\n/**\n * Action Debounce Hook\n *\n * Provides debounced action handling with automatic state management for quotation actions.\n * Each quotation has independent debounce state, preventing rapid successive actions while\n * allowing actions on different quotations simultaneously.\n *\n * The hook uses existing debounceWindow utilities for time calculations and maintains\n * a global Map for timestamp storage to ensure consistency across component lifecycle.\n *\n * @param quotationId - Unique identifier for the quotation (used as debounce key)\n * @param options - Configuration options for debounce behavior\n * @returns Object containing isBlocked state, triggerAction function, and remaining seconds\n *\n * @example\n * ```typescript\n * const { isBlocked, triggerAction, remainingSeconds } = useActionDebounce('quote-123');\n *\n * const handleAccept = () => {\n *   if (isBlocked) return;\n *   triggerAction(); // Starts 5-second debounce\n *   // Perform actual accept logic\n * };\n * ```\n */\nexport const useActionDebounce = (\n  quotationId: string,\n  options: UseActionDebounceOptions = {}\n): UseActionDebounceResult => {\n  const {debounceSeconds = DEBOUNCE_WINDOWS.QUOTE_ACTION} = options;\n\n  // State to track if action is currently blocked\n  const [isBlocked, setIsBlocked] = useState(false);\n  const [remainingSeconds, setRemainingSeconds] = useState(0);\n\n  // Timer ref for cleanup\n  const timerRef = useRef(null);\n  const intervalRef = useRef(null);\n\n  /**\n   * Update the blocked state based on current timestamp\n   */\n  const updateBlockedState = useCallback(() => {\n    const lastActionTime = quotationActionTimestamps.get(quotationId) || null;\n    const isActionAllowed = isOutsideDebounceWindow(\n      lastActionTime,\n      debounceSeconds\n    );\n\n    const blocked = !isActionAllowed;\n    setIsBlocked(blocked);\n\n    if (blocked && lastActionTime) {\n      const now = Date.now();\n      const debounceMs = debounceSeconds * 1000;\n      const timeSinceLastAction = now - lastActionTime;\n      const remainingMs = debounceMs - timeSinceLastAction;\n      const remainingSecs = Math.max(0, Math.ceil(remainingMs / 1000));\n      setRemainingSeconds(remainingSecs);\n    } else {\n      setRemainingSeconds(0);\n    }\n  }, [quotationId, debounceSeconds]);\n\n  /**\n   * Trigger the action and start debounce timer\n   */\n  const triggerAction = useCallback(() => {\n    const now = Date.now();\n\n    // Check if action is currently allowed\n    const lastActionTime = quotationActionTimestamps.get(quotationId) || null;\n    if (!isOutsideDebounceWindow(lastActionTime, debounceSeconds)) {\n      // Action is still blocked, don't trigger\n      return;\n    }\n\n    // Record the action timestamp\n    quotationActionTimestamps.set(quotationId, now);\n\n    // Update state immediately\n    setIsBlocked(true);\n    setRemainingSeconds(debounceSeconds);\n\n    // Clear existing timers\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    // Start countdown interval\n    intervalRef.current = setInterval(() => {\n      updateBlockedState();\n    }, 1000);\n\n    // Set timer to unblock after debounce period\n    timerRef.current = setTimeout(() => {\n      setIsBlocked(false);\n      setRemainingSeconds(0);\n\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }, debounceSeconds * 1000);\n  }, [quotationId, debounceSeconds, updateBlockedState]);\n\n  // Initialize state on mount and when quotationId changes\n  useEffect(() => {\n    updateBlockedState();\n  }, [updateBlockedState]);\n\n  // Cleanup timers on unmount\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  return {\n    isBlocked,\n    triggerAction,\n    remainingSeconds,\n  };\n};\n\nexport default useActionDebounce;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseAuthRestoreConfig.html":{"url":"interfaces/UseAuthRestoreConfig.html","title":"interface - UseAuthRestoreConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseAuthRestoreConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useAuthRestore.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for auth restoration\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            delay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            enabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onComplete\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            onError\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        delay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        delay:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Delay before running restoration (in ms)\nAllows rehydration to complete fully\nDefault: 500ms\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to enable auth restoration\nDefault: true\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onComplete\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onComplete:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Callback when restoration completes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onError\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        onError:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Callback when restoration fails\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {useEffect, useRef} from 'react';\nimport {restoreAuth} from '../store/newAuthSlice';\nimport {useAppDispatch} from './useTypedRedux';\n\n/**\n * Configuration for auth restoration\n */\nexport interface UseAuthRestoreConfig {\n  /**\n   * Whether to enable auth restoration\n   * Default: true\n   */\n  enabled?: boolean;\n\n  /**\n   * Delay before running restoration (in ms)\n   * Allows rehydration to complete fully\n   * Default: 500ms\n   */\n  delay?: number;\n\n  /**\n   * Callback when restoration completes\n   */\n  onComplete?: (result: any) => void;\n\n  /**\n   * Callback when restoration fails\n   */\n  onError?: (error: any) => void;\n}\n\n/**\n * useAuthRestore Hook\n *\n * @param config Configuration options\n * @returns Object with restoration status and manual trigger function\n */\nexport const useAuthRestore = (config: UseAuthRestoreConfig = {}) => {\n  const {enabled = true, delay = 500, onComplete, onError} = config;\n\n  const dispatch = useAppDispatch();\n  const hasRunRef = useRef(false);\n  const isRunningRef = useRef(false);\n\n  /**\n   * Perform auth restoration\n   */\n  const performRestore = async (): Promise => {\n    if (isRunningRef.current || hasRunRef.current) {\n      console.log('[useAuthRestore] Restoration already run or in progress');\n      return;\n    }\n\n    isRunningRef.current = true;\n\n    try {\n      console.log('[useAuthRestore] Starting auth restoration...');\n\n      const result = await dispatch(restoreAuth()).unwrap();\n\n      console.log('[useAuthRestore] Restoration completed:', result);\n      hasRunRef.current = true;\n      onComplete?.(result);\n    } catch (error) {\n      console.error('[useAuthRestore] Restoration failed:', error);\n      onError?.(error);\n    } finally {\n      isRunningRef.current = false;\n    }\n  };\n\n  /**\n   * Effect to run restoration on mount\n   */\n  useEffect(() => {\n    if (!enabled) {\n      console.log('[useAuthRestore] Auth restoration disabled');\n      return;\n    }\n\n    const timeoutId = setTimeout(() => {\n      performRestore();\n    }, delay);\n\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [enabled, delay, performRestore]);\n\n  /**\n   * Manual trigger function for testing or special cases\n   */\n  const triggerRestore = async (): Promise => {\n    hasRunRef.current = false; // Allow re-run\n    await performRestore();\n  };\n\n  return {\n    isRunning: isRunningRef.current,\n    hasRun: hasRunRef.current,\n    triggerRestore,\n  };\n};\n\nexport default useAuthRestore;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseCartActionsReturn.html":{"url":"interfaces/UseCartActionsReturn.html","title":"interface - UseCartActionsReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseCartActionsReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useCartActions.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            addToCart\n                                        \n                                \n                                \n                                        \n                                            cartCount\n                                        \n                                \n                                \n                                        \n                                            cartItems\n                                        \n                                \n                                \n                                        \n                                            clearCart\n                                        \n                                \n                                \n                                        \n                                            isCartEmpty\n                                        \n                                \n                                \n                                        \n                                            isCartFull\n                                        \n                                \n                                \n                                        \n                                            removeFromCart\n                                        \n                                \n                                \n                                        \n                                            removeService\n                                        \n                                \n                                \n                                        \n                                            uniqueItemsCount\n                                        \n                                \n                                \n                                        \n                                            updateQuantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        addToCart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        addToCart:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cartCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cartItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItems:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        clearCart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        clearCart:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCartEmpty\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCartEmpty:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isCartFull\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isCartFull:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeFromCart\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeFromCart:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        removeService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        removeService:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uniqueItemsCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uniqueItemsCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateQuantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateQuantity:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useCallback} from 'react';\nimport {\n  addToCart,\n  removeFromCart,\n  updateQuantity,\n  clearCart,\n  removeService,\n  selectCartCount,\n  selectCartItems,\n  selectCartIsEmpty,\n  selectIsCartFull,\n  selectUniqueItemsCount,\n} from '../store/servicesCartSlice';\nimport type {Service} from '../types/Service';\nimport {useAppDispatch, useAppSelector} from './useTypedRedux';\n\nexport interface UseCartActionsReturn {\n  // Actions\n  addToCart: (service: Service, qty?: number) => void;\n  removeFromCart: (serviceId: string, qty?: number) => void;\n  updateQuantity: (serviceId: string, qty: number) => void;\n  removeService: (serviceId: string) => void;\n  clearCart: () => void;\n\n  // Selectors\n  cartCount: number;\n  uniqueItemsCount: number;\n  isCartEmpty: boolean;\n  isCartFull: boolean;\n  cartItems: Record; // All cart items\n}\n\n/**\n * Hook for cart actions and state management\n *\n * Provides all necessary cart operations with built-in validation\n * and error handling. State updates are automatic via Redux.\n *\n * @returns {UseCartActionsReturn} Cart actions and state\n */\nexport const useCartActions = (): UseCartActionsReturn => {\n  const dispatch = useAppDispatch();\n\n  // Selectors\n  const cartCount = useAppSelector(selectCartCount);\n  const uniqueItemsCount = useAppSelector(selectUniqueItemsCount);\n  const isCartEmpty = useAppSelector(selectCartIsEmpty);\n  const isCartFull = useAppSelector(selectIsCartFull);\n  const cartItems = useAppSelector(selectCartItems);\n\n  // Actions\n  const handleAddToCart = useCallback(\n    (service: Service, qty: number = 1) => {\n      if (qty  {\n      if (qty  {\n      if (qty  {\n      dispatch(removeService({serviceId}));\n    },\n    [dispatch]\n  );\n\n  const handleClearCart = useCallback(() => {\n    dispatch(clearCart());\n  }, [dispatch]);\n\n  return {\n    // Actions\n    addToCart: handleAddToCart,\n    removeFromCart: handleRemoveFromCart,\n    updateQuantity: handleUpdateQuantity,\n    removeService: handleRemoveService,\n    clearCart: handleClearCart,\n\n    // State\n    cartCount,\n    uniqueItemsCount,\n    isCartEmpty,\n    isCartFull,\n    cartItems, // Now we return all cart items\n  };\n};\n\nexport default useCartActions;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseKycDocsResult.html":{"url":"interfaces/UseKycDocsResult.html","title":"interface - UseKycDocsResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseKycDocsResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useKycDocuments.ts\n        \n\n\n            \n                Description\n            \n            \n                Hook return type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            docs\n                                        \n                                \n                                \n                                        \n                                            isLoading\n                                        \n                                \n                                \n                                        \n                                            refetch\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        docs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        docs:         KycDocView[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         KycDocView[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isLoading\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isLoading:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refetch\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refetch:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useCallback, useMemo} from 'react';\nimport {useListKycDocumentsQuery} from '../api/endpoints/kyc';\nimport type {\n  KycDocument,\n  KycDocumentType,\n  KycDocumentStatus,\n} from '../types/KycDocument';\nimport {useNewAuth} from './useNewAuth';\n\n/**\n * KYC Document View with computed properties\n */\nexport interface KycDocView {\n  docType: KycDocumentType;\n  status: KycDocumentStatus | 'Missing';\n  canUpload: boolean; // true if status ∈ {Missing, Rejected}\n  latestDoc?: KycDocument; // undefined when Missing\n  displayName: string; // Human-readable name for UI\n}\n\n/**\n * Hook return type\n */\nexport interface UseKycDocsResult {\n  docs: KycDocView[];\n  isLoading: boolean;\n  refetch: () => void;\n}\n\n/**\n * Fixed checklist of all 7 KYC document types\n */\nconst KYC_DOCUMENT_CHECKLIST: readonly KycDocumentType[] = [\n  'IncomeProof',\n  'LightBill',\n  'CancelledCheque',\n  'Aadhaar',\n  'PAN',\n  'PassportPhoto',\n  'Other',\n] as const;\n\n/**\n * Display names for KYC document types\n */\nconst KYC_DOCUMENT_DISPLAY_NAMES: Record = {\n  IncomeProof: 'Income Proof',\n  LightBill: 'Light Bill (Latest)',\n  CancelledCheque: 'Cancelled Cheque (Latest)',\n  Aadhaar: 'Aadhaar Card',\n  PAN: 'PAN Card',\n  PassportPhoto: 'Passport-size Photograph',\n  Other: 'Other Documents',\n};\n\n/**\n * Check if a document status allows upload\n */\nconst canUploadDocument = (status: KycDocumentStatus | 'Missing'): boolean => {\n  return status === 'Missing' || status === 'Rejected';\n};\n\n/**\n * Find the latest document version for a given document type\n */\nconst findLatestDocument = (\n  documents: KycDocument[],\n  docType: KycDocumentType\n): KycDocument | undefined => {\n  const docsOfType = documents.filter(doc => doc.docType === docType);\n\n  if (docsOfType.length === 0) {\n    return undefined;\n  }\n\n  // Sort by uploadedAt descending and return the latest\n  return docsOfType.sort(\n    (a, b) =>\n      new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime()\n  )[0];\n};\n\n/**\n * Process API response to create fixed checklist\n */\nconst processKycDocuments = (\n  apiDocuments: KycDocument[] = []\n): KycDocView[] => {\n  return KYC_DOCUMENT_CHECKLIST.map(docType => {\n    const latestDoc = findLatestDocument(apiDocuments, docType);\n    const status: KycDocumentStatus | 'Missing' =\n      latestDoc?.status || 'Missing';\n\n    return {\n      docType,\n      status,\n      canUpload: canUploadDocument(status),\n      latestDoc,\n      displayName: KYC_DOCUMENT_DISPLAY_NAMES[docType],\n    };\n  });\n};\n\n/**\n * Custom hook for KYC documents with fixed checklist and auto-refresh\n *\n * @param customerId - Optional customer ID, derives from auth state if not provided\n * @param leadId - Optional lead ID to filter KYC documents for a specific lead\n * @returns Object containing docs array, loading state, and refetch function\n */\nexport const useKycDocuments = (\n  customerId?: string,\n  leadId?: string\n): UseKycDocsResult => {\n  const {user} = useNewAuth();\n\n  // Derive customer ID from auth state if not provided\n  const resolvedCustomerId = customerId || user?.id;\n\n  // Query KYC documents from API\n  const {\n    data: apiResponse,\n    isLoading,\n    refetch: apiRefetch,\n  } = useListKycDocumentsQuery(\n    {customerId: resolvedCustomerId, ...(leadId && {leadId})},\n    {\n      // Force fresh data on every call\n      refetchOnMountOrArgChange: true,\n      // Skip query if no customer ID available AND no leadId available\n      skip: !resolvedCustomerId && !leadId,\n    }\n  );\n\n  // Process API response into fixed checklist\n  const docs = useMemo(() => {\n    return processKycDocuments(apiResponse?.documents);\n  }, [apiResponse?.documents]);\n\n  // Memoized refetch function\n  const refetch = useCallback(() => {\n    if (resolvedCustomerId || leadId) {\n      apiRefetch();\n    }\n  }, [apiRefetch, resolvedCustomerId, leadId]);\n\n  return {\n    docs,\n    isLoading: isLoading && (!!resolvedCustomerId || !!leadId),\n    refetch,\n  };\n};\n\n/**\n * Utility function to get display name for a document type\n */\nexport const getKycDocumentDisplayName = (docType: KycDocumentType): string => {\n  return KYC_DOCUMENT_DISPLAY_NAMES[docType];\n};\n\n/**\n * Utility function to check if a document can be uploaded\n */\nexport const canUploadKycDocument = (\n  status: KycDocumentStatus | 'Missing'\n): boolean => {\n  return canUploadDocument(status);\n};\n\n/**\n * Export constants for external use\n */\nexport {KYC_DOCUMENT_CHECKLIST, KYC_DOCUMENT_DISPLAY_NAMES};\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UseKycUploadReturn.html":{"url":"interfaces/UseKycUploadReturn.html","title":"interface - UseKycUploadReturn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UseKycUploadReturn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/hooks/useKycUpload.ts\n        \n\n\n            \n                Description\n            \n            \n                Hook return type\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cancel\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            progress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            startUpload\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cancel\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cancel:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     Error\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Error\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        progress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        progress:     number | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         UploadResult\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadResult\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startUpload\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startUpload:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         UploadStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         UploadStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {useState, useCallback, useRef, useEffect} from 'react';\nimport {kycApi} from '../api/endpoints/kyc';\nimport {ValidationError} from '../errors/ValidationError';\nimport {\n  uploadKycDocument,\n  KycUploadError,\n  UploadResult,\n} from '../lib/kycUploader';\nimport type {RNFile} from '../types/File';\nimport type {KycDocumentType} from '../types/KycDocument';\nimport {useNewAuth} from './useNewAuth';\nimport {useAppDispatch} from './useTypedRedux';\n\n/**\n * Upload status types\n */\nexport type UploadStatus =\n  | 'idle'\n  | 'running'\n  | 'success'\n  | 'error'\n  | 'cancelled';\n\n/**\n * Hook return type\n */\nexport interface UseKycUploadReturn {\n  startUpload: (\n    docType: KycDocumentType,\n    file: RNFile,\n    leadId?: string\n  ) => void;\n  progress: number | null;\n  status: UploadStatus;\n  error?: Error;\n  cancel: () => void;\n  result?: UploadResult;\n}\n\n/**\n * Debounce storage for uploads per document type\n */\nconst uploadDebounceTimestamps = new Map();\n\n/**\n * Debounce window for uploads (60 seconds)\n */\nconst UPLOAD_DEBOUNCE_MS = 60 * 1000;\n\n/**\n * Check if upload is allowed based on debounce\n */\nconst canUploadDocType = (docType: KycDocumentType): boolean => {\n  const lastUpload = uploadDebounceTimestamps.get(docType);\n  if (!lastUpload) {\n    return true;\n  }\n\n  const now = Date.now();\n  return now - lastUpload >= UPLOAD_DEBOUNCE_MS;\n};\n\n/**\n * Get remaining debounce time in seconds\n */\nconst getRemainingDebounceTime = (docType: KycDocumentType): number => {\n  const lastUpload = uploadDebounceTimestamps.get(docType);\n  if (!lastUpload) {\n    return 0;\n  }\n\n  const now = Date.now();\n  const elapsed = now - lastUpload;\n  const remaining = UPLOAD_DEBOUNCE_MS - elapsed;\n\n  return Math.max(0, Math.ceil(remaining / 1000));\n};\n\n/**\n * Custom hook for KYC document uploads with progress tracking and cancellation\n *\n * Features:\n * - Real-time progress updates (0-100%)\n * - Upload cancellation with AbortController\n * - 60-second debounce per document type\n * - Automatic cache invalidation on success\n * - Comprehensive error handling\n *\n * @returns Object containing upload functions and state\n */\nexport const useKycUpload = (): UseKycUploadReturn => {\n  const dispatch = useAppDispatch();\n  const {user} = useNewAuth();\n\n  // Upload state\n  const [status, setStatus] = useState('idle');\n  const [progress, setProgress] = useState(null);\n  const [error, setError] = useState(undefined);\n  const [result, setResult] = useState(undefined);\n\n  // Abort controller for cancellation\n  const abortControllerRef = useRef(null);\n  const currentDocTypeRef = useRef(null);\n\n  /**\n   * Cancel current upload\n   */\n  const cancel = useCallback(() => {\n    if (abortControllerRef.current && status === 'running') {\n      console.log('[useKycUpload] Cancelling upload...');\n      abortControllerRef.current.abort();\n      setStatus('cancelled');\n      setProgress(null);\n      setError(undefined);\n    }\n  }, [status]);\n\n  /**\n   * Reset state for new upload\n   */\n  const resetState = useCallback(() => {\n    setStatus('idle');\n    setProgress(null);\n    setError(undefined);\n    setResult(undefined);\n  }, []);\n\n  /**\n   * Start KYC document upload\n   */\n  const startUpload = useCallback(\n    async (docType: KycDocumentType, file: RNFile, leadId?: string) => {\n      // Guard: Check if user is authenticated\n      if (!user?.id) {\n        console.error('[useKycUpload] User not authenticated');\n        setError(new Error('User not authenticated'));\n        setStatus('error');\n        return;\n      }\n\n      // Guard: Check debounce\n      if (!canUploadDocType(docType)) {\n        const remainingSeconds = getRemainingDebounceTime(docType);\n        console.warn(\n          `[useKycUpload] Upload blocked by debounce for ${docType}. ${remainingSeconds}s remaining.`\n        );\n        setError(\n          new Error(\n            `Please wait ${remainingSeconds} seconds before uploading another ${docType} document.`\n          )\n        );\n        setStatus('error');\n        return;\n      }\n\n      // Guard: Check if already uploading\n      if (status === 'running') {\n        console.warn('[useKycUpload] Upload already in progress');\n        return;\n      }\n\n      try {\n        console.log(`[useKycUpload] Starting upload for ${docType}:`, {\n          fileName: file.name,\n          fileSize: file.size,\n          fileType: file.type,\n        });\n\n        // Reset state and setup for new upload\n        resetState();\n        setStatus('running');\n        setProgress(0);\n        currentDocTypeRef.current = docType;\n\n        // Create abort controller\n        abortControllerRef.current = new AbortController();\n\n        // Record upload timestamp for debounce\n        uploadDebounceTimestamps.set(docType, Date.now());\n\n        // Create store reference for the upload function\n        const storeRef = {\n          getState: (): RootState => {\n            // This will be called during upload to get current state\n            return (global as any).__REDUX_STORE_STATE__ || {};\n          },\n          dispatch,\n        };\n\n        // temporary hard-coded leadId if not provided\n        // currently, our mock-server expects it mandatorily, but it is expected to be optional\n        // finally, it should be passed in uploadKycDocument only if needed\n        if (!leadId) {\n          leadId = 'LEAD-1014';\n        }\n\n        // Start upload\n        const uploadResult = await uploadKycDocument({\n          leadId,\n          customerId: user.id,\n          docType,\n          file,\n          onProgress: (percentage: number) => {\n            // Only update progress if upload wasn't cancelled\n            if (\n              abortControllerRef.current &&\n              !abortControllerRef.current.signal.aborted\n            ) {\n              setProgress(percentage);\n              console.log(`[useKycUpload] Progress: ${percentage}%`);\n            }\n          },\n          store: storeRef,\n          abortSignal: abortControllerRef.current.signal,\n        });\n\n        // Success\n        if (\n          abortControllerRef.current &&\n          !abortControllerRef.current.signal.aborted\n        ) {\n          console.log(\n            '[useKycUpload] Upload completed successfully:',\n            uploadResult\n          );\n          setStatus('success');\n          setProgress(100);\n          setResult(uploadResult);\n\n          // Auto-invalidate KYC cache\n          dispatch(\n            kycApi.util.invalidateTags([\n              {type: 'KycDoc', id: user.id},\n              {type: 'KycDoc', id: 'LIST'},\n            ])\n          );\n        }\n      } catch (uploadError) {\n        // Handle different error types\n        if (abortControllerRef.current?.signal.aborted) {\n          console.log('[useKycUpload] Upload was cancelled');\n          setStatus('cancelled');\n          setProgress(null);\n          return;\n        }\n\n        console.error('[useKycUpload] Upload failed:', uploadError);\n\n        // DEVELOPMENT MODE: Mock success for failed uploads to maintain UX flow\n        // This allows testing the complete upload workflow even when mock server fails\n        if (__DEV__) {\n          console.warn(\n            '[useKycUpload] DEV MODE: Simulating upload success despite API failure for UX testing'\n          );\n\n          // Simulate successful upload result\n          const mockResult = {\n            blobName: `mock-${docType}-${Date.now()}.pdf`,\n            url: 'https://mock-storage.blob.core.windows.net/kyc-docs',\n          };\n\n          setStatus('success');\n          setProgress(100);\n          setResult(mockResult);\n\n          // Trigger cache invalidation to refresh document list\n          // This will cause useKycDocuments to refetch and show updated status\n          dispatch(\n            kycApi.util.invalidateTags([\n              {type: 'KycDoc', id: user.id},\n              {type: 'KycDoc', id: 'LIST'},\n            ])\n          );\n\n          console.log(\n            '[useKycUpload] DEV MODE: Mock upload completed successfully'\n          );\n          return;\n        }\n\n        // PRODUCTION MODE: Handle errors normally\n        let errorToSet: Error;\n\n        if (uploadError instanceof KycUploadError) {\n          errorToSet = new Error(\n            `Upload failed at ${uploadError.step}: ${uploadError.originalError.message}`\n          );\n        } else if (uploadError instanceof ValidationError) {\n          errorToSet = uploadError;\n        } else if (uploadError instanceof Error) {\n          errorToSet = uploadError;\n        } else {\n          errorToSet = new Error('Upload failed with unknown error');\n        }\n\n        setError(errorToSet);\n        setStatus('error');\n        setProgress(null);\n      } finally {\n        // Cleanup\n        abortControllerRef.current = null;\n        currentDocTypeRef.current = null;\n      }\n    },\n    [user?.id, status, dispatch, resetState]\n  );\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    startUpload,\n    progress,\n    status,\n    error,\n    cancel,\n    result,\n  };\n};\n\n/**\n * Utility function to check if a document type can be uploaded (not in debounce)\n */\nexport const canUploadKycDocType = (docType: KycDocumentType): boolean => {\n  return canUploadDocType(docType);\n};\n\n/**\n * Utility function to get remaining debounce time for a document type\n */\nexport const getKycUploadDebounceTime = (docType: KycDocumentType): number => {\n  return getRemainingDebounceTime(docType);\n};\n\nexport default useKycUpload;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/store/authSlice.ts\n        \n\n\n            \n                Description\n            \n            \n                User interface\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pinCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            state\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pinCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pinCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createSlice, createAsyncThunk, PayloadAction} from '@reduxjs/toolkit';\nimport {authApi} from '../api/endpoints/auth';\nimport {SecureStorageError} from '../errors/SecureStorageError';\nimport {saveJWT, clearJWT, getJWT} from '../storage/secureStorage';\nimport {setStorageItem, STORAGE_KEYS} from '../utils/storageHelpers';\n\n/**\n * User interface\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  address?: string;\n  state?: string;\n  pinCode?: string;\n  role?: string;\n}\n\n/**\n * Authentication State\n */\nexport interface AuthState {\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  isSendingOtp: boolean;\n  token?: string;\n  refreshToken?: string;\n  user?: User;\n  lastLoginTime?: number;\n  error?: string;\n}\n\n/**\n * Initial state\n */\nconst initialState: AuthState = {\n  isLoggedIn: false,\n  isLoading: false,\n  isSendingOtp: false,\n  token: undefined,\n  refreshToken: undefined,\n  user: undefined,\n  lastLoginTime: undefined,\n  error: undefined,\n};\n\n// ===============================\n// ASYNC THUNKS\n// ===============================\n\n/**\n * Send OTP Async Thunk\n */\nexport const sendOtpThunk = createAsyncThunk(\n  'auth/sendOtp',\n  async (phone: string, {rejectWithValue}) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // In real app, this would call your OTP API\n      // const response = await otpService.sendOtp(phone);\n\n      // For demo, always succeed\n      console.log(`[Auth] OTP sent to ${phone}`);\n      return {phone};\n    } catch (error: any) {\n      console.error('[Auth] Send OTP error:', error);\n      return rejectWithValue(error.message || 'Failed to send OTP');\n    }\n  }\n);\n\n/**\n * Login with phone and OTP using secure storage\n */\nexport const loginWithOtp = createAsyncThunk(\n  'auth/loginWithOtp',\n  async (\n    {phone, otp}: {phone: string; otp: string},\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      // Simulate API call - replace with real API in later tasks\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Demo: Accept OTP 123456, reject others\n      if (otp !== '123456') {\n        throw new Error('Invalid OTP. Please try again.');\n      }\n\n      const user: User = {\n        id: `user_${Date.now()}`,\n        phone,\n        name: 'Demo User',\n        email: 'demo@solarium.com',\n      };\n\n      const token = `demo_token_${Date.now()}`;\n\n      // Store in secure storage\n      try {\n        await saveJWT(token);\n        console.log('[Auth] JWT token saved to secure storage');\n      } catch (storageError) {\n        console.error('[Auth] Failed to save JWT token:', storageError);\n\n        if (storageError instanceof SecureStorageError) {\n          // Dispatch logout to clear any partial state\n          dispatch(logout());\n          // Set user-visible error message\n          dispatch({\n            type: 'ui/setError',\n            payload: 'Unable to save login session. Please try again.',\n          });\n          return rejectWithValue('Secure storage unavailable');\n        }\n\n        // For other errors, continue but log warning\n        console.warn(\n          '[Auth] Non-critical storage error during login:',\n          storageError\n        );\n      }\n\n      return {token, user};\n    } catch (error: any) {\n      console.error('[Auth] Login failed:', error);\n      return rejectWithValue(error.message || 'Login failed');\n    }\n  }\n);\n\n/**\n * Logout and clear secure storage\n */\nexport const logoutUser = createAsyncThunk(\n  'auth/logout',\n  async (_, {dispatch}) => {\n    try {\n      // Clear secure storage\n      try {\n        await clearJWT();\n        console.log('[Auth] JWT cleared from secure storage');\n      } catch (storageError) {\n        console.error('[Auth] Failed to clear JWT token:', storageError);\n\n        if (storageError instanceof SecureStorageError) {\n          // Set user-visible warning but continue with logout\n          dispatch({\n            type: 'ui/setError',\n            payload:\n              'Session may not be fully cleared. Please restart the app.',\n          });\n        }\n\n        // Continue with logout even if storage clear fails\n      }\n\n      // In real app, call logout API to invalidate token\n      // await authService.logout();\n\n      console.log('[Auth] Logout successful');\n      return true;\n    } catch (error) {\n      console.error('[Auth] Logout error:', error);\n      // Still dispatch logout even if other operations fail\n      return true;\n    }\n  }\n);\n\n/**\n * Refresh Token Async Thunk\n */\nexport const refreshTokenThunk = createAsyncThunk(\n  'auth/refreshToken',\n  async (_, {getState, rejectWithValue}) => {\n    try {\n      const state = getState() as {auth: AuthState};\n      const {refreshToken} = state.auth;\n\n      if (!refreshToken) {\n        return rejectWithValue('No refresh token available');\n      }\n\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // In real app, call refresh token API\n      // const response = await authService.refreshToken(refreshToken);\n\n      const newTokens = {\n        token: `refreshed_token_${Date.now()}`,\n        refreshToken: `refreshed_refresh_${Date.now()}`,\n      };\n\n      // Store new token\n      await setStorageItem(STORAGE_KEYS.AUTH_TOKEN, newTokens.token);\n\n      console.log('[Auth] Token refreshed successfully');\n      return newTokens;\n    } catch (error: any) {\n      console.error('[Auth] Token refresh error:', error);\n      return rejectWithValue(error.message || 'Token refresh failed');\n    }\n  }\n);\n\n/**\n * Enhanced login with RTK Query integration and secure storage\n */\nexport const loginWithOtpEnhanced = createAsyncThunk(\n  'auth/loginWithOtpEnhanced',\n  async (\n    {phone, otp}: {phone: string; otp: string},\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      // Use RTK Query mutation\n      const result = await dispatch(\n        authApi.endpoints.verifyOtp.initiate({phone, otp})\n      ).unwrap();\n\n      // Store token in secure storage\n      if (result.token) {\n        try {\n          await saveJWT(result.token);\n          console.log('[Auth] JWT token saved to secure storage (enhanced)');\n        } catch (storageError) {\n          console.error(\n            '[Auth] Failed to save JWT token (enhanced):',\n            storageError\n          );\n\n          if (storageError instanceof SecureStorageError) {\n            dispatch(logout());\n            dispatch({\n              type: 'ui/setError',\n              payload: 'Unable to save login session. Please try again.',\n            });\n            return rejectWithValue('Secure storage unavailable');\n          }\n        }\n      }\n\n      return result;\n    } catch (error: any) {\n      return rejectWithValue(error.message || 'Login failed');\n    }\n  }\n);\n\n/**\n * Enhanced logout with API call and secure storage\n */\nexport const logoutUserEnhanced = createAsyncThunk(\n  'auth/logoutUserEnhanced',\n  async (_, {dispatch}) => {\n    try {\n      // Call logout API (optional - for server-side session cleanup)\n      try {\n        await dispatch(authApi.endpoints.logoutUser.initiate()).unwrap();\n      } catch (error) {\n        // Continue with logout even if API call fails\n        console.warn(\n          '[Auth] Logout API call failed, continuing with local logout:',\n          error\n        );\n      }\n\n      // Clear secure storage\n      try {\n        await clearJWT();\n        console.log('[Auth] JWT cleared from secure storage (enhanced)');\n      } catch (storageError) {\n        console.error(\n          '[Auth] Failed to clear JWT token (enhanced):',\n          storageError\n        );\n\n        if (storageError instanceof SecureStorageError) {\n          dispatch({\n            type: 'ui/setError',\n            payload:\n              'Session may not be fully cleared. Please restart the app.',\n          });\n        }\n      }\n\n      // Reset API cache\n      dispatch(authApi.util.resetApiState());\n\n      return true;\n    } catch (error) {\n      console.error('[Auth] Logout error (enhanced):', error);\n      // Still return success for local logout\n      return true;\n    }\n  }\n);\n\n/**\n * Restore authentication state on app startup\n * Validates Redux state against secure storage JWT token\n */\nexport const restoreAuthState = createAsyncThunk(\n  'auth/restoreAuthState',\n  async (_, {getState, dispatch, rejectWithValue}) => {\n    try {\n      console.log('[Auth] Starting auth state restoration...');\n\n      const state = getState() as {auth: AuthState};\n      const {isLoggedIn, user, token: reduxToken} = state.auth;\n      console.log('reduxToken', reduxToken);\n\n      // Check if JWT token exists in secure storage\n      let secureToken: string | undefined;\n      try {\n        secureToken = await getJWT();\n        console.log('[Auth] Secure storage check completed successfully');\n      } catch (error) {\n        console.error(\n          '[Auth] Failed to retrieve JWT from secure storage:',\n          error\n        );\n\n        // Log detailed error information for debugging\n        if (__DEV__) {\n          console.error('[Auth] Secure storage error details:', {\n            error: error instanceof Error ? error.message : 'Unknown error',\n            stack: error instanceof Error ? error.stack : undefined,\n            isSecureStorageError: error instanceof SecureStorageError,\n            currentAuthState: {isLoggedIn, hasUser: !!user},\n          });\n        }\n\n        if (error instanceof SecureStorageError) {\n          // If secure storage is inaccessible and user appears logged in, logout for safety\n          if (isLoggedIn) {\n            console.warn(\n              '[Auth] Secure storage error - logging out for safety'\n            );\n            dispatch(logout());\n          }\n          return rejectWithValue({\n            type: 'SECURE_STORAGE_ERROR',\n            message: 'Secure storage unavailable',\n            originalError: error.message,\n          });\n        }\n\n        // For other errors, assume no token exists but continue restoration\n        console.warn(\n          '[Auth] Non-critical secure storage error - continuing with restoration'\n        );\n        secureToken = undefined;\n      }\n\n      console.log(\n        '[Auth] State check - Redux logged in:',\n        isLoggedIn,\n        'Secure token exists:',\n        !!secureToken\n      );\n\n      // Case 1: Redux says logged in but no secure token - logout\n      if (isLoggedIn && !secureToken) {\n        console.warn(\n          '[Auth] Logged in state but no secure token - logging out'\n        );\n        dispatch(logout());\n        return {\n          action: 'logout',\n          reason: 'No secure token found',\n        };\n      }\n\n      // Case 2: Redux says logged out but secure token exists - could restore but play it safe\n      if (!isLoggedIn && secureToken) {\n        console.warn(\n          '[Auth] Secure token exists but not logged in - clearing token for consistency'\n        );\n        try {\n          await clearJWT();\n        } catch (clearError) {\n          console.error('[Auth] Failed to clear orphaned token:', clearError);\n        }\n        return {\n          action: 'clear_orphaned_token',\n          reason: 'Token exists but user not logged in',\n        };\n      }\n\n      // Case 3: Both logged in and token exists - validate consistency\n      if (isLoggedIn && secureToken) {\n        console.log('[Auth] Auth state is consistent - user remains logged in');\n        return {\n          action: 'maintain',\n          reason: 'State is consistent',\n        };\n      }\n\n      // Case 4: Both logged out and no token - all good\n      console.log(\n        '[Auth] User is logged out and no token exists - state is consistent'\n      );\n      return {\n        action: 'maintain',\n        reason: 'User is properly logged out',\n      };\n    } catch (error) {\n      console.error('[Auth] Auth restoration failed:', error);\n\n      // Log detailed error information\n      if (__DEV__) {\n        console.error('[Auth] Restoration error details:', {\n          error: error instanceof Error ? error.message : 'Unknown error',\n          stack: error instanceof Error ? error.stack : undefined,\n          timestamp: new Date().toISOString(),\n        });\n      }\n\n      return rejectWithValue({\n        type: 'RESTORATION_ERROR',\n        message: 'Auth restoration failed',\n        originalError: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n);\n\n/**\n * Enhanced login success action that saves to secure storage\n * Use this instead of the direct loginSuccess action\n */\nexport const loginSuccessEnhanced = createAsyncThunk(\n  'auth/loginSuccessEnhanced',\n  async (\n    payload: {\n      token: string;\n      refreshToken?: string;\n      user: User;\n    },\n    {dispatch, rejectWithValue}\n  ) => {\n    try {\n      console.log('[Auth] Processing enhanced login success...');\n\n      // First save JWT to secure storage\n      await saveJWT(payload.token);\n      console.log('[Auth] JWT saved to secure storage successfully');\n\n      // Then update Redux state\n      dispatch(loginSuccess(payload));\n\n      return payload;\n    } catch (error) {\n      console.error('[Auth] Failed to save JWT during login:', error);\n\n      if (error instanceof SecureStorageError) {\n        // If secure storage fails, still complete login but warn\n        console.warn('[Auth] Secure storage failed, completing login anyway');\n        dispatch(loginSuccess(payload));\n\n        // Set a UI warning about storage issues\n        dispatch({\n          type: 'ui/setError',\n          payload:\n            'Login successful but session may not persist. Please restart the app if you experience issues.',\n        });\n\n        return payload;\n      }\n\n      // For other errors, fail the login\n      return rejectWithValue('Failed to complete login process');\n    }\n  }\n);\n\n// ===============================\n// SLICE\n// ===============================\n\n/**\n * Auth slice\n */\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    // Manual loading control\n    setLoading: (state, action: PayloadAction) => {\n      state.isLoading = action.payload;\n    },\n\n    // Clear error\n    clearError: state => {\n      state.error = undefined;\n    },\n\n    // Update user profile\n    updateUserProfile: (state, action: PayloadAction>) => {\n      if (state.user) {\n        state.user = {...state.user, ...action.payload};\n      }\n    },\n\n    // Legacy actions for compatibility (keeping them for now)\n    loginRequest: state => {\n      state.isLoading = true;\n      state.error = undefined;\n    },\n    loginSuccess: (\n      state,\n      action: PayloadAction\n    ) => {\n      state.isLoggedIn = true;\n      state.isLoading = false;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken;\n      state.user = action.payload.user;\n      state.lastLoginTime = Date.now();\n      state.error = undefined;\n    },\n    loginFailure: (state, action: PayloadAction) => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.token = undefined;\n      state.refreshToken = undefined;\n      state.user = undefined;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.isLoggedIn = false;\n      state.isLoading = false;\n      state.token = undefined;\n      state.refreshToken = undefined;\n      state.user = undefined;\n      state.lastLoginTime = undefined;\n      state.error = undefined;\n    },\n  },\n  extraReducers: builder => {\n    // Send OTP\n    builder\n      .addCase(sendOtpThunk.pending, state => {\n        state.isSendingOtp = true;\n        state.error = undefined;\n      })\n      .addCase(sendOtpThunk.fulfilled, state => {\n        state.isSendingOtp = false;\n        state.error = undefined;\n      })\n      .addCase(sendOtpThunk.rejected, (state, action) => {\n        state.isSendingOtp = false;\n        state.error = action.payload as string;\n      })\n\n      // Login\n      .addCase(loginWithOtp.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginWithOtp.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.isLoggedIn = true;\n        state.token = action.payload.token;\n        // state.refreshToken = action.payload.refreshToken;\n        state.user = action.payload.user;\n        state.lastLoginTime = Date.now();\n        state.error = undefined;\n      })\n      .addCase(loginWithOtp.rejected, (state, action) => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.error = action.payload as string;\n      })\n\n      // Logout\n      .addCase(logoutUser.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(logoutUser.fulfilled, state => {\n        state.isLoading = false;\n        state.isLoggedIn = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.lastLoginTime = undefined;\n        state.error = undefined;\n      })\n      .addCase(logoutUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      })\n\n      // Refresh Token\n      .addCase(refreshTokenThunk.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(refreshTokenThunk.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.token = action.payload.token;\n        if (action.payload.refreshToken) {\n          state.refreshToken = action.payload.refreshToken;\n        }\n        state.error = undefined;\n      })\n      .addCase(refreshTokenThunk.rejected, (state, action) => {\n        state.isLoading = false;\n        // If refresh fails, consider logging out\n        if (action.payload === 'No refresh token available') {\n          state.isLoggedIn = false;\n          state.token = undefined;\n          state.refreshToken = undefined;\n          state.user = undefined;\n        }\n        state.error = action.payload as string;\n      })\n      .addCase(loginWithOtpEnhanced.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginWithOtpEnhanced.fulfilled, (state, action) => {\n        state.isLoggedIn = true;\n        state.isLoading = false;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.user = action.payload.user;\n        state.lastLoginTime = Date.now();\n        state.error = undefined;\n      })\n      .addCase(loginWithOtpEnhanced.rejected, (state, action) => {\n        state.isLoggedIn = false;\n        state.isLoading = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.error = action.payload as string;\n      })\n      .addCase(logoutUserEnhanced.fulfilled, state => {\n        state.isLoggedIn = false;\n        state.isLoading = false;\n        state.token = undefined;\n        state.refreshToken = undefined;\n        state.user = undefined;\n        state.lastLoginTime = undefined;\n        state.error = undefined;\n      })\n\n      // Restore Auth State\n      .addCase(restoreAuthState.pending, state => {\n        // Don't set loading state for restoration to avoid UI flicker\n        console.log('[Auth] Auth restoration pending: state - ', state);\n        console.log('[Auth] Auth restoration in progress...');\n      })\n      .addCase(restoreAuthState.fulfilled, (state, action) => {\n        // State changes are handled by the thunk itself via dispatch\n        console.log('[Auth] Auth restoration completed:', action.payload);\n      })\n      .addCase(restoreAuthState.rejected, (state, action) => {\n        console.error('[Auth] Auth restoration failed:', action.payload);\n        // Don't change auth state on restoration failure to be safe\n      })\n\n      // Enhanced Login Success\n      .addCase(loginSuccessEnhanced.pending, state => {\n        state.isLoading = true;\n        state.error = undefined;\n      })\n      .addCase(loginSuccessEnhanced.fulfilled, (state, action) => {\n        // State is already updated by the dispatched loginSuccess action\n        state.isLoading = false;\n        console.log('[Auth] Enhanced login success: action - ', action);\n        console.log('[Auth] Enhanced login success completed');\n      })\n      .addCase(loginSuccessEnhanced.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        console.error('[Auth] Enhanced login success failed:', action.payload);\n      });\n  },\n});\n\nexport const {\n  setLoading,\n  clearError,\n  updateUserProfile,\n  // Legacy actions (for compatibility)\n  loginRequest,\n  loginSuccess,\n  loginFailure,\n  logout,\n} = authSlice.actions;\n\nexport default authSlice.reducer;\n\n// ===============================\n// SELECTORS\n// ===============================\n\nexport const selectIsLoggedIn = (state: {auth: AuthState}) =>\n  state.auth.isLoggedIn;\nexport const selectIsLoading = (state: {auth: AuthState}) =>\n  state.auth.isLoading;\nexport const selectIsSendingOtp = (state: {auth: AuthState}) =>\n  state.auth.isSendingOtp;\nexport const selectUser = (state: {auth: AuthState}) => state.auth.user;\nexport const selectToken = (state: {auth: AuthState}) => state.auth.token;\nexport const selectAuthError = (state: {auth: AuthState}) => state.auth.error;\nexport const selectCurrentUser = (state: {auth: AuthState}) => state.auth.user;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User-1.html":{"url":"interfaces/User-1.html","title":"interface - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                User object structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User-2.html":{"url":"interfaces/User-2.html","title":"interface - User-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/api/endpoints/newAuth.ts\n        \n\n\n            \n                Description\n            \n            \n                User interface matching API response\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                                \n                                        \n                                            role\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {createApi} from '@reduxjs/toolkit/query/react';\nimport {baseQuery} from '../baseQuery';\n\n/**\n * User interface matching API response\n */\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n}\n\n/**\n * Login request interface\n */\nexport interface LoginRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Login response interface matching API\n */\nexport interface LoginResponse {\n  accessToken: string;\n  user: User;\n}\n\n/**\n * Logout response interface\n */\nexport interface LogoutResponse {\n  success: boolean;\n}\n\n/**\n * New Auth API using actual endpoints\n */\nexport const newAuthApi = createApi({\n  reducerPath: 'newAuthApi',\n  baseQuery,\n  tagTypes: ['Auth'],\n  endpoints: builder => ({\n    /**\n     * Login with phone and OTP\n     */\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/auth/login',\n        method: 'POST',\n        body: credentials,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n\n    /**\n     * Logout user\n     */\n    logout: builder.mutation({\n      query: () => ({\n        url: '/auth/logout',\n        method: 'POST',\n        body: {},\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }),\n      invalidatesTags: ['Auth'],\n    }),\n  }),\n});\n\n// Export hooks\nexport const {useLoginMutation, useLogoutMutation} = newAuthApi;\n\n// Export for store configuration\nexport default newAuthApi;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationError.html":{"url":"classes/ValidationError.html","title":"class - ValidationError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/ValidationError.ts\n        \n\n\n            \n                Description\n            \n            \n                Validation Error\nCustom error for KYC document validation failures\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                code\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                field\n                            \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: string, field?: string, value?: any)\n                    \n                \n                        \n                            \n                                Defined in src/errors/ValidationError.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ValidationError.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ValidationError.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/errors/ValidationError.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ValidationError extends Error {\n  public readonly code: string;\n  public readonly field?: string;\n  public readonly value?: any;\n\n  constructor(\n    message: string,\n    code: string = 'VALIDATION_FAILED',\n    field?: string,\n    value?: any\n  ) {\n    super(message);\n    this.name = 'ValidationError';\n    this.code = code;\n    this.field = field;\n    this.value = value;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ValidationError);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerifyOtpRequest.html":{"url":"interfaces/VerifyOtpRequest.html","title":"interface - VerifyOtpRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerifyOtpRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/types/Auth.ts\n        \n\n\n            \n                Description\n            \n            \n                Verify OTP Request\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            otp\n                                        \n                                \n                                \n                                        \n                                            phone\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        otp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        otp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phone\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum AuthError {\n  INVALID_OTP = 'INVALID_OTP',\n  LOCKED_OUT = 'LOCKED_OUT',\n  INVALID_PHONE = 'INVALID_PHONE',\n  SERVER_ERROR = 'SERVER_ERROR',\n  NETWORK_ERROR = 'NETWORK_ERROR',\n}\n\n/**\n * User object structure\n */\nexport interface User {\n  id: string;\n  phone: string;\n  name: string;\n  email?: string;\n  role?: 'Customer';\n}\n\n/**\n * Send OTP Request\n */\nexport interface SendOtpRequest {\n  phone: string;\n}\n\n/**\n * Send OTP Response\n */\nexport interface SendOtpResponse {\n  message: string;\n  otpSent: boolean;\n  expiresIn: number; // seconds\n}\n\n/**\n * Verify OTP Request\n */\nexport interface VerifyOtpRequest {\n  phone: string;\n  otp: string;\n}\n\n/**\n * Authentication Response\n */\nexport interface AuthResponse {\n  user: User;\n  token: string;\n  refreshToken?: string;\n  expiresIn: number; // seconds\n}\n\n/**\n * API Error Response Structure\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    message: string;\n    code: number;\n    type?: AuthError;\n  };\n}\n\n/**\n * Auth Attempt Tracking\n */\nexport interface AuthAttemptState {\n  attemptsLeft: number;\n  isLockedOut: boolean;\n  lockoutExpiresAt?: number;\n}\n\n/**\n * Constants\n */\nexport const AUTH_CONSTANTS = {\n  MAX_OTP_ATTEMPTS: 5,\n  LOCKOUT_DURATION_MS: 15 * 60 * 1000, // 15 minutes\n  RESEND_COOLDOWN_MS: 60 * 1000, // 60 seconds\n  OTP_VALIDITY_MS: 5 * 60 * 1000, // 5 minutes\n} as const;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @bam.tech/react-native-image-resizer : ^3.0.11\n        \n            @hookform/resolvers : ^5.1.1\n        \n            @react-native-async-storage/async-storage : ^2.2.0\n        \n            @react-native-documents/picker : ^10.1.5\n        \n            @react-native/new-app-screen : 0.80.1\n        \n            @react-navigation/bottom-tabs : ^7.4.2\n        \n            @react-navigation/material-top-tabs : ^7.3.2\n        \n            @react-navigation/native : ^7.1.14\n        \n            @react-navigation/stack : ^7.4.2\n        \n            @reduxjs/toolkit : ^2.8.2\n        \n            date-fns : ^4.1.0\n        \n            react : 19.1.0\n        \n            react-hook-form : ^7.60.0\n        \n            react-native : 0.80.1\n        \n            react-native-config : ^1.5.5\n        \n            react-native-encrypted-storage : ^4.0.3\n        \n            react-native-fs : ^2.20.0\n        \n            react-native-gesture-handler : ^2.27.1\n        \n            react-native-image-picker : ^8.2.1\n        \n            react-native-pager-view : ^6.8.1\n        \n            react-native-paper : ^5.14.5\n        \n            react-native-safe-area-context : ^5.5.1\n        \n            react-native-screens : ^4.11.1\n        \n            react-native-tab-view : ^4.1.2\n        \n            react-native-vector-icons : ^10.2.0\n        \n            react-redux : ^9.2.0\n        \n            redux-persist : ^6.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthError   (src/.../Auth.ts)\n                        \n                        \n                            MigrationStatus   (src/.../storage.ts)\n                        \n                        \n                            RefreshableApi   (src/.../refreshTypes.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/types/Auth.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthError\n                    \n                \n                    \n                        \n                            Authentication Types\nDefines interfaces and enums for auth-related operations\n\n                        \n                    \n                        \n                            \n                                 INVALID_OTP\n                            \n                        \n                        \n                            \n                                Value : INVALID_OTP\n                            \n                        \n                        \n                            \n                                 LOCKED_OUT\n                            \n                        \n                        \n                            \n                                Value : LOCKED_OUT\n                            \n                        \n                        \n                            \n                                 INVALID_PHONE\n                            \n                        \n                        \n                            \n                                Value : INVALID_PHONE\n                            \n                        \n                        \n                            \n                                 SERVER_ERROR\n                            \n                        \n                        \n                            \n                                Value : SERVER_ERROR\n                            \n                        \n                        \n                            \n                                 NETWORK_ERROR\n                            \n                        \n                        \n                            \n                                Value : NETWORK_ERROR\n                            \n                        \n            \n        \n\n    src/types/storage.ts\n    \n        \n            \n                \n                    \n                        \n                        MigrationStatus\n                    \n                \n                    \n                        \n                            Storage-related types and enums\n\n                        \n                    \n                        \n                            \n                                 NOT_NEEDED\n                            \n                        \n                        \n                            \n                                Value : NOT_NEEDED\n                            \n                        \n                        \n                            \n                                 MIGRATED\n                            \n                        \n                        \n                            \n                                Value : MIGRATED\n                            \n                        \n                        \n                            \n                                 FAILED\n                            \n                        \n                        \n                            \n                                Value : FAILED\n                            \n                        \n            \n        \n\n    src/refresh/refreshTypes.ts\n    \n        \n            \n                \n                    \n                        \n                        RefreshableApi\n                    \n                \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 SERVICES\n                            \n                        \n                        \n                            \n                                Value : services\n                            \n                        \n                        \n                            \n                                 LEADS\n                            \n                        \n                        \n                            \n                                Value : leads\n                            \n                        \n                        \n                            \n                                 SINGLE_LEAD\n                            \n                        \n                        \n                            \n                                Value : single_lead\n                            \n                        \n                        \n                            \n                                 QUOTATIONS\n                            \n                        \n                        \n                            \n                                Value : quotations\n                            \n                        \n                        \n                            \n                                 SINGLE_QUOTATION\n                            \n                        \n                        \n                            \n                                Value : single_quotation\n                            \n                        \n                        \n                            \n                                 KYC\n                            \n                        \n                        \n                            \n                                Value : kyc\n                            \n                        \n                        \n                            \n                                 NOTIFICATIONS\n                            \n                        \n                        \n                            \n                                Value : notifications\n                            \n                        \n                        \n                            \n                                 TICKETS\n                            \n                        \n                        \n                            \n                                Value : tickets\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nThis is a new React Native project, bootstrapped using @react-native-community/cli.\nGetting Started\n\nNote: Make sure you have completed the Set Up Your Environment guide before proceeding.\n\nStep 1: Start Metro\nFirst, you will need to run Metro, the JavaScript build tool for React Native.\nTo start the Metro dev server, run the following command from the root of your React Native project:\nExample :# Using npm\nnpm start\n\n# OR using Yarn\nyarn startStep 2: Build and run your app\nWith Metro running, open a new terminal window/pane from the root of your React Native project, and use one of the following commands to build and run your Android or iOS app:\nAndroid\nExample :# Using npm\nnpm run android\n\n# OR using Yarn\nyarn androidiOS\nFor iOS, remember to install CocoaPods dependencies (this only needs to be run on first clone or after updating native deps).\nThe first time you create a new project, run the Ruby bundler to install CocoaPods itself:\nExample :bundle installThen, and every time you update your native dependencies, run:\nExample :bundle exec pod installFor more information, please visit CocoaPods Getting Started guide.\nExample :# Using npm\nnpm run ios\n\n# OR using Yarn\nyarn iosIf everything is set up correctly, you should see your new app running in the Android Emulator, iOS Simulator, or your connected device.\nThis is one way to run your app — you can also build it directly from Android Studio or Xcode.\nStep 3: Modify your app\nNow that you have successfully run the app, let's make changes!\nOpen App.tsx in your text editor of choice and make some changes. When you save, your app will automatically update and reflect these changes — this is powered by Fast Refresh.\nWhen you want to forcefully reload, for example to reset the state of your app, you can perform a full reload:\n\nAndroid: Press the R key twice or select \"Reload\" from the Dev Menu, accessed via Ctrl + M (Windows/Linux) or Cmd ⌘ + M (macOS).\niOS: Press R in iOS Simulator.\n\n✨ Features\nServices Catalogue Feature\nThe app now includes a comprehensive services catalogue with cart functionality:\n\nBrowse Services: View 5-8 solar services with detailed information\nAdd to Cart: Simple ADD button transforms to quantity controls (+/-)\nCart Management: 20-item limit with real-time badge updates\nAccessibility: Full screen reader support and voice control\nPersistence: Cart survives app restarts with encrypted storage\n\nQuotation Management\n\n📋 View Quotations: Browse all quotations for your solar installation requests\n📊 Status Tracking: Real-time quotation status with color-coded indicators\n📄 PDF Downloads: Download and view detailed quotation PDFs\n🔄 Auto Refresh: Pull-to-refresh with smart debouncing\n💾 Offline Cache: 24-hour encrypted cache for faster loading\n🔐 Secure Access: JWT-protected quotation data with automatic session management\n\n📁 KYC Document Management\n\n\n\nFeature\nStatus\nImplementation\nDocumentation\n\n\n\n\nKYC Document Upload\n✅ Complete\nsrc/lib/kycUploader.ts\nKYC Upload Library\n\n\nDocument Validation\n✅ Complete\nsrc/utils/kycValidation.ts\nAPI Reference\n\n\nImage Compression\n✅ Complete\nsrc/utils/imageCompression.ts\nCompression Guide\n\n\nAzure Blob Upload\n✅ Complete\nsrc/utils/azureBlobUploader.ts\nUpload Flow\n\n\nProgress Tracking\n✅ Complete\nBuilt-in callbacks\nProgress Guide\n\n\nError Handling\n✅ Complete\nCustom error classes\nError Codes\n\n\nCache Management\n✅ Complete\nRTK Query integration\nCache Strategy\n\n\n\nQuick Start:\nExample :import {uploadKycDocument} from './src/lib/kycUploader';\n\nconst result = await uploadKycDocument({\n  leadId: 'LEAD-123',\n  customerId: 'CUST-001',\n  docType: 'VoterID',\n  file: selectedFile,\n  onProgress: progress => console.log(`${progress}%`),\n  store,\n});Key Features:\n\n✅ Automatic image compression for files > 2MB\n✅ Smart validation (MIME type, size, document count limits)\n✅ Progress tracking with real-time updates (0-100%)\n✅ Automatic retry on token expiry and network timeouts\n✅ Cache invalidation keeps UI synchronized\n✅ Comprehensive error handling with user-friendly messages\n✅ Support for JPG, PNG, PDF formats up to 10MB\n✅ Document limit enforcement (max 7 per lead)\n\nTesting\nRunning Tests\nExample :# Run all tests\nnpm test\n\n# Run with coverage\nnpm run test:coverage\n\n# Run specific test types\nnpm run test:unit          # Unit tests only\nnpm run test:integration   # Integration tests only\nnpm run test:performance   # Performance benchmarks\nnpm run test:a11y         # Accessibility testsCart & Services Testing\nExample :# Test cart functionality\nyarn test:cart\n\n# Test services screen\nyarn test:services\n\n# Test accessibility compliance\nyarn test:a11y:services\n\n# Test all integrations\nyarn test:integration:all\n\n# Test with MSW mocks\nyarn test:mswCoverage & Quality\nExample :# Generate coverage report\nyarn test:coverage\n\n# Run specific test suites\nyarn test:unit                    # Unit tests only\nyarn test:integration            # Integration tests only\nyarn test:a11y                   # All accessibility testsCoverage Requirements\n\nGlobal: ≥82%\nBusiness Logic: ≥87%\nSecurity Modules: ≥90%\n\nManual Testing\nExample :# Verify secure storage on Android (should return no matches)\nadb shell grep -R \"demo_token\" /data/data/com.solariumcustapp/shared_prefs\n\n# Run security audit\nnpm run security:auditSee Testing Documentation for detailed guidelines.\nCode Quality\nLinting\nExample :npm run lint              # Check for issues\nnpm run lint:fix         # Auto-fix issues\nnpm run lint:ci          # CI mode (zero warnings)Security\nExample :npm run security:audit   # Check dependencies\nnpm audit fix           # Fix vulnerabilities🚀 CI/CD Pipeline\nThis project uses automated CI/CD with GitHub Actions for continuous integration and deployment.\n\nQuick Links\n\n📋 CI/CD Documentation - Complete pipeline documentation\n🔧 Pipeline Status - View recent builds and artifacts\n📱 Download Builds - Get APK/IPA from artifacts section\n🔒 Branch Protection - Repository protection rules\n\nDevelopment Workflow\n\nCreate feature branch from main\nMake changes and push commits\nCreate Pull Request (triggers Android build)\nAdd build-ios label for iOS testing\nMerge after all checks pass ✅\n\nFor detailed information about environment setup, secrets management, and troubleshooting, see the CI/CD Documentation.\nCongratulations! :tada:\nYou've successfully run and modified your React Native App. :partying_face:\nNow what?\n\nIf you want to add this new React Native code to an existing application, check out the Integration guide.\nIf you're curious to learn more about React Native, check out the docs.\n\nQuick Start\n\nNavigate to Services tab\nBrowse available solar services\nTap ADD to add services to cart\nUse +/- controls to adjust quantities\nCart badge shows total items in real-time\n\nFor detailed documentation, see:\n\ndocs/ServicesCatalogue.md - Complete feature overview\ndocs/CartFunctionality.md - Cart implementation details\ndocs/Testing.md - Testing strategies and setup\n\nTroubleshooting\nIf you're having issues getting the above steps to work, see the Troubleshooting page.\nLearn More\nTo learn more about React Native, take a look at the following resources:\n\nReact Native Website - learn more about React Native.\nGetting Started - an overview of React Native and how setup your environment.\nLearn the Basics - a guided tour of the React Native basics.\nBlog - read the latest official React Native Blog posts.\n@facebook/react-native - the Open Source; GitHub repository for React Native.\n\nExample :\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    158 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppDispatch   (src/.../index.ts)\n                        \n                        \n                            AuthStackParamList   (src/.../types.ts)\n                        \n                        \n                            AuthStackScreenProps   (src/.../types.ts)\n                        \n                        \n                            ButtonSize   (src/.../Components.ts)\n                        \n                        \n                            ButtonVariant   (src/.../Components.ts)\n                        \n                        \n                            CartCheckoutScreenNavigationProp   (src/.../CartCheckoutScreen.tsx)\n                        \n                        \n                            Environment   (src/.../environments.ts)\n                        \n                        \n                            ErrorMessageType   (src/.../Components.ts)\n                        \n                        \n                            HttpMethod   (src/.../apiHelpers.ts)\n                        \n                        \n                            KycDocumentStatus   (src/.../KycDocument.ts)\n                        \n                        \n                            KycDocumentType   (src/.../KycDocument.ts)\n                        \n                        \n                            LeadDetailRouteProp   (src/.../LeadDetailTabNavigator.tsx)\n                        \n                        \n                            LeadDetailTabParamList   (src/.../LeadDetailTabNavigator.tsx)\n                        \n                        \n                            LeadStatus   (src/.../Lead.ts)\n                        \n                        \n                            LoadingOverlayContainerMode   (src/.../Components.ts)\n                        \n                        \n                            MainTabParamList   (src/.../types.ts)\n                        \n                        \n                            MainTabScreenProps   (src/.../types.ts)\n                        \n                        \n                            MessageSender   (src/.../Ticket.ts)\n                        \n                        \n                            NewAppDispatch   (src/.../newStore.ts)\n                        \n                        \n                            NewRootState   (src/.../newStore.ts)\n                        \n                        \n                            NotificationSeverity   (src/.../Notification.ts)\n                        \n                        \n                            NotificationSortBy   (src/.../Notification.ts)\n                        \n                        \n                            NotificationSortOrder   (src/.../Notification.ts)\n                        \n                        \n                            NotificationStatus   (src/.../Notification.ts)\n                        \n                        \n                            NotificationType   (src/.../Notification.ts)\n                        \n                        \n                            Props   (src/.../LoginScreen.tsx)\n                        \n                        \n                            Props   (src/.../OTPVerificationScreen.tsx)\n                        \n                        \n                            Props   (src/.../DocumentsScreen.tsx)\n                        \n                        \n                            Props   (src/.../HelpScreen.tsx)\n                        \n                        \n                            Props   (src/.../HomeScreen.tsx)\n                        \n                        \n                            Props   (src/.../MyRecordsScreen.tsx)\n                        \n                        \n                            Props   (src/.../NotificationsScreen.tsx)\n                        \n                        \n                            Props   (src/.../TicketThreadScreen.tsx)\n                        \n                        \n                            QuotationStatus   (src/.../Quotation.ts)\n                        \n                        \n                            RootStackParamList   (src/.../types.ts)\n                        \n                        \n                            RootStackScreenProps   (src/.../types.ts)\n                        \n                        \n                            RootState   (src/.../index.ts)\n                        \n                        \n                            ServiceDetailRouteProp   (src/.../ServiceDetailScreen.tsx)\n                        \n                        \n                            ServicesScreenNavigationProp   (src/.../ServicesScreen.tsx)\n                        \n                        \n                            ServicesScreenRouteProp   (src/.../ServicesScreen.tsx)\n                        \n                        \n                            SpinnerSize   (src/.../Components.ts)\n                        \n                        \n                            StoreType   (src/.../kycService.ts)\n                        \n                        \n                            TextInputVariant   (src/.../Components.ts)\n                        \n                        \n                            TicketStatus   (src/.../Ticket.ts)\n                        \n                        \n                            TimerStatus   (src/.../Timer.ts)\n                        \n                        \n                            TimerType   (src/.../Timer.ts)\n                        \n                        \n                            UploadErrorType   (src/.../AzureBlob.ts)\n                        \n                        \n                            UploadStatus   (src/.../useKycUpload.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/store/index.ts\n    \n    \n        \n            \n                \n                    \n                    AppDispatch\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RootState\n                \n            \n            \n                \n                    Types\n\n                \n            \n            \n                \n                        ReturnType<>\n\n                \n            \n        \n    \n    src/navigation/types.ts\n    \n    \n        \n            \n                \n                    \n                    AuthStackParamList\n                \n            \n            \n                \n                    Authentication Stack Params\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AuthStackScreenProps\n                \n            \n            \n                \n                        StackScreenProps\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MainTabParamList\n                \n            \n            \n                \n                    Main Tab Navigator Params\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MainTabScreenProps\n                \n            \n            \n                \n                        BottomTabScreenProps\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RootStackParamList\n                \n            \n            \n                \n                    Root Stack Navigator Params\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RootStackScreenProps\n                \n            \n            \n                \n                    Navigation Props Types\n\n                \n            \n            \n                \n                        StackScreenProps\n\n                \n            \n        \n    \n    src/types/Components.ts\n    \n    \n        \n            \n                \n                    \n                    ButtonSize\n                \n            \n            \n                \n                        \"small\" | \"medium\" | \"large\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ButtonVariant\n                \n            \n            \n                \n                    Button Component Types\n\n                \n            \n            \n                \n                        \"primary\" | \"secondary\" | \"outline\" | \"ghost\" | \"danger\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ErrorMessageType\n                \n            \n            \n                \n                    Error Message Types\n\n                \n            \n            \n                \n                        \"error\" | \"warning\" | \"info\" | \"success\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LoadingOverlayContainerMode\n                \n            \n            \n                \n                    Loading Overlay Types\n\n                \n            \n            \n                \n                        \"fullscreen\" | \"local\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SpinnerSize\n                \n            \n            \n                \n                    Loading Spinner Types\n\n                \n            \n            \n                \n                        \"small\" | \"medium\" | \"large\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TextInputVariant\n                \n            \n            \n                \n                    TextInput Component Types\n\n                \n            \n            \n                \n                        \"default\" | \"outlined\" | \"filled\"\n\n                \n            \n        \n    \n    src/screens/main/CartCheckoutScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    CartCheckoutScreenNavigationProp\n                \n            \n            \n                \n                            StackNavigationProp\n\n                \n            \n        \n    \n    src/config/environments.ts\n    \n    \n        \n            \n                \n                    \n                    Environment\n                \n            \n            \n                \n                    Environment Configuration\nManual environment loader with type safety and fallbacks\n\n                \n            \n            \n                \n                        \"development\" | \"staging\" | \"production\"\n\n                \n            \n        \n    \n    src/utils/apiHelpers.ts\n    \n    \n        \n            \n                \n                    \n                    HttpMethod\n                \n            \n            \n                \n                    HTTP Methods\n\n                \n            \n            \n                \n                        \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\"\n\n                \n            \n        \n    \n    src/types/KycDocument.ts\n    \n    \n        \n            \n                \n                    \n                    KycDocumentStatus\n                \n            \n            \n                \n                    KYC document status\n\n                \n            \n            \n                \n                            \"Pending\" | \"Approved\" | \"Rejected\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    KycDocumentType\n                \n            \n            \n                \n                    KYC Document Types\nInterfaces for KYC document management\n\n                \n            \n            \n                \n                        \"IncomeProof\" | \"LightBill\" | \"CancelledCheque\" | \"Aadhaar\" | \"PAN\" | \"PassportPhoto\" | \"Other\"\n\n                \n            \n        \n    \n    src/screens/main/LeadDetail/LeadDetailTabNavigator.tsx\n    \n    \n        \n            \n                \n                    \n                    LeadDetailRouteProp\n                \n            \n            \n                \n                            RootStackScreenProps\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LeadDetailTabParamList\n                \n            \n            \n                \n                    Tab Parameter List\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/types/Lead.ts\n    \n    \n        \n            \n                \n                    \n                    LeadStatus\n                \n            \n            \n                \n                    Lead Types\nDefines lead-related interfaces and types\n\n                \n            \n            \n                \n                            \"New Lead\" | \"In Discussion\" | \"Physical Meeting Assigned\" | \"Customer Accepted\" | \"Won\" | \"Pending at Solarium\" | \"Under Execution\" | \"Executed\" | \"Not Responding\" | \"Not Interested\" | \"Other Territory\"\n\n                \n            \n        \n    \n    src/types/Ticket.ts\n    \n    \n        \n            \n                \n                    \n                    MessageSender\n                \n            \n            \n                \n                    Message sender type\nBased on actual API response structure\n\n                \n            \n            \n                \n                        \"Customer\" | \"Admin\" | \"KAM\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TicketStatus\n                \n            \n            \n                \n                    Support Ticket Type Definitions\nThis file contains all TypeScript interfaces for the support ticket system,\nbased on the actual API responses from the backend.\n\n                \n            \n            \n                \n                        \"Open\" | \"Closed\"\n\n                \n            \n        \n    \n    src/store/newStore.ts\n    \n    \n        \n            \n                \n                    \n                    NewAppDispatch\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NewRootState\n                \n            \n            \n                \n                    Types\n\n                \n            \n            \n                \n                        ReturnType<>\n\n                \n            \n        \n    \n    src/types/Notification.ts\n    \n    \n        \n            \n                \n                    \n                    NotificationSeverity\n                \n            \n            \n                \n                    Available notification severities for filtering\n\n                \n            \n            \n                \n                        \"info\" | \"warning\" | \"error\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotificationSortBy\n                \n            \n            \n                \n                    Available sort fields for notifications\n\n                \n            \n            \n                \n                        \"createdAt\" | \"readAt\" | \"title\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotificationSortOrder\n                \n            \n            \n                \n                    Available sort orders\n\n                \n            \n            \n                \n                        \"asc\" | \"desc\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotificationStatus\n                \n            \n            \n                \n                    Available notification statuses for filtering\n\n                \n            \n            \n                \n                        \"read\" | \"unread\" | \"all\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NotificationType\n                \n            \n            \n                \n                    Available notification types for filtering\n\n                \n            \n            \n                \n                        \"system\" | \"security\" | \"lead\" | \"quotation\" | \"commission\" | \"user\" | \"announcement\"\n\n                \n            \n        \n    \n    src/screens/auth/LoginScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        AuthStackScreenProps\n\n                \n            \n        \n    \n    src/screens/auth/OTPVerificationScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        AuthStackScreenProps\n\n                \n            \n        \n    \n    src/screens/main/DocumentsScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        MainTabScreenProps\n\n                \n            \n        \n    \n    src/screens/main/HelpScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        MainTabScreenProps\n\n                \n            \n        \n    \n    src/screens/main/HomeScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        MainTabScreenProps\n\n                \n            \n        \n    \n    src/screens/main/MyRecordsScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                        MainTabScreenProps\n\n                \n            \n        \n    \n    src/screens/main/NotificationsScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                            RootStackScreenProps\n\n                \n            \n        \n    \n    src/screens/main/TicketThreadScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    Props\n                \n            \n            \n                \n                            RootStackScreenProps\n\n                \n            \n        \n    \n    src/types/Quotation.ts\n    \n    \n        \n            \n                \n                    \n                    QuotationStatus\n                \n            \n            \n                \n                    Quotation Types\nDefines quotation-related interfaces and types for the solar lead management system\n\n                \n            \n            \n                \n                        \"Draft\" | \"Created\" | \"Shared\" | \"Accepted\" | \"Rejected\"\n\n                \n            \n        \n    \n    src/screens/main/ServiceDetailScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    ServiceDetailRouteProp\n                \n            \n            \n                \n                            RouteProp\n\n                \n            \n        \n    \n    src/screens/main/ServicesScreen.tsx\n    \n    \n        \n            \n                \n                    \n                    ServicesScreenNavigationProp\n                \n            \n            \n                \n                            StackNavigationProp\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ServicesScreenRouteProp\n                \n            \n            \n                \n                            RouteProp\n\n                \n            \n        \n    \n    src/api/kycService.ts\n    \n    \n        \n            \n                \n                    \n                    StoreType\n                \n            \n            \n                \n                    Store type for dispatch operations\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/types/Timer.ts\n    \n    \n        \n            \n                \n                    \n                    TimerStatus\n                \n            \n            \n                \n                    Timer Status\n\n                \n            \n            \n                \n                        \"idle\" | \"active\" | \"paused\" | \"completed\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimerType\n                \n            \n            \n                \n                    Timer Types for different use cases\n\n                \n            \n            \n                \n                        \"resend\" | \"lockout\" | \"custom\"\n\n                \n            \n        \n    \n    src/types/AzureBlob.ts\n    \n    \n        \n            \n                \n                    \n                    UploadErrorType\n                \n            \n            \n                \n                    Upload error types\n\n                \n            \n            \n                \n                        \"NETWORK_ERROR\" | \"TIMEOUT_ERROR\" | \"EXPIRED_TOKEN\" | \"CANCELLED\" | \"INVALID_RESPONSE\" | \"UPLOAD_EXPIRED\"\n\n                \n            \n        \n    \n    src/hooks/useKycUpload.ts\n    \n    \n        \n            \n                \n                    \n                    UploadStatus\n                \n            \n            \n                \n                    Upload status types\n\n                \n            \n            \n                \n                        \"idle\" | \"running\" | \"success\" | \"error\" | \"cancelled\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
